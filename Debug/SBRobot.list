
SBRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08010018  08010018  00011018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a4  080105a4  000125a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080105a4  080105a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105ac  080105ac  000125a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105ac  080105ac  000115ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105b0  080105b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005a0  20000000  080105b4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200005a0  08010b54  000125a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  08010b54  00012dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000125a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb2d  00000000  00000000  000125d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004673  00000000  00000000  0002f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a7  00000000  00000000  00034e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d0e  00000000  00000000  00035faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020324  00000000  00000000  0005dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55be  00000000  00000000  0007dfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016359f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007540  00000000  00000000  001635e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0016ab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005a0 	.word	0x200005a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fffc 	.word	0x0800fffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005a4 	.word	0x200005a4
 800020c:	0800fffc 	.word	0x0800fffc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f003 fe67 	bl	8004db4 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fbf9 	bl	80018e2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f0:	2309      	movs	r3, #9
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f004 f839 	bl	8005178 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fbe9 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005bc 	.word	0x200005bc
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f004 ff3f 	bl	8006014 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_DMA_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <MX_DMA_Init+0x68>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_DMA_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_DMA_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200b      	movs	r0, #11
 80011f0:	f004 facb 	bl	800578a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011f4:	200b      	movs	r0, #11
 80011f6:	f004 fae4 	bl	80057c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2039      	movs	r0, #57	@ 0x39
 8001200:	f004 fac3 	bl	800578a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001204:	2039      	movs	r0, #57	@ 0x39
 8001206:	f004 fadc 	bl	80057c2 <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b73      	ldr	r3, [pc, #460]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a72      	ldr	r2, [pc, #456]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b6c      	ldr	r3, [pc, #432]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a6b      	ldr	r2, [pc, #428]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a64      	ldr	r2, [pc, #400]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b5e      	ldr	r3, [pc, #376]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a5d      	ldr	r2, [pc, #372]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a56      	ldr	r2, [pc, #344]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2130      	movs	r1, #48	@ 0x30
 80012be:	4851      	ldr	r0, [pc, #324]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80012c0:	f005 f854 	bl	800636c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2111      	movs	r1, #17
 80012c8:	484f      	ldr	r0, [pc, #316]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80012ca:	f005 f84f 	bl	800636c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d4:	484d      	ldr	r0, [pc, #308]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012d6:	f005 f849 	bl	800636c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4846      	ldr	r0, [pc, #280]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012f2:	f004 fe8f 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012f6:	f641 531d 	movw	r3, #7453	@ 0x1d1d
 80012fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4840      	ldr	r0, [pc, #256]	@ (800140c <MX_GPIO_Init+0x1f4>)
 800130c:	f004 fe82 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001310:	2330      	movs	r3, #48	@ 0x30
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4837      	ldr	r0, [pc, #220]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 8001328:	f004 fe74 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4832      	ldr	r0, [pc, #200]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001342:	f004 fe67 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	482a      	ldr	r0, [pc, #168]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 800135e:	f004 fe59 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001362:	f24f 0324 	movw	r3, #61476	@ 0xf024
 8001366:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4824      	ldr	r0, [pc, #144]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 8001378:	f004 fe4c 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 800137c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	481d      	ldr	r0, [pc, #116]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001396:	f004 fe3d 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800139a:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 800139e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80013b0:	f004 fe30 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b4:	2304      	movs	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <MX_GPIO_Init+0x1f8>)
 80013c8:	f004 fe24 	bl	8006014 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4809      	ldr	r0, [pc, #36]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80013e4:	f004 fe16 	bl	8006014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2017      	movs	r0, #23
 80013ee:	f004 f9cc 	bl	800578a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f2:	2017      	movs	r0, #23
 80013f4:	f004 f9e5 	bl	80057c2 <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00

08001414 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f004 ffd7 	bl	8006404 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 fa41 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000604 	.word	0x20000604
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <HAL_I2C_MspInit+0xe0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d15a      	bne.n	8001548 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4823      	ldr	r0, [pc, #140]	@ (8001558 <HAL_I2C_MspInit+0xe8>)
 80014cc:	f004 fda2 	bl	8006014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_I2C_MspInit+0xf0>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800152e:	f004 f963 	bl	80057f8 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001538:	f000 f9d3 	bl	80018e2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
 8001542:	4a06      	ldr	r2, [pc, #24]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400
 800155c:	20000658 	.word	0x20000658
 8001560:	40026010 	.word	0x40026010

08001564 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800156c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001570:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800157c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001580:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001584:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800158c:	e000      	b.n	8001590 <ITM_SendChar+0x2c>
    {
      __NOP();
 800158e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001590:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f9      	beq.n	800158e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800159a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f003 fb65 	bl	8004c88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f88d 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c2:	f7ff fe29 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c6:	f7ff fdf1 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015ca:	f000 ff05 	bl	80023d8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80015ce:	f000 fc4f 	bl	8001e70 <MX_TIM4_Init>
  MX_TIM6_Init();
 80015d2:	f000 fcfb 	bl	8001fcc <MX_TIM6_Init>
  MX_SPI2_Init();
 80015d6:	f000 f98b 	bl	80018f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015da:	f000 fb9d 	bl	8001d18 <MX_TIM2_Init>
  MX_TIM7_Init();
 80015de:	f000 fd2b 	bl	8002038 <MX_TIM7_Init>
  MX_TIM3_Init();
 80015e2:	f000 fbf1 	bl	8001dc8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015e6:	f000 fc97 	bl	8001f18 <MX_TIM5_Init>
  MX_ADC1_Init();
 80015ea:	f7ff fd49 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015ee:	f7ff ff11 	bl	8001414 <MX_I2C1_Init>
  MX_TIM10_Init();
 80015f2:	f000 fd57 	bl	80020a4 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80015f6:	f000 ff19 	bl	800242c <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80015fa:	2032      	movs	r0, #50	@ 0x32
 80015fc:	f003 fbb6 	bl	8004d6c <HAL_Delay>
  Robot_init(&robot);
 8001600:	482b      	ldr	r0, [pc, #172]	@ (80016b0 <main+0xfc>)
 8001602:	f001 fc5b 	bl	8002ebc <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.angle, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
 8001606:	4a2b      	ldr	r2, [pc, #172]	@ (80016b4 <main+0x100>)
 8001608:	463b      	mov	r3, r7
 800160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160e:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4828      	ldr	r0, [pc, #160]	@ (80016b8 <main+0x104>)
 8001618:	f002 fa89 	bl	8003b2e <MAX72_Add_Data>

//  display_data_t data4 = {&power_module.voltage, PRINT_FLOAT, NO_SETTINGS, DISPLAY_TYPE_FLOAT, 2};
//  MAX72_Add_Data(&display, &data4);

  HAL_UART_Receive_DMA(&huart6, (uint8_t*)js_buffer, 14);
 800161c:	220e      	movs	r2, #14
 800161e:	4927      	ldr	r1, [pc, #156]	@ (80016bc <main+0x108>)
 8001620:	4827      	ldr	r0, [pc, #156]	@ (80016c0 <main+0x10c>)
 8001622:	f008 fabb 	bl	8009b9c <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IMU_Rx_Cplt) {
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <main+0x110>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <main+0x86>
		  IMU_Rx_Cplt = 0; // Reset flag
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <main+0x110>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
		  IMU_Compute_Data(&imu); // Process received data
 8001634:	4824      	ldr	r0, [pc, #144]	@ (80016c8 <main+0x114>)
 8001636:	f001 f983 	bl	8002940 <IMU_Compute_Data>
	  }

	  if (js_msg_ready) {
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <main+0x118>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <main+0x9c>
		  js_msg_ready = 0; // Reset flag
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <main+0x118>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
//		      __HAL_UART_CLEAR_OREFLAG(&huart6);
//
//		      // Azzeriamo anche ErrorCode nella struct
//		      huart6.ErrorCode = HAL_UART_ERROR_NONE;
//		  }
		  Robot_read_serial_msg(&robot, js_buffer);
 8001648:	491c      	ldr	r1, [pc, #112]	@ (80016bc <main+0x108>)
 800164a:	4819      	ldr	r0, [pc, #100]	@ (80016b0 <main+0xfc>)
 800164c:	f001 fcd4 	bl	8002ff8 <Robot_read_serial_msg>
	  }

	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <main+0x11c>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <main+0x120>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d0e4      	beq.n	8001626 <main+0x72>
	      last_cnt = tim6_update_cnt;
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <main+0x120>)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <main+0x11c>)
 8001662:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      MAX72_Update_Data(&display);
 8001664:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <main+0x104>)
 8001666:	f002 fae3 	bl	8003c30 <MAX72_Update_Data>
	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <main+0x120>)
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <main+0x124>)
 8001670:	fba3 1302 	umull	r1, r3, r3, r2
 8001674:	0899      	lsrs	r1, r3, #2
 8001676:	460b      	mov	r3, r1
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <main+0xf4>

	    	  // Send IMU data via UART for debugging
//	    	  transmit_IMU_data();
//			  show_calibration_messages();

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <main+0x120>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <main+0x124>)
 800168a:	fba3 1302 	umull	r1, r3, r3, r2
 800168e:	08d9      	lsrs	r1, r3, #3
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <main+0xf4>
	    		  MAX72_Change_Data(&display,0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <main+0x104>)
 80016a4:	f002 fbc4 	bl	8003e30 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 80016a8:	f003 f930 	bl	800490c <MAX72_Scroll_Process>
  {
 80016ac:	e7bb      	b.n	8001626 <main+0x72>
 80016ae:	bf00      	nop
 80016b0:	200006cc 	.word	0x200006cc
 80016b4:	080100a0 	.word	0x080100a0
 80016b8:	20000bf8 	.word	0x20000bf8
 80016bc:	200006bc 	.word	0x200006bc
 80016c0:	20000988 	.word	0x20000988
 80016c4:	200006b9 	.word	0x200006b9
 80016c8:	20000ab4 	.word	0x20000ab4
 80016cc:	200006cb 	.word	0x200006cb
 80016d0:	20000000 	.word	0x20000000
 80016d4:	200006b8 	.word	0x200006b8
 80016d8:	cccccccd 	.word	0xcccccccd

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	@ 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2234      	movs	r2, #52	@ 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00a fb19 	bl	800bd22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <SystemClock_Config+0xd4>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	4a29      	ldr	r2, [pc, #164]	@ (80017b0 <SystemClock_Config+0xd4>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <SystemClock_Config+0xd4>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800171c:	2300      	movs	r3, #0
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemClock_Config+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001728:	4a22      	ldr	r2, [pc, #136]	@ (80017b4 <SystemClock_Config+0xd8>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <SystemClock_Config+0xd8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001744:	2310      	movs	r3, #16
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001748:	2302      	movs	r3, #2
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001750:	2310      	movs	r3, #16
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001754:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800175a:	2304      	movs	r3, #4
 800175c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800175e:	2302      	movs	r3, #2
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4618      	mov	r0, r3
 800176c:	f006 fc8c 	bl	8008088 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001776:	f000 f8b4 	bl	80018e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f006 f92c 	bl	80079f4 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017a2:	f000 f89e 	bl	80018e2 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	@ 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017d4:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2bfa      	cmp	r3, #250	@ 0xfa
 80017dc:	d11f      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
			tim6_update_cnt = 0;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 80017e4:	e01b      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM7) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d10e      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0x56>
    if (pid.active){
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x48>
      PID_Update(&pid);
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017fc:	f001 fd5c 	bl	80032b8 <PID_Update>
		speed_control(&stepper_r);
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001802:	f001 ff61 	bl	80036c8 <speed_control>
		speed_control(&stepper_l);
 8001806:	480d      	ldr	r0, [pc, #52]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001808:	f001 ff5e 	bl	80036c8 <speed_control>
}
 800180c:	e007      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM10){
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
		IMU_ReadData(&imu);
 8001818:	480a      	ldr	r0, [pc, #40]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800181a:	f001 f87c 	bl	8002916 <IMU_ReadData>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40001000 	.word	0x40001000
 800182c:	200006b8 	.word	0x200006b8
 8001830:	40001400 	.word	0x40001400
 8001834:	20000ba4 	.word	0x20000ba4
 8001838:	20000a54 	.word	0x20000a54
 800183c:	20000a90 	.word	0x20000a90
 8001840:	40014400 	.word	0x40014400
 8001844:	20000ab4 	.word	0x20000ab4

08001848 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b20      	cmp	r3, #32
 8001856:	d101      	bne.n	800185c <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 8001858:	f000 feca 	bl	80025f0 <on_click>
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_I2C_MemRxCpltCallback+0x24>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d102      	bne.n	800187c <HAL_I2C_MemRxCpltCallback+0x18>
		// Data received from IMU, process it
		IMU_Rx_Cplt = 1; // Set flag to indicate data is ready
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
	}
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000ab4 	.word	0x20000ab4
 800188c:	200006b9 	.word	0x200006b9

08001890 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_UART_RxCpltCallback+0x2c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d105      	bne.n	80018ae <HAL_UART_RxCpltCallback+0x1e>

			js_buffer[14] = '\0';     // chiudi stringa
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_UART_RxCpltCallback+0x30>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	739a      	strb	r2, [r3, #14]
			js_msg_ready = 1;         // segnala che il messaggio è pronto
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_UART_RxCpltCallback+0x34>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	}
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40011400 	.word	0x40011400
 80018c0:	200006bc 	.word	0x200006bc
 80018c4:	200006cb 	.word	0x200006cb

080018c8 <__io_putchar>:

 int __io_putchar(int ch){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 	ITM_SendChar(ch);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe46 	bl	8001564 <ITM_SendChar>
 	return ch;
 80018d8:	687b      	ldr	r3, [r7, #4]
 }
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e6:	b672      	cpsid	i
}
 80018e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <Error_Handler+0x8>
	...

080018f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_SPI2_Init+0x68>)
 80018f6:	4a19      	ldr	r2, [pc, #100]	@ (800195c <MX_SPI2_Init+0x6c>)
 80018f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_SPI2_Init+0x68>)
 80018fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001904:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001908:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_SPI2_Init+0x68>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_SPI2_Init+0x68>)
 800191e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001922:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_SPI2_Init+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_SPI2_Init+0x68>)
 800193e:	220a      	movs	r2, #10
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001944:	f006 fe3e 	bl	80085c4 <HAL_SPI_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800194e:	f7ff ffc8 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200006ec 	.word	0x200006ec
 800195c:	40003800 	.word	0x40003800

08001960 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a28      	ldr	r2, [pc, #160]	@ (8001a20 <HAL_SPI_MspInit+0xc0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d14a      	bne.n	8001a18 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a26      	ldr	r2, [pc, #152]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d6:	2302      	movs	r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80019e6:	2307      	movs	r3, #7
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <HAL_SPI_MspInit+0xc8>)
 80019f2:	f004 fb0f 	bl	8006014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 80019f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a08:	2305      	movs	r3, #5
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <HAL_SPI_MspInit+0xcc>)
 8001a14:	f004 fafe 	bl	8006014 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	@ 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40003800 	.word	0x40003800
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a6e:	2007      	movs	r0, #7
 8001a70:	f003 fe80 	bl	8005774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <NMI_Handler+0x4>

08001a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <MemManage_Handler+0x4>

08001a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad6:	f003 f929 	bl	8004d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ae6:	f004 f81f 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000658 	.word	0x20000658

08001af4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001af8:	2020      	movs	r0, #32
 8001afa:	f004 fc6b 	bl	80063d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b0a:	f007 fb11 	bl	8009130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200008f8 	.word	0x200008f8

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f007 fb07 	bl	8009130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000868 	.word	0x20000868

08001b2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM7_IRQHandler+0x10>)
 8001b32:	f007 fafd 	bl	8009130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200008b0 	.word	0x200008b0

08001b40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x10>)
 8001b46:	f003 ffef 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200009d0 	.word	0x200009d0

08001b54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <USART6_IRQHandler+0x10>)
 8001b5a:	f008 f845 	bl	8009be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000988 	.word	0x20000988

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b82:	f00a f933 	bl	800bdec <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001baa:	bf00      	nop
 8001bac:	e7fd      	b.n	8001baa <_exit+0x12>

08001bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e00a      	b.n	8001bd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc0:	f3af 8000 	nop.w
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf0      	blt.n	8001bc0 <_read+0x12>
  }

  return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e009      	b.n	8001c0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe60 	bl	80018c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf1      	blt.n	8001bfa <_write+0x12>
  }
  return len;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_close>:

int _close(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c48:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_isatty>:

int _isatty(int file)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f00a f898 	bl	800bdec <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20020000 	.word	0x20020000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	20000744 	.word	0x20000744
 8001cf0:	20000dc8 	.word	0x20000dc8

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d62:	4818      	ldr	r0, [pc, #96]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d64:	f006 ff98 	bl	8008c98 <HAL_TIM_PWM_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d6e:	f7ff fdb8 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d82:	f007 fe2b 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d8c:	f7ff fda9 	bl	80018e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d90:	2360      	movs	r3, #96	@ 0x60
 8001d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2204      	movs	r2, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001da8:	f007 fab2 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001db2:	f7ff fd96 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001db6:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001db8:	f000 fab0 	bl	800231c <HAL_TIM_MspPostInit>

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	@ 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000748 	.word	0x20000748

08001dc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	@ 0x30
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	2224      	movs	r2, #36	@ 0x24
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f009 ffa3 	bl	800bd22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001de6:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <MX_TIM3_Init+0xa4>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001df8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e22:	2301      	movs	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e36:	f007 f847 	bl	8008ec8 <HAL_TIM_Encoder_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e40:	f7ff fd4f 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e52:	f007 fdc3 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e5c:	f7ff fd41 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	@ 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000790 	.word	0x20000790
 8001e6c:	40000400 	.word	0x40000400

08001e70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f009 ff4f 	bl	800bd22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <MX_TIM4_Init+0xa4>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001ea0:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001ede:	f006 fff3 	bl	8008ec8 <HAL_TIM_Encoder_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f7ff fcfb 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001efa:	f007 fd6f 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f04:	f7ff fced 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	@ 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200007d8 	.word	0x200007d8
 8001f14:	40000800 	.word	0x40000800

08001f18 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	615a      	str	r2, [r3, #20]
 8001f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <MX_TIM5_Init+0xb0>)
 8001f3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f60:	4818      	ldr	r0, [pc, #96]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f62:	f006 fe99 	bl	8008c98 <HAL_TIM_PWM_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001f6c:	f7ff fcb9 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f80:	f007 fd2c 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f8a:	f7ff fcaa 	bl	80018e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8e:	2360      	movs	r3, #96	@ 0x60
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001fa6:	f007 f9b3 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001fb0:	f7ff fc97 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fb4:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001fb6:	f000 f9b1 	bl	800231c <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000820 	.word	0x20000820
 8001fc8:	40000c00 	.word	0x40000c00

08001fcc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fdc:	4a15      	ldr	r2, [pc, #84]	@ (8002034 <MX_TIM6_Init+0x68>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fe2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fe6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ff0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ff4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ffe:	f006 fd8b 	bl	8008b18 <HAL_TIM_Base_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002008:	f7ff fc6b 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_TIM6_Init+0x64>)
 800201a:	f007 fcdf 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002024:	f7ff fc5d 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000868 	.word	0x20000868
 8002034:	40001000 	.word	0x40001000

08002038 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203e:	463b      	mov	r3, r7
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <MX_TIM7_Init+0x64>)
 8002048:	4a15      	ldr	r2, [pc, #84]	@ (80020a0 <MX_TIM7_Init+0x68>)
 800204a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <MX_TIM7_Init+0x64>)
 800204e:	2263      	movs	r2, #99	@ 0x63
 8002050:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <MX_TIM7_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <MX_TIM7_Init+0x64>)
 800205a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800205e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_TIM7_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002066:	480d      	ldr	r0, [pc, #52]	@ (800209c <MX_TIM7_Init+0x64>)
 8002068:	f006 fd56 	bl	8008b18 <HAL_TIM_Base_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002072:	f7ff fc36 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	@ (800209c <MX_TIM7_Init+0x64>)
 8002084:	f007 fcaa 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800208e:	f7ff fc28 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200008b0 	.word	0x200008b0
 80020a0:	40001400 	.word	0x40001400

080020a4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020aa:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <MX_TIM10_Init+0x44>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020b0:	2213      	movs	r2, #19
 80020b2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020bc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80020c0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020d0:	f006 fd22 	bl	8008b18 <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80020da:	f7ff fc02 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200008f8 	.word	0x200008f8
 80020e8:	40014400 	.word	0x40014400

080020ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800211a:	e012      	b.n	8002142 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <HAL_TIM_PWM_MspInit+0x68>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10d      	bne.n	8002142 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40000c00 	.word	0x40000c00

08002158 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	@ 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a32      	ldr	r2, [pc, #200]	@ (8002240 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12c      	bne.n	80021d4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b2e      	ldr	r3, [pc, #184]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80021b2:	23c0      	movs	r3, #192	@ 0xc0
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c2:	2302      	movs	r3, #2
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	481e      	ldr	r0, [pc, #120]	@ (8002248 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021ce:	f003 ff21 	bl	8006014 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021d2:	e030      	b.n	8002236 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1c      	ldr	r2, [pc, #112]	@ (800224c <HAL_TIM_Encoder_MspInit+0xf4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12b      	bne.n	8002236 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4a17      	ldr	r2, [pc, #92]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002226:	2302      	movs	r3, #2
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002232:	f003 feef 	bl	8006014 <HAL_GPIO_Init>
}
 8002236:	bf00      	nop
 8002238:	3730      	adds	r7, #48	@ 0x30
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40000400 	.word	0x40000400
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000
 800224c:	40000800 	.word	0x40000800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2a      	ldr	r2, [pc, #168]	@ (800230c <HAL_TIM_Base_MspInit+0xb8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d116      	bne.n	8002294 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2036      	movs	r0, #54	@ 0x36
 8002288:	f003 fa7f 	bl	800578a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800228c:	2036      	movs	r0, #54	@ 0x36
 800228e:	f003 fa98 	bl	80057c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002292:	e036      	b.n	8002302 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_TIM_Base_MspInit+0xc0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d116      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2037      	movs	r0, #55	@ 0x37
 80022c0:	f003 fa63 	bl	800578a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c4:	2037      	movs	r0, #55	@ 0x37
 80022c6:	f003 fa7c 	bl	80057c2 <HAL_NVIC_EnableIRQ>
}
 80022ca:	e01a      	b.n	8002302 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_TIM_Base_MspInit+0xc4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d115      	bne.n	8002302 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2019      	movs	r0, #25
 80022f8:	f003 fa47 	bl	800578a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022fc:	2019      	movs	r0, #25
 80022fe:	f003 fa60 	bl	80057c2 <HAL_NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40001000 	.word	0x40001000
 8002310:	40023800 	.word	0x40023800
 8002314:	40001400 	.word	0x40001400
 8002318:	40014400 	.word	0x40014400

0800231c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d11e      	bne.n	800237c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 800235a:	2302      	movs	r3, #2
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236a:	2301      	movs	r3, #1
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4816      	ldr	r0, [pc, #88]	@ (80023d0 <HAL_TIM_MspPostInit+0xb4>)
 8002376:	f003 fe4d 	bl	8006014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800237a:	e022      	b.n	80023c2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_TIM_MspPostInit+0xb8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11d      	bne.n	80023c2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 80023a2:	2301      	movs	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023b2:	2302      	movs	r3, #2
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4804      	ldr	r0, [pc, #16]	@ (80023d0 <HAL_TIM_MspPostInit+0xb4>)
 80023be:	f003 fe29 	bl	8006014 <HAL_GPIO_Init>
}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40000c00 	.word	0x40000c00

080023d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <MX_USART2_UART_Init+0x50>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 8002410:	f007 fb74 	bl	8009afc <HAL_UART_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800241a:	f7ff fa62 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000940 	.word	0x20000940
 8002428:	40004400 	.word	0x40004400

0800242c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	@ (800247c <MX_USART6_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002438:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800243c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002452:	2204      	movs	r2, #4
 8002454:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002464:	f007 fb4a 	bl	8009afc <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f7ff fa38 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000988 	.word	0x20000988
 800247c:	40011400 	.word	0x40011400

08002480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	@ 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4d      	ldr	r2, [pc, #308]	@ (80025d4 <HAL_UART_MspInit+0x154>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12c      	bne.n	80024fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a4b      	ldr	r2, [pc, #300]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b45      	ldr	r3, [pc, #276]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a44      	ldr	r2, [pc, #272]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b42      	ldr	r3, [pc, #264]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024da:	230c      	movs	r3, #12
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ea:	2307      	movs	r3, #7
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4839      	ldr	r0, [pc, #228]	@ (80025dc <HAL_UART_MspInit+0x15c>)
 80024f6:	f003 fd8d 	bl	8006014 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024fa:	e067      	b.n	80025cc <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a37      	ldr	r2, [pc, #220]	@ (80025e0 <HAL_UART_MspInit+0x160>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d162      	bne.n	80025cc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	4a32      	ldr	r2, [pc, #200]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6453      	str	r3, [r2, #68]	@ 0x44
 8002516:	4b30      	ldr	r3, [pc, #192]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a2b      	ldr	r2, [pc, #172]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800253e:	23c0      	movs	r3, #192	@ 0xc0
 8002540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800254e:	2308      	movs	r3, #8
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	4822      	ldr	r0, [pc, #136]	@ (80025e4 <HAL_UART_MspInit+0x164>)
 800255a:	f003 fd5b 	bl	8006014 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_UART_MspInit+0x16c>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002564:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002566:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800256a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256c:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002578:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800257a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800258c:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800258e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002592:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800259c:	2200      	movs	r2, #0
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025a0:	4811      	ldr	r0, [pc, #68]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 80025a2:	f003 f929 	bl	80057f8 <HAL_DMA_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80025ac:	f7ff f999 	bl	80018e2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 80025b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	2047      	movs	r0, #71	@ 0x47
 80025c2:	f003 f8e2 	bl	800578a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025c6:	2047      	movs	r0, #71	@ 0x47
 80025c8:	f003 f8fb 	bl	80057c2 <HAL_NVIC_EnableIRQ>
}
 80025cc:	bf00      	nop
 80025ce:	3730      	adds	r7, #48	@ 0x30
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	40020800 	.word	0x40020800
 80025e8:	200009d0 	.word	0x200009d0
 80025ec:	40026428 	.word	0x40026428

080025f0 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
// static uint8_t active = 0;

void on_click(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 80025f4:	f002 fbae 	bl	8004d54 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <on_click+0x64>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	@ 0x64
 8002602:	d925      	bls.n	8002650 <on_click+0x60>
		last_debounce_time = HAL_GetTick();
 8002604:	f002 fba6 	bl	8004d54 <HAL_GetTick>
 8002608:	4603      	mov	r3, r0
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <on_click+0x64>)
 800260c:	6013      	str	r3, [r2, #0]
		// active ^= 1;

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800260e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002612:	4811      	ldr	r0, [pc, #68]	@ (8002658 <on_click+0x68>)
 8002614:	f003 fec3 	bl	800639e <HAL_GPIO_TogglePin>
		// } else{
		// 	set_speed(&stepper_l, 0);
		// 	set_speed(&stepper_r, 0);
		// }

		pid.active ^= 1;
 8002618:	4b10      	ldr	r3, [pc, #64]	@ (800265c <on_click+0x6c>)
 800261a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <on_click+0x6c>)
 8002626:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		if (pid.active) {
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <on_click+0x6c>)
 800262c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <on_click+0x4c>
			PID_Reset(&pid);
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <on_click+0x6c>)
 8002636:	f001 f81d 	bl	8003674 <PID_Reset>
		} else {
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 800263a:	e009      	b.n	8002650 <on_click+0x60>
			set_speed(&stepper_l, 0);
 800263c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002660 <on_click+0x70>
 8002640:	4808      	ldr	r0, [pc, #32]	@ (8002664 <on_click+0x74>)
 8002642:	f001 f935 	bl	80038b0 <set_speed>
			set_speed(&stepper_r, 0);
 8002646:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002660 <on_click+0x70>
 800264a:	4807      	ldr	r0, [pc, #28]	@ (8002668 <on_click+0x78>)
 800264c:	f001 f930 	bl	80038b0 <set_speed>
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000a30 	.word	0x20000a30
 8002658:	40020800 	.word	0x40020800
 800265c:	20000ba4 	.word	0x20000ba4
 8002660:	00000000 	.word	0x00000000
 8002664:	20000a90 	.word	0x20000a90
 8002668:	20000a54 	.word	0x20000a54

0800266c <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	701a      	strb	r2, [r3, #0]
	return;
 8002688:	bf00      	nop
}
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	0000      	movs	r0, r0
	...

08002698 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * RCF * encoder->direction_invert;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002730 <update_displacement+0x98>
 80026b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026b6:	ee17 0a90 	vmov	r0, s15
 80026ba:	f7fd ff75 	bl	80005a8 <__aeabi_f2d>
 80026be:	a31a      	add	r3, pc, #104	@ (adr r3, 8002728 <update_displacement+0x90>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ffc8 	bl	8000658 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff54 	bl	8000584 <__aeabi_i2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4620      	mov	r0, r4
 80026e2:	4629      	mov	r1, r5
 80026e4:	f7fd ffb8 	bl	8000658 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe faaa 	bl	8000c48 <__aeabi_d2f>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

	encoder->position += encoder->displacement;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	ed93 7a05 	vldr	s14, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edc3 7a05 	vstr	s15, [r3, #20]
	return;
 800271a:	bf00      	nop
}
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	f3af 8000 	nop.w
 8002728:	7bb1a72c 	.word	0x7bb1a72c
 800272c:	3f4921fa 	.word	0x3f4921fa
 8002730:	45800000 	.word	0x45800000

08002734 <compute_speed>:

static void compute_speed(encoder_t *encoder){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <compute_speed+0x2c>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000a34 	.word	0x20000a34

08002764 <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff7d 	bl	800266c <update_direction>
	update_displacement(encoder);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff90 	bl	8002698 <update_displacement>
	compute_speed(encoder);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ffdb 	bl	8002734 <compute_speed>
	return;
 800277e:	bf00      	nop
}
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	741a      	strb	r2, [r3, #16]
	encoder->direction = 0;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	encoder->displacement = 0.0f;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
	encoder->speed = 0.0f;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
	encoder->position = 0.0f;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
	
	HCLK = HAL_RCC_GetHCLKFreq();
 80027cc:	f005 f9f8 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <Encoder_init+0x90>)
 80027d4:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	3301      	adds	r3, #1
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	3301      	adds	r3, #1
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <Encoder_init+0x90>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <Encoder_init+0x94>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000a38 	.word	0x20000a38
 800281c:	20000a34 	.word	0x20000a34

08002820 <IMU_Init>:
		imu->az_bias = imu->az_bias - 16384.0f; // Adjust az bias to remove the offset
		imu->az= (imu->az - imu->az_bias) / 16384.0f * 9.81f; // Remove the bias from the az value
	}
}

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af04      	add	r7, sp, #16
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d101      	bne.n	8002840 <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 800283c:	2300      	movs	r3, #0
 800283e:	e066      	b.n	800290e <IMU_Init+0xee>
	}

	imu->hi2c = hi2c;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	601a      	str	r2, [r3, #0]
	imu->address = address;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
	imu->vx = 0.0f;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	621a      	str	r2, [r3, #32]

	imu->wx = 0.0f;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wy = 0.0f;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->wz = 0.0f;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu->alpha_y = 0.0f; // Initialize alpha_y to 0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30

	imu->angle = 0.0f;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->last_computation_time = 0;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->az_bias = 0.0f; // Initialize az bias to 0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	imu->calibration_mode = 1; // Calibration mode enabled by default
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 80028aa:	88f9      	ldrh	r1, [r7, #6]
 80028ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f107 0317 	add.w	r3, r7, #23
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2275      	movs	r2, #117	@ 0x75
 80028c0:	68b8      	ldr	r0, [r7, #8]
 80028c2:	f003 ffdd 	bl	8006880 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b68      	cmp	r3, #104	@ 0x68
 80028ca:	d11f      	bne.n	800290c <IMU_Init+0xec>
		uint8_t data = 0x00;
 80028cc:	2300      	movs	r3, #0
 80028ce:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80028d0:	88f9      	ldrh	r1, [r7, #6]
 80028d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	2301      	movs	r3, #1
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	f107 0316 	add.w	r3, r7, #22
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2301      	movs	r3, #1
 80028e4:	226b      	movs	r2, #107	@ 0x6b
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	f003 fed0 	bl	800668c <HAL_I2C_Mem_Write>

		data = 0x00;
 80028ec:	2300      	movs	r3, #0
 80028ee:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80028f0:	88f9      	ldrh	r1, [r7, #6]
 80028f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f6:	9302      	str	r3, [sp, #8]
 80028f8:	2301      	movs	r3, #1
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	f107 0316 	add.w	r3, r7, #22
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	221a      	movs	r2, #26
 8002906:	68b8      	ldr	r0, [r7, #8]
 8002908:	f003 fec0 	bl	800668c <HAL_I2C_Mem_Write>
	}
	return 1;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af02      	add	r7, sp, #8
 800291c:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8899      	ldrh	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3306      	adds	r3, #6
 800292a:	220e      	movs	r2, #14
 800292c:	9201      	str	r2, [sp, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2301      	movs	r3, #1
 8002932:	223b      	movs	r2, #59	@ 0x3b
 8002934:	f004 f9d6 	bl	8006ce4 <HAL_I2C_Mem_Read_DMA>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - imu->last_computation_time; // Calculate time since last angle update
 8002948:	f002 fa04 	bl	8004d54 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	60fb      	str	r3, [r7, #12]

	imu->ax = (1-IMU_EMA_ALPHA) * imu->ax + IMU_EMA_ALPHA * (((int16_t)(imu->pData[0] << 8) | imu->pData[1]) - 280.591f) / 16384.0f * 9.81f;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	edd3 7a05 	vldr	s15, [r3, #20]
 800295c:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	799b      	ldrb	r3, [r3, #6]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	b21b      	sxth	r3, r3
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	b21b      	sxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	79db      	ldrb	r3, [r3, #7]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 8002c9c <IMU_Compute_Data+0x35c>
 8002986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800298a:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8002ca0 <IMU_Compute_Data+0x360>
 800298e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002992:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 8002ca4 <IMU_Compute_Data+0x364>
 8002996:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800299a:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8002ca8 <IMU_Compute_Data+0x368>
 800299e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->ay = (1-IMU_EMA_ALPHA) * imu->ay + IMU_EMA_ALPHA * ((int16_t)(imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b2:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8002c98 <IMU_Compute_Data+0x358>
 80029b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7a5b      	ldrb	r3, [r3, #9]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d8:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002ca0 <IMU_Compute_Data+0x360>
 80029dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029e0:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8002ca4 <IMU_Compute_Data+0x364>
 80029e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029e8:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002ca8 <IMU_Compute_Data+0x368>
 80029ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - 1117.735f) / 16384.0f * 9.81f;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a00:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002a04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7a9b      	ldrb	r3, [r3, #10]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7adb      	ldrb	r3, [r3, #11]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002cac <IMU_Compute_Data+0x36c>
 8002a2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a2e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002a32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a36:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8002ca4 <IMU_Compute_Data+0x364>
 8002a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a3e:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8002ca8 <IMU_Compute_Data+0x368>
 8002a42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edc3 7a07 	vstr	s15, [r3, #28]
//		IMU_Calibrate(imu); // Call calibration function if in calibration mode
//	} else {
//		// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
//		imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - imu->az_bias)/ 16384.0f * 9.81f;
//	}
	float old_wy = imu->wy;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	60bb      	str	r3, [r7, #8]
	imu->wx = (1-IMU_EMA_ALPHA) * imu->wx + IMU_EMA_ALPHA * ((int16_t)(imu->pData[8] << 8) | imu->pData[9]) / 131.0f;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002a5c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7b9b      	ldrb	r3, [r3, #14]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7bdb      	ldrb	r3, [r3, #15]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002a86:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a8a:	ed9f 6a89 	vldr	s12, [pc, #548]	@ 8002cb0 <IMU_Compute_Data+0x370>
 8002a8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->wy = (1-IMU_EMA_ALPHA) * imu->wy + IMU_EMA_ALPHA * (((int16_t)(imu->pData[10] << 8) | imu->pData[11]) - 393.589f) / 131.0f;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002aa2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7c1b      	ldrb	r3, [r3, #16]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7c5b      	ldrb	r3, [r3, #17]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002cb4 <IMU_Compute_Data+0x374>
 8002acc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ad0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002ad4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ad8:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8002cb0 <IMU_Compute_Data+0x370>
 8002adc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->wz = (1-IMU_EMA_ALPHA) * imu->wz + IMU_EMA_ALPHA * ((int16_t)(imu->pData[12] << 8) | imu->pData[13]) / 131.0f;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002af0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002af4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7c9b      	ldrb	r3, [r3, #18]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7cdb      	ldrb	r3, [r3, #19]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002b1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b1e:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8002cb0 <IMU_Compute_Data+0x370>
 8002b22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->last_computation_time = HAL_GetTick(); // Update last computation time
 8002b30:	f002 f910 	bl	8004d54 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->vx = imu->vx + imu->ax * (float)delta_time / 1000.0f; // Update velocity based on accelerometer data
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b54:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 8002cb8 <IMU_Compute_Data+0x378>
 8002b58:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->alpha_y = (imu->wy - old_wy) / ((float)delta_time / 1000.0f); // Calculate angular acceleration around y-axis
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b70:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7e:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8002cb8 <IMU_Compute_Data+0x378>
 8002b82:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if(imu->calibration_mode) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02a      	beq.n	8002bf0 <IMU_Compute_Data+0x2b0>
		imu->angle = -atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Use accelerometer data to compute angle in calibration mode
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ba6:	eef0 0a47 	vmov.f32	s1, s14
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	f00d f8a7 	bl	800fd00 <atan2f>
 8002bb2:	eef0 7a40 	vmov.f32	s15, s0
 8002bb6:	eef1 7a67 	vneg.f32	s15, s15
 8002bba:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002cbc <IMU_Compute_Data+0x37c>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcef 	bl	80005a8 <__aeabi_f2d>
 8002bca:	a331      	add	r3, pc, #196	@ (adr r3, 8002c90 <IMU_Compute_Data+0x350>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fe6c 	bl	80008ac <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f834 	bl	8000c48 <__aeabi_d2f>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	635a      	str	r2, [r3, #52]	@ 0x34
		imu->calibration_mode = 0; // Reset calibration mode after computing angle
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}else {
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
	}
}
 8002bee:	e04a      	b.n	8002c86 <IMU_Compute_Data+0x346>
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c0a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8002cb8 <IMU_Compute_Data+0x378>
 8002c0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c16:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002cc0 <IMU_Compute_Data+0x380>
 8002c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fcc1 	bl	80005a8 <__aeabi_f2d>
 8002c26:	4604      	mov	r4, r0
 8002c28:	460d      	mov	r5, r1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c36:	eef0 0a47 	vmov.f32	s1, s14
 8002c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3e:	f00d f85f 	bl	800fd00 <atan2f>
 8002c42:	eef0 7a40 	vmov.f32	s15, s0
 8002c46:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002cc4 <IMU_Compute_Data+0x384>
 8002c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002cbc <IMU_Compute_Data+0x37c>
 8002c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c56:	ee17 0a90 	vmov	r0, s15
 8002c5a:	f7fd fca5 	bl	80005a8 <__aeabi_f2d>
 8002c5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8002c90 <IMU_Compute_Data+0x350>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fe22 	bl	80008ac <__aeabi_ddiv>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fb3a 	bl	80002e8 <__aeabi_dsub>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ffe4 	bl	8000c48 <__aeabi_d2f>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	54442d18 	.word	0x54442d18
 8002c94:	400921fb 	.word	0x400921fb
 8002c98:	3f589d8a 	.word	0x3f589d8a
 8002c9c:	438c4ba6 	.word	0x438c4ba6
 8002ca0:	3e1d89d9 	.word	0x3e1d89d9
 8002ca4:	46800000 	.word	0x46800000
 8002ca8:	411cf5c3 	.word	0x411cf5c3
 8002cac:	448bb785 	.word	0x448bb785
 8002cb0:	43030000 	.word	0x43030000
 8002cb4:	43c4cb64 	.word	0x43c4cb64
 8002cb8:	447a0000 	.word	0x447a0000
 8002cbc:	43340000 	.word	0x43340000
 8002cc0:	3f7ef9db 	.word	0x3f7ef9db
 8002cc4:	3b83126f 	.word	0x3b83126f

08002cc8 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a34      	ldr	r2, [pc, #208]	@ (8002da8 <PowerModule_init+0xe0>)
 8002cd6:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <PowerModule_init+0xe4>)
 8002cdc:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	3364      	adds	r3, #100	@ 0x64
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	2248      	movs	r2, #72	@ 0x48
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f009 f8a6 	bl	800be46 <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3364      	adds	r3, #100	@ 0x64
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 f89c 	bl	8004e3c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3364      	adds	r3, #100	@ 0x64
 8002d08:	210a      	movs	r1, #10
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 f99b 	bl	8005046 <HAL_ADC_PollForConversion>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11f      	bne.n	8002d56 <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3364      	adds	r3, #100	@ 0x64
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fa1e 	bl	800515c <HAL_ADC_GetValue>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc1e 	bl	8000564 <__aeabi_ui2d>
 8002d28:	a31b      	add	r3, pc, #108	@ (adr r3, 8002d98 <PowerModule_init+0xd0>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fdbd 	bl	80008ac <__aeabi_ddiv>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	a319      	add	r3, pc, #100	@ (adr r3, 8002da0 <PowerModule_init+0xd8>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fad2 	bl	80002e8 <__aeabi_dsub>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd ff7c 	bl	8000c48 <__aeabi_d2f>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3364      	adds	r3, #100	@ 0x64
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 f940 	bl	8004fe0 <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e00a      	b.n	8002d7c <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b13      	cmp	r3, #19
 8002d80:	ddf1      	ble.n	8002d66 <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	f3af 8000 	nop.w
 8002d98:	e147ae14 	.word	0xe147ae14
 8002d9c:	405c847a 	.word	0x405c847a
 8002da0:	c540196f 	.word	0xc540196f
 8002da4:	3fb12c42 	.word	0x3fb12c42
 8002da8:	41b00000 	.word	0x41b00000
 8002dac:	41a00000 	.word	0x41a00000

08002db0 <I2C1_BusRecovery>:
#define I2C_SDA_GPIO_Port   GPIOB
#define I2C_SDA_Pin         GPIO_PIN_9

// quando HAL_I2C_Master_Receive_DMA() fallisce per colpa del bus bloccato (es. I2C_FLAG_BUSY sempre attivo),
// l’unico rimedio affidabile è resettare completamente il periferico I²C
static void I2C1_BusRecovery(void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002db6:	463b      	mov	r3, r7
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb0 <I2C1_BusRecovery+0x100>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <I2C1_BusRecovery+0x100>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 8002dd4:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a36      	ldr	r2, [pc, #216]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002dda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dde:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002de0:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a33      	ldr	r2, [pc, #204]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002de6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dea:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8002dec:	2311      	movs	r3, #17
 8002dee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df4:	2302      	movs	r3, #2
 8002df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = I2C_SCL_Pin | I2C_SDA_Pin;
 8002df8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dfc:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	482d      	ldr	r0, [pc, #180]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e04:	f003 f906 	bl	8006014 <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e014      	b.n	8002e38 <I2C1_BusRecovery+0x88>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e14:	4828      	ldr	r0, [pc, #160]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e16:	f003 faa9 	bl	800636c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f001 ffa6 	bl	8004d6c <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e26:	4824      	ldr	r0, [pc, #144]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e28:	f003 faa0 	bl	800636c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f001 ff9d 	bl	8004d6c <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	dc07      	bgt.n	8002e4e <I2C1_BusRecovery+0x9e>
 8002e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e42:	481d      	ldr	r0, [pc, #116]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e44:	f003 fa7a 	bl	800633c <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0df      	beq.n	8002e0e <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e54:	4818      	ldr	r0, [pc, #96]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e56:	f003 fa89 	bl	800636c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f001 ff86 	bl	8004d6c <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002e60:	2201      	movs	r2, #1
 8002e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e66:	4814      	ldr	r0, [pc, #80]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e68:	f003 fa80 	bl	800636c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f001 ff7d 	bl	8004d6c <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002e72:	2201      	movs	r2, #1
 8002e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e78:	480f      	ldr	r0, [pc, #60]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e7a:	f003 fa77 	bl	800636c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f001 ff74 	bl	8004d6c <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e84:	2312      	movs	r3, #18
 8002e86:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // pull-up interne già attive
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_HIGH;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = I2C_SCL_Pin | I2C_SDA_Pin;
 8002e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e94:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e96:	2304      	movs	r3, #4
 8002e98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002ea0:	f003 f8b8 	bl	8006014 <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 8002ea4:	f7fe fab6 	bl	8001414 <MX_I2C1_Init>
}
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000604 	.word	0x20000604
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020400 	.word	0x40020400

08002ebc <Robot_init>:


void Robot_init(robot_t *robot) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8002ec4:	4838      	ldr	r0, [pc, #224]	@ (8002fa8 <Robot_init+0xec>)
 8002ec6:	f005 fe77 	bl	8008bb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 8002eca:	4838      	ldr	r0, [pc, #224]	@ (8002fac <Robot_init+0xf0>)
 8002ecc:	f005 fe74 	bl	8008bb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);						// Stepper timer
 8002ed0:	4837      	ldr	r0, [pc, #220]	@ (8002fb0 <Robot_init+0xf4>)
 8002ed2:	f005 fe71 	bl	8008bb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8002ed6:	213c      	movs	r1, #60	@ 0x3c
 8002ed8:	4836      	ldr	r0, [pc, #216]	@ (8002fb4 <Robot_init+0xf8>)
 8002eda:	f006 f89b 	bl	8009014 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8002ede:	213c      	movs	r1, #60	@ 0x3c
 8002ee0:	4835      	ldr	r0, [pc, #212]	@ (8002fb8 <Robot_init+0xfc>)
 8002ee2:	f006 f897 	bl	8009014 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);			// Stepper left
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4834      	ldr	r0, [pc, #208]	@ (8002fbc <Robot_init+0x100>)
 8002eea:	f005 ff25 	bl	8008d38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);			// Stepper right
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4833      	ldr	r0, [pc, #204]	@ (8002fc0 <Robot_init+0x104>)
 8002ef2:	f005 ff21 	bl	8008d38 <HAL_TIM_PWM_Start>

	MAX72_init(&display);
 8002ef6:	4833      	ldr	r0, [pc, #204]	@ (8002fc4 <Robot_init+0x108>)
 8002ef8:	f000 fd5e 	bl	80039b8 <MAX72_init>

	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002efc:	e005      	b.n	8002f0a <Robot_init+0x4e>
		MAX72_Print_String("I2C", NO_SETTINGS);
 8002efe:	2100      	movs	r1, #0
 8002f00:	4831      	ldr	r0, [pc, #196]	@ (8002fc8 <Robot_init+0x10c>)
 8002f02:	f001 f847 	bl	8003f94 <MAX72_Print_String>
		I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8002f06:	f7ff ff53 	bl	8002db0 <I2C1_BusRecovery>
	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002f0a:	22d0      	movs	r2, #208	@ 0xd0
 8002f0c:	492f      	ldr	r1, [pc, #188]	@ (8002fcc <Robot_init+0x110>)
 8002f0e:	4830      	ldr	r0, [pc, #192]	@ (8002fd0 <Robot_init+0x114>)
 8002f10:	f7ff fc86 	bl	8002820 <IMU_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f1      	beq.n	8002efe <Robot_init+0x42>
	}
	MAX72_Clear();
 8002f1a:	f000 fdef 	bl	8003afc <MAX72_Clear>
    robot->imu = &imu;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd0 <Robot_init+0x114>)
 8002f22:	601a      	str	r2, [r3, #0]

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f28:	4a20      	ldr	r2, [pc, #128]	@ (8002fac <Robot_init+0xf0>)
 8002f2a:	4922      	ldr	r1, [pc, #136]	@ (8002fb4 <Robot_init+0xf8>)
 8002f2c:	4829      	ldr	r0, [pc, #164]	@ (8002fd4 <Robot_init+0x118>)
 8002f2e:	f7ff fc2b 	bl	8002788 <Encoder_init>
    robot->encoder_l = &encoder_l;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <Robot_init+0x118>)
 8002f36:	605a      	str	r2, [r3, #4]
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 8002f38:	2310      	movs	r3, #16
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <Robot_init+0x11c>)
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <Robot_init+0x118>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	491e      	ldr	r1, [pc, #120]	@ (8002fc0 <Robot_init+0x104>)
 8002f46:	4825      	ldr	r0, [pc, #148]	@ (8002fdc <Robot_init+0x120>)
 8002f48:	f000 fcc2 	bl	80038d0 <Stepper_init>
    robot->stepper_l = &stepper_l;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a23      	ldr	r2, [pc, #140]	@ (8002fdc <Robot_init+0x120>)
 8002f50:	60da      	str	r2, [r3, #12]
	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 8002f52:	2301      	movs	r3, #1
 8002f54:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <Robot_init+0xf0>)
 8002f56:	4918      	ldr	r1, [pc, #96]	@ (8002fb8 <Robot_init+0xfc>)
 8002f58:	4821      	ldr	r0, [pc, #132]	@ (8002fe0 <Robot_init+0x124>)
 8002f5a:	f7ff fc15 	bl	8002788 <Encoder_init>
    robot->encoder_r = &encoder_r;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <Robot_init+0x124>)
 8002f62:	609a      	str	r2, [r3, #8]
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 8002f64:	2301      	movs	r3, #1
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <Robot_init+0x128>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <Robot_init+0x124>)
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4912      	ldr	r1, [pc, #72]	@ (8002fbc <Robot_init+0x100>)
 8002f72:	481d      	ldr	r0, [pc, #116]	@ (8002fe8 <Robot_init+0x12c>)
 8002f74:	f000 fcac 	bl	80038d0 <Stepper_init>
    robot->stepper_r = &stepper_r;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <Robot_init+0x12c>)
 8002f7c:	611a      	str	r2, [r3, #16]

	PowerModule_init(&power_module, &hadc1);
 8002f7e:	491b      	ldr	r1, [pc, #108]	@ (8002fec <Robot_init+0x130>)
 8002f80:	481b      	ldr	r0, [pc, #108]	@ (8002ff0 <Robot_init+0x134>)
 8002f82:	f7ff fea1 	bl	8002cc8 <PowerModule_init>
	robot->power_module = &power_module;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <Robot_init+0x134>)
 8002f8a:	615a      	str	r2, [r3, #20]

    PID_Init(&pid);
 8002f8c:	4819      	ldr	r0, [pc, #100]	@ (8002ff4 <Robot_init+0x138>)
 8002f8e:	f000 f947 	bl	8003220 <PID_Init>
    robot->pid = &pid;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <Robot_init+0x138>)
 8002f96:	619a      	str	r2, [r3, #24]

    robot->base_angle_config = 0;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	771a      	strb	r2, [r3, #28]
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000868 	.word	0x20000868
 8002fac:	200008b0 	.word	0x200008b0
 8002fb0:	200008f8 	.word	0x200008f8
 8002fb4:	20000790 	.word	0x20000790
 8002fb8:	200007d8 	.word	0x200007d8
 8002fbc:	20000748 	.word	0x20000748
 8002fc0:	20000820 	.word	0x20000820
 8002fc4:	20000bf8 	.word	0x20000bf8
 8002fc8:	080100a8 	.word	0x080100a8
 8002fcc:	20000604 	.word	0x20000604
 8002fd0:	20000ab4 	.word	0x20000ab4
 8002fd4:	20000a78 	.word	0x20000a78
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	20000a90 	.word	0x20000a90
 8002fe0:	20000a3c 	.word	0x20000a3c
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	20000a54 	.word	0x20000a54
 8002fec:	200005bc 	.word	0x200005bc
 8002ff0:	20000af8 	.word	0x20000af8
 8002ff4:	20000ba4 	.word	0x20000ba4

08002ff8 <Robot_read_serial_msg>:



void Robot_read_serial_msg(robot_t *robot, char *msg) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	@ 0x30
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    static float last_base_angle_stick_val = 0.0f;
    float js_x = 0.0f, js_y = 0.0f;
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	623b      	str	r3, [r7, #32]
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    uint8_t base_angle_config = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	76fb      	strb	r3, [r7, #27]

    // Pulizia del buffer: rimuove eventuali spazi/residui
    char clean_msg[14] = {0}; // 13 caratteri + \0
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	819a      	strh	r2, [r3, #12]
    strncpy(clean_msg, msg, 13);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	220d      	movs	r2, #13
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f008 fe82 	bl	800bd32 <strncpy>
    clean_msg[14] = '\0';
 800302e:	2300      	movs	r3, #0
 8003030:	76bb      	strb	r3, [r7, #26]

    // Parsing robusto con sscanf
    int parsed = sscanf(clean_msg, "%f;%f;%hhu", &js_x, &js_y, &base_angle_config);
 8003032:	f107 011c 	add.w	r1, r7, #28
 8003036:	f107 0220 	add.w	r2, r7, #32
 800303a:	f107 000c 	add.w	r0, r7, #12
 800303e:	f107 031b 	add.w	r3, r7, #27
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	496f      	ldr	r1, [pc, #444]	@ (8003204 <Robot_read_serial_msg+0x20c>)
 8003048:	f008 fdfa 	bl	800bc40 <siscanf>
 800304c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (parsed != 3) {
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	2b03      	cmp	r3, #3
 8003052:	f040 80d2 	bne.w	80031fa <Robot_read_serial_msg+0x202>
        // Pacchetto incompleto o malformato, esci
        return;
    }

    // Gestione base angle mode
    if (base_angle_config != robot->base_angle_config) {
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7f1a      	ldrb	r2, [r3, #28]
 800305a:	7efb      	ldrb	r3, [r7, #27]
 800305c:	429a      	cmp	r2, r3
 800305e:	d044      	beq.n	80030ea <Robot_read_serial_msg+0xf2>
        robot->base_angle_config = base_angle_config;
 8003060:	7efa      	ldrb	r2, [r7, #27]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	771a      	strb	r2, [r3, #28]
        last_base_angle_stick_val = 0.0f;
 8003066:	4b68      	ldr	r3, [pc, #416]	@ (8003208 <Robot_read_serial_msg+0x210>)
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
        robot->pid->js_angle_offset_sp = 0.0f; // Reset joystick offset when switching modes
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
        robot->pid->js_angle_offset = 0.0f;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
        robot->pid->js_multiplier_sp = 1.0f; // Reset speed multiplier when switching modes
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
        robot->pid->js_multiplier = 1.0f;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003094:	621a      	str	r2, [r3, #32]

    	static display_data_t base_angle_data = {NULL, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
    	base_angle_data.data = &robot->pid->base_angle_sp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	330c      	adds	r3, #12
 800309c:	4a5b      	ldr	r2, [pc, #364]	@ (800320c <Robot_read_serial_msg+0x214>)
 800309e:	6013      	str	r3, [r2, #0]

        if (base_angle_config) {
 80030a0:	7efb      	ldrb	r3, [r7, #27]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <Robot_read_serial_msg+0xe2>
			MAX72_Add_Data(&display, &base_angle_data);
 80030a6:	4959      	ldr	r1, [pc, #356]	@ (800320c <Robot_read_serial_msg+0x214>)
 80030a8:	4859      	ldr	r0, [pc, #356]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030aa:	f000 fd40 	bl	8003b2e <MAX72_Add_Data>
			MAX72_Stop_Changing_Data(&display, 0); // Stop changing data to always show base angle
 80030ae:	2100      	movs	r1, #0
 80030b0:	4857      	ldr	r0, [pc, #348]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030b2:	f000 ff27 	bl	8003f04 <MAX72_Stop_Changing_Data>
			while (display.data[display.current_index].data != &robot->pid->base_angle_sp) {
 80030b6:	e003      	b.n	80030c0 <Robot_read_serial_msg+0xc8>
				MAX72_Change_Data(&display, 1); // Force change to base angle display
 80030b8:	2101      	movs	r1, #1
 80030ba:	4855      	ldr	r0, [pc, #340]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030bc:	f000 feb8 	bl	8003e30 <MAX72_Change_Data>
			while (display.data[display.current_index].data != &robot->pid->base_angle_sp) {
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b51      	ldr	r3, [pc, #324]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030ca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	330c      	adds	r3, #12
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1ef      	bne.n	80030b8 <Robot_read_serial_msg+0xc0>
 80030d8:	e007      	b.n	80030ea <Robot_read_serial_msg+0xf2>
			}
		} else {
			MAX72_Remove_Data(&display, &base_angle_data);
 80030da:	494c      	ldr	r1, [pc, #304]	@ (800320c <Robot_read_serial_msg+0x214>)
 80030dc:	484c      	ldr	r0, [pc, #304]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030de:	f000 fd51 	bl	8003b84 <MAX72_Remove_Data>
			MAX72_Resume_Changing_Data(&display, 1); // Resume changing data
 80030e2:	2101      	movs	r1, #1
 80030e4:	484a      	ldr	r0, [pc, #296]	@ (8003210 <Robot_read_serial_msg+0x218>)
 80030e6:	f000 ff21 	bl	8003f2c <MAX72_Resume_Changing_Data>
		}
    }

    if (base_angle_config) {
 80030ea:	7efb      	ldrb	r3, [r7, #27]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d060      	beq.n	80031b2 <Robot_read_serial_msg+0x1ba>
    	robot->pid->js_multiplier_sp = 1.0f; // Fixed speed multiplier in base angle mode
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24
        if (fabs(js_y) > last_base_angle_stick_val && fabs(js_y) >= 0.1f) {
 80030fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80030fe:	eeb0 7ae7 	vabs.f32	s14, s15
 8003102:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <Robot_read_serial_msg+0x210>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	dd47      	ble.n	80031a2 <Robot_read_serial_msg+0x1aa>
 8003112:	edd7 7a07 	vldr	s15, [r7, #28]
 8003116:	eef0 7ae7 	vabs.f32	s15, s15
 800311a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003214 <Robot_read_serial_msg+0x21c>
 800311e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	db3c      	blt.n	80031a2 <Robot_read_serial_msg+0x1aa>
            robot->pid->base_angle_sp += js_y * 0.02f; // Map joystick Y to base angle setpoint
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003130:	edd7 7a07 	vldr	s15, [r7, #28]
 8003134:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003218 <Robot_read_serial_msg+0x220>
 8003138:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	edc3 7a03 	vstr	s15, [r3, #12]
            if (robot->pid->base_angle_sp > robot->pid->max_angle_offset)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	dd06      	ble.n	8003170 <Robot_read_serial_msg+0x178>
                robot->pid->base_angle_sp = robot->pid->max_angle_offset;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	e018      	b.n	80031a2 <Robot_read_serial_msg+0x1aa>
            else if (robot->pid->base_angle_sp < -robot->pid->max_angle_offset)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	ed93 7a03 	vldr	s14, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003180:	eef1 7a67 	vneg.f32	s15, s15
 8003184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	d509      	bpl.n	80031a2 <Robot_read_serial_msg+0x1aa>
                robot->pid->base_angle_sp = -robot->pid->max_angle_offset;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	eef1 7a67 	vneg.f32	s15, s15
 800319e:	edc3 7a03 	vstr	s15, [r3, #12]
        }
        last_base_angle_stick_val = fabs(js_y);
 80031a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80031a6:	eef0 7ae7 	vabs.f32	s15, s15
 80031aa:	4b17      	ldr	r3, [pc, #92]	@ (8003208 <Robot_read_serial_msg+0x210>)
 80031ac:	edc3 7a00 	vstr	s15, [r3]
 80031b0:	e024      	b.n	80031fc <Robot_read_serial_msg+0x204>
    } else {
    	robot->pid->js_multiplier_sp = js_x > 0.0f ? 1-js_x: -1-js_x; // 0.5 to 1.0 with sign
 80031b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80031b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031be:	dd06      	ble.n	80031ce <Robot_read_serial_msg+0x1d6>
 80031c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80031c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031cc:	e005      	b.n	80031da <Robot_read_serial_msg+0x1e2>
 80031ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80031d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80031d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        robot->pid->js_angle_offset_sp = js_y * max_angle_offset; // Map joystick Y to speed setpoint
 80031e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <Robot_read_serial_msg+0x224>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	edc3 7a06 	vstr	s15, [r3, #24]
 80031f8:	e000      	b.n	80031fc <Robot_read_serial_msg+0x204>
        return;
 80031fa:	bf00      	nop
    }
}
 80031fc:	3728      	adds	r7, #40	@ 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	080100ac 	.word	0x080100ac
 8003208:	20000bf0 	.word	0x20000bf0
 800320c:	20000010 	.word	0x20000010
 8003210:	20000bf8 	.word	0x20000bf8
 8003214:	3dcccccd 	.word	0x3dcccccd
 8003218:	3ca3d70a 	.word	0x3ca3d70a
 800321c:	20000008 	.word	0x20000008

08003220 <PID_Init>:


void PID_Init(pid_t *pid){
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	pid->Kp = -2.0f;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800322e:	601a      	str	r2, [r3, #0]
	pid->Ki = -20.0f;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <PID_Init+0x88>)
 8003234:	605a      	str	r2, [r3, #4]
	pid->Kd = -0.06f;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1c      	ldr	r2, [pc, #112]	@ (80032ac <PID_Init+0x8c>)
 800323a:	609a      	str	r2, [r3, #8]

	pid->base_angle_sp = 0.75f;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f04f 527d 	mov.w	r2, #1061158912	@ 0x3f400000
 8003242:	60da      	str	r2, [r3, #12]

	pid->js_angle_offset_sp = 0.0f;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
	pid->js_angle_offset = 0.0f;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	61da      	str	r2, [r3, #28]

	pid->js_multiplier = 1.0f;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800325a:	621a      	str	r2, [r3, #32]
	pid->js_multiplier_sp = 1.0f;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->Kp_speed = 0.4f;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <PID_Init+0x90>)
 8003268:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->Ki_speed = 0.0f;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->Kd_speed = 0.0008f;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0f      	ldr	r2, [pc, #60]	@ (80032b4 <PID_Init+0x94>)
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30

    pid->speed_sp = 0.0f; // Do not change, change via joystick
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	@ 0x34

    pid->max_angle_offset = 2.0f;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->angle_sp = 0.0f; // Do not change, it is only for CubeMonitor
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44

    pid->active = 0;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    PID_Reset(pid);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f9eb 	bl	8003674 <PID_Reset>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	c1a00000 	.word	0xc1a00000
 80032ac:	bd75c28f 	.word	0xbd75c28f
 80032b0:	3ecccccd 	.word	0x3ecccccd
 80032b4:	3a51b717 	.word	0x3a51b717

080032b8 <PID_Update>:

void PID_Update(pid_t *pid) {
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
    float speed_err = pid->speed_sp - (encoder_r.speed + encoder_l.speed)/2.0f;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80032c6:	4bc9      	ldr	r3, [pc, #804]	@ (80035ec <PID_Update+0x334>)
 80032c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80032cc:	4bc8      	ldr	r3, [pc, #800]	@ (80035f0 <PID_Update+0x338>)
 80032ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032d6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80032da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e2:	edc7 7a06 	vstr	s15, [r7, #24]

    pid->integral_speed_err += speed_err * SAMPLING_PERIOD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80032ec:	4bc1      	ldr	r3, [pc, #772]	@ (80035f4 <PID_Update+0x33c>)
 80032ee:	edd3 6a00 	vldr	s13, [r3]
 80032f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    float derivative_speed_err = (speed_err - pid->last_speed_err)/SAMPLING_PERIOD;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800330a:	ed97 7a06 	vldr	s14, [r7, #24]
 800330e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003312:	4bb8      	ldr	r3, [pc, #736]	@ (80035f4 <PID_Update+0x33c>)
 8003314:	ed93 7a00 	vldr	s14, [r3]
 8003318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331c:	edc7 7a05 	vstr	s15, [r7, #20]

    float angle_offset = pid->Kp_speed * speed_err + pid->Ki_speed * pid->integral_speed_err + pid->Kd_speed * derivative_speed_err;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003326:	edd7 7a06 	vldr	s15, [r7, #24]
 800332a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800333a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8003348:	edd7 7a05 	vldr	s15, [r7, #20]
 800334c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	edc7 7a07 	vstr	s15, [r7, #28]

    if (angle_offset > pid->max_angle_offset) angle_offset = pid->max_angle_offset;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800335e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	dd03      	ble.n	8003374 <PID_Update+0xbc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e012      	b.n	800339a <PID_Update+0xe2>
    else if (angle_offset < -pid->max_angle_offset) angle_offset = -pid->max_angle_offset;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800337a:	eef1 7a67 	vneg.f32	s15, s15
 800337e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d506      	bpl.n	800339a <PID_Update+0xe2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003392:	eef1 7a67 	vneg.f32	s15, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->js_angle_offset = alpha * pid->js_angle_offset_sp + (1.0f - alpha) * pid->js_angle_offset;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	ed93 7a06 	vldr	s14, [r3, #24]
 80033a0:	4b95      	ldr	r3, [pc, #596]	@ (80035f8 <PID_Update+0x340>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033aa:	4b93      	ldr	r3, [pc, #588]	@ (80035f8 <PID_Update+0x340>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80033be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->angle_sp = pid->base_angle_sp + angle_offset + pid->js_angle_offset;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80033d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80033d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80033e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	float error = pid->angle_sp - imu.angle;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80033f0:	4b82      	ldr	r3, [pc, #520]	@ (80035fc <PID_Update+0x344>)
 80033f2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80033f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fa:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->integral_error += error * SAMPLING_PERIOD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	ed93 7a04 	vldr	s14, [r3, #16]
 8003404:	4b7b      	ldr	r3, [pc, #492]	@ (80035f4 <PID_Update+0x33c>)
 8003406:	edd3 6a00 	vldr	s13, [r3]
 800340a:	edd7 7a04 	vldr	s15, [r7, #16]
 800340e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	edc3 7a04 	vstr	s15, [r3, #16]
	float derivative_error = (error - pid->last_error)/SAMPLING_PERIOD;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003422:	ed97 7a04 	vldr	s14, [r7, #16]
 8003426:	ee77 6a67 	vsub.f32	s13, s14, s15
 800342a:	4b72      	ldr	r3, [pc, #456]	@ (80035f4 <PID_Update+0x33c>)
 800342c:	ed93 7a00 	vldr	s14, [r3]
 8003430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003434:	edc7 7a03 	vstr	s15, [r7, #12]

	float speed_setpoint = pid->Kp * error + 
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	ed93 7a00 	vldr	s14, [r3]
 800343e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003442:	ee27 7a27 	vmul.f32	s14, s14, s15
                            pid->Ki * pid->integral_error +
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edd3 6a01 	vldr	s13, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003452:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 8003456:	ee37 7a27 	vadd.f32	s14, s14, s15
                            pid->Kd * derivative_error;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003460:	edd7 7a03 	vldr	s15, [r7, #12]
 8003464:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 8003468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346c:	edc7 7a02 	vstr	s15, [r7, #8]

	pid->js_multiplier = alpha * pid->js_multiplier_sp + (1.0f - alpha) * pid->js_multiplier;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003476:	4b60      	ldr	r3, [pc, #384]	@ (80035f8 <PID_Update+0x340>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003480:	4b5d      	ldr	r3, [pc, #372]	@ (80035f8 <PID_Update+0x340>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800348a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edd3 7a08 	vldr	s15, [r3, #32]
 8003494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	edc3 7a08 	vstr	s15, [r3, #32]

    if (fabs(error) > 20.0f) {
 80034a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80034a6:	eef0 7ae7 	vabs.f32	s15, s15
 80034aa:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80034ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	dd0d      	ble.n	80034d4 <PID_Update+0x21c>
        set_speed(&stepper_l, 0.0f);
 80034b8:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8003600 <PID_Update+0x348>
 80034bc:	4851      	ldr	r0, [pc, #324]	@ (8003604 <PID_Update+0x34c>)
 80034be:	f000 f9f7 	bl	80038b0 <set_speed>
        set_speed(&stepper_r, 0.0f);
 80034c2:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8003600 <PID_Update+0x348>
 80034c6:	4850      	ldr	r0, [pc, #320]	@ (8003608 <PID_Update+0x350>)
 80034c8:	f000 f9f2 	bl	80038b0 <set_speed>
        PID_Reset(pid);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8d1 	bl	8003674 <PID_Reset>
 80034d2:	e0bf      	b.n	8003654 <PID_Update+0x39c>
    }else {
		if(pid->js_multiplier > 0.9f || pid->js_multiplier < -0.9f){
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80034da:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800360c <PID_Update+0x354>
 80034de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	dc09      	bgt.n	80034fc <PID_Update+0x244>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80034ee:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003610 <PID_Update+0x358>
 80034f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	d50a      	bpl.n	8003512 <PID_Update+0x25a>
			set_speed(&stepper_l, speed_setpoint);
 80034fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003500:	4840      	ldr	r0, [pc, #256]	@ (8003604 <PID_Update+0x34c>)
 8003502:	f000 f9d5 	bl	80038b0 <set_speed>
			set_speed(&stepper_r, speed_setpoint);
 8003506:	ed97 0a02 	vldr	s0, [r7, #8]
 800350a:	483f      	ldr	r0, [pc, #252]	@ (8003608 <PID_Update+0x350>)
 800350c:	f000 f9d0 	bl	80038b0 <set_speed>
 8003510:	e0a0      	b.n	8003654 <PID_Update+0x39c>
		} else if (pid->js_multiplier > 0.0f) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	edd3 7a08 	vldr	s15, [r3, #32]
 8003518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	dd3f      	ble.n	80035a2 <PID_Update+0x2ea>
			set_speed(&stepper_l, speed_setpoint);
 8003522:	ed97 0a02 	vldr	s0, [r7, #8]
 8003526:	4837      	ldr	r0, [pc, #220]	@ (8003604 <PID_Update+0x34c>)
 8003528:	f000 f9c2 	bl	80038b0 <set_speed>
			set_speed(&stepper_r, speed_setpoint * (pid->js_multiplier/2 + (fabs(pid->js_angle_offset) < 0.3f ? 0 : 0.5)));
 800352c:	68b8      	ldr	r0, [r7, #8]
 800352e:	f7fd f83b 	bl	80005a8 <__aeabi_f2d>
 8003532:	4604      	mov	r4, r0
 8003534:	460d      	mov	r5, r1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	edd3 7a08 	vldr	s15, [r3, #32]
 800353c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003540:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003544:	ee16 0a90 	vmov	r0, s13
 8003548:	f7fd f82e 	bl	80005a8 <__aeabi_f2d>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	edd1 7a07 	vldr	s15, [r1, #28]
 8003556:	eef0 7ae7 	vabs.f32	s15, s15
 800355a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003614 <PID_Update+0x35c>
 800355e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	d504      	bpl.n	8003572 <PID_Update+0x2ba>
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	e002      	b.n	8003578 <PID_Update+0x2c0>
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	4928      	ldr	r1, [pc, #160]	@ (8003618 <PID_Update+0x360>)
 8003578:	f7fc feb8 	bl	80002ec <__adddf3>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fd f868 	bl	8000658 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	f7fd fb5a 	bl	8000c48 <__aeabi_d2f>
 8003594:	4603      	mov	r3, r0
 8003596:	ee00 3a10 	vmov	s0, r3
 800359a:	481b      	ldr	r0, [pc, #108]	@ (8003608 <PID_Update+0x350>)
 800359c:	f000 f988 	bl	80038b0 <set_speed>
 80035a0:	e058      	b.n	8003654 <PID_Update+0x39c>
		} else {
			set_speed(&stepper_l, speed_setpoint * (-pid->js_multiplier/2 + (fabs(pid->js_angle_offset) < 0.3f ? 0 : 0.5)));
 80035a2:	68b8      	ldr	r0, [r7, #8]
 80035a4:	f7fd f800 	bl	80005a8 <__aeabi_f2d>
 80035a8:	4604      	mov	r4, r0
 80035aa:	460d      	mov	r5, r1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80035b2:	eef1 7a67 	vneg.f32	s15, s15
 80035b6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80035ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035be:	ee16 0a90 	vmov	r0, s13
 80035c2:	f7fc fff1 	bl	80005a8 <__aeabi_f2d>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	edd1 7a07 	vldr	s15, [r1, #28]
 80035d0:	eef0 7ae7 	vabs.f32	s15, s15
 80035d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003614 <PID_Update+0x35c>
 80035d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d51c      	bpl.n	800361c <PID_Update+0x364>
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	e01a      	b.n	8003622 <PID_Update+0x36a>
 80035ec:	20000a3c 	.word	0x20000a3c
 80035f0:	20000a78 	.word	0x20000a78
 80035f4:	20000a34 	.word	0x20000a34
 80035f8:	2000000c 	.word	0x2000000c
 80035fc:	20000ab4 	.word	0x20000ab4
 8003600:	00000000 	.word	0x00000000
 8003604:	20000a90 	.word	0x20000a90
 8003608:	20000a54 	.word	0x20000a54
 800360c:	3f666666 	.word	0x3f666666
 8003610:	bf666666 	.word	0xbf666666
 8003614:	3e99999a 	.word	0x3e99999a
 8003618:	3fe00000 	.word	0x3fe00000
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	4911      	ldr	r1, [pc, #68]	@ (8003668 <PID_Update+0x3b0>)
 8003622:	f7fc fe63 	bl	80002ec <__adddf3>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4620      	mov	r0, r4
 800362c:	4629      	mov	r1, r5
 800362e:	f7fd f813 	bl	8000658 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f7fd fb05 	bl	8000c48 <__aeabi_d2f>
 800363e:	4603      	mov	r3, r0
 8003640:	ee00 3a10 	vmov	s0, r3
 8003644:	4809      	ldr	r0, [pc, #36]	@ (800366c <PID_Update+0x3b4>)
 8003646:	f000 f933 	bl	80038b0 <set_speed>
			set_speed(&stepper_r, speed_setpoint);
 800364a:	ed97 0a02 	vldr	s0, [r7, #8]
 800364e:	4808      	ldr	r0, [pc, #32]	@ (8003670 <PID_Update+0x3b8>)
 8003650:	f000 f92e 	bl	80038b0 <set_speed>
		}
    }

    pid->last_speed_err = speed_err;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->last_error = error;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	615a      	str	r2, [r3, #20]
}
 8003660:	bf00      	nop
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bdb0      	pop	{r4, r5, r7, pc}
 8003668:	3fe00000 	.word	0x3fe00000
 800366c:	20000a90 	.word	0x20000a90
 8003670:	20000a54 	.word	0x20000a54

08003674 <PID_Reset>:

void PID_Reset(pid_t *pid) {
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
    pid->integral_error = 0.0f;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
    pid->integral_speed_err = 0.0f;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	639a      	str	r2, [r3, #56]	@ 0x38
    pid->last_error = 0.0f;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
    pid->last_speed_err = 0.0f;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	@ 0x3c

    pid->js_angle_offset_sp = 0.0f;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
    pid->js_angle_offset = 0.0f;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
    pid->js_multiplier_sp = 1.0f;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->js_multiplier = 1.0f;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <speed_control>:
#define AEP 30 // Actual Error Proportional gain
#define LEP 205 // Last Error Proportional gain

float freq = 0.0f; // Frequency in Hz

void speed_control(stepper_t *stepper){
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff f845 	bl	8002764 <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	edc7 7a03 	vstr	s15, [r7, #12]

	// stepper->frequency += e / ANGLE_STEP; // Integral only controller

	stepper->frequency += e * AEP + stepper->last_error * LEP; // PI controller
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80036f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80036fa:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 80036fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 800389c <speed_control+0x1d4>
 800370c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	edc3 7a03 	vstr	s15, [r3, #12]
	stepper->last_error = e;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

	uint8_t sign = stepper->frequency > 0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	edd3 7a03 	vldr	s15, [r3, #12]
 800372a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	bfcc      	ite	gt
 8003734:	2301      	movgt	r3, #1
 8003736:	2300      	movle	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency; // Store frequency for debugging
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <speed_control+0x1d8>)
 8003742:	6013      	str	r3, [r2, #0]

	if (fabs(stepper->frequency) > MAX_CTRL_FREQUENCY) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	edd3 7a03 	vldr	s15, [r3, #12]
 800374a:	eef0 7ae7 	vabs.f32	s15, s15
 800374e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80038a4 <speed_control+0x1dc>
 8003752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	dd3c      	ble.n	80037d6 <speed_control+0x10e>
		stepper->frequency = MAX_CTRL_FREQUENCY * (sign?1:-1); // Limit frequency to 9000 Hz
 800375c:	7afb      	ldrb	r3, [r7, #11]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <speed_control+0xa0>
 8003762:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003766:	e001      	b.n	800376c <speed_control+0xa4>
 8003768:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800376c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80038a4 <speed_control+0x1dc>
 8003770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edc3 7a03 	vstr	s15, [r3, #12]
		stepper->last_error = (sign && stepper->last_error>0) || (!sign && stepper->last_error<0) ? 0 : stepper->last_error; // Reset last error if the direction has changed
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00f      	beq.n	80037a0 <speed_control+0xd8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	bfcc      	ite	gt
 8003790:	2301      	movgt	r3, #1
 8003792:	2300      	movle	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f083 0301 	eor.w	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <speed_control+0x104>
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <speed_control+0xfe>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	bf4c      	ite	mi
 80037b6:	2301      	movmi	r3, #1
 80037b8:	2300      	movpl	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f083 0301 	eor.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <speed_control+0x104>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	e001      	b.n	80037d0 <speed_control+0x108>
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e00f      	b.n	80037f6 <speed_control+0x12e>
	} else if (fabs(stepper->frequency) < 20) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80037dc:	eef0 7ae7 	vabs.f32	s15, s15
 80037e0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80037e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	d503      	bpl.n	80037f6 <speed_control+0x12e>
		stepper->frequency = 0; // Stop the motor if frequency is too low
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69d8      	ldr	r0, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8c19      	ldrh	r1, [r3, #32]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	dc06      	bgt.n	8003818 <speed_control+0x150>
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e000      	b.n	800381a <speed_control+0x152>
 8003818:	7afb      	ldrb	r3, [r7, #11]
 800381a:	461a      	mov	r2, r3
 800381c:	f002 fda6 	bl	800636c <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	ed93 7a03 	vldr	s14, [r3, #12]
 8003826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800382a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382e:	eef0 7ae7 	vabs.f32	s15, s15
 8003832:	ee17 0a90 	vmov	r0, s15
 8003836:	f7fc feb7 	bl	80005a8 <__aeabi_f2d>
 800383a:	4604      	mov	r4, r0
 800383c:	460d      	mov	r5, r1
 800383e:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <speed_control+0x1e0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fe8e 	bl	8000564 <__aeabi_ui2d>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	f7fc ff02 	bl	8000658 <__aeabi_dmul>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <speed_control+0x1e4>)
 8003862:	f7fc fd41 	bl	80002e8 <__aeabi_dsub>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695c      	ldr	r4, [r3, #20]
 8003872:	f7fd f9c9 	bl	8000c08 <__aeabi_d2uiz>
 8003876:	4603      	mov	r3, r0
 8003878:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2201      	movs	r2, #1
 8003890:	615a      	str	r2, [r3, #20]
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bdb0      	pop	{r4, r5, r7, pc}
 800389a:	bf00      	nop
 800389c:	434d0000 	.word	0x434d0000
 80038a0:	20000bf4 	.word	0x20000bf4
 80038a4:	460ca000 	.word	0x460ca000
 80038a8:	20000a38 	.word	0x20000a38
 80038ac:	3ff00000 	.word	0x3ff00000

080038b0 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	609a      	str	r2, [r3, #8]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a34      	ldr	r2, [pc, #208]	@ (80039b4 <Stepper_init+0xe4>)
 80038e2:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8bba      	ldrh	r2, [r7, #28]
 80038f6:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d838      	bhi.n	8003970 <Stepper_init+0xa0>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <Stepper_init+0x34>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003939 	.word	0x08003939
 8003908:	08003971 	.word	0x08003971
 800390c:	08003971 	.word	0x08003971
 8003910:	08003971 	.word	0x08003971
 8003914:	08003947 	.word	0x08003947
 8003918:	08003971 	.word	0x08003971
 800391c:	08003971 	.word	0x08003971
 8003920:	08003971 	.word	0x08003971
 8003924:	08003955 	.word	0x08003955
 8003928:	08003971 	.word	0x08003971
 800392c:	08003971 	.word	0x08003971
 8003930:	08003971 	.word	0x08003971
 8003934:	08003963 	.word	0x08003963
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	619a      	str	r2, [r3, #24]
		break;
 8003944:	e018      	b.n	8003978 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	619a      	str	r2, [r3, #24]
		break;
 8003952:	e011      	b.n	8003978 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	619a      	str	r2, [r3, #24]
		break;
 8003960:	e00a      	b.n	8003978 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	619a      	str	r2, [r3, #24]
		break;
 800396e:	e003      	b.n	8003978 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
		break;
 8003976:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	3a80adff 	.word	0x3a80adff

080039b8 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]
 80039c4:	e035      	b.n	8003a32 <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 80039c6:	2300      	movs	r3, #0
 80039c8:	75bb      	strb	r3, [r7, #22]
 80039ca:	e01a      	b.n	8003a02 <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 80039cc:	7dfa      	ldrb	r2, [r7, #23]
 80039ce:	7dbb      	ldrb	r3, [r7, #22]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4929      	ldr	r1, [pc, #164]	@ (8003a78 <MAX72_init+0xc0>)
 80039d4:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80039d8:	3318      	adds	r3, #24
 80039da:	443b      	add	r3, r7
 80039dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	7dba      	ldrb	r2, [r7, #22]
 80039e4:	0052      	lsls	r2, r2, #1
 80039e6:	3201      	adds	r2, #1
 80039e8:	4923      	ldr	r1, [pc, #140]	@ (8003a78 <MAX72_init+0xc0>)
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	440b      	add	r3, r1
 80039ee:	7859      	ldrb	r1, [r3, #1]
 80039f0:	f102 0318 	add.w	r3, r2, #24
 80039f4:	443b      	add	r3, r7
 80039f6:	460a      	mov	r2, r1
 80039f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 80039fc:	7dbb      	ldrb	r3, [r7, #22]
 80039fe:	3301      	adds	r3, #1
 8003a00:	75bb      	strb	r3, [r7, #22]
 8003a02:	7dbb      	ldrb	r3, [r7, #22]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d9e1      	bls.n	80039cc <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	481b      	ldr	r0, [pc, #108]	@ (8003a7c <MAX72_init+0xc4>)
 8003a0e:	f002 fcad 	bl	800636c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8003a12:	f107 010c 	add.w	r1, r7, #12
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4818      	ldr	r0, [pc, #96]	@ (8003a80 <MAX72_init+0xc8>)
 8003a1e:	f004 fe5a 	bl	80086d6 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8003a22:	2201      	movs	r2, #1
 8003a24:	2110      	movs	r1, #16
 8003a26:	4815      	ldr	r0, [pc, #84]	@ (8003a7c <MAX72_init+0xc4>)
 8003a28:	f002 fca0 	bl	800636c <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d9c6      	bls.n	80039c6 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 8003a60:	f001 f978 	bl	8004d54 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 8003a6a:	f000 f847 	bl	8003afc <MAX72_Clear>
}
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	08010114 	.word	0x08010114
 8003a7c:	40020400 	.word	0x40020400
 8003a80:	200006ec 	.word	0x200006ec

08003a84 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]
 8003a94:	e014      	b.n	8003ac0 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	443b      	add	r3, r7
 8003a9e:	79fa      	ldrb	r2, [r7, #7]
 8003aa0:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	3301      	adds	r3, #1
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	443b      	add	r3, r7
 8003ab6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	3301      	adds	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d9e7      	bls.n	8003a96 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2110      	movs	r1, #16
 8003aca:	480a      	ldr	r0, [pc, #40]	@ (8003af4 <MAX72_SendRow+0x70>)
 8003acc:	f002 fc4e 	bl	800636c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8003ad0:	f107 010c 	add.w	r1, r7, #12
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ad8:	2208      	movs	r2, #8
 8003ada:	4807      	ldr	r0, [pc, #28]	@ (8003af8 <MAX72_SendRow+0x74>)
 8003adc:	f004 fdfb 	bl	80086d6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2110      	movs	r1, #16
 8003ae4:	4803      	ldr	r0, [pc, #12]	@ (8003af4 <MAX72_SendRow+0x70>)
 8003ae6:	f002 fc41 	bl	800636c <HAL_GPIO_WritePin>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40020400 	.word	0x40020400
 8003af8:	200006ec 	.word	0x200006ec

08003afc <MAX72_Clear>:

void MAX72_Clear(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 8003b02:	2300      	movs	r3, #0
 8003b04:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 8003b06:	2301      	movs	r3, #1
 8003b08:	71fb      	strb	r3, [r7, #7]
 8003b0a:	e008      	b.n	8003b1e <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 8003b0c:	463a      	mov	r2, r7
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ffb6 	bl	8003a84 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	71fb      	strb	r3, [r7, #7]
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d9f3      	bls.n	8003b0c <MAX72_Clear+0x10>
	    }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	d813      	bhi.n	8003b6a <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	460a      	mov	r2, r1
 8003b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b56:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d103      	bne.n	8003b7c <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 8003b74:	2101      	movs	r1, #1
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f95a 	bl	8003e30 <MAX72_Change_Data>
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <MAX72_Remove_Data>:

void MAX72_Remove_Data(display_t *display, display_data_t *data) {
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	if (display->data_count == 0) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d043      	beq.n	8003c20 <MAX72_Remove_Data+0x9c>
		return; // Non ci sono dati da rimuovere
	}

	for (uint8_t i = 0; i < display->data_count; i++) {
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e039      	b.n	8003c12 <MAX72_Remove_Data+0x8e>
		if (display->data[i].data == data->data){
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d12e      	bne.n	8003c0c <MAX72_Remove_Data+0x88>
			// Sposta gli elementi successivi indietro
			for (uint8_t j = i; j < display->data_count - 1; j++) {
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	73bb      	strb	r3, [r7, #14]
 8003bb2:	e00f      	b.n	8003bd4 <MAX72_Remove_Data+0x50>
				display->data[j] = display->data[j + 1];
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4403      	add	r3, r0
 8003bc2:	00d2      	lsls	r2, r2, #3
 8003bc4:	440a      	add	r2, r1
 8003bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bca:	e883 0003 	stmia.w	r3, {r0, r1}
			for (uint8_t j = i; j < display->data_count - 1; j++) {
 8003bce:	7bbb      	ldrb	r3, [r7, #14]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	73bb      	strb	r3, [r7, #14]
 8003bd4:	7bba      	ldrb	r2, [r7, #14]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	429a      	cmp	r2, r3
 8003be0:	dbe8      	blt.n	8003bb4 <MAX72_Remove_Data+0x30>
			}
			display->data_count--; // Decrementa il conteggio dei dati
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			if (display->current_index >= display->data_count) {
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d310      	bcc.n	8003c24 <MAX72_Remove_Data+0xa0>
				display->current_index = 0; // Resetta l'indice corrente se necessario
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			}
			break; // Esci dal ciclo dopo aver rimosso il dato
 8003c0a:	e00b      	b.n	8003c24 <MAX72_Remove_Data+0xa0>
	for (uint8_t i = 0; i < display->data_count; i++) {
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3bf      	bcc.n	8003b9e <MAX72_Remove_Data+0x1a>
 8003c1e:	e002      	b.n	8003c26 <MAX72_Remove_Data+0xa2>
		return; // Non ci sono dati da rimuovere
 8003c20:	bf00      	nop
 8003c22:	e000      	b.n	8003c26 <MAX72_Remove_Data+0xa2>
			break; // Esci dal ciclo dopo aver rimosso il dato
 8003c24:	bf00      	nop
		}
	}
}
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <MAX72_Update_Data>:

void MAX72_Update_Data(display_t *display) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80e8 	beq.w	8003e14 <MAX72_Update_Data+0x1e4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80e2 	beq.w	8003e14 <MAX72_Update_Data+0x1e4>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	f200 80df 	bhi.w	8003e26 <MAX72_Update_Data+0x1f6>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <MAX72_Update_Data+0x40>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003d9d 	.word	0x08003d9d
 8003c78:	08003dcd 	.word	0x08003dcd
 8003c7c:	08003de7 	.word	0x08003de7
		case PRINT_INT:
			switch(current_data->type) {
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	799b      	ldrb	r3, [r3, #6]
 8003c84:	2b09      	cmp	r3, #9
 8003c86:	f200 80c7 	bhi.w	8003e18 <MAX72_Update_Data+0x1e8>
 8003c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <MAX72_Update_Data+0x60>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003ccd 	.word	0x08003ccd
 8003c98:	08003ce3 	.word	0x08003ce3
 8003c9c:	08003cf9 	.word	0x08003cf9
 8003ca0:	08003d0f 	.word	0x08003d0f
 8003ca4:	08003d25 	.word	0x08003d25
 8003ca8:	08003d3d 	.word	0x08003d3d
 8003cac:	08003d55 	.word	0x08003d55
 8003cb0:	08003d69 	.word	0x08003d69
 8003cb4:	08003d7f 	.word	0x08003d7f
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	795b      	ldrb	r3, [r3, #5]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 fbe5 	bl	8004494 <MAX72_Print_Int>
					break;
 8003cca:	e066      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	795b      	ldrb	r3, [r3, #5]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fbda 	bl	8004494 <MAX72_Print_Int>
					break;
 8003ce0:	e05b      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	795b      	ldrb	r3, [r3, #5]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f000 fbcf 	bl	8004494 <MAX72_Print_Int>
					break;
 8003cf6:	e050      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	795b      	ldrb	r3, [r3, #5]
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f000 fbc4 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d0c:	e045      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	795b      	ldrb	r3, [r3, #5]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f000 fbb9 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d22:	e03a      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f993 3000 	ldrsb.w	r3, [r3]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	795b      	ldrb	r3, [r3, #5]
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 fbad 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d3a:	e02e      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	795b      	ldrb	r3, [r3, #5]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f000 fba1 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d52:	e022      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	795b      	ldrb	r3, [r3, #5]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f000 fb97 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d66:	e018      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	795b      	ldrb	r3, [r3, #5]
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 fb8c 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d7c:	e00d      	b.n	8003d9a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	ee17 0a90 	vmov	r0, s15
 8003d94:	f000 fb7e 	bl	8004494 <MAX72_Print_Int>
					break;
 8003d98:	bf00      	nop
			}
			break;
 8003d9a:	e03d      	b.n	8003e18 <MAX72_Update_Data+0x1e8>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	799b      	ldrb	r3, [r3, #6]
 8003da0:	2b09      	cmp	r3, #9
 8003da2:	d13b      	bne.n	8003e1c <MAX72_Update_Data+0x1ec>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings == 2);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	79da      	ldrb	r2, [r3, #7]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	795b      	ldrb	r3, [r3, #5]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc6:	f000 fbc1 	bl	800454c <MAX72_Print_Float>
			}
			break;
 8003dca:	e027      	b.n	8003e1c <MAX72_Update_Data+0x1ec>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	799b      	ldrb	r3, [r3, #6]
 8003dd0:	2b0a      	cmp	r3, #10
 8003dd2:	d125      	bne.n	8003e20 <MAX72_Update_Data+0x1f0>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	795b      	ldrb	r3, [r3, #5]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 f8d8 	bl	8003f94 <MAX72_Print_String>
			}
			break;
 8003de4:	e01c      	b.n	8003e20 <MAX72_Update_Data+0x1f0>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	799b      	ldrb	r3, [r3, #6]
 8003dea:	2b0a      	cmp	r3, #10
 8003dec:	d11a      	bne.n	8003e24 <MAX72_Update_Data+0x1f4>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <MAX72_Update_Data+0x1fc>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7fc fa09 	bl	8000210 <strcmp>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <MAX72_Update_Data+0x1f4>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 8003e04:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <MAX72_Update_Data+0x1fc>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a07      	ldr	r2, [pc, #28]	@ (8003e2c <MAX72_Update_Data+0x1fc>)
 8003e10:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8003e12:	e007      	b.n	8003e24 <MAX72_Update_Data+0x1f4>
		return; // Non ci sono dati da visualizzare
 8003e14:	bf00      	nop
 8003e16:	e006      	b.n	8003e26 <MAX72_Update_Data+0x1f6>
			break;
 8003e18:	bf00      	nop
 8003e1a:	e004      	b.n	8003e26 <MAX72_Update_Data+0x1f6>
			break;
 8003e1c:	bf00      	nop
 8003e1e:	e002      	b.n	8003e26 <MAX72_Update_Data+0x1f6>
			break;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <MAX72_Update_Data+0x1f6>
			break;
 8003e24:	bf00      	nop
	}
}
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000c64 	.word	0x20000c64

08003e30 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d055      	beq.n	8003ef2 <MAX72_Change_Data+0xc2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <MAX72_Change_Data+0x26>
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d04d      	beq.n	8003ef2 <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 8003e56:	f000 ff7d 	bl	8004d54 <HAL_GetTick>
 8003e5a:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <MAX72_Change_Data+0x4e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e70:	4619      	mov	r1, r3
 8003e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d33b      	bcc.n	8003ef6 <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e84:	3301      	adds	r3, #1
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8003e8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e90:	fb01 f202 	mul.w	r2, r1, r2
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	791b      	ldrb	r3, [r3, #4]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d113      	bne.n	8003ede <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 8003eb6:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <MAX72_Change_Data+0xd0>)
 8003eb8:	7b5b      	ldrb	r3, [r3, #13]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <MAX72_Change_Data+0x98>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d910      	bls.n	8003eea <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fca6 	bl	8004828 <MAX72_Scroll_Start_IT>
 8003edc:	e005      	b.n	8003eea <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 8003ede:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <MAX72_Change_Data+0xd0>)
 8003ee0:	7b5b      	ldrb	r3, [r3, #13]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 8003ee6:	f000 fd05 	bl	80048f4 <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fea0 	bl	8003c30 <MAX72_Update_Data>
 8003ef0:	e002      	b.n	8003ef8 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <MAX72_Change_Data+0xc8>
		return;
 8003ef6:	bf00      	nop
}
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000c64 	.word	0x20000c64

08003f04 <MAX72_Stop_Changing_Data>:

void MAX72_Stop_Changing_Data(display_t *display, uint8_t stop_update) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
	display->change_enabled = 0; // Disabilita il cambio automatico dei dati
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	if (stop_update) {
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <MAX72_Stop_Changing_Data+0x20>
		MAX72_Stop_Updating_Data(display); // Disabilita l'aggiornamento automatico dei dati
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f81b 	bl	8003f5a <MAX72_Stop_Updating_Data>
	}
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <MAX72_Resume_Changing_Data>:

void MAX72_Resume_Changing_Data(display_t *display, uint8_t force_update) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
	display->change_enabled = 1; // Abilita il cambio automatico dei dati
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	MAX72_Resume_Updating_Data(display); // Assicurati che l'aggiornamento sia abilitato
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f818 	bl	8003f76 <MAX72_Resume_Updating_Data>
	if (force_update) {
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <MAX72_Resume_Changing_Data+0x26>
		MAX72_Update_Data(display); // Forza il cambio dei dati
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fe6f 	bl	8003c30 <MAX72_Update_Data>
	}
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <MAX72_Stop_Updating_Data>:

void MAX72_Stop_Updating_Data(display_t *display) {
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	display->update_enabled = 0; // Disabilita l'aggiornamento automatico dei dati
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <MAX72_Resume_Updating_Data>:

void MAX72_Resume_Updating_Data(display_t *display) {
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
	display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b094      	sub	sp, #80	@ 0x50
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fc f995 	bl	80002d0 <strlen>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	f040 8119 	bne.w	80041e6 <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 8003fb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8003fbe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003fc2:	2b07      	cmp	r3, #7
 8003fc4:	d805      	bhi.n	8003fd2 <MAX72_Print_String+0x3e>
 8003fc6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003fca:	f1c3 0308 	rsb	r3, r3, #8
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e000      	b.n	8003fd4 <MAX72_Print_String+0x40>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003fde:	e00b      	b.n	8003ff8 <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8003fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003fe4:	3350      	adds	r3, #80	@ 0x50
 8003fe6:	443b      	add	r3, r7
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8003fee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003ff8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003ffc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	d3ed      	bcc.n	8003fe0 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8004004:	2300      	movs	r3, #0
 8004006:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800400a:	e012      	b.n	8004032 <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 800400c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	441a      	add	r2, r3
 8004014:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8004018:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800401c:	440b      	add	r3, r1
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	3350      	adds	r3, #80	@ 0x50
 8004022:	443b      	add	r3, r7
 8004024:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8004028:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800402c:	3301      	adds	r3, #1
 800402e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8004032:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004036:	2b07      	cmp	r3, #7
 8004038:	d805      	bhi.n	8004046 <MAX72_Print_String+0xb2>
 800403a:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800403e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004042:	429a      	cmp	r2, r3
 8004044:	d3e2      	bcc.n	800400c <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800404c:	e012      	b.n	8004074 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 800404e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004052:	f1c3 0207 	rsb	r2, r3, #7
 8004056:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800405a:	3250      	adds	r2, #80	@ 0x50
 800405c:	443a      	add	r2, r7
 800405e:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8004062:	3350      	adds	r3, #80	@ 0x50
 8004064:	443b      	add	r3, r7
 8004066:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 800406a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800406e:	3301      	adds	r3, #1
 8004070:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004074:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004078:	2b07      	cmp	r3, #7
 800407a:	d9e8      	bls.n	800404e <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 800407c:	2300      	movs	r3, #0
 800407e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004082:	e0aa      	b.n	80041da <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8004088:	2300      	movs	r3, #0
 800408a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800408e:	e090      	b.n	80041b2 <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8004090:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	3350      	adds	r3, #80	@ 0x50
 8004098:	443b      	add	r3, r7
 800409a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800409e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 80040a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	3301      	adds	r3, #1
 80040aa:	3350      	adds	r3, #80	@ 0x50
 80040ac:	443b      	add	r3, r7
 80040ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040b2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 80040c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80040c8:	d913      	bls.n	80040f2 <MAX72_Print_String+0x15e>
 80040ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040ce:	2b39      	cmp	r3, #57	@ 0x39
 80040d0:	d80f      	bhi.n	80040f2 <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 80040d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040d6:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 80040da:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80040de:	49cd      	ldr	r1, [pc, #820]	@ (8004414 <MAX72_Print_String+0x480>)
 80040e0:	00d2      	lsls	r2, r2, #3
 80040e2:	440a      	add	r2, r1
 80040e4:	4413      	add	r3, r2
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80040f0:	e019      	b.n	8004126 <MAX72_Print_String+0x192>
                else if (c1 == '-')
 80040f2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80040f8:	d109      	bne.n	800410e <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 80040fa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80040fe:	4ac5      	ldr	r2, [pc, #788]	@ (8004414 <MAX72_Print_String+0x480>)
 8004100:	4413      	add	r3, r2
 8004102:	7a1b      	ldrb	r3, [r3, #8]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800410c:	e00b      	b.n	8004126 <MAX72_Print_String+0x192>
                else if (c1 == '.')
 800410e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004112:	2b2e      	cmp	r3, #46	@ 0x2e
 8004114:	d107      	bne.n	8004126 <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8004116:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800411a:	4abe      	ldr	r2, [pc, #760]	@ (8004414 <MAX72_Print_String+0x480>)
 800411c:	5cd3      	ldrb	r3, [r2, r3]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8004126:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800412a:	2b2f      	cmp	r3, #47	@ 0x2f
 800412c:	d913      	bls.n	8004156 <MAX72_Print_String+0x1c2>
 800412e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004132:	2b39      	cmp	r3, #57	@ 0x39
 8004134:	d80f      	bhi.n	8004156 <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8004136:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800413a:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 800413e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004142:	49b4      	ldr	r1, [pc, #720]	@ (8004414 <MAX72_Print_String+0x480>)
 8004144:	00d2      	lsls	r2, r2, #3
 8004146:	440a      	add	r2, r1
 8004148:	4413      	add	r3, r2
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8004154:	e019      	b.n	800418a <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8004156:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800415a:	2b2d      	cmp	r3, #45	@ 0x2d
 800415c:	d109      	bne.n	8004172 <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 800415e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004162:	4aac      	ldr	r2, [pc, #688]	@ (8004414 <MAX72_Print_String+0x480>)
 8004164:	4413      	add	r3, r2
 8004166:	7a1b      	ldrb	r3, [r3, #8]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8004170:	e00b      	b.n	800418a <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8004172:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004176:	2b2e      	cmp	r3, #46	@ 0x2e
 8004178:	d107      	bne.n	800418a <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 800417a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800417e:	4aa5      	ldr	r2, [pc, #660]	@ (8004414 <MAX72_Print_String+0x480>)
 8004180:	5cd3      	ldrb	r3, [r2, r3]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 800418a:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	b25a      	sxtb	r2, r3
 8004192:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8004196:	4313      	orrs	r3, r2
 8004198:	b25a      	sxtb	r2, r3
 800419a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	3350      	adds	r3, #80	@ 0x50
 80041a2:	443b      	add	r3, r7
 80041a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 80041a8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80041ac:	3301      	adds	r3, #1
 80041ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80041b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	f67f af6a 	bls.w	8004090 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 80041bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80041c0:	3301      	adds	r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fc5a 	bl	8003a84 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80041d0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80041d4:	3301      	adds	r3, #1
 80041d6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80041da:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80041de:	2b07      	cmp	r3, #7
 80041e0:	f67f af50 	bls.w	8004084 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 80041e4:	e150      	b.n	8004488 <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f040 80d1 	bne.w	8004390 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 80041f2:	23ff      	movs	r3, #255	@ 0xff
 80041f4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80041fe:	e010      	b.n	8004222 <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8004200:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b2e      	cmp	r3, #46	@ 0x2e
 800420c:	d104      	bne.n	8004218 <MAX72_Print_String+0x284>
 800420e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004212:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8004216:	e00a      	b.n	800422e <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8004218:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800421c:	3301      	adds	r3, #1
 800421e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004222:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8004226:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800422a:	429a      	cmp	r2, r3
 800422c:	d3e8      	bcc.n	8004200 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 800422e:	f107 0318 	add.w	r3, r7, #24
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8004244:	e019      	b.n	800427a <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 8004246:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b2e      	cmp	r3, #46	@ 0x2e
 8004252:	d00d      	beq.n	8004270 <MAX72_Print_String+0x2dc>
 8004254:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	441a      	add	r2, r3
 800425c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 8004266:	7812      	ldrb	r2, [r2, #0]
 8004268:	3350      	adds	r3, #80	@ 0x50
 800426a:	443b      	add	r3, r7
 800426c:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8004270:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004274:	3301      	adds	r3, #1
 8004276:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800427a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800427e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004282:	429a      	cmp	r2, r3
 8004284:	d203      	bcs.n	800428e <MAX72_Print_String+0x2fa>
 8004286:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800428a:	2b03      	cmp	r3, #3
 800428c:	d9db      	bls.n	8004246 <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 800428e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004292:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80042a8:	e01c      	b.n	80042e4 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 80042aa:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80042ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d20a      	bcs.n	80042cc <MAX72_Print_String+0x338>
 80042b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80042ba:	1e5a      	subs	r2, r3, #1
 80042bc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	3350      	adds	r3, #80	@ 0x50
 80042c4:	443b      	add	r3, r7
 80042c6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80042ca:	e000      	b.n	80042ce <MAX72_Print_String+0x33a>
 80042cc:	2220      	movs	r2, #32
 80042ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80042d2:	3350      	adds	r3, #80	@ 0x50
 80042d4:	443b      	add	r3, r7
 80042d6:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 80042da:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80042de:	3301      	adds	r3, #1
 80042e0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80042e4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d9de      	bls.n	80042aa <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f2:	e048      	b.n	8004386 <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80042fa:	e01e      	b.n	800433a <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 80042fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004300:	3350      	adds	r3, #80	@ 0x50
 8004302:	443b      	add	r3, r7
 8004304:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004308:	f1a3 0220 	sub.w	r2, r3, #32
 800430c:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8004310:	4841      	ldr	r0, [pc, #260]	@ (8004418 <MAX72_Print_String+0x484>)
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	4403      	add	r3, r0
 800431a:	440b      	add	r3, r1
 800431c:	3301      	adds	r3, #1
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004324:	00d2      	lsls	r2, r2, #3
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	3350      	adds	r3, #80	@ 0x50
 800432a:	443b      	add	r3, r7
 800432c:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8004330:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004334:	3301      	adds	r3, #1
 8004336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800433a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800433e:	2b03      	cmp	r3, #3
 8004340:	d9dc      	bls.n	80042fc <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8004342:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <MAX72_Print_String+0x3d4>
 800434a:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800434e:	3350      	adds	r3, #80	@ 0x50
 8004350:	443b      	add	r3, r7
 8004352:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8004356:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800435a:	f042 0202 	orr.w	r2, r2, #2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	3350      	adds	r3, #80	@ 0x50
 8004362:	443b      	add	r3, r7
 8004364:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 8004368:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800436c:	3301      	adds	r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f107 0214 	add.w	r2, r7, #20
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fb84 	bl	8003a84 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 800437c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004380:	3301      	adds	r3, #1
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004386:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800438a:	2b07      	cmp	r3, #7
 800438c:	d9b2      	bls.n	80042f4 <MAX72_Print_String+0x360>
}
 800438e:	e07b      	b.n	8004488 <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800439a:	e014      	b.n	80043c6 <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 800439c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	441a      	add	r2, r3
 80043ae:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	3350      	adds	r3, #80	@ 0x50
 80043b6:	443b      	add	r3, r7
 80043b8:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80043bc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80043c0:	3301      	adds	r3, #1
 80043c2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80043c6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d805      	bhi.n	80043da <MAX72_Print_String+0x446>
 80043ce:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 80043d2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3e0      	bcc.n	800439c <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 80043da:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80043de:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80043e2:	e00b      	b.n	80043fc <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 80043e4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80043e8:	3350      	adds	r3, #80	@ 0x50
 80043ea:	443b      	add	r3, r7
 80043ec:	2220      	movs	r2, #32
 80043ee:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 80043f2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80043f6:	3301      	adds	r3, #1
 80043f8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80043fc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004400:	2b03      	cmp	r3, #3
 8004402:	d9ef      	bls.n	80043e4 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8004404:	2300      	movs	r3, #0
 8004406:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800440a:	e039      	b.n	8004480 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004412:	e022      	b.n	800445a <MAX72_Print_String+0x4c6>
 8004414:	20000370 	.word	0x20000370
 8004418:	20000018 	.word	0x20000018
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 800441c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004420:	3350      	adds	r3, #80	@ 0x50
 8004422:	443b      	add	r3, r7
 8004424:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8004428:	f1a3 0220 	sub.w	r2, r3, #32
 800442c:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004430:	4817      	ldr	r0, [pc, #92]	@ (8004490 <MAX72_Print_String+0x4fc>)
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	4403      	add	r3, r0
 800443a:	440b      	add	r3, r1
 800443c:	3301      	adds	r3, #1
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004444:	00d2      	lsls	r2, r2, #3
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	3350      	adds	r3, #80	@ 0x50
 800444a:	443b      	add	r3, r7
 800444c:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8004450:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004454:	3301      	adds	r3, #1
 8004456:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800445a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800445e:	2b03      	cmp	r3, #3
 8004460:	d9dc      	bls.n	800441c <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8004462:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004466:	3301      	adds	r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f107 020c 	add.w	r2, r7, #12
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fb07 	bl	8003a84 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8004476:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800447a:	3301      	adds	r3, #1
 800447c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004480:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004484:	2b07      	cmp	r3, #7
 8004486:	d9c1      	bls.n	800440c <MAX72_Print_String+0x478>
}
 8004488:	bf00      	nop
 800448a:	3750      	adds	r7, #80	@ 0x50
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000018 	.word	0x20000018

08004494 <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da01      	bge.n	80044aa <MAX72_Print_Int+0x16>
 80044a6:	232d      	movs	r3, #45	@ 0x2d
 80044a8:	e000      	b.n	80044ac <MAX72_Print_Int+0x18>
 80044aa:	2300      	movs	r3, #0
 80044ac:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bfb8      	it	lt
 80044b4:	425b      	neglt	r3, r3
 80044b6:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b2d      	cmp	r3, #45	@ 0x2d
 80044c2:	d101      	bne.n	80044c8 <MAX72_Print_Int+0x34>
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <MAX72_Print_Int+0xa8>)
 80044c6:	e000      	b.n	80044ca <MAX72_Print_Int+0x36>
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <MAX72_Print_Int+0xac>)
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e00e      	b.n	80044f8 <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80044de:	d102      	bne.n	80044e6 <MAX72_Print_Int+0x52>
 80044e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044e4:	e001      	b.n	80044ea <MAX72_Print_Int+0x56>
 80044e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80044fc:	d107      	bne.n	800450e <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 80044fe:	f107 0008 	add.w	r0, r7, #8
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <MAX72_Print_Int+0xb0>)
 8004506:	2109      	movs	r1, #9
 8004508:	f007 fb42 	bl	800bb90 <sniprintf>
 800450c:	e006      	b.n	800451c <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 800450e:	f107 0008 	add.w	r0, r7, #8
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <MAX72_Print_Int+0xb4>)
 8004516:	2109      	movs	r1, #9
 8004518:	f007 fb3a 	bl	800bb90 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MAX72_Print_Int+0x92>
 8004522:	2202      	movs	r2, #2
 8004524:	e000      	b.n	8004528 <MAX72_Print_Int+0x94>
 8004526:	2200      	movs	r2, #0
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fd30 	bl	8003f94 <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 8004534:	bf00      	nop
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	00989680 	.word	0x00989680
 8004540:	05f5e100 	.word	0x05f5e100
 8004544:	080100b8 	.word	0x080100b8
 8004548:	080100bc 	.word	0x080100bc

0800454c <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 800454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004550:	b095      	sub	sp, #84	@ 0x54
 8004552:	af04      	add	r7, sp, #16
 8004554:	ed87 0a01 	vstr	s0, [r7, #4]
 8004558:	4603      	mov	r3, r0
 800455a:	460a      	mov	r2, r1
 800455c:	70fb      	strb	r3, [r7, #3]
 800455e:	4613      	mov	r3, r2
 8004560:	70bb      	strb	r3, [r7, #2]
 8004562:	466b      	mov	r3, sp
 8004564:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 8004566:	2308      	movs	r3, #8
 8004568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 800456c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004570:	1c59      	adds	r1, r3, #1
 8004572:	1e4b      	subs	r3, r1, #1
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	460a      	mov	r2, r1
 8004578:	2300      	movs	r3, #0
 800457a:	4690      	mov	r8, r2
 800457c:	4699      	mov	r9, r3
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004592:	460a      	mov	r2, r1
 8004594:	2300      	movs	r3, #0
 8004596:	4614      	mov	r4, r2
 8004598:	461d      	mov	r5, r3
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	00eb      	lsls	r3, r5, #3
 80045a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a8:	00e2      	lsls	r2, r4, #3
 80045aa:	460b      	mov	r3, r1
 80045ac:	3307      	adds	r3, #7
 80045ae:	08db      	lsrs	r3, r3, #3
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	ebad 0d03 	sub.w	sp, sp, r3
 80045b6:	ab04      	add	r3, sp, #16
 80045b8:	3300      	adds	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 80045bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80045c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	d501      	bpl.n	80045ce <MAX72_Print_Float+0x82>
 80045ca:	232d      	movs	r3, #45	@ 0x2d
 80045cc:	e000      	b.n	80045d0 <MAX72_Print_Float+0x84>
 80045ce:	2300      	movs	r3, #0
 80045d0:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 80045d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80045d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045de:	d504      	bpl.n	80045ea <MAX72_Print_Float+0x9e>
 80045e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80045e4:	eef1 7a67 	vneg.f32	s15, s15
 80045e8:	e001      	b.n	80045ee <MAX72_Print_Float+0xa2>
 80045ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ee:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 80045f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80045f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fa:	ee17 3a90 	vmov	r3, s15
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 8004600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	ed97 7a05 	vldr	s14, [r7, #20]
 800460e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004612:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 8004616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 800462a:	e00a      	b.n	8004642 <MAX72_Print_Float+0xf6>
        temp /= 10;
 800462c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462e:	4a5d      	ldr	r2, [pc, #372]	@ (80047a4 <MAX72_Print_Float+0x258>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	08db      	lsrs	r3, r3, #3
 8004636:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8004638:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800463c:	3301      	adds	r3, #1
 800463e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 8004642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004644:	2b09      	cmp	r3, #9
 8004646:	d8f1      	bhi.n	800462c <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 8004648:	7efb      	ldrb	r3, [r7, #27]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	b2da      	uxtb	r2, r3
 800465e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 800466a:	7bfa      	ldrb	r2, [r7, #15]
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	4293      	cmp	r3, r2
 8004670:	bf28      	it	cs
 8004672:	4613      	movcs	r3, r2
 8004674:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11b      	bne.n	80046b4 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 800467c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 8004682:	460b      	mov	r3, r1
 8004684:	4a48      	ldr	r2, [pc, #288]	@ (80047a8 <MAX72_Print_Float+0x25c>)
 8004686:	4619      	mov	r1, r3
 8004688:	69f8      	ldr	r0, [r7, #28]
 800468a:	f007 fa81 	bl	800bb90 <sniprintf>
 800468e:	e079      	b.n	8004784 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8004690:	7efb      	ldrb	r3, [r7, #27]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 8004696:	7efa      	ldrb	r2, [r7, #27]
 8004698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	4a43      	ldr	r2, [pc, #268]	@ (80047ac <MAX72_Print_Float+0x260>)
 80046a0:	69f8      	ldr	r0, [r7, #28]
 80046a2:	f007 fa75 	bl	800bb90 <sniprintf>
 80046a6:	e06d      	b.n	8004784 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 80046a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046aa:	4a41      	ldr	r2, [pc, #260]	@ (80047b0 <MAX72_Print_Float+0x264>)
 80046ac:	69f8      	ldr	r0, [r7, #28]
 80046ae:	f007 fa6f 	bl	800bb90 <sniprintf>
 80046b2:	e067      	b.n	8004784 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 80046b4:	2301      	movs	r3, #1
 80046b6:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80046be:	e00a      	b.n	80046d6 <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 80046c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 80046cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80046d0:	3301      	adds	r3, #1
 80046d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80046d6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d3ef      	bcc.n	80046c0 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fe:	ee17 3a90 	vmov	r3, s15
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 8004704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	429a      	cmp	r2, r3
 800470a:	d304      	bcc.n	8004716 <MAX72_Print_Float+0x1ca>
            int_part++;
 800470c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470e:	3301      	adds	r3, #1
 8004710:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 8004716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d118      	bne.n	800474e <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 800471c:	7efb      	ldrb	r3, [r7, #27]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 8004722:	4608      	mov	r0, r1
 8004724:	7ef9      	ldrb	r1, [r7, #27]
 8004726:	7bbb      	ldrb	r3, [r7, #14]
 8004728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800472a:	9201      	str	r2, [sp, #4]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	460b      	mov	r3, r1
 8004730:	4a20      	ldr	r2, [pc, #128]	@ (80047b4 <MAX72_Print_Float+0x268>)
 8004732:	4601      	mov	r1, r0
 8004734:	69f8      	ldr	r0, [r7, #28]
 8004736:	f007 fa2b 	bl	800bb90 <sniprintf>
 800473a:	e023      	b.n	8004784 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 800473c:	7bba      	ldrb	r2, [r7, #14]
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	4613      	mov	r3, r2
 8004744:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <MAX72_Print_Float+0x26c>)
 8004746:	69f8      	ldr	r0, [r7, #28]
 8004748:	f007 fa22 	bl	800bb90 <sniprintf>
 800474c:	e01a      	b.n	8004784 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 800474e:	7efb      	ldrb	r3, [r7, #27]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00e      	beq.n	8004772 <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8004754:	4608      	mov	r0, r1
 8004756:	7ef9      	ldrb	r1, [r7, #27]
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800475c:	9202      	str	r2, [sp, #8]
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	460b      	mov	r3, r1
 8004766:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <MAX72_Print_Float+0x270>)
 8004768:	4601      	mov	r1, r0
 800476a:	69f8      	ldr	r0, [r7, #28]
 800476c:	f007 fa10 	bl	800bb90 <sniprintf>
 8004770:	e008      	b.n	8004784 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 8004772:	7bbb      	ldrb	r3, [r7, #14]
 8004774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004776:	9201      	str	r2, [sp, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477c:	4a10      	ldr	r2, [pc, #64]	@ (80047c0 <MAX72_Print_Float+0x274>)
 800477e:	69f8      	ldr	r0, [r7, #28]
 8004780:	f007 fa06 	bl	800bb90 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8004784:	78bb      	ldrb	r3, [r7, #2]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MAX72_Print_Float+0x242>
 800478a:	2302      	movs	r3, #2
 800478c:	e000      	b.n	8004790 <MAX72_Print_Float+0x244>
 800478e:	2301      	movs	r3, #1
 8004790:	4619      	mov	r1, r3
 8004792:	69f8      	ldr	r0, [r7, #28]
 8004794:	f7ff fbfe 	bl	8003f94 <MAX72_Print_String>
 8004798:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 800479a:	bf00      	nop
 800479c:	3744      	adds	r7, #68	@ 0x44
 800479e:	46bd      	mov	sp, r7
 80047a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	080100c0 	.word	0x080100c0
 80047ac:	080100c4 	.word	0x080100c4
 80047b0:	080100bc 	.word	0x080100bc
 80047b4:	080100cc 	.word	0x080100cc
 80047b8:	080100d4 	.word	0x080100d4
 80047bc:	080100dc 	.word	0x080100dc
 80047c0:	080100e8 	.word	0x080100e8

080047c4 <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 80047ca:	2301      	movs	r3, #1
 80047cc:	71fb      	strb	r3, [r7, #7]
 80047ce:	e020      	b.n	8004812 <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 80047d0:	2300      	movs	r3, #0
 80047d2:	71bb      	strb	r3, [r7, #6]
 80047d4:	e011      	b.n	80047fa <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	1e59      	subs	r1, r3, #1
 80047da:	79bb      	ldrb	r3, [r7, #6]
 80047dc:	f1c3 0203 	rsb	r2, r3, #3
 80047e0:	79bb      	ldrb	r3, [r7, #6]
 80047e2:	4810      	ldr	r0, [pc, #64]	@ (8004824 <MAX72_SendFrame+0x60>)
 80047e4:	0089      	lsls	r1, r1, #2
 80047e6:	4401      	add	r1, r0
 80047e8:	440a      	add	r2, r1
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	443b      	add	r3, r7
 80047f0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 80047f4:	79bb      	ldrb	r3, [r7, #6]
 80047f6:	3301      	adds	r3, #1
 80047f8:	71bb      	strb	r3, [r7, #6]
 80047fa:	79bb      	ldrb	r3, [r7, #6]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d9ea      	bls.n	80047d6 <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 8004800:	463a      	mov	r2, r7
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff f93c 	bl	8003a84 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	3301      	adds	r3, #1
 8004810:	71fb      	strb	r3, [r7, #7]
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d9db      	bls.n	80047d0 <MAX72_SendFrame+0xc>
    }
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000c44 	.word	0x20000c44

08004828 <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 8004830:	2220      	movs	r2, #32
 8004832:	2100      	movs	r1, #0
 8004834:	482d      	ldr	r0, [pc, #180]	@ (80048ec <MAX72_Scroll_Start_IT+0xc4>)
 8004836:	f007 fa74 	bl	800bd22 <memset>
    MAX72_SendFrame();
 800483a:	f7ff ffc3 	bl	80047c4 <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 800483e:	4a2c      	ldr	r2, [pc, #176]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 8004844:	4b2a      	ldr	r3, [pc, #168]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800484a:	4b29      	ldr	r3, [pc, #164]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a28      	ldr	r2, [pc, #160]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004850:	6852      	ldr	r2, [r2, #4]
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b1f      	cmp	r3, #31
 8004858:	d90e      	bls.n	8004878 <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 800485a:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a24      	ldr	r2, [pc, #144]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004860:	6852      	ldr	r2, [r2, #4]
 8004862:	4413      	add	r3, r2
 8004864:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004866:	2b7e      	cmp	r3, #126	@ 0x7e
 8004868:	d806      	bhi.n	8004878 <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 800486a:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a20      	ldr	r2, [pc, #128]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004870:	6852      	ldr	r2, [r2, #4]
 8004872:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	e000      	b.n	800487a <MAX72_Scroll_Start_IT+0x52>
 8004878:	2320      	movs	r3, #32
 800487a:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 800487c:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 800487e:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004880:	2200      	movs	r2, #0
 8004882:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004886:	2200      	movs	r2, #0
 8004888:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 800488a:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 800488c:	2200      	movs	r2, #0
 800488e:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004892:	2200      	movs	r2, #0
 8004894:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 8004896:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 8004898:	2201      	movs	r2, #1
 800489a:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 800489c:	4b14      	ldr	r3, [pc, #80]	@ (80048f0 <MAX72_Scroll_Start_IT+0xc8>)
 800489e:	2200      	movs	r2, #0
 80048a0:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fb fd14 	bl	80002d0 <strlen>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	461a      	mov	r2, r3
 80048b0:	0052      	lsls	r2, r2, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 80048bc:	7b7b      	ldrb	r3, [r7, #13]
 80048be:	2b20      	cmp	r3, #32
 80048c0:	bf28      	it	cs
 80048c2:	2320      	movcs	r3, #32
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	3b08      	subs	r3, #8
 80048c8:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
 80048ce:	e004      	b.n	80048da <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 80048d0:	f000 f81c 	bl	800490c <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	3301      	adds	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	7b3b      	ldrb	r3, [r7, #12]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3f6      	bcc.n	80048d0 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000c44 	.word	0x20000c44
 80048f0:	20000c64 	.word	0x20000c64

080048f4 <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 80048f8:	4b03      	ldr	r3, [pc, #12]	@ (8004908 <MAX72_Scroll_Stop+0x14>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	735a      	strb	r2, [r3, #13]
}
 80048fe:	bf00      	nop
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000c64 	.word	0x20000c64

0800490c <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b08b      	sub	sp, #44	@ 0x2c
 8004910:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 8004912:	4b8a      	ldr	r3, [pc, #552]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004914:	7b5b      	ldrb	r3, [r3, #13]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8183 	beq.w	8004c22 <MAX72_Scroll_Process+0x316>
 800491c:	4b87      	ldr	r3, [pc, #540]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 817e 	beq.w	8004c22 <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 8004926:	4b85      	ldr	r3, [pc, #532]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004928:	7b9b      	ldrb	r3, [r3, #14]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 800492e:	4b83      	ldr	r3, [pc, #524]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004930:	2200      	movs	r2, #0
 8004932:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 8004934:	4b81      	ldr	r3, [pc, #516]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004936:	7b1b      	ldrb	r3, [r3, #12]
 8004938:	2b02      	cmp	r3, #2
 800493a:	f000 80f6 	beq.w	8004b2a <MAX72_Scroll_Process+0x21e>
 800493e:	2b02      	cmp	r3, #2
 8004940:	f300 816c 	bgt.w	8004c1c <MAX72_Scroll_Process+0x310>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <MAX72_Scroll_Process+0x42>
 8004948:	2b01      	cmp	r3, #1
 800494a:	d072      	beq.n	8004a32 <MAX72_Scroll_Process+0x126>
 800494c:	e166      	b.n	8004c1c <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 800494e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004950:	7a1b      	ldrb	r3, [r3, #8]
 8004952:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 8004954:	7b7b      	ldrb	r3, [r7, #13]
 8004956:	f1a3 0220 	sub.w	r2, r3, #32
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	4a77      	ldr	r2, [pc, #476]	@ (8004b40 <MAX72_Scroll_Process+0x234>)
 8004962:	4413      	add	r3, r2
 8004964:	3301      	adds	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800496e:	e047      	b.n	8004a00 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8004970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 800497e:	7a5b      	ldrb	r3, [r3, #9]
 8004980:	fa42 f303 	asr.w	r3, r2, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004992:	2303      	movs	r3, #3
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	e02b      	b.n	80049f0 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800499c:	4a69      	ldr	r2, [pc, #420]	@ (8004b44 <MAX72_Scroll_Process+0x238>)
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	4413      	add	r3, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 80049ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b2:	4a64      	ldr	r2, [pc, #400]	@ (8004b44 <MAX72_Scroll_Process+0x238>)
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	441a      	add	r2, r3
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	4413      	add	r3, r2
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	b25a      	sxtb	r2, r3
 80049c4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80049c8:	01db      	lsls	r3, r3, #7
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b25a      	sxtb	r2, r3
 80049d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049d4:	b2d1      	uxtb	r1, r2
 80049d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b44 <MAX72_Scroll_Process+0x238>)
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	4413      	add	r3, r2
 80049e0:	460a      	mov	r2, r1
 80049e2:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80049e4:	79bb      	ldrb	r3, [r7, #6]
 80049e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dad0      	bge.n	8004998 <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 80049f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049fa:	3301      	adds	r3, #1
 80049fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a04:	2b07      	cmp	r3, #7
 8004a06:	d9b3      	bls.n	8004970 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 8004a08:	4b4c      	ldr	r3, [pc, #304]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004a0a:	7a5b      	ldrb	r3, [r3, #9]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	4b4a      	ldr	r3, [pc, #296]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004a12:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 8004a14:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004a16:	7a5b      	ldrb	r3, [r3, #9]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	f240 80fa 	bls.w	8004c12 <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 8004a1e:	4b47      	ldr	r3, [pc, #284]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8004a24:	4b45      	ldr	r3, [pc, #276]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 8004a2a:	4b44      	ldr	r3, [pc, #272]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004a30:	e0ef      	b.n	8004c12 <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e032      	b.n	8004a9e <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e027      	b.n	8004a92 <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004a42:	7ffb      	ldrb	r3, [r7, #31]
 8004a44:	4a3f      	ldr	r2, [pc, #252]	@ (8004b44 <MAX72_Scroll_Process+0x238>)
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	4a3a      	ldr	r2, [pc, #232]	@ (8004b44 <MAX72_Scroll_Process+0x238>)
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	4413      	add	r3, r2
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	b25a      	sxtb	r2, r3
 8004a6a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004a6e:	01db      	lsls	r3, r3, #7
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b25a      	sxtb	r2, r3
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
 8004a78:	b2d1      	uxtb	r1, r2
 8004a7a:	4a32      	ldr	r2, [pc, #200]	@ (8004b44 <MAX72_Scroll_Process+0x238>)
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	4413      	add	r3, r2
 8004a84:	460a      	mov	r2, r1
 8004a86:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004a88:	7bbb      	ldrb	r3, [r7, #14]
 8004a8a:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	dad4      	bge.n	8004a42 <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 8004a98:	7ffb      	ldrb	r3, [r7, #31]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b07      	cmp	r3, #7
 8004aa2:	d9c9      	bls.n	8004a38 <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 8004aa4:	4b25      	ldr	r3, [pc, #148]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004aa6:	7a9b      	ldrb	r3, [r3, #10]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	4b23      	ldr	r3, [pc, #140]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004aae:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 8004ab0:	4b22      	ldr	r3, [pc, #136]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004ab2:	7a9b      	ldrb	r3, [r3, #10]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80ae 	beq.w	8004c16 <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004ac8:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 8004aca:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	461c      	mov	r4, r3
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fb fbfb 	bl	80002d0 <strlen>
 8004ada:	4603      	mov	r3, r0
 8004adc:	429c      	cmp	r4, r3
 8004ade:	d306      	bcc.n	8004aee <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 8004ae0:	4b16      	ldr	r3, [pc, #88]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 8004ae6:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 8004aec:	e093      	b.n	8004c16 <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004aee:	4b13      	ldr	r3, [pc, #76]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a12      	ldr	r2, [pc, #72]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004af4:	6852      	ldr	r2, [r2, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b1f      	cmp	r3, #31
 8004afc:	d90e      	bls.n	8004b1c <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8004afe:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0e      	ldr	r2, [pc, #56]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004b04:	6852      	ldr	r2, [r2, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004b0a:	2b7e      	cmp	r3, #126	@ 0x7e
 8004b0c:	d806      	bhi.n	8004b1c <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004b14:	6852      	ldr	r2, [r2, #4]
 8004b16:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	e000      	b.n	8004b1e <MAX72_Scroll_Process+0x212>
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	4a07      	ldr	r2, [pc, #28]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004b20:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <MAX72_Scroll_Process+0x230>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	731a      	strb	r2, [r3, #12]
            break;
 8004b28:	e075      	b.n	8004c16 <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]
 8004b2e:	e039      	b.n	8004ba4 <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004b34:	2303      	movs	r3, #3
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	e02e      	b.n	8004b98 <MAX72_Scroll_Process+0x28c>
 8004b3a:	bf00      	nop
 8004b3c:	20000c64 	.word	0x20000c64
 8004b40:	20000018 	.word	0x20000018
 8004b44:	20000c44 	.word	0x20000c44
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	@ (8004c2c <MAX72_Scroll_Process+0x320>)
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <MAX72_Scroll_Process+0x320>)
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	b25a      	sxtb	r2, r3
 8004b70:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004b74:	01db      	lsls	r3, r3, #7
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	b25a      	sxtb	r2, r3
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	b2d1      	uxtb	r1, r2
 8004b80:	4a2a      	ldr	r2, [pc, #168]	@ (8004c2c <MAX72_Scroll_Process+0x320>)
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	dad4      	bge.n	8004b48 <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	d9c2      	bls.n	8004b30 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 8004baa:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bac:	7adb      	ldrb	r3, [r3, #11]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bb4:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bb8:	7adb      	ldrb	r3, [r3, #11]
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d92d      	bls.n	8004c1a <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bca:	6852      	ldr	r2, [r2, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b1f      	cmp	r3, #31
 8004bd2:	d90e      	bls.n	8004bf2 <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8004bd4:	4b16      	ldr	r3, [pc, #88]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bda:	6852      	ldr	r2, [r2, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004be0:	2b7e      	cmp	r3, #126	@ 0x7e
 8004be2:	d806      	bhi.n	8004bf2 <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 8004be4:	4b12      	ldr	r3, [pc, #72]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a11      	ldr	r2, [pc, #68]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bea:	6852      	ldr	r2, [r2, #4]
 8004bec:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	e000      	b.n	8004bf4 <MAX72_Scroll_Process+0x2e8>
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bf6:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 8004c04:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 8004c0a:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <MAX72_Scroll_Process+0x324>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004c10:	e003      	b.n	8004c1a <MAX72_Scroll_Process+0x30e>
            break;
 8004c12:	bf00      	nop
 8004c14:	e002      	b.n	8004c1c <MAX72_Scroll_Process+0x310>
            break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <MAX72_Scroll_Process+0x310>
            break;
 8004c1a:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 8004c1c:	f7ff fdd2 	bl	80047c4 <MAX72_SendFrame>
 8004c20:	e000      	b.n	8004c24 <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 8004c22:	bf00      	nop
}
 8004c24:	372c      	adds	r7, #44	@ 0x2c
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd90      	pop	{r4, r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000c44 	.word	0x20000c44
 8004c30:	20000c64 	.word	0x20000c64

08004c34 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8004c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004c38:	f7fd f85c 	bl	8001cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c3c:	480c      	ldr	r0, [pc, #48]	@ (8004c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c3e:	490d      	ldr	r1, [pc, #52]	@ (8004c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c40:	4a0d      	ldr	r2, [pc, #52]	@ (8004c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c44:	e002      	b.n	8004c4c <LoopCopyDataInit>

08004c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c4a:	3304      	adds	r3, #4

08004c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c50:	d3f9      	bcc.n	8004c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c52:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c54:	4c0a      	ldr	r4, [pc, #40]	@ (8004c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c58:	e001      	b.n	8004c5e <LoopFillZerobss>

08004c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c5c:	3204      	adds	r2, #4

08004c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c60:	d3fb      	bcc.n	8004c5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004c62:	f007 f8c9 	bl	800bdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c66:	f7fc fca5 	bl	80015b4 <main>
  bx  lr    
 8004c6a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8004c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c74:	200005a0 	.word	0x200005a0
  ldr r2, =_sidata
 8004c78:	080105b4 	.word	0x080105b4
  ldr r2, =_sbss
 8004c7c:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8004c80:	20000dc4 	.word	0x20000dc4

08004c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c84:	e7fe      	b.n	8004c84 <ADC_IRQHandler>
	...

08004c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <HAL_Init+0x40>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc8 <HAL_Init+0x40>)
 8004c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_Init+0x40>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <HAL_Init+0x40>)
 8004c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ca4:	4b08      	ldr	r3, [pc, #32]	@ (8004cc8 <HAL_Init+0x40>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a07      	ldr	r2, [pc, #28]	@ (8004cc8 <HAL_Init+0x40>)
 8004caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb0:	2003      	movs	r0, #3
 8004cb2:	f000 fd5f 	bl	8005774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f000 f808 	bl	8004ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cbc:	f7fc feb8 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023c00 	.word	0x40023c00

08004ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cd4:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <HAL_InitTick+0x54>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <HAL_InitTick+0x58>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fd77 	bl	80057de <HAL_SYSTICK_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e00e      	b.n	8004d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d80a      	bhi.n	8004d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d00:	2200      	movs	r2, #0
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d08:	f000 fd3f 	bl	800578a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d0c:	4a06      	ldr	r2, [pc, #24]	@ (8004d28 <HAL_InitTick+0x5c>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e000      	b.n	8004d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000004 	.word	0x20000004
 8004d24:	200003d4 	.word	0x200003d4
 8004d28:	200003d0 	.word	0x200003d0

08004d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d30:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_IncTick+0x20>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_IncTick+0x24>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <HAL_IncTick+0x24>)
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	200003d4 	.word	0x200003d4
 8004d50:	20000c74 	.word	0x20000c74

08004d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return uwTick;
 8004d58:	4b03      	ldr	r3, [pc, #12]	@ (8004d68 <HAL_GetTick+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000c74 	.word	0x20000c74

08004d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d74:	f7ff ffee 	bl	8004d54 <HAL_GetTick>
 8004d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d84:	d005      	beq.n	8004d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d86:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <HAL_Delay+0x44>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d92:	bf00      	nop
 8004d94:	f7ff ffde 	bl	8004d54 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d8f7      	bhi.n	8004d94 <HAL_Delay+0x28>
  {
  }
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200003d4 	.word	0x200003d4

08004db4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e033      	b.n	8004e32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc f9a6 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004dfa:	f023 0302 	bic.w	r3, r3, #2
 8004dfe:	f043 0202 	orr.w	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fae8 	bl	80053dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e22:	e001      	b.n	8004e28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_ADC_Start+0x1a>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0b2      	b.n	8004fbc <HAL_ADC_Start+0x180>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d018      	beq.n	8004e9e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e7c:	4b52      	ldr	r3, [pc, #328]	@ (8004fc8 <HAL_ADC_Start+0x18c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a52      	ldr	r2, [pc, #328]	@ (8004fcc <HAL_ADC_Start+0x190>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	0c9a      	lsrs	r2, r3, #18
 8004e88:	4613      	mov	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004e90:	e002      	b.n	8004e98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f9      	bne.n	8004e92 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d17a      	bne.n	8004fa2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ed6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eea:	d106      	bne.n	8004efa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef0:	f023 0206 	bic.w	r2, r3, #6
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ef8:	e002      	b.n	8004f00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f08:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <HAL_ADC_Start+0x194>)
 8004f0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004f14:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12a      	bne.n	8004f78 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <HAL_ADC_Start+0x198>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d015      	beq.n	8004f58 <HAL_ADC_Start+0x11c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a29      	ldr	r2, [pc, #164]	@ (8004fd8 <HAL_ADC_Start+0x19c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d105      	bne.n	8004f42 <HAL_ADC_Start+0x106>
 8004f36:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <HAL_ADC_Start+0x194>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	@ (8004fdc <HAL_ADC_Start+0x1a0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d136      	bne.n	8004fba <HAL_ADC_Start+0x17e>
 8004f4c:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <HAL_ADC_Start+0x194>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d130      	bne.n	8004fba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d129      	bne.n	8004fba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	e020      	b.n	8004fba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <HAL_ADC_Start+0x198>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d11b      	bne.n	8004fba <HAL_ADC_Start+0x17e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d114      	bne.n	8004fba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004f9e:	609a      	str	r2, [r3, #8]
 8004fa0:	e00b      	b.n	8004fba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f043 0210 	orr.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	20000004 	.word	0x20000004
 8004fcc:	431bde83 	.word	0x431bde83
 8004fd0:	40012300 	.word	0x40012300
 8004fd4:	40012000 	.word	0x40012000
 8004fd8:	40012100 	.word	0x40012100
 8004fdc:	40012200 	.word	0x40012200

08004fe0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADC_Stop+0x16>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e021      	b.n	800503a <HAL_ADC_Stop+0x5a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f043 0201 	orr.w	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005062:	d113      	bne.n	800508c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800506e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005072:	d10b      	bne.n	800508c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e063      	b.n	8005154 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800508c:	f7ff fe62 	bl	8004d54 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005092:	e021      	b.n	80050d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800509a:	d01d      	beq.n	80050d8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_ADC_PollForConversion+0x6c>
 80050a2:	f7ff fe57 	bl	8004d54 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d212      	bcs.n	80050d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d00b      	beq.n	80050d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	f043 0204 	orr.w	r2, r3, #4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e03d      	b.n	8005154 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d1d6      	bne.n	8005094 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f06f 0212 	mvn.w	r2, #18
 80050ee:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d123      	bne.n	8005152 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11f      	bne.n	8005152 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800511c:	2b00      	cmp	r3, #0
 800511e:	d006      	beq.n	800512e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800512a:	2b00      	cmp	r3, #0
 800512c:	d111      	bne.n	8005152 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f043 0201 	orr.w	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x1c>
 8005190:	2302      	movs	r3, #2
 8005192:	e113      	b.n	80053bc <HAL_ADC_ConfigChannel+0x244>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d925      	bls.n	80051f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68d9      	ldr	r1, [r3, #12]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	3b1e      	subs	r3, #30
 80051ba:	2207      	movs	r2, #7
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43da      	mvns	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	400a      	ands	r2, r1
 80051c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68d9      	ldr	r1, [r3, #12]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4618      	mov	r0, r3
 80051dc:	4603      	mov	r3, r0
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4403      	add	r3, r0
 80051e2:	3b1e      	subs	r3, #30
 80051e4:	409a      	lsls	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	e022      	b.n	8005236 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6919      	ldr	r1, [r3, #16]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	2207      	movs	r2, #7
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	400a      	ands	r2, r1
 8005212:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6919      	ldr	r1, [r3, #16]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	4618      	mov	r0, r3
 8005226:	4603      	mov	r3, r0
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4403      	add	r3, r0
 800522c:	409a      	lsls	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d824      	bhi.n	8005288 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	3b05      	subs	r3, #5
 8005250:	221f      	movs	r2, #31
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43da      	mvns	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	400a      	ands	r2, r1
 800525e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	4618      	mov	r0, r3
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	3b05      	subs	r3, #5
 800527a:	fa00 f203 	lsl.w	r2, r0, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	635a      	str	r2, [r3, #52]	@ 0x34
 8005286:	e04c      	b.n	8005322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b0c      	cmp	r3, #12
 800528e:	d824      	bhi.n	80052da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	3b23      	subs	r3, #35	@ 0x23
 80052a2:	221f      	movs	r2, #31
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43da      	mvns	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	400a      	ands	r2, r1
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4618      	mov	r0, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	3b23      	subs	r3, #35	@ 0x23
 80052cc:	fa00 f203 	lsl.w	r2, r0, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d8:	e023      	b.n	8005322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	3b41      	subs	r3, #65	@ 0x41
 80052ec:	221f      	movs	r2, #31
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43da      	mvns	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	400a      	ands	r2, r1
 80052fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	4618      	mov	r0, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	3b41      	subs	r3, #65	@ 0x41
 8005316:	fa00 f203 	lsl.w	r2, r0, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005322:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <HAL_ADC_ConfigChannel+0x250>)
 8005324:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a28      	ldr	r2, [pc, #160]	@ (80053cc <HAL_ADC_ConfigChannel+0x254>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10f      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1d8>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b12      	cmp	r3, #18
 8005336:	d10b      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1d      	ldr	r2, [pc, #116]	@ (80053cc <HAL_ADC_ConfigChannel+0x254>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d12b      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x23a>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <HAL_ADC_ConfigChannel+0x258>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <HAL_ADC_ConfigChannel+0x1f4>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b11      	cmp	r3, #17
 800536a:	d122      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a11      	ldr	r2, [pc, #68]	@ (80053d0 <HAL_ADC_ConfigChannel+0x258>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d111      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800538e:	4b11      	ldr	r3, [pc, #68]	@ (80053d4 <HAL_ADC_ConfigChannel+0x25c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <HAL_ADC_ConfigChannel+0x260>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	0c9a      	lsrs	r2, r3, #18
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053a4:	e002      	b.n	80053ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f9      	bne.n	80053a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40012300 	.word	0x40012300
 80053cc:	40012000 	.word	0x40012000
 80053d0:	10000012 	.word	0x10000012
 80053d4:	20000004 	.word	0x20000004
 80053d8:	431bde83 	.word	0x431bde83

080053dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053e4:	4b79      	ldr	r3, [pc, #484]	@ (80055cc <ADC_Init+0x1f0>)
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6859      	ldr	r1, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	021a      	lsls	r2, r3, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6859      	ldr	r1, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6899      	ldr	r1, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	4a58      	ldr	r2, [pc, #352]	@ (80055d0 <ADC_Init+0x1f4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6899      	ldr	r1, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6899      	ldr	r1, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	e00f      	b.n	80054da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0202 	bic.w	r2, r2, #2
 80054e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6899      	ldr	r1, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	7e1b      	ldrb	r3, [r3, #24]
 80054f4:	005a      	lsls	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005516:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	3b01      	subs	r3, #1
 8005534:	035a      	lsls	r2, r3, #13
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	e007      	b.n	8005550 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800554e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800555e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	3b01      	subs	r3, #1
 800556c:	051a      	lsls	r2, r3, #20
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6899      	ldr	r1, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005592:	025a      	lsls	r2, r3, #9
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6899      	ldr	r1, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	029a      	lsls	r2, r3, #10
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012300 	.word	0x40012300
 80055d0:	0f000001 	.word	0x0f000001

080055d4 <__NVIC_SetPriorityGrouping>:
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <__NVIC_SetPriorityGrouping+0x44>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055f0:	4013      	ands	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005606:	4a04      	ldr	r2, [pc, #16]	@ (8005618 <__NVIC_SetPriorityGrouping+0x44>)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	60d3      	str	r3, [r2, #12]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <__NVIC_GetPriorityGrouping>:
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005620:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <__NVIC_GetPriorityGrouping+0x18>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	f003 0307 	and.w	r3, r3, #7
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <__NVIC_EnableIRQ>:
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005646:	2b00      	cmp	r3, #0
 8005648:	db0b      	blt.n	8005662 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	f003 021f 	and.w	r2, r3, #31
 8005650:	4907      	ldr	r1, [pc, #28]	@ (8005670 <__NVIC_EnableIRQ+0x38>)
 8005652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2001      	movs	r0, #1
 800565a:	fa00 f202 	lsl.w	r2, r0, r2
 800565e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e100 	.word	0xe000e100

08005674 <__NVIC_SetPriority>:
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	6039      	str	r1, [r7, #0]
 800567e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005684:	2b00      	cmp	r3, #0
 8005686:	db0a      	blt.n	800569e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	490c      	ldr	r1, [pc, #48]	@ (80056c0 <__NVIC_SetPriority+0x4c>)
 800568e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005692:	0112      	lsls	r2, r2, #4
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	440b      	add	r3, r1
 8005698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800569c:	e00a      	b.n	80056b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	4908      	ldr	r1, [pc, #32]	@ (80056c4 <__NVIC_SetPriority+0x50>)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	3b04      	subs	r3, #4
 80056ac:	0112      	lsls	r2, r2, #4
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	440b      	add	r3, r1
 80056b2:	761a      	strb	r2, [r3, #24]
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000e100 	.word	0xe000e100
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <NVIC_EncodePriority>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	@ 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f1c3 0307 	rsb	r3, r3, #7
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	bf28      	it	cs
 80056e6:	2304      	movcs	r3, #4
 80056e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	3304      	adds	r3, #4
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d902      	bls.n	80056f8 <NVIC_EncodePriority+0x30>
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3b03      	subs	r3, #3
 80056f6:	e000      	b.n	80056fa <NVIC_EncodePriority+0x32>
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43da      	mvns	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	401a      	ands	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005710:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43d9      	mvns	r1, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005720:	4313      	orrs	r3, r2
}
 8005722:	4618      	mov	r0, r3
 8005724:	3724      	adds	r7, #36	@ 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <SysTick_Config>:
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3b01      	subs	r3, #1
 800573c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005740:	d301      	bcc.n	8005746 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005742:	2301      	movs	r3, #1
 8005744:	e00f      	b.n	8005766 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005746:	4a0a      	ldr	r2, [pc, #40]	@ (8005770 <SysTick_Config+0x40>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3b01      	subs	r3, #1
 800574c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800574e:	210f      	movs	r1, #15
 8005750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005754:	f7ff ff8e 	bl	8005674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <SysTick_Config+0x40>)
 800575a:	2200      	movs	r2, #0
 800575c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800575e:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <SysTick_Config+0x40>)
 8005760:	2207      	movs	r2, #7
 8005762:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	e000e010 	.word	0xe000e010

08005774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff29 	bl	80055d4 <__NVIC_SetPriorityGrouping>
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800578a:	b580      	push	{r7, lr}
 800578c:	b086      	sub	sp, #24
 800578e:	af00      	add	r7, sp, #0
 8005790:	4603      	mov	r3, r0
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800579c:	f7ff ff3e 	bl	800561c <__NVIC_GetPriorityGrouping>
 80057a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	f7ff ff8e 	bl	80056c8 <NVIC_EncodePriority>
 80057ac:	4602      	mov	r2, r0
 80057ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff5d 	bl	8005674 <__NVIC_SetPriority>
}
 80057ba:	bf00      	nop
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ff31 	bl	8005638 <__NVIC_EnableIRQ>
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff ffa2 	bl	8005730 <SysTick_Config>
 80057ec:	4603      	mov	r3, r0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005804:	f7ff faa6 	bl	8004d54 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e099      	b.n	8005948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005834:	e00f      	b.n	8005856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005836:	f7ff fa8d 	bl	8004d54 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b05      	cmp	r3, #5
 8005842:	d908      	bls.n	8005856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2203      	movs	r2, #3
 800584e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e078      	b.n	8005948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e8      	bne.n	8005836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <HAL_DMA_Init+0x158>)
 8005870:	4013      	ands	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800588e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d107      	bne.n	80058c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b8:	4313      	orrs	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d117      	bne.n	800591a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb0d 	bl	8005f1c <DMA_CheckFifoParam>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2240      	movs	r2, #64	@ 0x40
 800590c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005916:	2301      	movs	r3, #1
 8005918:	e016      	b.n	8005948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fac4 	bl	8005eb0 <DMA_CalcBaseAndBitshift>
 8005928:	4603      	mov	r3, r0
 800592a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	223f      	movs	r2, #63	@ 0x3f
 8005932:	409a      	lsls	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	f010803f 	.word	0xf010803f

08005954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_DMA_Start_IT+0x26>
 8005976:	2302      	movs	r3, #2
 8005978:	e040      	b.n	80059fc <HAL_DMA_Start_IT+0xa8>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b01      	cmp	r3, #1
 800598c:	d12f      	bne.n	80059ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa56 	bl	8005e54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ac:	223f      	movs	r2, #63	@ 0x3f
 80059ae:	409a      	lsls	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0216 	orr.w	r2, r2, #22
 80059c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e005      	b.n	80059fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
 80059f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a12:	f7ff f99f 	bl	8004d54 <HAL_GetTick>
 8005a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d008      	beq.n	8005a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2280      	movs	r2, #128	@ 0x80
 8005a28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e052      	b.n	8005adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0216 	bic.w	r2, r2, #22
 8005a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <HAL_DMA_Abort+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0208 	bic.w	r2, r2, #8
 8005a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a86:	e013      	b.n	8005ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a88:	f7ff f964 	bl	8004d54 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	d90c      	bls.n	8005ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e015      	b.n	8005adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e4      	bne.n	8005a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	223f      	movs	r2, #63	@ 0x3f
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2280      	movs	r2, #128	@ 0x80
 8005afc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e00c      	b.n	8005b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2205      	movs	r2, #5
 8005b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b34:	4b8e      	ldr	r3, [pc, #568]	@ (8005d70 <HAL_DMA_IRQHandler+0x248>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a8e      	ldr	r2, [pc, #568]	@ (8005d74 <HAL_DMA_IRQHandler+0x24c>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b52:	2208      	movs	r2, #8
 8005b54:	409a      	lsls	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01a      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d013      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0204 	bic.w	r2, r2, #4
 8005b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b80:	2208      	movs	r2, #8
 8005b82:	409a      	lsls	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	f043 0201 	orr.w	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	f043 0202 	orr.w	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bce:	2204      	movs	r2, #4
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d012      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bec:	2204      	movs	r2, #4
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	2210      	movs	r2, #16
 8005c06:	409a      	lsls	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d043      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03c      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c22:	2210      	movs	r2, #16
 8005c24:	409a      	lsls	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d018      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d024      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
 8005c56:	e01f      	b.n	8005c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
 8005c68:	e016      	b.n	8005c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d107      	bne.n	8005c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0208 	bic.w	r2, r2, #8
 8005c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 808f 	beq.w	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8087 	beq.w	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d136      	bne.n	8005d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0216 	bic.w	r2, r2, #22
 8005ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <HAL_DMA_IRQHandler+0x1da>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0208 	bic.w	r2, r2, #8
 8005d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d16:	223f      	movs	r2, #63	@ 0x3f
 8005d18:	409a      	lsls	r2, r3
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d07e      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
        }
        return;
 8005d3e:	e079      	b.n	8005e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10d      	bne.n	8005d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
 8005d6c:	e02c      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
 8005d6e:	bf00      	nop
 8005d70:	20000004 	.word	0x20000004
 8005d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d023      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
 8005d88:	e01e      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10f      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0210 	bic.w	r2, r2, #16
 8005da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d032      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d022      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2205      	movs	r2, #5
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d307      	bcc.n	8005e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f2      	bne.n	8005df4 <HAL_DMA_IRQHandler+0x2cc>
 8005e0e:	e000      	b.n	8005e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
 8005e32:	e000      	b.n	8005e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e34:	bf00      	nop
    }
  }
}
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b40      	cmp	r3, #64	@ 0x40
 8005e80:	d108      	bne.n	8005e94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e92:	e007      	b.n	8005ea4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	3b10      	subs	r3, #16
 8005ec0:	4a14      	ldr	r2, [pc, #80]	@ (8005f14 <DMA_CalcBaseAndBitshift+0x64>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005eca:	4a13      	ldr	r2, [pc, #76]	@ (8005f18 <DMA_CalcBaseAndBitshift+0x68>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d909      	bls.n	8005ef2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ef0:	e007      	b.n	8005f02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	aaaaaaab 	.word	0xaaaaaaab
 8005f18:	08010120 	.word	0x08010120

08005f1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11f      	bne.n	8005f76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d856      	bhi.n	8005fea <DMA_CheckFifoParam+0xce>
 8005f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <DMA_CheckFifoParam+0x28>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f55 	.word	0x08005f55
 8005f48:	08005f67 	.word	0x08005f67
 8005f4c:	08005f55 	.word	0x08005f55
 8005f50:	08005feb 	.word	0x08005feb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d046      	beq.n	8005fee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f64:	e043      	b.n	8005fee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f6e:	d140      	bne.n	8005ff2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f74:	e03d      	b.n	8005ff2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7e:	d121      	bne.n	8005fc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d837      	bhi.n	8005ff6 <DMA_CheckFifoParam+0xda>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <DMA_CheckFifoParam+0x70>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fa3 	.word	0x08005fa3
 8005f94:	08005f9d 	.word	0x08005f9d
 8005f98:	08005fb5 	.word	0x08005fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa0:	e030      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d025      	beq.n	8005ffa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb2:	e022      	b.n	8005ffa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fbc:	d11f      	bne.n	8005ffe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fc2:	e01c      	b.n	8005ffe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d903      	bls.n	8005fd2 <DMA_CheckFifoParam+0xb6>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d003      	beq.n	8005fd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fd0:	e018      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd6:	e015      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e00b      	b.n	8006002 <DMA_CheckFifoParam+0xe6>
      break;
 8005fea:	bf00      	nop
 8005fec:	e00a      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e008      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e006      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <DMA_CheckFifoParam+0xe8>
      break;
 8006002:	bf00      	nop
    }
  } 
  
  return status; 
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop

08006014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	@ 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	e165      	b.n	80062fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006030:	2201      	movs	r2, #1
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4013      	ands	r3, r2
 8006042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	429a      	cmp	r2, r3
 800604a:	f040 8154 	bne.w	80062f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b01      	cmp	r3, #1
 8006058:	d005      	beq.n	8006066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006062:	2b02      	cmp	r3, #2
 8006064:	d130      	bne.n	80060c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	2203      	movs	r2, #3
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43db      	mvns	r3, r3
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	4013      	ands	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800609c:	2201      	movs	r2, #1
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	091b      	lsrs	r3, r3, #4
 80060b2:	f003 0201 	and.w	r2, r3, #1
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d017      	beq.n	8006104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	2203      	movs	r2, #3
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d123      	bne.n	8006158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	08da      	lsrs	r2, r3, #3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3208      	adds	r2, #8
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	220f      	movs	r2, #15
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	08da      	lsrs	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3208      	adds	r2, #8
 8006152:	69b9      	ldr	r1, [r7, #24]
 8006154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	2203      	movs	r2, #3
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 0203 	and.w	r2, r3, #3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4313      	orrs	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80ae 	beq.w	80062f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	4b5d      	ldr	r3, [pc, #372]	@ (8006314 <HAL_GPIO_Init+0x300>)
 80061a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006314 <HAL_GPIO_Init+0x300>)
 80061a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061aa:	4b5a      	ldr	r3, [pc, #360]	@ (8006314 <HAL_GPIO_Init+0x300>)
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061b6:	4a58      	ldr	r2, [pc, #352]	@ (8006318 <HAL_GPIO_Init+0x304>)
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	3302      	adds	r3, #2
 80061be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	220f      	movs	r2, #15
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4013      	ands	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a4f      	ldr	r2, [pc, #316]	@ (800631c <HAL_GPIO_Init+0x308>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d025      	beq.n	800622e <HAL_GPIO_Init+0x21a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006320 <HAL_GPIO_Init+0x30c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <HAL_GPIO_Init+0x216>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a4d      	ldr	r2, [pc, #308]	@ (8006324 <HAL_GPIO_Init+0x310>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d019      	beq.n	8006226 <HAL_GPIO_Init+0x212>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006328 <HAL_GPIO_Init+0x314>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_GPIO_Init+0x20e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a4b      	ldr	r2, [pc, #300]	@ (800632c <HAL_GPIO_Init+0x318>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00d      	beq.n	800621e <HAL_GPIO_Init+0x20a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a4a      	ldr	r2, [pc, #296]	@ (8006330 <HAL_GPIO_Init+0x31c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x206>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a49      	ldr	r2, [pc, #292]	@ (8006334 <HAL_GPIO_Init+0x320>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_GPIO_Init+0x202>
 8006212:	2306      	movs	r3, #6
 8006214:	e00c      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 8006216:	2307      	movs	r3, #7
 8006218:	e00a      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 800621a:	2305      	movs	r3, #5
 800621c:	e008      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 800621e:	2304      	movs	r3, #4
 8006220:	e006      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 8006222:	2303      	movs	r3, #3
 8006224:	e004      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 8006226:	2302      	movs	r3, #2
 8006228:	e002      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <HAL_GPIO_Init+0x21c>
 800622e:	2300      	movs	r3, #0
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	f002 0203 	and.w	r2, r2, #3
 8006236:	0092      	lsls	r2, r2, #2
 8006238:	4093      	lsls	r3, r2
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4313      	orrs	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006240:	4935      	ldr	r1, [pc, #212]	@ (8006318 <HAL_GPIO_Init+0x304>)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	089b      	lsrs	r3, r3, #2
 8006246:	3302      	adds	r3, #2
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800624e:	4b3a      	ldr	r3, [pc, #232]	@ (8006338 <HAL_GPIO_Init+0x324>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006272:	4a31      	ldr	r2, [pc, #196]	@ (8006338 <HAL_GPIO_Init+0x324>)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006278:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <HAL_GPIO_Init+0x324>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800629c:	4a26      	ldr	r2, [pc, #152]	@ (8006338 <HAL_GPIO_Init+0x324>)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062a2:	4b25      	ldr	r3, [pc, #148]	@ (8006338 <HAL_GPIO_Init+0x324>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4013      	ands	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_GPIO_Init+0x324>)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006338 <HAL_GPIO_Init+0x324>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062f0:	4a11      	ldr	r2, [pc, #68]	@ (8006338 <HAL_GPIO_Init+0x324>)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	f67f ae96 	bls.w	8006030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3724      	adds	r7, #36	@ 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800
 8006318:	40013800 	.word	0x40013800
 800631c:	40020000 	.word	0x40020000
 8006320:	40020400 	.word	0x40020400
 8006324:	40020800 	.word	0x40020800
 8006328:	40020c00 	.word	0x40020c00
 800632c:	40021000 	.word	0x40021000
 8006330:	40021400 	.word	0x40021400
 8006334:	40021800 	.word	0x40021800
 8006338:	40013c00 	.word	0x40013c00

0800633c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	887b      	ldrh	r3, [r7, #2]
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
 8006358:	e001      	b.n	800635e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	807b      	strh	r3, [r7, #2]
 8006378:	4613      	mov	r3, r2
 800637a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800637c:	787b      	ldrb	r3, [r7, #1]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006382:	887a      	ldrh	r2, [r7, #2]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006388:	e003      	b.n	8006392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800638a:	887b      	ldrh	r3, [r7, #2]
 800638c:	041a      	lsls	r2, r3, #16
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	619a      	str	r2, [r3, #24]
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063b0:	887a      	ldrh	r2, [r7, #2]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4013      	ands	r3, r2
 80063b6:	041a      	lsls	r2, r3, #16
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	43d9      	mvns	r1, r3
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	400b      	ands	r3, r1
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	619a      	str	r2, [r3, #24]
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063de:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063e0:	695a      	ldr	r2, [r3, #20]
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d006      	beq.n	80063f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063ea:	4a05      	ldr	r2, [pc, #20]	@ (8006400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fb fa28 	bl	8001848 <HAL_GPIO_EXTI_Callback>
  }
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40013c00 	.word	0x40013c00

08006404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e12b      	b.n	800666e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fb f820 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	@ 0x24
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006468:	f001 fbb6 	bl	8007bd8 <HAL_RCC_GetPCLK1Freq>
 800646c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4a81      	ldr	r2, [pc, #516]	@ (8006678 <HAL_I2C_Init+0x274>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d807      	bhi.n	8006488 <HAL_I2C_Init+0x84>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a80      	ldr	r2, [pc, #512]	@ (800667c <HAL_I2C_Init+0x278>)
 800647c:	4293      	cmp	r3, r2
 800647e:	bf94      	ite	ls
 8006480:	2301      	movls	r3, #1
 8006482:	2300      	movhi	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	e006      	b.n	8006496 <HAL_I2C_Init+0x92>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a7d      	ldr	r2, [pc, #500]	@ (8006680 <HAL_I2C_Init+0x27c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	bf94      	ite	ls
 8006490:	2301      	movls	r3, #1
 8006492:	2300      	movhi	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e0e7      	b.n	800666e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a78      	ldr	r2, [pc, #480]	@ (8006684 <HAL_I2C_Init+0x280>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	0c9b      	lsrs	r3, r3, #18
 80064a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a6a      	ldr	r2, [pc, #424]	@ (8006678 <HAL_I2C_Init+0x274>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d802      	bhi.n	80064d8 <HAL_I2C_Init+0xd4>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3301      	adds	r3, #1
 80064d6:	e009      	b.n	80064ec <HAL_I2C_Init+0xe8>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	4a69      	ldr	r2, [pc, #420]	@ (8006688 <HAL_I2C_Init+0x284>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	099b      	lsrs	r3, r3, #6
 80064ea:	3301      	adds	r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80064fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	495c      	ldr	r1, [pc, #368]	@ (8006678 <HAL_I2C_Init+0x274>)
 8006508:	428b      	cmp	r3, r1
 800650a:	d819      	bhi.n	8006540 <HAL_I2C_Init+0x13c>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1e59      	subs	r1, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	fbb1 f3f3 	udiv	r3, r1, r3
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006520:	400b      	ands	r3, r1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_I2C_Init+0x138>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1e59      	subs	r1, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	fbb1 f3f3 	udiv	r3, r1, r3
 8006534:	3301      	adds	r3, #1
 8006536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800653a:	e051      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 800653c:	2304      	movs	r3, #4
 800653e:	e04f      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d111      	bne.n	800656c <HAL_I2C_Init+0x168>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1e58      	subs	r0, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6859      	ldr	r1, [r3, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	440b      	add	r3, r1
 8006556:	fbb0 f3f3 	udiv	r3, r0, r3
 800655a:	3301      	adds	r3, #1
 800655c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e012      	b.n	8006592 <HAL_I2C_Init+0x18e>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1e58      	subs	r0, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	0099      	lsls	r1, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006582:	3301      	adds	r3, #1
 8006584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_I2C_Init+0x196>
 8006596:	2301      	movs	r3, #1
 8006598:	e022      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10e      	bne.n	80065c0 <HAL_I2C_Init+0x1bc>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1e58      	subs	r0, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6859      	ldr	r1, [r3, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b4:	3301      	adds	r3, #1
 80065b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065be:	e00f      	b.n	80065e0 <HAL_I2C_Init+0x1dc>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1e58      	subs	r0, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	0099      	lsls	r1, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d6:	3301      	adds	r3, #1
 80065d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	6809      	ldr	r1, [r1, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800660e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6911      	ldr	r1, [r2, #16]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68d2      	ldr	r2, [r2, #12]
 800661a:	4311      	orrs	r1, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	430b      	orrs	r3, r1
 8006622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	000186a0 	.word	0x000186a0
 800667c:	001e847f 	.word	0x001e847f
 8006680:	003d08ff 	.word	0x003d08ff
 8006684:	431bde83 	.word	0x431bde83
 8006688:	10624dd3 	.word	0x10624dd3

0800668c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	460b      	mov	r3, r1
 80066a0:	813b      	strh	r3, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066a6:	f7fe fb55 	bl	8004d54 <HAL_GetTick>
 80066aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	f040 80d9 	bne.w	800686c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	2319      	movs	r3, #25
 80066c0:	2201      	movs	r2, #1
 80066c2:	496d      	ldr	r1, [pc, #436]	@ (8006878 <HAL_I2C_Mem_Write+0x1ec>)
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 ff5f 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
 80066d2:	e0cc      	b.n	800686e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_Mem_Write+0x56>
 80066de:	2302      	movs	r3, #2
 80066e0:	e0c5      	b.n	800686e <HAL_I2C_Mem_Write+0x1e2>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d007      	beq.n	8006708 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2221      	movs	r2, #33	@ 0x21
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2240      	movs	r2, #64	@ 0x40
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a4d      	ldr	r2, [pc, #308]	@ (800687c <HAL_I2C_Mem_Write+0x1f0>)
 8006748:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800674a:	88f8      	ldrh	r0, [r7, #6]
 800674c:	893a      	ldrh	r2, [r7, #8]
 800674e:	8979      	ldrh	r1, [r7, #10]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4603      	mov	r3, r0
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fc7a 	bl	8007054 <I2C_RequestMemoryWrite>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d052      	beq.n	800680c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e081      	b.n	800686e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f001 f824 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	2b04      	cmp	r3, #4
 8006780:	d107      	bne.n	8006792 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e06b      	b.n	800686e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d11b      	bne.n	800680c <HAL_I2C_Mem_Write+0x180>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d017      	beq.n	800680c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1aa      	bne.n	800676a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f001 f817 	bl	800784c <I2C_WaitOnBTFFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00d      	beq.n	8006840 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006828:	2b04      	cmp	r3, #4
 800682a:	d107      	bne.n	800683c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800683a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e016      	b.n	800686e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800684e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	00100002 	.word	0x00100002
 800687c:	ffff0000 	.word	0xffff0000

08006880 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	@ 0x30
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	4608      	mov	r0, r1
 800688a:	4611      	mov	r1, r2
 800688c:	461a      	mov	r2, r3
 800688e:	4603      	mov	r3, r0
 8006890:	817b      	strh	r3, [r7, #10]
 8006892:	460b      	mov	r3, r1
 8006894:	813b      	strh	r3, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800689a:	f7fe fa5b 	bl	8004d54 <HAL_GetTick>
 800689e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	f040 8214 	bne.w	8006cd6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2319      	movs	r3, #25
 80068b4:	2201      	movs	r2, #1
 80068b6:	497b      	ldr	r1, [pc, #492]	@ (8006aa4 <HAL_I2C_Mem_Read+0x224>)
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 fe65 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	e207      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_I2C_Mem_Read+0x56>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e200      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d007      	beq.n	80068fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800690a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2222      	movs	r2, #34	@ 0x22
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2240      	movs	r2, #64	@ 0x40
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006926:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800692c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4a5b      	ldr	r2, [pc, #364]	@ (8006aa8 <HAL_I2C_Mem_Read+0x228>)
 800693c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800693e:	88f8      	ldrh	r0, [r7, #6]
 8006940:	893a      	ldrh	r2, [r7, #8]
 8006942:	8979      	ldrh	r1, [r7, #10]
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4603      	mov	r3, r0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fc16 	bl	8007180 <I2C_RequestMemoryRead>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e1bc      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d113      	bne.n	800698e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006966:	2300      	movs	r3, #0
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e190      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006992:	2b01      	cmp	r3, #1
 8006994:	d11b      	bne.n	80069ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e170      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d11b      	bne.n	8006a0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f6:	2300      	movs	r3, #0
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	e150      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a24:	e144      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	f200 80f1 	bhi.w	8006c12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d123      	bne.n	8006a80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 ff4d 	bl	80078dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e145      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a7e:	e117      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d14e      	bne.n	8006b26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4906      	ldr	r1, [pc, #24]	@ (8006aac <HAL_I2C_Mem_Read+0x22c>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fd78 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e11a      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
 8006aa2:	bf00      	nop
 8006aa4:	00100002 	.word	0x00100002
 8006aa8:	ffff0000 	.word	0xffff0000
 8006aac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b24:	e0c4      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	496c      	ldr	r1, [pc, #432]	@ (8006ce0 <HAL_I2C_Mem_Read+0x460>)
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fd29 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0cb      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4955      	ldr	r1, [pc, #340]	@ (8006ce0 <HAL_I2C_Mem_Read+0x460>)
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 fcfb 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e09d      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c10:	e04e      	b.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fe60 	bl	80078dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e058      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d124      	bne.n	8006cb0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d107      	bne.n	8006c7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f47f aeb6 	bne.w	8006a26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e000      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006cd6:	2302      	movs	r3, #2
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3728      	adds	r7, #40	@ 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	00010004 	.word	0x00010004

08006ce4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	@ 0x30
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	817b      	strh	r3, [r7, #10]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	813b      	strh	r3, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cfe:	f7fe f829 	bl	8004d54 <HAL_GetTick>
 8006d02:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	f040 8172 	bne.w	8006ffa <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d16:	4b93      	ldr	r3, [pc, #588]	@ (8006f64 <HAL_I2C_Mem_Read_DMA+0x280>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	08db      	lsrs	r3, r3, #3
 8006d1c:	4a92      	ldr	r2, [pc, #584]	@ (8006f68 <HAL_I2C_Mem_Read_DMA+0x284>)
 8006d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d22:	0a1a      	lsrs	r2, r3, #8
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009a      	lsls	r2, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d112      	bne.n	8006d62 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	f043 0220 	orr.w	r2, r3, #32
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e14c      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d0df      	beq.n	8006d30 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_I2C_Mem_Read_DMA+0x9a>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e13e      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d007      	beq.n	8006da4 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2222      	movs	r2, #34	@ 0x22
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2240      	movs	r2, #64	@ 0x40
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a62      	ldr	r2, [pc, #392]	@ (8006f6c <HAL_I2C_Mem_Read_DMA+0x288>)
 8006de4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006de6:	897a      	ldrh	r2, [r7, #10]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006dec:	893a      	ldrh	r2, [r7, #8]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80cc 	beq.w	8006fa0 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02d      	beq.n	8006e6c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	4a56      	ldr	r2, [pc, #344]	@ (8006f70 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006e16:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	4a55      	ldr	r2, [pc, #340]	@ (8006f74 <HAL_I2C_Mem_Read_DMA+0x290>)
 8006e1e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	2200      	movs	r2, #0
 8006e26:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	2200      	movs	r2, #0
 8006e36:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3310      	adds	r3, #16
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	461a      	mov	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e56:	f7fe fd7d 	bl	8005954 <HAL_DMA_Start_IT>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f040 8087 	bne.w	8006f78 <HAL_I2C_Mem_Read_DMA+0x294>
 8006e6a:	e013      	b.n	8006e94 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0b3      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006e94:	88f8      	ldrh	r0, [r7, #6]
 8006e96:	893a      	ldrh	r2, [r7, #8]
 8006e98:	8979      	ldrh	r1, [r7, #10]
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	2323      	movs	r3, #35	@ 0x23
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f96b 	bl	8007180 <I2C_RequestMemoryRead>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fe15 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e081      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d108      	bne.n	8006f12 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e007      	b.n	8006f22 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f4e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	e049      	b.n	8006ff6 <HAL_I2C_Mem_Read_DMA+0x312>
 8006f62:	bf00      	nop
 8006f64:	20000004 	.word	0x20000004
 8006f68:	14f8b589 	.word	0x14f8b589
 8006f6c:	ffff0000 	.word	0xffff0000
 8006f70:	08007351 	.word	0x08007351
 8006f74:	0800750f 	.word	0x0800750f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	f043 0210 	orr.w	r2, r3, #16
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e02d      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006fa0:	88f8      	ldrh	r0, [r7, #6]
 8006fa2:	893a      	ldrh	r2, [r7, #8]
 8006fa4:	8979      	ldrh	r1, [r7, #10]
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	2323      	movs	r3, #35	@ 0x23
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4603      	mov	r3, r0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f8e5 	bl	8007180 <I2C_RequestMemoryRead>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e01d      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fe4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e000      	b.n	8006ffc <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006ffa:	2302      	movs	r3, #2
  }
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	@ 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	461a      	mov	r2, r3
 8007062:	4603      	mov	r3, r0
 8007064:	817b      	strh	r3, [r7, #10]
 8007066:	460b      	mov	r3, r1
 8007068:	813b      	strh	r3, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800707c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	2200      	movs	r2, #0
 8007086:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fa7c 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00d      	beq.n	80070b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a4:	d103      	bne.n	80070ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e05f      	b.n	8007172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070b2:	897b      	ldrh	r3, [r7, #10]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	492d      	ldr	r1, [pc, #180]	@ (800717c <I2C_RequestMemoryWrite+0x128>)
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fad7 	bl	800767c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e04c      	b.n	8007172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f0:	6a39      	ldr	r1, [r7, #32]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fb62 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007102:	2b04      	cmp	r3, #4
 8007104:	d107      	bne.n	8007116 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e02b      	b.n	8007172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d105      	bne.n	800712c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007120:	893b      	ldrh	r3, [r7, #8]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	611a      	str	r2, [r3, #16]
 800712a:	e021      	b.n	8007170 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	b29b      	uxth	r3, r3
 8007132:	b2da      	uxtb	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800713a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713c:	6a39      	ldr	r1, [r7, #32]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fb3c 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00d      	beq.n	8007166 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714e:	2b04      	cmp	r3, #4
 8007150:	d107      	bne.n	8007162 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007160:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e005      	b.n	8007172 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007166:	893b      	ldrh	r3, [r7, #8]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	00010002 	.word	0x00010002

08007180 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	817b      	strh	r3, [r7, #10]
 8007192:	460b      	mov	r3, r1
 8007194:	813b      	strh	r3, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f9de 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00d      	beq.n	80071ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e0:	d103      	bne.n	80071ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e0aa      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ee:	897b      	ldrh	r3, [r7, #10]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	4952      	ldr	r1, [pc, #328]	@ (800734c <I2C_RequestMemoryRead+0x1cc>)
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fa39 	bl	800767c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e097      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800722a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722c:	6a39      	ldr	r1, [r7, #32]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fac4 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723e:	2b04      	cmp	r3, #4
 8007240:	d107      	bne.n	8007252 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e076      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800725c:	893b      	ldrh	r3, [r7, #8]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	611a      	str	r2, [r3, #16]
 8007266:	e021      	b.n	80072ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007268:	893b      	ldrh	r3, [r7, #8]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b29b      	uxth	r3, r3
 800726e:	b2da      	uxtb	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007278:	6a39      	ldr	r1, [r7, #32]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fa9e 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00d      	beq.n	80072a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	2b04      	cmp	r3, #4
 800728c:	d107      	bne.n	800729e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800729c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e050      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072a2:	893b      	ldrh	r3, [r7, #8]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ae:	6a39      	ldr	r1, [r7, #32]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fa83 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00d      	beq.n	80072d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d107      	bne.n	80072d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e035      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f947 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800730e:	d103      	bne.n	8007318 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e013      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800731c:	897b      	ldrh	r3, [r7, #10]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	b2da      	uxtb	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	6a3a      	ldr	r2, [r7, #32]
 8007330:	4906      	ldr	r1, [pc, #24]	@ (800734c <I2C_RequestMemoryRead+0x1cc>)
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f9a2 	bl	800767c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	00010002 	.word	0x00010002

08007350 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007364:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800736c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007372:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007382:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007390:	2200      	movs	r2, #0
 8007392:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	2200      	movs	r2, #0
 80073a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80073a4:	7cfb      	ldrb	r3, [r7, #19]
 80073a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80073aa:	2b21      	cmp	r3, #33	@ 0x21
 80073ac:	d007      	beq.n	80073be <I2C_DMAXferCplt+0x6e>
 80073ae:	7cfb      	ldrb	r3, [r7, #19]
 80073b0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80073b4:	2b22      	cmp	r3, #34	@ 0x22
 80073b6:	d131      	bne.n	800741c <I2C_DMAXferCplt+0xcc>
 80073b8:	7cbb      	ldrb	r3, [r7, #18]
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d12e      	bne.n	800741c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073cc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80073d4:	7cfb      	ldrb	r3, [r7, #19]
 80073d6:	2b29      	cmp	r3, #41	@ 0x29
 80073d8:	d10a      	bne.n	80073f0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2221      	movs	r2, #33	@ 0x21
 80073de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2228      	movs	r2, #40	@ 0x28
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f7ff fe15 	bl	8007018 <HAL_I2C_SlaveTxCpltCallback>
 80073ee:	e00c      	b.n	800740a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073f0:	7cfb      	ldrb	r3, [r7, #19]
 80073f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f4:	d109      	bne.n	800740a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2222      	movs	r2, #34	@ 0x22
 80073fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2228      	movs	r2, #40	@ 0x28
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007404:	6978      	ldr	r0, [r7, #20]
 8007406:	f7ff fe11 	bl	800702c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007418:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800741a:	e074      	b.n	8007506 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d06e      	beq.n	8007506 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007440:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007450:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007458:	d009      	beq.n	800746e <I2C_DMAXferCplt+0x11e>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d006      	beq.n	800746e <I2C_DMAXferCplt+0x11e>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007466:	d002      	beq.n	800746e <I2C_DMAXferCplt+0x11e>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b20      	cmp	r3, #32
 800746c:	d107      	bne.n	800747e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800747c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800748c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800749c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80074ac:	6978      	ldr	r0, [r7, #20]
 80074ae:	f7ff fdc7 	bl	8007040 <HAL_I2C_ErrorCallback>
}
 80074b2:	e028      	b.n	8007506 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	d10a      	bne.n	80074de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80074d6:	6978      	ldr	r0, [r7, #20]
 80074d8:	f7fa f9c4 	bl	8001864 <HAL_I2C_MemRxCpltCallback>
}
 80074dc:	e013      	b.n	8007506 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d002      	beq.n	80074f2 <I2C_DMAXferCplt+0x1a2>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d103      	bne.n	80074fa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80074f8:	e002      	b.n	8007500 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2212      	movs	r2, #18
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007500:	6978      	ldr	r0, [r7, #20]
 8007502:	f7ff fd7f 	bl	8007004 <HAL_I2C_MasterRxCpltCallback>
}
 8007506:	bf00      	nop
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007528:	2200      	movs	r2, #0
 800752a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	2200      	movs	r2, #0
 800753a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fe fc7d 	bl	8005e3c <HAL_DMA_GetError>
 8007542:	4603      	mov	r3, r0
 8007544:	2b02      	cmp	r3, #2
 8007546:	d01b      	beq.n	8007580 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007556:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	f043 0210 	orr.w	r2, r3, #16
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff fd60 	bl	8007040 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007598:	e048      	b.n	800762c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075a0:	d044      	beq.n	800762c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a2:	f7fd fbd7 	bl	8004d54 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d302      	bcc.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d139      	bne.n	800762c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d10d      	bne.n	80075de <I2C_WaitOnFlagUntilTimeout+0x56>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	43da      	mvns	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4013      	ands	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	e00c      	b.n	80075f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	43da      	mvns	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4013      	ands	r3, r2
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bf0c      	ite	eq
 80075f0:	2301      	moveq	r3, #1
 80075f2:	2300      	movne	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d116      	bne.n	800762c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e023      	b.n	8007674 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	d10d      	bne.n	8007652 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	43da      	mvns	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	e00c      	b.n	800766c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	43da      	mvns	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4013      	ands	r3, r2
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	bf0c      	ite	eq
 8007664:	2301      	moveq	r3, #1
 8007666:	2300      	movne	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	429a      	cmp	r2, r3
 8007670:	d093      	beq.n	800759a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800768a:	e071      	b.n	8007770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800769a:	d123      	bne.n	80076e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80076b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d0:	f043 0204 	orr.w	r2, r3, #4
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e067      	b.n	80077b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ea:	d041      	beq.n	8007770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ec:	f7fd fb32 	bl	8004d54 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d302      	bcc.n	8007702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d136      	bne.n	8007770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10c      	bne.n	8007726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	43da      	mvns	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4013      	ands	r3, r2
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	e00b      	b.n	800773e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	43da      	mvns	r2, r3
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e021      	b.n	80077b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b01      	cmp	r3, #1
 8007778:	d10c      	bne.n	8007794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	43da      	mvns	r2, r3
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	4013      	ands	r3, r2
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e00b      	b.n	80077ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	43da      	mvns	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f47f af6d 	bne.w	800768c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c8:	e034      	b.n	8007834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f8e3 	bl	8007996 <I2C_IsAcknowledgeFailed>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e034      	b.n	8007844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077e0:	d028      	beq.n	8007834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e2:	f7fd fab7 	bl	8004d54 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11d      	bne.n	8007834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007802:	2b80      	cmp	r3, #128	@ 0x80
 8007804:	d016      	beq.n	8007834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007820:	f043 0220 	orr.w	r2, r3, #32
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e007      	b.n	8007844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783e:	2b80      	cmp	r3, #128	@ 0x80
 8007840:	d1c3      	bne.n	80077ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007858:	e034      	b.n	80078c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f89b 	bl	8007996 <I2C_IsAcknowledgeFailed>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e034      	b.n	80078d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007870:	d028      	beq.n	80078c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007872:	f7fd fa6f 	bl	8004d54 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	429a      	cmp	r2, r3
 8007880:	d302      	bcc.n	8007888 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11d      	bne.n	80078c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b04      	cmp	r3, #4
 8007894:	d016      	beq.n	80078c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b0:	f043 0220 	orr.w	r2, r3, #32
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e007      	b.n	80078d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d1c3      	bne.n	800785a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e8:	e049      	b.n	800797e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b10      	cmp	r3, #16
 80078f6:	d119      	bne.n	800792c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0210 	mvn.w	r2, #16
 8007900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e030      	b.n	800798e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792c:	f7fd fa12 	bl	8004d54 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	429a      	cmp	r2, r3
 800793a:	d302      	bcc.n	8007942 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d11d      	bne.n	800797e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794c:	2b40      	cmp	r3, #64	@ 0x40
 800794e:	d016      	beq.n	800797e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	f043 0220 	orr.w	r2, r3, #32
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e007      	b.n	800798e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b40      	cmp	r3, #64	@ 0x40
 800798a:	d1ae      	bne.n	80078ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ac:	d11b      	bne.n	80079e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d2:	f043 0204 	orr.w	r2, r3, #4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0cc      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a08:	4b68      	ldr	r3, [pc, #416]	@ (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d90c      	bls.n	8007a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a16:	4b65      	ldr	r3, [pc, #404]	@ (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1e:	4b63      	ldr	r3, [pc, #396]	@ (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0b8      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d020      	beq.n	8007a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a48:	4b59      	ldr	r3, [pc, #356]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	4a58      	ldr	r2, [pc, #352]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a60:	4b53      	ldr	r3, [pc, #332]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a52      	ldr	r2, [pc, #328]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a6c:	4b50      	ldr	r3, [pc, #320]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	494d      	ldr	r1, [pc, #308]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d044      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a92:	4b47      	ldr	r3, [pc, #284]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d119      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e07f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e06f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e067      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ad2:	4b37      	ldr	r3, [pc, #220]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4934      	ldr	r1, [pc, #208]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ae4:	f7fd f936 	bl	8004d54 <HAL_GetTick>
 8007ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aec:	f7fd f932 	bl	8004d54 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e04f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	4b2b      	ldr	r3, [pc, #172]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 020c 	and.w	r2, r3, #12
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d1eb      	bne.n	8007aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b14:	4b25      	ldr	r3, [pc, #148]	@ (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d20c      	bcs.n	8007b3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b22:	4b22      	ldr	r3, [pc, #136]	@ (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2a:	4b20      	ldr	r3, [pc, #128]	@ (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d001      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e032      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b48:	4b19      	ldr	r3, [pc, #100]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	4916      	ldr	r1, [pc, #88]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b66:	4b12      	ldr	r3, [pc, #72]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	490e      	ldr	r1, [pc, #56]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b7a:	f000 f855 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	490a      	ldr	r1, [pc, #40]	@ (8007bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b8c:	5ccb      	ldrb	r3, [r1, r3]
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	4a09      	ldr	r2, [pc, #36]	@ (8007bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b96:	4b09      	ldr	r3, [pc, #36]	@ (8007bbc <HAL_RCC_ClockConfig+0x1c8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd f896 	bl	8004ccc <HAL_InitTick>

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40023c00 	.word	0x40023c00
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	080100fc 	.word	0x080100fc
 8007bb8:	20000004 	.word	0x20000004
 8007bbc:	200003d0 	.word	0x200003d0

08007bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bc4:	4b03      	ldr	r3, [pc, #12]	@ (8007bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000004 	.word	0x20000004

08007bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bdc:	f7ff fff0 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8007be0:	4602      	mov	r2, r0
 8007be2:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	0a9b      	lsrs	r3, r3, #10
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	4903      	ldr	r1, [pc, #12]	@ (8007bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bee:	5ccb      	ldrb	r3, [r1, r3]
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	0801010c 	.word	0x0801010c

08007c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c04:	f7ff ffdc 	bl	8007bc0 <HAL_RCC_GetHCLKFreq>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	4b05      	ldr	r3, [pc, #20]	@ (8007c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	0b5b      	lsrs	r3, r3, #13
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	4903      	ldr	r1, [pc, #12]	@ (8007c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c16:	5ccb      	ldrb	r3, [r1, r3]
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40023800 	.word	0x40023800
 8007c24:	0801010c 	.word	0x0801010c

08007c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b0ae      	sub	sp, #184	@ 0xb8
 8007c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c4e:	4bcb      	ldr	r3, [pc, #812]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 030c 	and.w	r3, r3, #12
 8007c56:	2b0c      	cmp	r3, #12
 8007c58:	f200 8206 	bhi.w	8008068 <HAL_RCC_GetSysClockFreq+0x440>
 8007c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08008069 	.word	0x08008069
 8007c6c:	08008069 	.word	0x08008069
 8007c70:	08008069 	.word	0x08008069
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	08008069 	.word	0x08008069
 8007c7c:	08008069 	.word	0x08008069
 8007c80:	08008069 	.word	0x08008069
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08008069 	.word	0x08008069
 8007c8c:	08008069 	.word	0x08008069
 8007c90:	08008069 	.word	0x08008069
 8007c94:	08007e99 	.word	0x08007e99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c98:	4bb9      	ldr	r3, [pc, #740]	@ (8007f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8007c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c9e:	e1e7      	b.n	8008070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ca0:	4bb8      	ldr	r3, [pc, #736]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007ca6:	e1e3      	b.n	8008070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ca8:	4bb4      	ldr	r3, [pc, #720]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cb4:	4bb1      	ldr	r3, [pc, #708]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d071      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cc0:	4bae      	ldr	r3, [pc, #696]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	099b      	lsrs	r3, r3, #6
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ccc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	462b      	mov	r3, r5
 8007cea:	f04f 0000 	mov.w	r0, #0
 8007cee:	f04f 0100 	mov.w	r1, #0
 8007cf2:	0159      	lsls	r1, r3, #5
 8007cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cf8:	0150      	lsls	r0, r2, #5
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4621      	mov	r1, r4
 8007d00:	1a51      	subs	r1, r2, r1
 8007d02:	6439      	str	r1, [r7, #64]	@ 0x40
 8007d04:	4629      	mov	r1, r5
 8007d06:	eb63 0301 	sbc.w	r3, r3, r1
 8007d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007d18:	4649      	mov	r1, r9
 8007d1a:	018b      	lsls	r3, r1, #6
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d22:	4641      	mov	r1, r8
 8007d24:	018a      	lsls	r2, r1, #6
 8007d26:	4641      	mov	r1, r8
 8007d28:	1a51      	subs	r1, r2, r1
 8007d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007d40:	4649      	mov	r1, r9
 8007d42:	00cb      	lsls	r3, r1, #3
 8007d44:	4641      	mov	r1, r8
 8007d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	00ca      	lsls	r2, r1, #3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	4622      	mov	r2, r4
 8007d56:	189b      	adds	r3, r3, r2
 8007d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	460a      	mov	r2, r1
 8007d5e:	eb42 0303 	adc.w	r3, r2, r3
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d70:	4629      	mov	r1, r5
 8007d72:	024b      	lsls	r3, r1, #9
 8007d74:	4621      	mov	r1, r4
 8007d76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	024a      	lsls	r2, r1, #9
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4619      	mov	r1, r3
 8007d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007d94:	f7f8 ffa8 	bl	8000ce8 <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007da2:	e067      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007da4:	4b75      	ldr	r3, [pc, #468]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	099b      	lsrs	r3, r3, #6
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007db0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	462b      	mov	r3, r5
 8007dca:	f04f 0000 	mov.w	r0, #0
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	0159      	lsls	r1, r3, #5
 8007dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dd8:	0150      	lsls	r0, r2, #5
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4621      	mov	r1, r4
 8007de0:	1a51      	subs	r1, r2, r1
 8007de2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007de4:	4629      	mov	r1, r5
 8007de6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007df8:	4649      	mov	r1, r9
 8007dfa:	018b      	lsls	r3, r1, #6
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e02:	4641      	mov	r1, r8
 8007e04:	018a      	lsls	r2, r1, #6
 8007e06:	4641      	mov	r1, r8
 8007e08:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e26:	4692      	mov	sl, r2
 8007e28:	469b      	mov	fp, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	eb1a 0303 	adds.w	r3, sl, r3
 8007e30:	623b      	str	r3, [r7, #32]
 8007e32:	462b      	mov	r3, r5
 8007e34:	eb4b 0303 	adc.w	r3, fp, r3
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007e46:	4629      	mov	r1, r5
 8007e48:	028b      	lsls	r3, r1, #10
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e50:	4621      	mov	r1, r4
 8007e52:	028a      	lsls	r2, r1, #10
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e60:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007e66:	f7f8 ff3f 	bl	8000ce8 <__aeabi_uldivmod>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4613      	mov	r3, r2
 8007e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007e74:	4b41      	ldr	r3, [pc, #260]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	0c1b      	lsrs	r3, r3, #16
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	3301      	adds	r3, #1
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007e96:	e0eb      	b.n	8008070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e98:	4b38      	ldr	r3, [pc, #224]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ea4:	4b35      	ldr	r3, [pc, #212]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d06b      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb0:	4b32      	ldr	r3, [pc, #200]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	099b      	lsrs	r3, r3, #6
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ec8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	f04f 0000 	mov.w	r0, #0
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	0159      	lsls	r1, r3, #5
 8007eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ede:	0150      	lsls	r0, r2, #5
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	1a51      	subs	r1, r2, r1
 8007ee8:	61b9      	str	r1, [r7, #24]
 8007eea:	4629      	mov	r1, r5
 8007eec:	eb63 0301 	sbc.w	r3, r3, r1
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007efe:	4659      	mov	r1, fp
 8007f00:	018b      	lsls	r3, r1, #6
 8007f02:	4651      	mov	r1, sl
 8007f04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f08:	4651      	mov	r1, sl
 8007f0a:	018a      	lsls	r2, r1, #6
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	ebb2 0801 	subs.w	r8, r2, r1
 8007f12:	4659      	mov	r1, fp
 8007f14:	eb63 0901 	sbc.w	r9, r3, r1
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	4699      	mov	r9, r3
 8007f30:	4623      	mov	r3, r4
 8007f32:	eb18 0303 	adds.w	r3, r8, r3
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	462b      	mov	r3, r5
 8007f3a:	eb49 0303 	adc.w	r3, r9, r3
 8007f3e:	617b      	str	r3, [r7, #20]
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	024b      	lsls	r3, r1, #9
 8007f50:	4621      	mov	r1, r4
 8007f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f56:	4621      	mov	r1, r4
 8007f58:	024a      	lsls	r2, r1, #9
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f62:	2200      	movs	r2, #0
 8007f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007f68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f6c:	f7f8 febc 	bl	8000ce8 <__aeabi_uldivmod>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4613      	mov	r3, r2
 8007f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f7a:	e065      	b.n	8008048 <HAL_RCC_GetSysClockFreq+0x420>
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	00f42400 	.word	0x00f42400
 8007f84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f88:	4b3d      	ldr	r3, [pc, #244]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x458>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	099b      	lsrs	r3, r3, #6
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	4611      	mov	r1, r2
 8007f94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f98:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007fa2:	4642      	mov	r2, r8
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	f04f 0000 	mov.w	r0, #0
 8007faa:	f04f 0100 	mov.w	r1, #0
 8007fae:	0159      	lsls	r1, r3, #5
 8007fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fb4:	0150      	lsls	r0, r2, #5
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4641      	mov	r1, r8
 8007fbc:	1a51      	subs	r1, r2, r1
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	018b      	lsls	r3, r1, #6
 8007fd8:	4651      	mov	r1, sl
 8007fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fde:	4651      	mov	r1, sl
 8007fe0:	018a      	lsls	r2, r1, #6
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	1a54      	subs	r4, r2, r1
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	eb63 0501 	sbc.w	r5, r3, r1
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	00eb      	lsls	r3, r5, #3
 8007ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ffa:	00e2      	lsls	r2, r4, #3
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	461d      	mov	r5, r3
 8008000:	4643      	mov	r3, r8
 8008002:	18e3      	adds	r3, r4, r3
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	464b      	mov	r3, r9
 8008008:	eb45 0303 	adc.w	r3, r5, r3
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800801a:	4629      	mov	r1, r5
 800801c:	028b      	lsls	r3, r1, #10
 800801e:	4621      	mov	r1, r4
 8008020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008024:	4621      	mov	r1, r4
 8008026:	028a      	lsls	r2, r1, #10
 8008028:	4610      	mov	r0, r2
 800802a:	4619      	mov	r1, r3
 800802c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008030:	2200      	movs	r2, #0
 8008032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008034:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008036:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800803a:	f7f8 fe55 	bl	8000ce8 <__aeabi_uldivmod>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4613      	mov	r3, r2
 8008044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008048:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <HAL_RCC_GetSysClockFreq+0x458>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	0f1b      	lsrs	r3, r3, #28
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800805a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800805e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008062:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008066:	e003      	b.n	8008070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008068:	4b06      	ldr	r3, [pc, #24]	@ (8008084 <HAL_RCC_GetSysClockFreq+0x45c>)
 800806a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800806e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008074:	4618      	mov	r0, r3
 8008076:	37b8      	adds	r7, #184	@ 0xb8
 8008078:	46bd      	mov	sp, r7
 800807a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800807e:	bf00      	nop
 8008080:	40023800 	.word	0x40023800
 8008084:	00f42400 	.word	0x00f42400

08008088 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e28d      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 8083 	beq.w	80081ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80080a8:	4b94      	ldr	r3, [pc, #592]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 030c 	and.w	r3, r3, #12
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d019      	beq.n	80080e8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80080b4:	4b91      	ldr	r3, [pc, #580]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f003 030c 	and.w	r3, r3, #12
        || \
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d106      	bne.n	80080ce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80080c0:	4b8e      	ldr	r3, [pc, #568]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080cc:	d00c      	beq.n	80080e8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ce:	4b8b      	ldr	r3, [pc, #556]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80080d6:	2b0c      	cmp	r3, #12
 80080d8:	d112      	bne.n	8008100 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080da:	4b88      	ldr	r3, [pc, #544]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e6:	d10b      	bne.n	8008100 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e8:	4b84      	ldr	r3, [pc, #528]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d05b      	beq.n	80081ac <HAL_RCC_OscConfig+0x124>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d157      	bne.n	80081ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e25a      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008108:	d106      	bne.n	8008118 <HAL_RCC_OscConfig+0x90>
 800810a:	4b7c      	ldr	r3, [pc, #496]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a7b      	ldr	r2, [pc, #492]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	e01d      	b.n	8008154 <HAL_RCC_OscConfig+0xcc>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008120:	d10c      	bne.n	800813c <HAL_RCC_OscConfig+0xb4>
 8008122:	4b76      	ldr	r3, [pc, #472]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a75      	ldr	r2, [pc, #468]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b73      	ldr	r3, [pc, #460]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a72      	ldr	r2, [pc, #456]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e00b      	b.n	8008154 <HAL_RCC_OscConfig+0xcc>
 800813c:	4b6f      	ldr	r3, [pc, #444]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6e      	ldr	r2, [pc, #440]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4b6c      	ldr	r3, [pc, #432]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a6b      	ldr	r2, [pc, #428]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800814e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d013      	beq.n	8008184 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fc fdfa 	bl	8004d54 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008164:	f7fc fdf6 	bl	8004d54 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b64      	cmp	r3, #100	@ 0x64
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e21f      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008176:	4b61      	ldr	r3, [pc, #388]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <HAL_RCC_OscConfig+0xdc>
 8008182:	e014      	b.n	80081ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fc fde6 	bl	8004d54 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800818c:	f7fc fde2 	bl	8004d54 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b64      	cmp	r3, #100	@ 0x64
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e20b      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800819e:	4b57      	ldr	r3, [pc, #348]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <HAL_RCC_OscConfig+0x104>
 80081aa:	e000      	b.n	80081ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d06f      	beq.n	800829a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80081ba:	4b50      	ldr	r3, [pc, #320]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 030c 	and.w	r3, r3, #12
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d017      	beq.n	80081f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80081c6:	4b4d      	ldr	r3, [pc, #308]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d105      	bne.n	80081de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80081d2:	4b4a      	ldr	r3, [pc, #296]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081de:	4b47      	ldr	r3, [pc, #284]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80081e6:	2b0c      	cmp	r3, #12
 80081e8:	d11c      	bne.n	8008224 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ea:	4b44      	ldr	r3, [pc, #272]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d116      	bne.n	8008224 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081f6:	4b41      	ldr	r3, [pc, #260]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <HAL_RCC_OscConfig+0x186>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d001      	beq.n	800820e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e1d3      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820e:	4b3b      	ldr	r3, [pc, #236]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4937      	ldr	r1, [pc, #220]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800821e:	4313      	orrs	r3, r2
 8008220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008222:	e03a      	b.n	800829a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d020      	beq.n	800826e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800822c:	4b34      	ldr	r3, [pc, #208]	@ (8008300 <HAL_RCC_OscConfig+0x278>)
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008232:	f7fc fd8f 	bl	8004d54 <HAL_GetTick>
 8008236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008238:	e008      	b.n	800824c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800823a:	f7fc fd8b 	bl	8004d54 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e1b4      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800824c:	4b2b      	ldr	r3, [pc, #172]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0f0      	beq.n	800823a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008258:	4b28      	ldr	r3, [pc, #160]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4925      	ldr	r1, [pc, #148]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008268:	4313      	orrs	r3, r2
 800826a:	600b      	str	r3, [r1, #0]
 800826c:	e015      	b.n	800829a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800826e:	4b24      	ldr	r3, [pc, #144]	@ (8008300 <HAL_RCC_OscConfig+0x278>)
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7fc fd6e 	bl	8004d54 <HAL_GetTick>
 8008278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800827c:	f7fc fd6a 	bl	8004d54 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e193      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800828e:	4b1b      	ldr	r3, [pc, #108]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1f0      	bne.n	800827c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0308 	and.w	r3, r3, #8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d036      	beq.n	8008314 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d016      	beq.n	80082dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082ae:	4b15      	ldr	r3, [pc, #84]	@ (8008304 <HAL_RCC_OscConfig+0x27c>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b4:	f7fc fd4e 	bl	8004d54 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082bc:	f7fc fd4a 	bl	8004d54 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e173      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ce:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <HAL_RCC_OscConfig+0x274>)
 80082d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0x234>
 80082da:	e01b      	b.n	8008314 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082dc:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <HAL_RCC_OscConfig+0x27c>)
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e2:	f7fc fd37 	bl	8004d54 <HAL_GetTick>
 80082e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082e8:	e00e      	b.n	8008308 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082ea:	f7fc fd33 	bl	8004d54 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d907      	bls.n	8008308 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e15c      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
 80082fc:	40023800 	.word	0x40023800
 8008300:	42470000 	.word	0x42470000
 8008304:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008308:	4b8a      	ldr	r3, [pc, #552]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800830a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1ea      	bne.n	80082ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8097 	beq.w	8008450 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008326:	4b83      	ldr	r3, [pc, #524]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10f      	bne.n	8008352 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008332:	2300      	movs	r3, #0
 8008334:	60bb      	str	r3, [r7, #8]
 8008336:	4b7f      	ldr	r3, [pc, #508]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	4a7e      	ldr	r2, [pc, #504]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008340:	6413      	str	r3, [r2, #64]	@ 0x40
 8008342:	4b7c      	ldr	r3, [pc, #496]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800834a:	60bb      	str	r3, [r7, #8]
 800834c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800834e:	2301      	movs	r3, #1
 8008350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008352:	4b79      	ldr	r3, [pc, #484]	@ (8008538 <HAL_RCC_OscConfig+0x4b0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835a:	2b00      	cmp	r3, #0
 800835c:	d118      	bne.n	8008390 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800835e:	4b76      	ldr	r3, [pc, #472]	@ (8008538 <HAL_RCC_OscConfig+0x4b0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a75      	ldr	r2, [pc, #468]	@ (8008538 <HAL_RCC_OscConfig+0x4b0>)
 8008364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800836a:	f7fc fcf3 	bl	8004d54 <HAL_GetTick>
 800836e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008370:	e008      	b.n	8008384 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008372:	f7fc fcef 	bl	8004d54 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e118      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008384:	4b6c      	ldr	r3, [pc, #432]	@ (8008538 <HAL_RCC_OscConfig+0x4b0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0f0      	beq.n	8008372 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d106      	bne.n	80083a6 <HAL_RCC_OscConfig+0x31e>
 8008398:	4b66      	ldr	r3, [pc, #408]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800839a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839c:	4a65      	ldr	r2, [pc, #404]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a4:	e01c      	b.n	80083e0 <HAL_RCC_OscConfig+0x358>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCC_OscConfig+0x340>
 80083ae:	4b61      	ldr	r3, [pc, #388]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b2:	4a60      	ldr	r2, [pc, #384]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083b4:	f043 0304 	orr.w	r3, r3, #4
 80083b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083ba:	4b5e      	ldr	r3, [pc, #376]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083be:	4a5d      	ldr	r2, [pc, #372]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80083c6:	e00b      	b.n	80083e0 <HAL_RCC_OscConfig+0x358>
 80083c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083cc:	4a59      	ldr	r2, [pc, #356]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083d4:	4b57      	ldr	r3, [pc, #348]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d8:	4a56      	ldr	r2, [pc, #344]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80083da:	f023 0304 	bic.w	r3, r3, #4
 80083de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d015      	beq.n	8008414 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e8:	f7fc fcb4 	bl	8004d54 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ee:	e00a      	b.n	8008406 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f0:	f7fc fcb0 	bl	8004d54 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083fe:	4293      	cmp	r3, r2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e0d7      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008406:	4b4b      	ldr	r3, [pc, #300]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0ee      	beq.n	80083f0 <HAL_RCC_OscConfig+0x368>
 8008412:	e014      	b.n	800843e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008414:	f7fc fc9e 	bl	8004d54 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800841a:	e00a      	b.n	8008432 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800841c:	f7fc fc9a 	bl	8004d54 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e0c1      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008432:	4b40      	ldr	r3, [pc, #256]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1ee      	bne.n	800841c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d105      	bne.n	8008450 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008444:	4b3b      	ldr	r3, [pc, #236]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	4a3a      	ldr	r2, [pc, #232]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800844a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800844e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80ad 	beq.w	80085b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800845a:	4b36      	ldr	r3, [pc, #216]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 030c 	and.w	r3, r3, #12
 8008462:	2b08      	cmp	r3, #8
 8008464:	d060      	beq.n	8008528 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d145      	bne.n	80084fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800846e:	4b33      	ldr	r3, [pc, #204]	@ (800853c <HAL_RCC_OscConfig+0x4b4>)
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008474:	f7fc fc6e 	bl	8004d54 <HAL_GetTick>
 8008478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800847c:	f7fc fc6a 	bl	8004d54 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e093      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800848e:	4b29      	ldr	r3, [pc, #164]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f0      	bne.n	800847c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69da      	ldr	r2, [r3, #28]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a8:	019b      	lsls	r3, r3, #6
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	3b01      	subs	r3, #1
 80084b4:	041b      	lsls	r3, r3, #16
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	061b      	lsls	r3, r3, #24
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c4:	071b      	lsls	r3, r3, #28
 80084c6:	491b      	ldr	r1, [pc, #108]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084cc:	4b1b      	ldr	r3, [pc, #108]	@ (800853c <HAL_RCC_OscConfig+0x4b4>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d2:	f7fc fc3f 	bl	8004d54 <HAL_GetTick>
 80084d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084d8:	e008      	b.n	80084ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084da:	f7fc fc3b 	bl	8004d54 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e064      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0f0      	beq.n	80084da <HAL_RCC_OscConfig+0x452>
 80084f8:	e05c      	b.n	80085b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084fa:	4b10      	ldr	r3, [pc, #64]	@ (800853c <HAL_RCC_OscConfig+0x4b4>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fc fc28 	bl	8004d54 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008508:	f7fc fc24 	bl	8004d54 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e04d      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800851a:	4b06      	ldr	r3, [pc, #24]	@ (8008534 <HAL_RCC_OscConfig+0x4ac>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f0      	bne.n	8008508 <HAL_RCC_OscConfig+0x480>
 8008526:	e045      	b.n	80085b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d107      	bne.n	8008540 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e040      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
 8008534:	40023800 	.word	0x40023800
 8008538:	40007000 	.word	0x40007000
 800853c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008540:	4b1f      	ldr	r3, [pc, #124]	@ (80085c0 <HAL_RCC_OscConfig+0x538>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d030      	beq.n	80085b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008558:	429a      	cmp	r2, r3
 800855a:	d129      	bne.n	80085b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008566:	429a      	cmp	r2, r3
 8008568:	d122      	bne.n	80085b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008570:	4013      	ands	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008578:	4293      	cmp	r3, r2
 800857a:	d119      	bne.n	80085b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008586:	085b      	lsrs	r3, r3, #1
 8008588:	3b01      	subs	r3, #1
 800858a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800858c:	429a      	cmp	r2, r3
 800858e:	d10f      	bne.n	80085b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800859c:	429a      	cmp	r2, r3
 800859e:	d107      	bne.n	80085b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40023800 	.word	0x40023800

080085c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e07b      	b.n	80086ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d108      	bne.n	80085f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085e6:	d009      	beq.n	80085fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	61da      	str	r2, [r3, #28]
 80085ee:	e005      	b.n	80085fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7f9 f9a2 	bl	8001960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008680:	ea42 0103 	orr.w	r1, r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008688:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	f003 0104 	and.w	r1, r3, #4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a2:	f003 0210 	and.w	r2, r3, #16
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69da      	ldr	r2, [r3, #28]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b088      	sub	sp, #32
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	603b      	str	r3, [r7, #0]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086e6:	f7fc fb35 	bl	8004d54 <HAL_GetTick>
 80086ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d001      	beq.n	8008700 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
 80086fe:	e12a      	b.n	8008956 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_SPI_Transmit+0x36>
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e122      	b.n	8008956 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008716:	2b01      	cmp	r3, #1
 8008718:	d101      	bne.n	800871e <HAL_SPI_Transmit+0x48>
 800871a:	2302      	movs	r3, #2
 800871c:	e11b      	b.n	8008956 <HAL_SPI_Transmit+0x280>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2203      	movs	r2, #3
 800872a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	88fa      	ldrh	r2, [r7, #6]
 800873e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800876c:	d10f      	bne.n	800878e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800877c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800878c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008798:	2b40      	cmp	r3, #64	@ 0x40
 800879a:	d007      	beq.n	80087ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b4:	d152      	bne.n	800885c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_SPI_Transmit+0xee>
 80087be:	8b7b      	ldrh	r3, [r7, #26]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d145      	bne.n	8008850 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c8:	881a      	ldrh	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d4:	1c9a      	adds	r2, r3, #2
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087e8:	e032      	b.n	8008850 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d112      	bne.n	800881e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fc:	881a      	ldrh	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008808:	1c9a      	adds	r2, r3, #2
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800881c:	e018      	b.n	8008850 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800881e:	f7fc fa99 	bl	8004d54 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d803      	bhi.n	8008836 <HAL_SPI_Transmit+0x160>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008834:	d102      	bne.n	800883c <HAL_SPI_Transmit+0x166>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e082      	b.n	8008956 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1c7      	bne.n	80087ea <HAL_SPI_Transmit+0x114>
 800885a:	e053      	b.n	8008904 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <HAL_SPI_Transmit+0x194>
 8008864:	8b7b      	ldrh	r3, [r7, #26]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d147      	bne.n	80088fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	7812      	ldrb	r2, [r2, #0]
 8008876:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008890:	e033      	b.n	80088fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b02      	cmp	r3, #2
 800889e:	d113      	bne.n	80088c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	330c      	adds	r3, #12
 80088aa:	7812      	ldrb	r2, [r2, #0]
 80088ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80088c6:	e018      	b.n	80088fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088c8:	f7fc fa44 	bl	8004d54 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d803      	bhi.n	80088e0 <HAL_SPI_Transmit+0x20a>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088de:	d102      	bne.n	80088e6 <HAL_SPI_Transmit+0x210>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e02d      	b.n	8008956 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1c6      	bne.n	8008892 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f8b1 	bl	8008a70 <SPI_EndRxTxTransaction>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008922:	2300      	movs	r3, #0
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008954:	2300      	movs	r3, #0
  }
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008970:	f7fc f9f0 	bl	8004d54 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	1a9b      	subs	r3, r3, r2
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	4413      	add	r3, r2
 800897e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008980:	f7fc f9e8 	bl	8004d54 <HAL_GetTick>
 8008984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008986:	4b39      	ldr	r3, [pc, #228]	@ (8008a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	015b      	lsls	r3, r3, #5
 800898c:	0d1b      	lsrs	r3, r3, #20
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	fb02 f303 	mul.w	r3, r2, r3
 8008994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008996:	e055      	b.n	8008a44 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800899e:	d051      	beq.n	8008a44 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089a0:	f7fc f9d8 	bl	8004d54 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d902      	bls.n	80089b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d13d      	bne.n	8008a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089ce:	d111      	bne.n	80089f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089d8:	d004      	beq.n	80089e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089e2:	d107      	bne.n	80089f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089fc:	d10f      	bne.n	8008a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e018      	b.n	8008a64 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e002      	b.n	8008a44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bf0c      	ite	eq
 8008a54:	2301      	moveq	r3, #1
 8008a56:	2300      	movne	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d19a      	bne.n	8008998 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3720      	adds	r7, #32
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20000004 	.word	0x20000004

08008a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2201      	movs	r2, #1
 8008a84:	2102      	movs	r1, #2
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff ff6a 	bl	8008960 <SPI_WaitFlagStateUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a96:	f043 0220 	orr.w	r2, r3, #32
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e032      	b.n	8008b08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <SPI_EndRxTxTransaction+0xa0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8008b14 <SPI_EndRxTxTransaction+0xa4>)
 8008aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aac:	0d5b      	lsrs	r3, r3, #21
 8008aae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
 8008ab6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ac0:	d112      	bne.n	8008ae8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2180      	movs	r1, #128	@ 0x80
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7ff ff47 	bl	8008960 <SPI_WaitFlagStateUntilTimeout>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d016      	beq.n	8008b06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008adc:	f043 0220 	orr.w	r2, r3, #32
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e00f      	b.n	8008b08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008afe:	2b80      	cmp	r3, #128	@ 0x80
 8008b00:	d0f2      	beq.n	8008ae8 <SPI_EndRxTxTransaction+0x78>
 8008b02:	e000      	b.n	8008b06 <SPI_EndRxTxTransaction+0x96>
        break;
 8008b04:	bf00      	nop
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000004 	.word	0x20000004
 8008b14:	165e9f81 	.word	0x165e9f81

08008b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e041      	b.n	8008bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7f9 fb88 	bl	8002254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f000 fcc4 	bl	80094e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d001      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e04e      	b.n	8008c6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0201 	orr.w	r2, r2, #1
 8008be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a23      	ldr	r2, [pc, #140]	@ (8008c7c <HAL_TIM_Base_Start_IT+0xc4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d022      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfa:	d01d      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a1f      	ldr	r2, [pc, #124]	@ (8008c80 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d018      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008c84 <HAL_TIM_Base_Start_IT+0xcc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a1c      	ldr	r2, [pc, #112]	@ (8008c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d00e      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8008c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d009      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a19      	ldr	r2, [pc, #100]	@ (8008c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <HAL_TIM_Base_Start_IT+0x80>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a18      	ldr	r2, [pc, #96]	@ (8008c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d111      	bne.n	8008c5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b06      	cmp	r3, #6
 8008c48:	d010      	beq.n	8008c6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5a:	e007      	b.n	8008c6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0201 	orr.w	r2, r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	40010000 	.word	0x40010000
 8008c80:	40000400 	.word	0x40000400
 8008c84:	40000800 	.word	0x40000800
 8008c88:	40000c00 	.word	0x40000c00
 8008c8c:	40010400 	.word	0x40010400
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40001800 	.word	0x40001800

08008c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e041      	b.n	8008d2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7f9 fa14 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f000 fc04 	bl	80094e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <HAL_TIM_PWM_Start+0x24>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	bf14      	ite	ne
 8008d54:	2301      	movne	r3, #1
 8008d56:	2300      	moveq	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	e022      	b.n	8008da2 <HAL_TIM_PWM_Start+0x6a>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d109      	bne.n	8008d76 <HAL_TIM_PWM_Start+0x3e>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	bf14      	ite	ne
 8008d6e:	2301      	movne	r3, #1
 8008d70:	2300      	moveq	r3, #0
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	e015      	b.n	8008da2 <HAL_TIM_PWM_Start+0x6a>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d109      	bne.n	8008d90 <HAL_TIM_PWM_Start+0x58>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	bf14      	ite	ne
 8008d88:	2301      	movne	r3, #1
 8008d8a:	2300      	moveq	r3, #0
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	e008      	b.n	8008da2 <HAL_TIM_PWM_Start+0x6a>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e07c      	b.n	8008ea4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <HAL_TIM_PWM_Start+0x82>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008db8:	e013      	b.n	8008de2 <HAL_TIM_PWM_Start+0xaa>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d104      	bne.n	8008dca <HAL_TIM_PWM_Start+0x92>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dc8:	e00b      	b.n	8008de2 <HAL_TIM_PWM_Start+0xaa>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d104      	bne.n	8008dda <HAL_TIM_PWM_Start+0xa2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dd8:	e003      	b.n	8008de2 <HAL_TIM_PWM_Start+0xaa>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2201      	movs	r2, #1
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fdd0 	bl	8009990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a2d      	ldr	r2, [pc, #180]	@ (8008eac <HAL_TIM_PWM_Start+0x174>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d004      	beq.n	8008e04 <HAL_TIM_PWM_Start+0xcc>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8008eb0 <HAL_TIM_PWM_Start+0x178>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d101      	bne.n	8008e08 <HAL_TIM_PWM_Start+0xd0>
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <HAL_TIM_PWM_Start+0xd2>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d007      	beq.n	8008e1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a22      	ldr	r2, [pc, #136]	@ (8008eac <HAL_TIM_PWM_Start+0x174>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d022      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e30:	d01d      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb4 <HAL_TIM_PWM_Start+0x17c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d018      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb8 <HAL_TIM_PWM_Start+0x180>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d013      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ebc <HAL_TIM_PWM_Start+0x184>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00e      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a16      	ldr	r2, [pc, #88]	@ (8008eb0 <HAL_TIM_PWM_Start+0x178>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d009      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a18      	ldr	r2, [pc, #96]	@ (8008ec0 <HAL_TIM_PWM_Start+0x188>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d004      	beq.n	8008e6e <HAL_TIM_PWM_Start+0x136>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a16      	ldr	r2, [pc, #88]	@ (8008ec4 <HAL_TIM_PWM_Start+0x18c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d111      	bne.n	8008e92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b06      	cmp	r3, #6
 8008e7e:	d010      	beq.n	8008ea2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e90:	e007      	b.n	8008ea2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0201 	orr.w	r2, r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40010000 	.word	0x40010000
 8008eb0:	40010400 	.word	0x40010400
 8008eb4:	40000400 	.word	0x40000400
 8008eb8:	40000800 	.word	0x40000800
 8008ebc:	40000c00 	.word	0x40000c00
 8008ec0:	40014000 	.word	0x40014000
 8008ec4:	40001800 	.word	0x40001800

08008ec8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e097      	b.n	800900c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d106      	bne.n	8008ef6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7f9 f931 	bl	8002158 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f0c:	f023 0307 	bic.w	r3, r3, #7
 8008f10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f000 fae1 	bl	80094e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008f68:	f023 030c 	bic.w	r3, r3, #12
 8008f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	4313      	orrs	r3, r2
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	011a      	lsls	r2, r3, #4
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	031b      	lsls	r3, r3, #12
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008fa6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008fae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009024:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800902c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009034:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800903c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d110      	bne.n	8009066 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d102      	bne.n	8009050 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800904a:	7b7b      	ldrb	r3, [r7, #13]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d001      	beq.n	8009054 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e069      	b.n	8009128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009064:	e031      	b.n	80090ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b04      	cmp	r3, #4
 800906a:	d110      	bne.n	800908e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d102      	bne.n	8009078 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009072:	7b3b      	ldrb	r3, [r7, #12]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d001      	beq.n	800907c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e055      	b.n	8009128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800908c:	e01d      	b.n	80090ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d108      	bne.n	80090a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d105      	bne.n	80090a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800909a:	7b7b      	ldrb	r3, [r7, #13]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d102      	bne.n	80090a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090a0:	7b3b      	ldrb	r3, [r7, #12]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d001      	beq.n	80090aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e03e      	b.n	8009128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2202      	movs	r2, #2
 80090b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_TIM_Encoder_Start+0xc4>
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d008      	beq.n	80090e8 <HAL_TIM_Encoder_Start+0xd4>
 80090d6:	e00f      	b.n	80090f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2201      	movs	r2, #1
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fc55 	bl	8009990 <TIM_CCxChannelCmd>
      break;
 80090e6:	e016      	b.n	8009116 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2201      	movs	r2, #1
 80090ee:	2104      	movs	r1, #4
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fc4d 	bl	8009990 <TIM_CCxChannelCmd>
      break;
 80090f6:	e00e      	b.n	8009116 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2201      	movs	r2, #1
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fc45 	bl	8009990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2201      	movs	r2, #1
 800910c:	2104      	movs	r1, #4
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fc3e 	bl	8009990 <TIM_CCxChannelCmd>
      break;
 8009114:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0201 	orr.w	r2, r2, #1
 8009124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d020      	beq.n	8009194 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01b      	beq.n	8009194 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0202 	mvn.w	r2, #2
 8009164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f994 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 8009180:	e005      	b.n	800918e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f986 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f997 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f003 0304 	and.w	r3, r3, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	d020      	beq.n	80091e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01b      	beq.n	80091e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f06f 0204 	mvn.w	r2, #4
 80091b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f96e 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 80091cc:	e005      	b.n	80091da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f960 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f971 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d020      	beq.n	800922c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01b      	beq.n	800922c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f06f 0208 	mvn.w	r2, #8
 80091fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2204      	movs	r2, #4
 8009202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f948 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 8009218:	e005      	b.n	8009226 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f93a 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f94b 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 0310 	and.w	r3, r3, #16
 8009232:	2b00      	cmp	r3, #0
 8009234:	d020      	beq.n	8009278 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01b      	beq.n	8009278 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f06f 0210 	mvn.w	r2, #16
 8009248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2208      	movs	r2, #8
 800924e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f922 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 8009264:	e005      	b.n	8009272 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f914 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f925 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00c      	beq.n	800929c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d007      	beq.n	800929c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f06f 0201 	mvn.w	r2, #1
 8009294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7f8 fa8e 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00c      	beq.n	80092c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d007      	beq.n	80092c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80092b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fc14 	bl	8009ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00c      	beq.n	80092e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d007      	beq.n	80092e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f8f6 	bl	80094d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00c      	beq.n	8009308 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d007      	beq.n	8009308 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0220 	mvn.w	r2, #32
 8009300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fbe6 	bl	8009ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800932a:	2302      	movs	r3, #2
 800932c:	e0ae      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b0c      	cmp	r3, #12
 800933a:	f200 809f 	bhi.w	800947c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800933e:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009379 	.word	0x08009379
 8009348:	0800947d 	.word	0x0800947d
 800934c:	0800947d 	.word	0x0800947d
 8009350:	0800947d 	.word	0x0800947d
 8009354:	080093b9 	.word	0x080093b9
 8009358:	0800947d 	.word	0x0800947d
 800935c:	0800947d 	.word	0x0800947d
 8009360:	0800947d 	.word	0x0800947d
 8009364:	080093fb 	.word	0x080093fb
 8009368:	0800947d 	.word	0x0800947d
 800936c:	0800947d 	.word	0x0800947d
 8009370:	0800947d 	.word	0x0800947d
 8009374:	0800943b 	.word	0x0800943b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f956 	bl	8009630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0208 	orr.w	r2, r2, #8
 8009392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0204 	bic.w	r2, r2, #4
 80093a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6999      	ldr	r1, [r3, #24]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	619a      	str	r2, [r3, #24]
      break;
 80093b6:	e064      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68b9      	ldr	r1, [r7, #8]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f9a6 	bl	8009710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6999      	ldr	r1, [r3, #24]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	021a      	lsls	r2, r3, #8
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	619a      	str	r2, [r3, #24]
      break;
 80093f8:	e043      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f9fb 	bl	80097fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69da      	ldr	r2, [r3, #28]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0208 	orr.w	r2, r2, #8
 8009414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0204 	bic.w	r2, r2, #4
 8009424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69d9      	ldr	r1, [r3, #28]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	61da      	str	r2, [r3, #28]
      break;
 8009438:	e023      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68b9      	ldr	r1, [r7, #8]
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fa4f 	bl	80098e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69da      	ldr	r2, [r3, #28]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69d9      	ldr	r1, [r3, #28]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	021a      	lsls	r2, r3, #8
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	61da      	str	r2, [r3, #28]
      break;
 800947a:	e002      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	75fb      	strb	r3, [r7, #23]
      break;
 8009480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a43      	ldr	r2, [pc, #268]	@ (8009604 <TIM_Base_SetConfig+0x120>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d013      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009502:	d00f      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a40      	ldr	r2, [pc, #256]	@ (8009608 <TIM_Base_SetConfig+0x124>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00b      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a3f      	ldr	r2, [pc, #252]	@ (800960c <TIM_Base_SetConfig+0x128>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d007      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a3e      	ldr	r2, [pc, #248]	@ (8009610 <TIM_Base_SetConfig+0x12c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a3d      	ldr	r2, [pc, #244]	@ (8009614 <TIM_Base_SetConfig+0x130>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d108      	bne.n	8009536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a32      	ldr	r2, [pc, #200]	@ (8009604 <TIM_Base_SetConfig+0x120>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d02b      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009544:	d027      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a2f      	ldr	r2, [pc, #188]	@ (8009608 <TIM_Base_SetConfig+0x124>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d023      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a2e      	ldr	r2, [pc, #184]	@ (800960c <TIM_Base_SetConfig+0x128>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01f      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a2d      	ldr	r2, [pc, #180]	@ (8009610 <TIM_Base_SetConfig+0x12c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d01b      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a2c      	ldr	r2, [pc, #176]	@ (8009614 <TIM_Base_SetConfig+0x130>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d017      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a2b      	ldr	r2, [pc, #172]	@ (8009618 <TIM_Base_SetConfig+0x134>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d013      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a2a      	ldr	r2, [pc, #168]	@ (800961c <TIM_Base_SetConfig+0x138>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a29      	ldr	r2, [pc, #164]	@ (8009620 <TIM_Base_SetConfig+0x13c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00b      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a28      	ldr	r2, [pc, #160]	@ (8009624 <TIM_Base_SetConfig+0x140>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d007      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a27      	ldr	r2, [pc, #156]	@ (8009628 <TIM_Base_SetConfig+0x144>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a26      	ldr	r2, [pc, #152]	@ (800962c <TIM_Base_SetConfig+0x148>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d108      	bne.n	80095a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800959c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	689a      	ldr	r2, [r3, #8]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009604 <TIM_Base_SetConfig+0x120>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d003      	beq.n	80095d6 <TIM_Base_SetConfig+0xf2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a10      	ldr	r2, [pc, #64]	@ (8009614 <TIM_Base_SetConfig+0x130>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d103      	bne.n	80095de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f043 0204 	orr.w	r2, r3, #4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40010000 	.word	0x40010000
 8009608:	40000400 	.word	0x40000400
 800960c:	40000800 	.word	0x40000800
 8009610:	40000c00 	.word	0x40000c00
 8009614:	40010400 	.word	0x40010400
 8009618:	40014000 	.word	0x40014000
 800961c:	40014400 	.word	0x40014400
 8009620:	40014800 	.word	0x40014800
 8009624:	40001800 	.word	0x40001800
 8009628:	40001c00 	.word	0x40001c00
 800962c:	40002000 	.word	0x40002000

08009630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	f023 0201 	bic.w	r2, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800965e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f023 0302 	bic.w	r3, r3, #2
 8009678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a20      	ldr	r2, [pc, #128]	@ (8009708 <TIM_OC1_SetConfig+0xd8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d003      	beq.n	8009694 <TIM_OC1_SetConfig+0x64>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a1f      	ldr	r2, [pc, #124]	@ (800970c <TIM_OC1_SetConfig+0xdc>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d10c      	bne.n	80096ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f023 0308 	bic.w	r3, r3, #8
 800969a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f023 0304 	bic.w	r3, r3, #4
 80096ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a15      	ldr	r2, [pc, #84]	@ (8009708 <TIM_OC1_SetConfig+0xd8>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <TIM_OC1_SetConfig+0x8e>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a14      	ldr	r2, [pc, #80]	@ (800970c <TIM_OC1_SetConfig+0xdc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d111      	bne.n	80096e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	621a      	str	r2, [r3, #32]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	40010000 	.word	0x40010000
 800970c:	40010400 	.word	0x40010400

08009710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	f023 0210 	bic.w	r2, r3, #16
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800973e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f023 0320 	bic.w	r3, r3, #32
 800975a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	4313      	orrs	r3, r2
 8009766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a22      	ldr	r2, [pc, #136]	@ (80097f4 <TIM_OC2_SetConfig+0xe4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d003      	beq.n	8009778 <TIM_OC2_SetConfig+0x68>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a21      	ldr	r2, [pc, #132]	@ (80097f8 <TIM_OC2_SetConfig+0xe8>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d10d      	bne.n	8009794 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800977e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	4313      	orrs	r3, r2
 800978a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a17      	ldr	r2, [pc, #92]	@ (80097f4 <TIM_OC2_SetConfig+0xe4>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d003      	beq.n	80097a4 <TIM_OC2_SetConfig+0x94>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a16      	ldr	r2, [pc, #88]	@ (80097f8 <TIM_OC2_SetConfig+0xe8>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d113      	bne.n	80097cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	4313      	orrs	r3, r2
 80097be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	621a      	str	r2, [r3, #32]
}
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400

080097fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0303 	bic.w	r3, r3, #3
 8009832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a21      	ldr	r2, [pc, #132]	@ (80098dc <TIM_OC3_SetConfig+0xe0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <TIM_OC3_SetConfig+0x66>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a20      	ldr	r2, [pc, #128]	@ (80098e0 <TIM_OC3_SetConfig+0xe4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d10d      	bne.n	800987e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800987c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a16      	ldr	r2, [pc, #88]	@ (80098dc <TIM_OC3_SetConfig+0xe0>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d003      	beq.n	800988e <TIM_OC3_SetConfig+0x92>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a15      	ldr	r2, [pc, #84]	@ (80098e0 <TIM_OC3_SetConfig+0xe4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d113      	bne.n	80098b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800989c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	621a      	str	r2, [r3, #32]
}
 80098d0:	bf00      	nop
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	40010000 	.word	0x40010000
 80098e0:	40010400 	.word	0x40010400

080098e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800991a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	021b      	lsls	r3, r3, #8
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800992e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	031b      	lsls	r3, r3, #12
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	4313      	orrs	r3, r2
 800993a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a12      	ldr	r2, [pc, #72]	@ (8009988 <TIM_OC4_SetConfig+0xa4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d003      	beq.n	800994c <TIM_OC4_SetConfig+0x68>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a11      	ldr	r2, [pc, #68]	@ (800998c <TIM_OC4_SetConfig+0xa8>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d109      	bne.n	8009960 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	019b      	lsls	r3, r3, #6
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40010000 	.word	0x40010000
 800998c:	40010400 	.word	0x40010400

08009990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f003 031f 	and.w	r3, r3, #31
 80099a2:	2201      	movs	r2, #1
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1a      	ldr	r2, [r3, #32]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a1a      	ldr	r2, [r3, #32]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	621a      	str	r2, [r3, #32]
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e05a      	b.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a21      	ldr	r2, [pc, #132]	@ (8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d022      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a40:	d01d      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a1d      	ldr	r2, [pc, #116]	@ (8009abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d018      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d013      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00e      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a18      	ldr	r2, [pc, #96]	@ (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d009      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a17      	ldr	r2, [pc, #92]	@ (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d004      	beq.n	8009a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a15      	ldr	r2, [pc, #84]	@ (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d10c      	bne.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	40010000 	.word	0x40010000
 8009abc:	40000400 	.word	0x40000400
 8009ac0:	40000800 	.word	0x40000800
 8009ac4:	40000c00 	.word	0x40000c00
 8009ac8:	40010400 	.word	0x40010400
 8009acc:	40014000 	.word	0x40014000
 8009ad0:	40001800 	.word	0x40001800

08009ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e042      	b.n	8009b94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7f8 fcac 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2224      	movs	r2, #36	@ 0x24
 8009b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fe8b 	bl	800a85c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d112      	bne.n	8009bdc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <HAL_UART_Receive_DMA+0x26>
 8009bbc:	88fb      	ldrh	r3, [r7, #6]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e00b      	b.n	8009bde <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009bcc:	88fb      	ldrh	r3, [r7, #6]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68b9      	ldr	r1, [r7, #8]
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fbda 	bl	800a38c <UART_Start_Receive_DMA>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	e000      	b.n	8009bde <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009bdc:	2302      	movs	r3, #2
  }
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b0ba      	sub	sp, #232	@ 0xe8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c1e:	f003 030f 	and.w	r3, r3, #15
 8009c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10f      	bne.n	8009c4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d009      	beq.n	8009c4e <HAL_UART_IRQHandler+0x66>
 8009c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fd4a 	bl	800a6e0 <UART_Receive_IT>
      return;
 8009c4c:	e273      	b.n	800a136 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 80de 	beq.w	8009e14 <HAL_UART_IRQHandler+0x22c>
 8009c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80d1 	beq.w	8009e14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00b      	beq.n	8009c96 <HAL_UART_IRQHandler+0xae>
 8009c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c8e:	f043 0201 	orr.w	r2, r3, #1
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00b      	beq.n	8009cba <HAL_UART_IRQHandler+0xd2>
 8009ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cb2:	f043 0202 	orr.w	r2, r3, #2
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00b      	beq.n	8009cde <HAL_UART_IRQHandler+0xf6>
 8009cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd6:	f043 0204 	orr.w	r2, r3, #4
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce2:	f003 0308 	and.w	r3, r3, #8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d011      	beq.n	8009d0e <HAL_UART_IRQHandler+0x126>
 8009cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d105      	bne.n	8009d02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d06:	f043 0208 	orr.w	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 820a 	beq.w	800a12c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d008      	beq.n	8009d36 <HAL_UART_IRQHandler+0x14e>
 8009d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fcd5 	bl	800a6e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d40:	2b40      	cmp	r3, #64	@ 0x40
 8009d42:	bf0c      	ite	eq
 8009d44:	2301      	moveq	r3, #1
 8009d46:	2300      	movne	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d103      	bne.n	8009d62 <HAL_UART_IRQHandler+0x17a>
 8009d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d04f      	beq.n	8009e02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fbe0 	bl	800a528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d72:	2b40      	cmp	r3, #64	@ 0x40
 8009d74:	d141      	bne.n	8009dfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3314      	adds	r3, #20
 8009d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d84:	e853 3f00 	ldrex	r3, [r3]
 8009d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1d9      	bne.n	8009d76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d013      	beq.n	8009df2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dce:	4a8a      	ldr	r2, [pc, #552]	@ (8009ff8 <HAL_UART_IRQHandler+0x410>)
 8009dd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fb fe84 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d016      	beq.n	8009e10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df0:	e00e      	b.n	8009e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f9b6 	bl	800a164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df8:	e00a      	b.n	8009e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9b2 	bl	800a164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e00:	e006      	b.n	8009e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f9ae 	bl	800a164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009e0e:	e18d      	b.n	800a12c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e10:	bf00      	nop
    return;
 8009e12:	e18b      	b.n	800a12c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	f040 8167 	bne.w	800a0ec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e22:	f003 0310 	and.w	r3, r3, #16
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 8160 	beq.w	800a0ec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e30:	f003 0310 	and.w	r3, r3, #16
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 8159 	beq.w	800a0ec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60bb      	str	r3, [r7, #8]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	60bb      	str	r3, [r7, #8]
 8009e4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5a:	2b40      	cmp	r3, #64	@ 0x40
 8009e5c:	f040 80ce 	bne.w	8009ffc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 80a9 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	f080 80a2 	bcs.w	8009fc8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e96:	f000 8088 	beq.w	8009faa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	330c      	adds	r3, #12
 8009ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1d9      	bne.n	8009e9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3314      	adds	r3, #20
 8009eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3314      	adds	r3, #20
 8009f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f16:	e841 2300 	strex	r3, r2, [r1]
 8009f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1e1      	bne.n	8009ee6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3314      	adds	r3, #20
 8009f28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3314      	adds	r3, #20
 8009f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e3      	bne.n	8009f22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f7a:	f023 0310 	bic.w	r3, r3, #16
 8009f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f94:	e841 2300 	strex	r3, r2, [r1]
 8009f98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e3      	bne.n	8009f68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fb fd2d 	bl	8005a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2202      	movs	r2, #2
 8009fae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f8d9 	bl	800a178 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009fc6:	e0b3      	b.n	800a130 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	f040 80ad 	bne.w	800a130 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe0:	f040 80a6 	bne.w	800a130 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f8c1 	bl	800a178 <HAL_UARTEx_RxEventCallback>
      return;
 8009ff6:	e09b      	b.n	800a130 <HAL_UART_IRQHandler+0x548>
 8009ff8:	0800a5ef 	.word	0x0800a5ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a004:	b29b      	uxth	r3, r3
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a010:	b29b      	uxth	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 808e 	beq.w	800a134 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 8089 	beq.w	800a134 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	330c      	adds	r3, #12
 800a028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a046:	647a      	str	r2, [r7, #68]	@ 0x44
 800a048:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a04c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e3      	bne.n	800a022 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3314      	adds	r3, #20
 800a060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	623b      	str	r3, [r7, #32]
   return(result);
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	f023 0301 	bic.w	r3, r3, #1
 800a070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3314      	adds	r3, #20
 800a07a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a07e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e3      	bne.n	800a05a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2220      	movs	r2, #32
 800a096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0310 	bic.w	r3, r3, #16
 800a0b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	330c      	adds	r3, #12
 800a0c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a0c4:	61fa      	str	r2, [r7, #28]
 800a0c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	69b9      	ldr	r1, [r7, #24]
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e3      	bne.n	800a0a0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f847 	bl	800a178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0ea:	e023      	b.n	800a134 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d009      	beq.n	800a10c <HAL_UART_IRQHandler+0x524>
 800a0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fa83 	bl	800a610 <UART_Transmit_IT>
    return;
 800a10a:	e014      	b.n	800a136 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00e      	beq.n	800a136 <HAL_UART_IRQHandler+0x54e>
 800a118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a120:	2b00      	cmp	r3, #0
 800a122:	d008      	beq.n	800a136 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fac3 	bl	800a6b0 <UART_EndTransmit_IT>
    return;
 800a12a:	e004      	b.n	800a136 <HAL_UART_IRQHandler+0x54e>
    return;
 800a12c:	bf00      	nop
 800a12e:	e002      	b.n	800a136 <HAL_UART_IRQHandler+0x54e>
      return;
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <HAL_UART_IRQHandler+0x54e>
      return;
 800a134:	bf00      	nop
  }
}
 800a136:	37e8      	adds	r7, #232	@ 0xe8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b09c      	sub	sp, #112	@ 0x70
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d172      	bne.n	800a292 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a1ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a1c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	330c      	adds	r3, #12
 800a1d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a1d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a1d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e5      	bne.n	800a1b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3314      	adds	r3, #20
 800a1ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f8:	f023 0301 	bic.w	r3, r3, #1
 800a1fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3314      	adds	r3, #20
 800a204:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a206:	647a      	str	r2, [r7, #68]	@ 0x44
 800a208:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a20c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e5      	bne.n	800a1e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a21a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3314      	adds	r3, #20
 800a220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	623b      	str	r3, [r7, #32]
   return(result);
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a230:	663b      	str	r3, [r7, #96]	@ 0x60
 800a232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3314      	adds	r3, #20
 800a238:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a23a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e5      	bne.n	800a21a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a250:	2220      	movs	r2, #32
 800a252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d119      	bne.n	800a292 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	330c      	adds	r3, #12
 800a264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f023 0310 	bic.w	r3, r3, #16
 800a274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	330c      	adds	r3, #12
 800a27c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a27e:	61fa      	str	r2, [r7, #28]
 800a280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	69b9      	ldr	r1, [r7, #24]
 800a284:	69fa      	ldr	r2, [r7, #28]
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	617b      	str	r3, [r7, #20]
   return(result);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e5      	bne.n	800a25e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a294:	2200      	movs	r2, #0
 800a296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d106      	bne.n	800a2ae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2a8:	f7ff ff66 	bl	800a178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2ac:	e002      	b.n	800a2b4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a2ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2b0:	f7f7 faee 	bl	8001890 <HAL_UART_RxCpltCallback>
}
 800a2b4:	bf00      	nop
 800a2b6:	3770      	adds	r7, #112	@ 0x70
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d108      	bne.n	800a2ea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a2dc:	085b      	lsrs	r3, r3, #1
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff ff48 	bl	800a178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2e8:	e002      	b.n	800a2f0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff ff30 	bl	800a150 <HAL_UART_RxHalfCpltCallback>
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a308:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a314:	2b80      	cmp	r3, #128	@ 0x80
 800a316:	bf0c      	ite	eq
 800a318:	2301      	moveq	r3, #1
 800a31a:	2300      	movne	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b21      	cmp	r3, #33	@ 0x21
 800a32a:	d108      	bne.n	800a33e <UART_DMAError+0x46>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2200      	movs	r2, #0
 800a336:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a338:	68b8      	ldr	r0, [r7, #8]
 800a33a:	f000 f8cd 	bl	800a4d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a348:	2b40      	cmp	r3, #64	@ 0x40
 800a34a:	bf0c      	ite	eq
 800a34c:	2301      	moveq	r3, #1
 800a34e:	2300      	movne	r3, #0
 800a350:	b2db      	uxtb	r3, r3
 800a352:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b22      	cmp	r3, #34	@ 0x22
 800a35e:	d108      	bne.n	800a372 <UART_DMAError+0x7a>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a36c:	68b8      	ldr	r0, [r7, #8]
 800a36e:	f000 f8db 	bl	800a528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a376:	f043 0210 	orr.w	r2, r3, #16
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a37e:	68b8      	ldr	r0, [r7, #8]
 800a380:	f7ff fef0 	bl	800a164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a384:	bf00      	nop
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b098      	sub	sp, #96	@ 0x60
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	88fa      	ldrh	r2, [r7, #6]
 800a3a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2222      	movs	r2, #34	@ 0x22
 800a3b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3b8:	4a44      	ldr	r2, [pc, #272]	@ (800a4cc <UART_Start_Receive_DMA+0x140>)
 800a3ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c0:	4a43      	ldr	r2, [pc, #268]	@ (800a4d0 <UART_Start_Receive_DMA+0x144>)
 800a3c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c8:	4a42      	ldr	r2, [pc, #264]	@ (800a4d4 <UART_Start_Receive_DMA+0x148>)
 800a3ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a3d4:	f107 0308 	add.w	r3, r7, #8
 800a3d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	88fb      	ldrh	r3, [r7, #6]
 800a3ec:	f7fb fab2 	bl	8005954 <HAL_DMA_Start_IT>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2210      	movs	r2, #16
 800a3fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e05d      	b.n	800a4c4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a408:	2300      	movs	r3, #0
 800a40a:	613b      	str	r3, [r7, #16]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	613b      	str	r3, [r7, #16]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	613b      	str	r3, [r7, #16]
 800a41c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d019      	beq.n	800a45a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	330c      	adds	r3, #12
 800a42c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a43c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	330c      	adds	r3, #12
 800a444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a446:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a448:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a44c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e5      	bne.n	800a426 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3314      	adds	r3, #20
 800a460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	657b      	str	r3, [r7, #84]	@ 0x54
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3314      	adds	r3, #20
 800a478:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a47a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a47c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e5      	bne.n	800a45a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3314      	adds	r3, #20
 800a494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	617b      	str	r3, [r7, #20]
   return(result);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3314      	adds	r3, #20
 800a4ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4ae:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6a39      	ldr	r1, [r7, #32]
 800a4b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3760      	adds	r7, #96	@ 0x60
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	0800a191 	.word	0x0800a191
 800a4d0:	0800a2bd 	.word	0x0800a2bd
 800a4d4:	0800a2f9 	.word	0x0800a2f9

0800a4d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b089      	sub	sp, #36	@ 0x24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4f6:	61fb      	str	r3, [r7, #28]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	61ba      	str	r2, [r7, #24]
 800a502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a504:	6979      	ldr	r1, [r7, #20]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	e841 2300 	strex	r3, r2, [r1]
 800a50c:	613b      	str	r3, [r7, #16]
   return(result);
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e5      	bne.n	800a4e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2220      	movs	r2, #32
 800a518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a51c:	bf00      	nop
 800a51e:	3724      	adds	r7, #36	@ 0x24
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b095      	sub	sp, #84	@ 0x54
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	330c      	adds	r3, #12
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	330c      	adds	r3, #12
 800a54e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a550:	643a      	str	r2, [r7, #64]	@ 0x40
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e5      	bne.n	800a530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3314      	adds	r3, #20
 800a56a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	61fb      	str	r3, [r7, #28]
   return(result);
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	f023 0301 	bic.w	r3, r3, #1
 800a57a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3314      	adds	r3, #20
 800a582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e5      	bne.n	800a564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d119      	bne.n	800a5d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	330c      	adds	r3, #12
 800a5a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f023 0310 	bic.w	r3, r3, #16
 800a5b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	330c      	adds	r3, #12
 800a5be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5c0:	61ba      	str	r2, [r7, #24]
 800a5c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e5      	bne.n	800a5a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a5e2:	bf00      	nop
 800a5e4:	3754      	adds	r7, #84	@ 0x54
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f7ff fdae 	bl	800a164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a608:	bf00      	nop
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b21      	cmp	r3, #33	@ 0x21
 800a622:	d13e      	bne.n	800a6a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a62c:	d114      	bne.n	800a658 <UART_Transmit_IT+0x48>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d110      	bne.n	800a658 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	461a      	mov	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a64a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a1b      	ldr	r3, [r3, #32]
 800a650:	1c9a      	adds	r2, r3, #2
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	621a      	str	r2, [r3, #32]
 800a656:	e008      	b.n	800a66a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6211      	str	r1, [r2, #32]
 800a662:	781a      	ldrb	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a66e:	b29b      	uxth	r3, r3
 800a670:	3b01      	subs	r3, #1
 800a672:	b29b      	uxth	r3, r3
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	4619      	mov	r1, r3
 800a678:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10f      	bne.n	800a69e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a68c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a69c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e000      	b.n	800a6a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a6a2:	2302      	movs	r3, #2
  }
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fd33 	bl	800a13c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08c      	sub	sp, #48	@ 0x30
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b22      	cmp	r3, #34	@ 0x22
 800a6fa:	f040 80aa 	bne.w	800a852 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a706:	d115      	bne.n	800a734 <UART_Receive_IT+0x54>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d111      	bne.n	800a734 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a714:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a722:	b29a      	uxth	r2, r3
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72c:	1c9a      	adds	r2, r3, #2
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	629a      	str	r2, [r3, #40]	@ 0x28
 800a732:	e024      	b.n	800a77e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a738:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a742:	d007      	beq.n	800a754 <UART_Receive_IT+0x74>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <UART_Receive_IT+0x82>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	e008      	b.n	800a774 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a772:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a782:	b29b      	uxth	r3, r3
 800a784:	3b01      	subs	r3, #1
 800a786:	b29b      	uxth	r3, r3
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	4619      	mov	r1, r3
 800a78c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d15d      	bne.n	800a84e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68da      	ldr	r2, [r3, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0220 	bic.w	r2, r2, #32
 800a7a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	695a      	ldr	r2, [r3, #20]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f022 0201 	bic.w	r2, r2, #1
 800a7c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d135      	bne.n	800a844 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	330c      	adds	r3, #12
 800a7e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f023 0310 	bic.w	r3, r3, #16
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	330c      	adds	r3, #12
 800a7fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7fe:	623a      	str	r2, [r7, #32]
 800a800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	69f9      	ldr	r1, [r7, #28]
 800a804:	6a3a      	ldr	r2, [r7, #32]
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e5      	bne.n	800a7de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0310 	and.w	r3, r3, #16
 800a81c:	2b10      	cmp	r3, #16
 800a81e:	d10a      	bne.n	800a836 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff fc9b 	bl	800a178 <HAL_UARTEx_RxEventCallback>
 800a842:	e002      	b.n	800a84a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7f7 f823 	bl	8001890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	e002      	b.n	800a854 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	e000      	b.n	800a854 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a852:	2302      	movs	r3, #2
  }
}
 800a854:	4618      	mov	r0, r3
 800a856:	3730      	adds	r7, #48	@ 0x30
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a85c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a860:	b0c0      	sub	sp, #256	@ 0x100
 800a862:	af00      	add	r7, sp, #0
 800a864:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a878:	68d9      	ldr	r1, [r3, #12]
 800a87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	ea40 0301 	orr.w	r3, r0, r1
 800a884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	431a      	orrs	r2, r3
 800a894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	431a      	orrs	r2, r3
 800a89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a8b4:	f021 010c 	bic.w	r1, r1, #12
 800a8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8c2:	430b      	orrs	r3, r1
 800a8c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d6:	6999      	ldr	r1, [r3, #24]
 800a8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	ea40 0301 	orr.w	r3, r0, r1
 800a8e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	4b8f      	ldr	r3, [pc, #572]	@ (800ab28 <UART_SetConfig+0x2cc>)
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d005      	beq.n	800a8fc <UART_SetConfig+0xa0>
 800a8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	4b8d      	ldr	r3, [pc, #564]	@ (800ab2c <UART_SetConfig+0x2d0>)
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d104      	bne.n	800a906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8fc:	f7fd f980 	bl	8007c00 <HAL_RCC_GetPCLK2Freq>
 800a900:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a904:	e003      	b.n	800a90e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a906:	f7fd f967 	bl	8007bd8 <HAL_RCC_GetPCLK1Freq>
 800a90a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a918:	f040 810c 	bne.w	800ab34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a91c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a920:	2200      	movs	r2, #0
 800a922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a926:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a92a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	1891      	adds	r1, r2, r2
 800a934:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a936:	415b      	adcs	r3, r3
 800a938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a93a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a93e:	4621      	mov	r1, r4
 800a940:	eb12 0801 	adds.w	r8, r2, r1
 800a944:	4629      	mov	r1, r5
 800a946:	eb43 0901 	adc.w	r9, r3, r1
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a95a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a95e:	4690      	mov	r8, r2
 800a960:	4699      	mov	r9, r3
 800a962:	4623      	mov	r3, r4
 800a964:	eb18 0303 	adds.w	r3, r8, r3
 800a968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a96c:	462b      	mov	r3, r5
 800a96e:	eb49 0303 	adc.w	r3, r9, r3
 800a972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a982:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a98a:	460b      	mov	r3, r1
 800a98c:	18db      	adds	r3, r3, r3
 800a98e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a990:	4613      	mov	r3, r2
 800a992:	eb42 0303 	adc.w	r3, r2, r3
 800a996:	657b      	str	r3, [r7, #84]	@ 0x54
 800a998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a99c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a9a0:	f7f6 f9a2 	bl	8000ce8 <__aeabi_uldivmod>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4b61      	ldr	r3, [pc, #388]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800a9aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a9ae:	095b      	lsrs	r3, r3, #5
 800a9b0:	011c      	lsls	r4, r3, #4
 800a9b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a9c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	1891      	adds	r1, r2, r2
 800a9ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a9cc:	415b      	adcs	r3, r3
 800a9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a9d4:	4641      	mov	r1, r8
 800a9d6:	eb12 0a01 	adds.w	sl, r2, r1
 800a9da:	4649      	mov	r1, r9
 800a9dc:	eb43 0b01 	adc.w	fp, r3, r1
 800a9e0:	f04f 0200 	mov.w	r2, #0
 800a9e4:	f04f 0300 	mov.w	r3, #0
 800a9e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a9ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a9f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9f4:	4692      	mov	sl, r2
 800a9f6:	469b      	mov	fp, r3
 800a9f8:	4643      	mov	r3, r8
 800a9fa:	eb1a 0303 	adds.w	r3, sl, r3
 800a9fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa02:	464b      	mov	r3, r9
 800aa04:	eb4b 0303 	adc.w	r3, fp, r3
 800aa08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aa1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa20:	460b      	mov	r3, r1
 800aa22:	18db      	adds	r3, r3, r3
 800aa24:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa26:	4613      	mov	r3, r2
 800aa28:	eb42 0303 	adc.w	r3, r2, r3
 800aa2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aa32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa36:	f7f6 f957 	bl	8000ce8 <__aeabi_uldivmod>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4b3b      	ldr	r3, [pc, #236]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800aa42:	fba3 2301 	umull	r2, r3, r3, r1
 800aa46:	095b      	lsrs	r3, r3, #5
 800aa48:	2264      	movs	r2, #100	@ 0x64
 800aa4a:	fb02 f303 	mul.w	r3, r2, r3
 800aa4e:	1acb      	subs	r3, r1, r3
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa56:	4b36      	ldr	r3, [pc, #216]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800aa58:	fba3 2302 	umull	r2, r3, r3, r2
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aa64:	441c      	add	r4, r3
 800aa66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aa74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	1891      	adds	r1, r2, r2
 800aa7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aa80:	415b      	adcs	r3, r3
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa88:	4641      	mov	r1, r8
 800aa8a:	1851      	adds	r1, r2, r1
 800aa8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800aa8e:	4649      	mov	r1, r9
 800aa90:	414b      	adcs	r3, r1
 800aa92:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa94:	f04f 0200 	mov.w	r2, #0
 800aa98:	f04f 0300 	mov.w	r3, #0
 800aa9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	00cb      	lsls	r3, r1, #3
 800aaa4:	4651      	mov	r1, sl
 800aaa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaaa:	4651      	mov	r1, sl
 800aaac:	00ca      	lsls	r2, r1, #3
 800aaae:	4610      	mov	r0, r2
 800aab0:	4619      	mov	r1, r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	4642      	mov	r2, r8
 800aab6:	189b      	adds	r3, r3, r2
 800aab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aabc:	464b      	mov	r3, r9
 800aabe:	460a      	mov	r2, r1
 800aac0:	eb42 0303 	adc.w	r3, r2, r3
 800aac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aad4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aadc:	460b      	mov	r3, r1
 800aade:	18db      	adds	r3, r3, r3
 800aae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aae2:	4613      	mov	r3, r2
 800aae4:	eb42 0303 	adc.w	r3, r2, r3
 800aae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aaee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aaf2:	f7f6 f8f9 	bl	8000ce8 <__aeabi_uldivmod>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4b0d      	ldr	r3, [pc, #52]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800aafc:	fba3 1302 	umull	r1, r3, r3, r2
 800ab00:	095b      	lsrs	r3, r3, #5
 800ab02:	2164      	movs	r1, #100	@ 0x64
 800ab04:	fb01 f303 	mul.w	r3, r1, r3
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	3332      	adds	r3, #50	@ 0x32
 800ab0e:	4a08      	ldr	r2, [pc, #32]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800ab10:	fba2 2303 	umull	r2, r3, r2, r3
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	f003 0207 	and.w	r2, r3, #7
 800ab1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4422      	add	r2, r4
 800ab22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab24:	e106      	b.n	800ad34 <UART_SetConfig+0x4d8>
 800ab26:	bf00      	nop
 800ab28:	40011000 	.word	0x40011000
 800ab2c:	40011400 	.word	0x40011400
 800ab30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab46:	4642      	mov	r2, r8
 800ab48:	464b      	mov	r3, r9
 800ab4a:	1891      	adds	r1, r2, r2
 800ab4c:	6239      	str	r1, [r7, #32]
 800ab4e:	415b      	adcs	r3, r3
 800ab50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab56:	4641      	mov	r1, r8
 800ab58:	1854      	adds	r4, r2, r1
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	eb43 0501 	adc.w	r5, r3, r1
 800ab60:	f04f 0200 	mov.w	r2, #0
 800ab64:	f04f 0300 	mov.w	r3, #0
 800ab68:	00eb      	lsls	r3, r5, #3
 800ab6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab6e:	00e2      	lsls	r2, r4, #3
 800ab70:	4614      	mov	r4, r2
 800ab72:	461d      	mov	r5, r3
 800ab74:	4643      	mov	r3, r8
 800ab76:	18e3      	adds	r3, r4, r3
 800ab78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	eb45 0303 	adc.w	r3, r5, r3
 800ab82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ab96:	f04f 0200 	mov.w	r2, #0
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aba2:	4629      	mov	r1, r5
 800aba4:	008b      	lsls	r3, r1, #2
 800aba6:	4621      	mov	r1, r4
 800aba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abac:	4621      	mov	r1, r4
 800abae:	008a      	lsls	r2, r1, #2
 800abb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800abb4:	f7f6 f898 	bl	8000ce8 <__aeabi_uldivmod>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4b60      	ldr	r3, [pc, #384]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800abbe:	fba3 2302 	umull	r2, r3, r3, r2
 800abc2:	095b      	lsrs	r3, r3, #5
 800abc4:	011c      	lsls	r4, r3, #4
 800abc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800abd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800abd8:	4642      	mov	r2, r8
 800abda:	464b      	mov	r3, r9
 800abdc:	1891      	adds	r1, r2, r2
 800abde:	61b9      	str	r1, [r7, #24]
 800abe0:	415b      	adcs	r3, r3
 800abe2:	61fb      	str	r3, [r7, #28]
 800abe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abe8:	4641      	mov	r1, r8
 800abea:	1851      	adds	r1, r2, r1
 800abec:	6139      	str	r1, [r7, #16]
 800abee:	4649      	mov	r1, r9
 800abf0:	414b      	adcs	r3, r1
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac00:	4659      	mov	r1, fp
 800ac02:	00cb      	lsls	r3, r1, #3
 800ac04:	4651      	mov	r1, sl
 800ac06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac0a:	4651      	mov	r1, sl
 800ac0c:	00ca      	lsls	r2, r1, #3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4619      	mov	r1, r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	4642      	mov	r2, r8
 800ac16:	189b      	adds	r3, r3, r2
 800ac18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	460a      	mov	r2, r1
 800ac20:	eb42 0303 	adc.w	r3, r2, r3
 800ac24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac34:	f04f 0200 	mov.w	r2, #0
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac40:	4649      	mov	r1, r9
 800ac42:	008b      	lsls	r3, r1, #2
 800ac44:	4641      	mov	r1, r8
 800ac46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac4a:	4641      	mov	r1, r8
 800ac4c:	008a      	lsls	r2, r1, #2
 800ac4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac52:	f7f6 f849 	bl	8000ce8 <__aeabi_uldivmod>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4b38      	ldr	r3, [pc, #224]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ac5e:	fba3 2301 	umull	r2, r3, r3, r1
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	2264      	movs	r2, #100	@ 0x64
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	1acb      	subs	r3, r1, r3
 800ac6c:	011b      	lsls	r3, r3, #4
 800ac6e:	3332      	adds	r3, #50	@ 0x32
 800ac70:	4a33      	ldr	r2, [pc, #204]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	095b      	lsrs	r3, r3, #5
 800ac78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac7c:	441c      	add	r4, r3
 800ac7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac82:	2200      	movs	r2, #0
 800ac84:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac86:	677a      	str	r2, [r7, #116]	@ 0x74
 800ac88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ac8c:	4642      	mov	r2, r8
 800ac8e:	464b      	mov	r3, r9
 800ac90:	1891      	adds	r1, r2, r2
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	415b      	adcs	r3, r3
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	1851      	adds	r1, r2, r1
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	4649      	mov	r1, r9
 800aca4:	414b      	adcs	r3, r1
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	f04f 0200 	mov.w	r2, #0
 800acac:	f04f 0300 	mov.w	r3, #0
 800acb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800acb4:	4659      	mov	r1, fp
 800acb6:	00cb      	lsls	r3, r1, #3
 800acb8:	4651      	mov	r1, sl
 800acba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acbe:	4651      	mov	r1, sl
 800acc0:	00ca      	lsls	r2, r1, #3
 800acc2:	4610      	mov	r0, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	4642      	mov	r2, r8
 800acca:	189b      	adds	r3, r3, r2
 800accc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acce:	464b      	mov	r3, r9
 800acd0:	460a      	mov	r2, r1
 800acd2:	eb42 0303 	adc.w	r3, r2, r3
 800acd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	663b      	str	r3, [r7, #96]	@ 0x60
 800ace2:	667a      	str	r2, [r7, #100]	@ 0x64
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800acf0:	4649      	mov	r1, r9
 800acf2:	008b      	lsls	r3, r1, #2
 800acf4:	4641      	mov	r1, r8
 800acf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acfa:	4641      	mov	r1, r8
 800acfc:	008a      	lsls	r2, r1, #2
 800acfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad02:	f7f5 fff1 	bl	8000ce8 <__aeabi_uldivmod>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ad0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad10:	095b      	lsrs	r3, r3, #5
 800ad12:	2164      	movs	r1, #100	@ 0x64
 800ad14:	fb01 f303 	mul.w	r3, r1, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	3332      	adds	r3, #50	@ 0x32
 800ad1e:	4a08      	ldr	r2, [pc, #32]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ad20:	fba2 2303 	umull	r2, r3, r2, r3
 800ad24:	095b      	lsrs	r3, r3, #5
 800ad26:	f003 020f 	and.w	r2, r3, #15
 800ad2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4422      	add	r2, r4
 800ad32:	609a      	str	r2, [r3, #8]
}
 800ad34:	bf00      	nop
 800ad36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad40:	51eb851f 	.word	0x51eb851f

0800ad44 <__cvt>:
 800ad44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	ec57 6b10 	vmov	r6, r7, d0
 800ad4c:	2f00      	cmp	r7, #0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	4619      	mov	r1, r3
 800ad52:	463b      	mov	r3, r7
 800ad54:	bfbb      	ittet	lt
 800ad56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad5a:	461f      	movlt	r7, r3
 800ad5c:	2300      	movge	r3, #0
 800ad5e:	232d      	movlt	r3, #45	@ 0x2d
 800ad60:	700b      	strb	r3, [r1, #0]
 800ad62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad68:	4691      	mov	r9, r2
 800ad6a:	f023 0820 	bic.w	r8, r3, #32
 800ad6e:	bfbc      	itt	lt
 800ad70:	4632      	movlt	r2, r6
 800ad72:	4616      	movlt	r6, r2
 800ad74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad78:	d005      	beq.n	800ad86 <__cvt+0x42>
 800ad7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad7e:	d100      	bne.n	800ad82 <__cvt+0x3e>
 800ad80:	3401      	adds	r4, #1
 800ad82:	2102      	movs	r1, #2
 800ad84:	e000      	b.n	800ad88 <__cvt+0x44>
 800ad86:	2103      	movs	r1, #3
 800ad88:	ab03      	add	r3, sp, #12
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	ab02      	add	r3, sp, #8
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	ec47 6b10 	vmov	d0, r6, r7
 800ad94:	4653      	mov	r3, sl
 800ad96:	4622      	mov	r2, r4
 800ad98:	f001 f8f2 	bl	800bf80 <_dtoa_r>
 800ad9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ada0:	4605      	mov	r5, r0
 800ada2:	d119      	bne.n	800add8 <__cvt+0x94>
 800ada4:	f019 0f01 	tst.w	r9, #1
 800ada8:	d00e      	beq.n	800adc8 <__cvt+0x84>
 800adaa:	eb00 0904 	add.w	r9, r0, r4
 800adae:	2200      	movs	r2, #0
 800adb0:	2300      	movs	r3, #0
 800adb2:	4630      	mov	r0, r6
 800adb4:	4639      	mov	r1, r7
 800adb6:	f7f5 feb7 	bl	8000b28 <__aeabi_dcmpeq>
 800adba:	b108      	cbz	r0, 800adc0 <__cvt+0x7c>
 800adbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800adc0:	2230      	movs	r2, #48	@ 0x30
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	454b      	cmp	r3, r9
 800adc6:	d31e      	bcc.n	800ae06 <__cvt+0xc2>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adcc:	1b5b      	subs	r3, r3, r5
 800adce:	4628      	mov	r0, r5
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	b004      	add	sp, #16
 800add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800addc:	eb00 0904 	add.w	r9, r0, r4
 800ade0:	d1e5      	bne.n	800adae <__cvt+0x6a>
 800ade2:	7803      	ldrb	r3, [r0, #0]
 800ade4:	2b30      	cmp	r3, #48	@ 0x30
 800ade6:	d10a      	bne.n	800adfe <__cvt+0xba>
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	4630      	mov	r0, r6
 800adee:	4639      	mov	r1, r7
 800adf0:	f7f5 fe9a 	bl	8000b28 <__aeabi_dcmpeq>
 800adf4:	b918      	cbnz	r0, 800adfe <__cvt+0xba>
 800adf6:	f1c4 0401 	rsb	r4, r4, #1
 800adfa:	f8ca 4000 	str.w	r4, [sl]
 800adfe:	f8da 3000 	ldr.w	r3, [sl]
 800ae02:	4499      	add	r9, r3
 800ae04:	e7d3      	b.n	800adae <__cvt+0x6a>
 800ae06:	1c59      	adds	r1, r3, #1
 800ae08:	9103      	str	r1, [sp, #12]
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	e7d9      	b.n	800adc2 <__cvt+0x7e>

0800ae0e <__exponent>:
 800ae0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae10:	2900      	cmp	r1, #0
 800ae12:	bfba      	itte	lt
 800ae14:	4249      	neglt	r1, r1
 800ae16:	232d      	movlt	r3, #45	@ 0x2d
 800ae18:	232b      	movge	r3, #43	@ 0x2b
 800ae1a:	2909      	cmp	r1, #9
 800ae1c:	7002      	strb	r2, [r0, #0]
 800ae1e:	7043      	strb	r3, [r0, #1]
 800ae20:	dd29      	ble.n	800ae76 <__exponent+0x68>
 800ae22:	f10d 0307 	add.w	r3, sp, #7
 800ae26:	461d      	mov	r5, r3
 800ae28:	270a      	movs	r7, #10
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae30:	fb07 1416 	mls	r4, r7, r6, r1
 800ae34:	3430      	adds	r4, #48	@ 0x30
 800ae36:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	2c63      	cmp	r4, #99	@ 0x63
 800ae3e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ae42:	4631      	mov	r1, r6
 800ae44:	dcf1      	bgt.n	800ae2a <__exponent+0x1c>
 800ae46:	3130      	adds	r1, #48	@ 0x30
 800ae48:	1e94      	subs	r4, r2, #2
 800ae4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae4e:	1c41      	adds	r1, r0, #1
 800ae50:	4623      	mov	r3, r4
 800ae52:	42ab      	cmp	r3, r5
 800ae54:	d30a      	bcc.n	800ae6c <__exponent+0x5e>
 800ae56:	f10d 0309 	add.w	r3, sp, #9
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	42ac      	cmp	r4, r5
 800ae5e:	bf88      	it	hi
 800ae60:	2300      	movhi	r3, #0
 800ae62:	3302      	adds	r3, #2
 800ae64:	4403      	add	r3, r0
 800ae66:	1a18      	subs	r0, r3, r0
 800ae68:	b003      	add	sp, #12
 800ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae70:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae74:	e7ed      	b.n	800ae52 <__exponent+0x44>
 800ae76:	2330      	movs	r3, #48	@ 0x30
 800ae78:	3130      	adds	r1, #48	@ 0x30
 800ae7a:	7083      	strb	r3, [r0, #2]
 800ae7c:	70c1      	strb	r1, [r0, #3]
 800ae7e:	1d03      	adds	r3, r0, #4
 800ae80:	e7f1      	b.n	800ae66 <__exponent+0x58>
	...

0800ae84 <_printf_float>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	b08d      	sub	sp, #52	@ 0x34
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae90:	4616      	mov	r6, r2
 800ae92:	461f      	mov	r7, r3
 800ae94:	4605      	mov	r5, r0
 800ae96:	f000 ff5f 	bl	800bd58 <_localeconv_r>
 800ae9a:	6803      	ldr	r3, [r0, #0]
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f5 fa16 	bl	80002d0 <strlen>
 800aea4:	2300      	movs	r3, #0
 800aea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea8:	f8d8 3000 	ldr.w	r3, [r8]
 800aeac:	9005      	str	r0, [sp, #20]
 800aeae:	3307      	adds	r3, #7
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	f103 0208 	add.w	r2, r3, #8
 800aeb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aebc:	f8d4 b000 	ldr.w	fp, [r4]
 800aec0:	f8c8 2000 	str.w	r2, [r8]
 800aec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aec8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aecc:	9307      	str	r3, [sp, #28]
 800aece:	f8cd 8018 	str.w	r8, [sp, #24]
 800aed2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeda:	4b9c      	ldr	r3, [pc, #624]	@ (800b14c <_printf_float+0x2c8>)
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aee0:	f7f5 fe54 	bl	8000b8c <__aeabi_dcmpun>
 800aee4:	bb70      	cbnz	r0, 800af44 <_printf_float+0xc0>
 800aee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeea:	4b98      	ldr	r3, [pc, #608]	@ (800b14c <_printf_float+0x2c8>)
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aef0:	f7f5 fe2e 	bl	8000b50 <__aeabi_dcmple>
 800aef4:	bb30      	cbnz	r0, 800af44 <_printf_float+0xc0>
 800aef6:	2200      	movs	r2, #0
 800aef8:	2300      	movs	r3, #0
 800aefa:	4640      	mov	r0, r8
 800aefc:	4649      	mov	r1, r9
 800aefe:	f7f5 fe1d 	bl	8000b3c <__aeabi_dcmplt>
 800af02:	b110      	cbz	r0, 800af0a <_printf_float+0x86>
 800af04:	232d      	movs	r3, #45	@ 0x2d
 800af06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0a:	4a91      	ldr	r2, [pc, #580]	@ (800b150 <_printf_float+0x2cc>)
 800af0c:	4b91      	ldr	r3, [pc, #580]	@ (800b154 <_printf_float+0x2d0>)
 800af0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af12:	bf8c      	ite	hi
 800af14:	4690      	movhi	r8, r2
 800af16:	4698      	movls	r8, r3
 800af18:	2303      	movs	r3, #3
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	f02b 0304 	bic.w	r3, fp, #4
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	f04f 0900 	mov.w	r9, #0
 800af26:	9700      	str	r7, [sp, #0]
 800af28:	4633      	mov	r3, r6
 800af2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af2c:	4621      	mov	r1, r4
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 f9d2 	bl	800b2d8 <_printf_common>
 800af34:	3001      	adds	r0, #1
 800af36:	f040 808d 	bne.w	800b054 <_printf_float+0x1d0>
 800af3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af3e:	b00d      	add	sp, #52	@ 0x34
 800af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af44:	4642      	mov	r2, r8
 800af46:	464b      	mov	r3, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	4649      	mov	r1, r9
 800af4c:	f7f5 fe1e 	bl	8000b8c <__aeabi_dcmpun>
 800af50:	b140      	cbz	r0, 800af64 <_printf_float+0xe0>
 800af52:	464b      	mov	r3, r9
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfbc      	itt	lt
 800af58:	232d      	movlt	r3, #45	@ 0x2d
 800af5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af5e:	4a7e      	ldr	r2, [pc, #504]	@ (800b158 <_printf_float+0x2d4>)
 800af60:	4b7e      	ldr	r3, [pc, #504]	@ (800b15c <_printf_float+0x2d8>)
 800af62:	e7d4      	b.n	800af0e <_printf_float+0x8a>
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af6a:	9206      	str	r2, [sp, #24]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	d13b      	bne.n	800afe8 <_printf_float+0x164>
 800af70:	2306      	movs	r3, #6
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af78:	2300      	movs	r3, #0
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	9303      	str	r3, [sp, #12]
 800af7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800af80:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af84:	ab09      	add	r3, sp, #36	@ 0x24
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	6861      	ldr	r1, [r4, #4]
 800af8a:	ec49 8b10 	vmov	d0, r8, r9
 800af8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af92:	4628      	mov	r0, r5
 800af94:	f7ff fed6 	bl	800ad44 <__cvt>
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af9c:	2b47      	cmp	r3, #71	@ 0x47
 800af9e:	4680      	mov	r8, r0
 800afa0:	d129      	bne.n	800aff6 <_printf_float+0x172>
 800afa2:	1cc8      	adds	r0, r1, #3
 800afa4:	db02      	blt.n	800afac <_printf_float+0x128>
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	4299      	cmp	r1, r3
 800afaa:	dd41      	ble.n	800b030 <_printf_float+0x1ac>
 800afac:	f1aa 0a02 	sub.w	sl, sl, #2
 800afb0:	fa5f fa8a 	uxtb.w	sl, sl
 800afb4:	3901      	subs	r1, #1
 800afb6:	4652      	mov	r2, sl
 800afb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afbc:	9109      	str	r1, [sp, #36]	@ 0x24
 800afbe:	f7ff ff26 	bl	800ae0e <__exponent>
 800afc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afc4:	1813      	adds	r3, r2, r0
 800afc6:	2a01      	cmp	r2, #1
 800afc8:	4681      	mov	r9, r0
 800afca:	6123      	str	r3, [r4, #16]
 800afcc:	dc02      	bgt.n	800afd4 <_printf_float+0x150>
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	07d2      	lsls	r2, r2, #31
 800afd2:	d501      	bpl.n	800afd8 <_printf_float+0x154>
 800afd4:	3301      	adds	r3, #1
 800afd6:	6123      	str	r3, [r4, #16]
 800afd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0a2      	beq.n	800af26 <_printf_float+0xa2>
 800afe0:	232d      	movs	r3, #45	@ 0x2d
 800afe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe6:	e79e      	b.n	800af26 <_printf_float+0xa2>
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	2a47      	cmp	r2, #71	@ 0x47
 800afec:	d1c2      	bne.n	800af74 <_printf_float+0xf0>
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1c0      	bne.n	800af74 <_printf_float+0xf0>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e7bd      	b.n	800af72 <_printf_float+0xee>
 800aff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800affa:	d9db      	bls.n	800afb4 <_printf_float+0x130>
 800affc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b000:	d118      	bne.n	800b034 <_printf_float+0x1b0>
 800b002:	2900      	cmp	r1, #0
 800b004:	6863      	ldr	r3, [r4, #4]
 800b006:	dd0b      	ble.n	800b020 <_printf_float+0x19c>
 800b008:	6121      	str	r1, [r4, #16]
 800b00a:	b913      	cbnz	r3, 800b012 <_printf_float+0x18e>
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	07d0      	lsls	r0, r2, #31
 800b010:	d502      	bpl.n	800b018 <_printf_float+0x194>
 800b012:	3301      	adds	r3, #1
 800b014:	440b      	add	r3, r1
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b01a:	f04f 0900 	mov.w	r9, #0
 800b01e:	e7db      	b.n	800afd8 <_printf_float+0x154>
 800b020:	b913      	cbnz	r3, 800b028 <_printf_float+0x1a4>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	07d2      	lsls	r2, r2, #31
 800b026:	d501      	bpl.n	800b02c <_printf_float+0x1a8>
 800b028:	3302      	adds	r3, #2
 800b02a:	e7f4      	b.n	800b016 <_printf_float+0x192>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7f2      	b.n	800b016 <_printf_float+0x192>
 800b030:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	4299      	cmp	r1, r3
 800b038:	db05      	blt.n	800b046 <_printf_float+0x1c2>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	6121      	str	r1, [r4, #16]
 800b03e:	07d8      	lsls	r0, r3, #31
 800b040:	d5ea      	bpl.n	800b018 <_printf_float+0x194>
 800b042:	1c4b      	adds	r3, r1, #1
 800b044:	e7e7      	b.n	800b016 <_printf_float+0x192>
 800b046:	2900      	cmp	r1, #0
 800b048:	bfd4      	ite	le
 800b04a:	f1c1 0202 	rsble	r2, r1, #2
 800b04e:	2201      	movgt	r2, #1
 800b050:	4413      	add	r3, r2
 800b052:	e7e0      	b.n	800b016 <_printf_float+0x192>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	055a      	lsls	r2, r3, #21
 800b058:	d407      	bmi.n	800b06a <_printf_float+0x1e6>
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	4642      	mov	r2, r8
 800b05e:	4631      	mov	r1, r6
 800b060:	4628      	mov	r0, r5
 800b062:	47b8      	blx	r7
 800b064:	3001      	adds	r0, #1
 800b066:	d12b      	bne.n	800b0c0 <_printf_float+0x23c>
 800b068:	e767      	b.n	800af3a <_printf_float+0xb6>
 800b06a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b06e:	f240 80dd 	bls.w	800b22c <_printf_float+0x3a8>
 800b072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b076:	2200      	movs	r2, #0
 800b078:	2300      	movs	r3, #0
 800b07a:	f7f5 fd55 	bl	8000b28 <__aeabi_dcmpeq>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d033      	beq.n	800b0ea <_printf_float+0x266>
 800b082:	4a37      	ldr	r2, [pc, #220]	@ (800b160 <_printf_float+0x2dc>)
 800b084:	2301      	movs	r3, #1
 800b086:	4631      	mov	r1, r6
 800b088:	4628      	mov	r0, r5
 800b08a:	47b8      	blx	r7
 800b08c:	3001      	adds	r0, #1
 800b08e:	f43f af54 	beq.w	800af3a <_printf_float+0xb6>
 800b092:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b096:	4543      	cmp	r3, r8
 800b098:	db02      	blt.n	800b0a0 <_printf_float+0x21c>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	07d8      	lsls	r0, r3, #31
 800b09e:	d50f      	bpl.n	800b0c0 <_printf_float+0x23c>
 800b0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f af45 	beq.w	800af3a <_printf_float+0xb6>
 800b0b0:	f04f 0900 	mov.w	r9, #0
 800b0b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b0b8:	f104 0a1a 	add.w	sl, r4, #26
 800b0bc:	45c8      	cmp	r8, r9
 800b0be:	dc09      	bgt.n	800b0d4 <_printf_float+0x250>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	079b      	lsls	r3, r3, #30
 800b0c4:	f100 8103 	bmi.w	800b2ce <_printf_float+0x44a>
 800b0c8:	68e0      	ldr	r0, [r4, #12]
 800b0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	bfb8      	it	lt
 800b0d0:	4618      	movlt	r0, r3
 800b0d2:	e734      	b.n	800af3e <_printf_float+0xba>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	4652      	mov	r2, sl
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4628      	mov	r0, r5
 800b0dc:	47b8      	blx	r7
 800b0de:	3001      	adds	r0, #1
 800b0e0:	f43f af2b 	beq.w	800af3a <_printf_float+0xb6>
 800b0e4:	f109 0901 	add.w	r9, r9, #1
 800b0e8:	e7e8      	b.n	800b0bc <_printf_float+0x238>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dc39      	bgt.n	800b164 <_printf_float+0x2e0>
 800b0f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b160 <_printf_float+0x2dc>)
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f af1d 	beq.w	800af3a <_printf_float+0xb6>
 800b100:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b104:	ea59 0303 	orrs.w	r3, r9, r3
 800b108:	d102      	bne.n	800b110 <_printf_float+0x28c>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	07d9      	lsls	r1, r3, #31
 800b10e:	d5d7      	bpl.n	800b0c0 <_printf_float+0x23c>
 800b110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b114:	4631      	mov	r1, r6
 800b116:	4628      	mov	r0, r5
 800b118:	47b8      	blx	r7
 800b11a:	3001      	adds	r0, #1
 800b11c:	f43f af0d 	beq.w	800af3a <_printf_float+0xb6>
 800b120:	f04f 0a00 	mov.w	sl, #0
 800b124:	f104 0b1a 	add.w	fp, r4, #26
 800b128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12a:	425b      	negs	r3, r3
 800b12c:	4553      	cmp	r3, sl
 800b12e:	dc01      	bgt.n	800b134 <_printf_float+0x2b0>
 800b130:	464b      	mov	r3, r9
 800b132:	e793      	b.n	800b05c <_printf_float+0x1d8>
 800b134:	2301      	movs	r3, #1
 800b136:	465a      	mov	r2, fp
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f aefb 	beq.w	800af3a <_printf_float+0xb6>
 800b144:	f10a 0a01 	add.w	sl, sl, #1
 800b148:	e7ee      	b.n	800b128 <_printf_float+0x2a4>
 800b14a:	bf00      	nop
 800b14c:	7fefffff 	.word	0x7fefffff
 800b150:	0801012c 	.word	0x0801012c
 800b154:	08010128 	.word	0x08010128
 800b158:	08010134 	.word	0x08010134
 800b15c:	08010130 	.word	0x08010130
 800b160:	0801026e 	.word	0x0801026e
 800b164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b16a:	4553      	cmp	r3, sl
 800b16c:	bfa8      	it	ge
 800b16e:	4653      	movge	r3, sl
 800b170:	2b00      	cmp	r3, #0
 800b172:	4699      	mov	r9, r3
 800b174:	dc36      	bgt.n	800b1e4 <_printf_float+0x360>
 800b176:	f04f 0b00 	mov.w	fp, #0
 800b17a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b17e:	f104 021a 	add.w	r2, r4, #26
 800b182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b184:	9306      	str	r3, [sp, #24]
 800b186:	eba3 0309 	sub.w	r3, r3, r9
 800b18a:	455b      	cmp	r3, fp
 800b18c:	dc31      	bgt.n	800b1f2 <_printf_float+0x36e>
 800b18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b190:	459a      	cmp	sl, r3
 800b192:	dc3a      	bgt.n	800b20a <_printf_float+0x386>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d437      	bmi.n	800b20a <_printf_float+0x386>
 800b19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19c:	ebaa 0903 	sub.w	r9, sl, r3
 800b1a0:	9b06      	ldr	r3, [sp, #24]
 800b1a2:	ebaa 0303 	sub.w	r3, sl, r3
 800b1a6:	4599      	cmp	r9, r3
 800b1a8:	bfa8      	it	ge
 800b1aa:	4699      	movge	r9, r3
 800b1ac:	f1b9 0f00 	cmp.w	r9, #0
 800b1b0:	dc33      	bgt.n	800b21a <_printf_float+0x396>
 800b1b2:	f04f 0800 	mov.w	r8, #0
 800b1b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ba:	f104 0b1a 	add.w	fp, r4, #26
 800b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c0:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c4:	eba3 0309 	sub.w	r3, r3, r9
 800b1c8:	4543      	cmp	r3, r8
 800b1ca:	f77f af79 	ble.w	800b0c0 <_printf_float+0x23c>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	465a      	mov	r2, fp
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f aeae 	beq.w	800af3a <_printf_float+0xb6>
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	e7ec      	b.n	800b1be <_printf_float+0x33a>
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d1c2      	bne.n	800b176 <_printf_float+0x2f2>
 800b1f0:	e6a3      	b.n	800af3a <_printf_float+0xb6>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	9206      	str	r2, [sp, #24]
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae9c 	beq.w	800af3a <_printf_float+0xb6>
 800b202:	9a06      	ldr	r2, [sp, #24]
 800b204:	f10b 0b01 	add.w	fp, fp, #1
 800b208:	e7bb      	b.n	800b182 <_printf_float+0x2fe>
 800b20a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	47b8      	blx	r7
 800b214:	3001      	adds	r0, #1
 800b216:	d1c0      	bne.n	800b19a <_printf_float+0x316>
 800b218:	e68f      	b.n	800af3a <_printf_float+0xb6>
 800b21a:	9a06      	ldr	r2, [sp, #24]
 800b21c:	464b      	mov	r3, r9
 800b21e:	4442      	add	r2, r8
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	d1c3      	bne.n	800b1b2 <_printf_float+0x32e>
 800b22a:	e686      	b.n	800af3a <_printf_float+0xb6>
 800b22c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b230:	f1ba 0f01 	cmp.w	sl, #1
 800b234:	dc01      	bgt.n	800b23a <_printf_float+0x3b6>
 800b236:	07db      	lsls	r3, r3, #31
 800b238:	d536      	bpl.n	800b2a8 <_printf_float+0x424>
 800b23a:	2301      	movs	r3, #1
 800b23c:	4642      	mov	r2, r8
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f ae78 	beq.w	800af3a <_printf_float+0xb6>
 800b24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	f43f ae70 	beq.w	800af3a <_printf_float+0xb6>
 800b25a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b25e:	2200      	movs	r2, #0
 800b260:	2300      	movs	r3, #0
 800b262:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b266:	f7f5 fc5f 	bl	8000b28 <__aeabi_dcmpeq>
 800b26a:	b9c0      	cbnz	r0, 800b29e <_printf_float+0x41a>
 800b26c:	4653      	mov	r3, sl
 800b26e:	f108 0201 	add.w	r2, r8, #1
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d10c      	bne.n	800b296 <_printf_float+0x412>
 800b27c:	e65d      	b.n	800af3a <_printf_float+0xb6>
 800b27e:	2301      	movs	r3, #1
 800b280:	465a      	mov	r2, fp
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae56 	beq.w	800af3a <_printf_float+0xb6>
 800b28e:	f108 0801 	add.w	r8, r8, #1
 800b292:	45d0      	cmp	r8, sl
 800b294:	dbf3      	blt.n	800b27e <_printf_float+0x3fa>
 800b296:	464b      	mov	r3, r9
 800b298:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b29c:	e6df      	b.n	800b05e <_printf_float+0x1da>
 800b29e:	f04f 0800 	mov.w	r8, #0
 800b2a2:	f104 0b1a 	add.w	fp, r4, #26
 800b2a6:	e7f4      	b.n	800b292 <_printf_float+0x40e>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4642      	mov	r2, r8
 800b2ac:	e7e1      	b.n	800b272 <_printf_float+0x3ee>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	464a      	mov	r2, r9
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f43f ae3e 	beq.w	800af3a <_printf_float+0xb6>
 800b2be:	f108 0801 	add.w	r8, r8, #1
 800b2c2:	68e3      	ldr	r3, [r4, #12]
 800b2c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2c6:	1a5b      	subs	r3, r3, r1
 800b2c8:	4543      	cmp	r3, r8
 800b2ca:	dcf0      	bgt.n	800b2ae <_printf_float+0x42a>
 800b2cc:	e6fc      	b.n	800b0c8 <_printf_float+0x244>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	f104 0919 	add.w	r9, r4, #25
 800b2d6:	e7f4      	b.n	800b2c2 <_printf_float+0x43e>

0800b2d8 <_printf_common>:
 800b2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2dc:	4616      	mov	r6, r2
 800b2de:	4698      	mov	r8, r3
 800b2e0:	688a      	ldr	r2, [r1, #8]
 800b2e2:	690b      	ldr	r3, [r1, #16]
 800b2e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	bfb8      	it	lt
 800b2ec:	4613      	movlt	r3, r2
 800b2ee:	6033      	str	r3, [r6, #0]
 800b2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2f4:	4607      	mov	r7, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	b10a      	cbz	r2, 800b2fe <_printf_common+0x26>
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	6033      	str	r3, [r6, #0]
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	0699      	lsls	r1, r3, #26
 800b302:	bf42      	ittt	mi
 800b304:	6833      	ldrmi	r3, [r6, #0]
 800b306:	3302      	addmi	r3, #2
 800b308:	6033      	strmi	r3, [r6, #0]
 800b30a:	6825      	ldr	r5, [r4, #0]
 800b30c:	f015 0506 	ands.w	r5, r5, #6
 800b310:	d106      	bne.n	800b320 <_printf_common+0x48>
 800b312:	f104 0a19 	add.w	sl, r4, #25
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	6832      	ldr	r2, [r6, #0]
 800b31a:	1a9b      	subs	r3, r3, r2
 800b31c:	42ab      	cmp	r3, r5
 800b31e:	dc26      	bgt.n	800b36e <_printf_common+0x96>
 800b320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b324:	6822      	ldr	r2, [r4, #0]
 800b326:	3b00      	subs	r3, #0
 800b328:	bf18      	it	ne
 800b32a:	2301      	movne	r3, #1
 800b32c:	0692      	lsls	r2, r2, #26
 800b32e:	d42b      	bmi.n	800b388 <_printf_common+0xb0>
 800b330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b334:	4641      	mov	r1, r8
 800b336:	4638      	mov	r0, r7
 800b338:	47c8      	blx	r9
 800b33a:	3001      	adds	r0, #1
 800b33c:	d01e      	beq.n	800b37c <_printf_common+0xa4>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	6922      	ldr	r2, [r4, #16]
 800b342:	f003 0306 	and.w	r3, r3, #6
 800b346:	2b04      	cmp	r3, #4
 800b348:	bf02      	ittt	eq
 800b34a:	68e5      	ldreq	r5, [r4, #12]
 800b34c:	6833      	ldreq	r3, [r6, #0]
 800b34e:	1aed      	subeq	r5, r5, r3
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	bf0c      	ite	eq
 800b354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b358:	2500      	movne	r5, #0
 800b35a:	4293      	cmp	r3, r2
 800b35c:	bfc4      	itt	gt
 800b35e:	1a9b      	subgt	r3, r3, r2
 800b360:	18ed      	addgt	r5, r5, r3
 800b362:	2600      	movs	r6, #0
 800b364:	341a      	adds	r4, #26
 800b366:	42b5      	cmp	r5, r6
 800b368:	d11a      	bne.n	800b3a0 <_printf_common+0xc8>
 800b36a:	2000      	movs	r0, #0
 800b36c:	e008      	b.n	800b380 <_printf_common+0xa8>
 800b36e:	2301      	movs	r3, #1
 800b370:	4652      	mov	r2, sl
 800b372:	4641      	mov	r1, r8
 800b374:	4638      	mov	r0, r7
 800b376:	47c8      	blx	r9
 800b378:	3001      	adds	r0, #1
 800b37a:	d103      	bne.n	800b384 <_printf_common+0xac>
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b384:	3501      	adds	r5, #1
 800b386:	e7c6      	b.n	800b316 <_printf_common+0x3e>
 800b388:	18e1      	adds	r1, r4, r3
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	2030      	movs	r0, #48	@ 0x30
 800b38e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b392:	4422      	add	r2, r4
 800b394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b39c:	3302      	adds	r3, #2
 800b39e:	e7c7      	b.n	800b330 <_printf_common+0x58>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4622      	mov	r2, r4
 800b3a4:	4641      	mov	r1, r8
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	47c8      	blx	r9
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	d0e6      	beq.n	800b37c <_printf_common+0xa4>
 800b3ae:	3601      	adds	r6, #1
 800b3b0:	e7d9      	b.n	800b366 <_printf_common+0x8e>
	...

0800b3b4 <_printf_i>:
 800b3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b8:	7e0f      	ldrb	r7, [r1, #24]
 800b3ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3bc:	2f78      	cmp	r7, #120	@ 0x78
 800b3be:	4691      	mov	r9, r2
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	469a      	mov	sl, r3
 800b3c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3ca:	d807      	bhi.n	800b3dc <_printf_i+0x28>
 800b3cc:	2f62      	cmp	r7, #98	@ 0x62
 800b3ce:	d80a      	bhi.n	800b3e6 <_printf_i+0x32>
 800b3d0:	2f00      	cmp	r7, #0
 800b3d2:	f000 80d1 	beq.w	800b578 <_printf_i+0x1c4>
 800b3d6:	2f58      	cmp	r7, #88	@ 0x58
 800b3d8:	f000 80b8 	beq.w	800b54c <_printf_i+0x198>
 800b3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3e4:	e03a      	b.n	800b45c <_printf_i+0xa8>
 800b3e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3ea:	2b15      	cmp	r3, #21
 800b3ec:	d8f6      	bhi.n	800b3dc <_printf_i+0x28>
 800b3ee:	a101      	add	r1, pc, #4	@ (adr r1, 800b3f4 <_printf_i+0x40>)
 800b3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f4:	0800b44d 	.word	0x0800b44d
 800b3f8:	0800b461 	.word	0x0800b461
 800b3fc:	0800b3dd 	.word	0x0800b3dd
 800b400:	0800b3dd 	.word	0x0800b3dd
 800b404:	0800b3dd 	.word	0x0800b3dd
 800b408:	0800b3dd 	.word	0x0800b3dd
 800b40c:	0800b461 	.word	0x0800b461
 800b410:	0800b3dd 	.word	0x0800b3dd
 800b414:	0800b3dd 	.word	0x0800b3dd
 800b418:	0800b3dd 	.word	0x0800b3dd
 800b41c:	0800b3dd 	.word	0x0800b3dd
 800b420:	0800b55f 	.word	0x0800b55f
 800b424:	0800b48b 	.word	0x0800b48b
 800b428:	0800b519 	.word	0x0800b519
 800b42c:	0800b3dd 	.word	0x0800b3dd
 800b430:	0800b3dd 	.word	0x0800b3dd
 800b434:	0800b581 	.word	0x0800b581
 800b438:	0800b3dd 	.word	0x0800b3dd
 800b43c:	0800b48b 	.word	0x0800b48b
 800b440:	0800b3dd 	.word	0x0800b3dd
 800b444:	0800b3dd 	.word	0x0800b3dd
 800b448:	0800b521 	.word	0x0800b521
 800b44c:	6833      	ldr	r3, [r6, #0]
 800b44e:	1d1a      	adds	r2, r3, #4
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6032      	str	r2, [r6, #0]
 800b454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b45c:	2301      	movs	r3, #1
 800b45e:	e09c      	b.n	800b59a <_printf_i+0x1e6>
 800b460:	6833      	ldr	r3, [r6, #0]
 800b462:	6820      	ldr	r0, [r4, #0]
 800b464:	1d19      	adds	r1, r3, #4
 800b466:	6031      	str	r1, [r6, #0]
 800b468:	0606      	lsls	r6, r0, #24
 800b46a:	d501      	bpl.n	800b470 <_printf_i+0xbc>
 800b46c:	681d      	ldr	r5, [r3, #0]
 800b46e:	e003      	b.n	800b478 <_printf_i+0xc4>
 800b470:	0645      	lsls	r5, r0, #25
 800b472:	d5fb      	bpl.n	800b46c <_printf_i+0xb8>
 800b474:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b478:	2d00      	cmp	r5, #0
 800b47a:	da03      	bge.n	800b484 <_printf_i+0xd0>
 800b47c:	232d      	movs	r3, #45	@ 0x2d
 800b47e:	426d      	negs	r5, r5
 800b480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b484:	4858      	ldr	r0, [pc, #352]	@ (800b5e8 <_printf_i+0x234>)
 800b486:	230a      	movs	r3, #10
 800b488:	e011      	b.n	800b4ae <_printf_i+0xfa>
 800b48a:	6821      	ldr	r1, [r4, #0]
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	0608      	lsls	r0, r1, #24
 800b490:	f853 5b04 	ldr.w	r5, [r3], #4
 800b494:	d402      	bmi.n	800b49c <_printf_i+0xe8>
 800b496:	0649      	lsls	r1, r1, #25
 800b498:	bf48      	it	mi
 800b49a:	b2ad      	uxthmi	r5, r5
 800b49c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b49e:	4852      	ldr	r0, [pc, #328]	@ (800b5e8 <_printf_i+0x234>)
 800b4a0:	6033      	str	r3, [r6, #0]
 800b4a2:	bf14      	ite	ne
 800b4a4:	230a      	movne	r3, #10
 800b4a6:	2308      	moveq	r3, #8
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4ae:	6866      	ldr	r6, [r4, #4]
 800b4b0:	60a6      	str	r6, [r4, #8]
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	db05      	blt.n	800b4c2 <_printf_i+0x10e>
 800b4b6:	6821      	ldr	r1, [r4, #0]
 800b4b8:	432e      	orrs	r6, r5
 800b4ba:	f021 0104 	bic.w	r1, r1, #4
 800b4be:	6021      	str	r1, [r4, #0]
 800b4c0:	d04b      	beq.n	800b55a <_printf_i+0x1a6>
 800b4c2:	4616      	mov	r6, r2
 800b4c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4c8:	fb03 5711 	mls	r7, r3, r1, r5
 800b4cc:	5dc7      	ldrb	r7, [r0, r7]
 800b4ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4d2:	462f      	mov	r7, r5
 800b4d4:	42bb      	cmp	r3, r7
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	d9f4      	bls.n	800b4c4 <_printf_i+0x110>
 800b4da:	2b08      	cmp	r3, #8
 800b4dc:	d10b      	bne.n	800b4f6 <_printf_i+0x142>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	07df      	lsls	r7, r3, #31
 800b4e2:	d508      	bpl.n	800b4f6 <_printf_i+0x142>
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	6861      	ldr	r1, [r4, #4]
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	bfde      	ittt	le
 800b4ec:	2330      	movle	r3, #48	@ 0x30
 800b4ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b4f6:	1b92      	subs	r2, r2, r6
 800b4f8:	6122      	str	r2, [r4, #16]
 800b4fa:	f8cd a000 	str.w	sl, [sp]
 800b4fe:	464b      	mov	r3, r9
 800b500:	aa03      	add	r2, sp, #12
 800b502:	4621      	mov	r1, r4
 800b504:	4640      	mov	r0, r8
 800b506:	f7ff fee7 	bl	800b2d8 <_printf_common>
 800b50a:	3001      	adds	r0, #1
 800b50c:	d14a      	bne.n	800b5a4 <_printf_i+0x1f0>
 800b50e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b512:	b004      	add	sp, #16
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	f043 0320 	orr.w	r3, r3, #32
 800b51e:	6023      	str	r3, [r4, #0]
 800b520:	4832      	ldr	r0, [pc, #200]	@ (800b5ec <_printf_i+0x238>)
 800b522:	2778      	movs	r7, #120	@ 0x78
 800b524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	6831      	ldr	r1, [r6, #0]
 800b52c:	061f      	lsls	r7, r3, #24
 800b52e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b532:	d402      	bmi.n	800b53a <_printf_i+0x186>
 800b534:	065f      	lsls	r7, r3, #25
 800b536:	bf48      	it	mi
 800b538:	b2ad      	uxthmi	r5, r5
 800b53a:	6031      	str	r1, [r6, #0]
 800b53c:	07d9      	lsls	r1, r3, #31
 800b53e:	bf44      	itt	mi
 800b540:	f043 0320 	orrmi.w	r3, r3, #32
 800b544:	6023      	strmi	r3, [r4, #0]
 800b546:	b11d      	cbz	r5, 800b550 <_printf_i+0x19c>
 800b548:	2310      	movs	r3, #16
 800b54a:	e7ad      	b.n	800b4a8 <_printf_i+0xf4>
 800b54c:	4826      	ldr	r0, [pc, #152]	@ (800b5e8 <_printf_i+0x234>)
 800b54e:	e7e9      	b.n	800b524 <_printf_i+0x170>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	f023 0320 	bic.w	r3, r3, #32
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	e7f6      	b.n	800b548 <_printf_i+0x194>
 800b55a:	4616      	mov	r6, r2
 800b55c:	e7bd      	b.n	800b4da <_printf_i+0x126>
 800b55e:	6833      	ldr	r3, [r6, #0]
 800b560:	6825      	ldr	r5, [r4, #0]
 800b562:	6961      	ldr	r1, [r4, #20]
 800b564:	1d18      	adds	r0, r3, #4
 800b566:	6030      	str	r0, [r6, #0]
 800b568:	062e      	lsls	r6, r5, #24
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	d501      	bpl.n	800b572 <_printf_i+0x1be>
 800b56e:	6019      	str	r1, [r3, #0]
 800b570:	e002      	b.n	800b578 <_printf_i+0x1c4>
 800b572:	0668      	lsls	r0, r5, #25
 800b574:	d5fb      	bpl.n	800b56e <_printf_i+0x1ba>
 800b576:	8019      	strh	r1, [r3, #0]
 800b578:	2300      	movs	r3, #0
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	4616      	mov	r6, r2
 800b57e:	e7bc      	b.n	800b4fa <_printf_i+0x146>
 800b580:	6833      	ldr	r3, [r6, #0]
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	6032      	str	r2, [r6, #0]
 800b586:	681e      	ldr	r6, [r3, #0]
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	2100      	movs	r1, #0
 800b58c:	4630      	mov	r0, r6
 800b58e:	f7f4 fe4f 	bl	8000230 <memchr>
 800b592:	b108      	cbz	r0, 800b598 <_printf_i+0x1e4>
 800b594:	1b80      	subs	r0, r0, r6
 800b596:	6060      	str	r0, [r4, #4]
 800b598:	6863      	ldr	r3, [r4, #4]
 800b59a:	6123      	str	r3, [r4, #16]
 800b59c:	2300      	movs	r3, #0
 800b59e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a2:	e7aa      	b.n	800b4fa <_printf_i+0x146>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	47d0      	blx	sl
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d0ad      	beq.n	800b50e <_printf_i+0x15a>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	079b      	lsls	r3, r3, #30
 800b5b6:	d413      	bmi.n	800b5e0 <_printf_i+0x22c>
 800b5b8:	68e0      	ldr	r0, [r4, #12]
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	4298      	cmp	r0, r3
 800b5be:	bfb8      	it	lt
 800b5c0:	4618      	movlt	r0, r3
 800b5c2:	e7a6      	b.n	800b512 <_printf_i+0x15e>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4632      	mov	r2, r6
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	47d0      	blx	sl
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	d09d      	beq.n	800b50e <_printf_i+0x15a>
 800b5d2:	3501      	adds	r5, #1
 800b5d4:	68e3      	ldr	r3, [r4, #12]
 800b5d6:	9903      	ldr	r1, [sp, #12]
 800b5d8:	1a5b      	subs	r3, r3, r1
 800b5da:	42ab      	cmp	r3, r5
 800b5dc:	dcf2      	bgt.n	800b5c4 <_printf_i+0x210>
 800b5de:	e7eb      	b.n	800b5b8 <_printf_i+0x204>
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	f104 0619 	add.w	r6, r4, #25
 800b5e6:	e7f5      	b.n	800b5d4 <_printf_i+0x220>
 800b5e8:	08010138 	.word	0x08010138
 800b5ec:	08010149 	.word	0x08010149

0800b5f0 <_scanf_float>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	b087      	sub	sp, #28
 800b5f6:	4691      	mov	r9, r2
 800b5f8:	9303      	str	r3, [sp, #12]
 800b5fa:	688b      	ldr	r3, [r1, #8]
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b602:	bf81      	itttt	hi
 800b604:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b608:	eb03 0b05 	addhi.w	fp, r3, r5
 800b60c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b610:	608b      	strhi	r3, [r1, #8]
 800b612:	680b      	ldr	r3, [r1, #0]
 800b614:	460a      	mov	r2, r1
 800b616:	f04f 0500 	mov.w	r5, #0
 800b61a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b61e:	f842 3b1c 	str.w	r3, [r2], #28
 800b622:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b626:	4680      	mov	r8, r0
 800b628:	460c      	mov	r4, r1
 800b62a:	bf98      	it	ls
 800b62c:	f04f 0b00 	movls.w	fp, #0
 800b630:	9201      	str	r2, [sp, #4]
 800b632:	4616      	mov	r6, r2
 800b634:	46aa      	mov	sl, r5
 800b636:	462f      	mov	r7, r5
 800b638:	9502      	str	r5, [sp, #8]
 800b63a:	68a2      	ldr	r2, [r4, #8]
 800b63c:	b15a      	cbz	r2, 800b656 <_scanf_float+0x66>
 800b63e:	f8d9 3000 	ldr.w	r3, [r9]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b4e      	cmp	r3, #78	@ 0x4e
 800b646:	d863      	bhi.n	800b710 <_scanf_float+0x120>
 800b648:	2b40      	cmp	r3, #64	@ 0x40
 800b64a:	d83b      	bhi.n	800b6c4 <_scanf_float+0xd4>
 800b64c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b650:	b2c8      	uxtb	r0, r1
 800b652:	280e      	cmp	r0, #14
 800b654:	d939      	bls.n	800b6ca <_scanf_float+0xda>
 800b656:	b11f      	cbz	r7, 800b660 <_scanf_float+0x70>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b65e:	6023      	str	r3, [r4, #0]
 800b660:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b664:	f1ba 0f01 	cmp.w	sl, #1
 800b668:	f200 8114 	bhi.w	800b894 <_scanf_float+0x2a4>
 800b66c:	9b01      	ldr	r3, [sp, #4]
 800b66e:	429e      	cmp	r6, r3
 800b670:	f200 8105 	bhi.w	800b87e <_scanf_float+0x28e>
 800b674:	2001      	movs	r0, #1
 800b676:	b007      	add	sp, #28
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b680:	2a0d      	cmp	r2, #13
 800b682:	d8e8      	bhi.n	800b656 <_scanf_float+0x66>
 800b684:	a101      	add	r1, pc, #4	@ (adr r1, 800b68c <_scanf_float+0x9c>)
 800b686:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b68a:	bf00      	nop
 800b68c:	0800b7d5 	.word	0x0800b7d5
 800b690:	0800b657 	.word	0x0800b657
 800b694:	0800b657 	.word	0x0800b657
 800b698:	0800b657 	.word	0x0800b657
 800b69c:	0800b831 	.word	0x0800b831
 800b6a0:	0800b80b 	.word	0x0800b80b
 800b6a4:	0800b657 	.word	0x0800b657
 800b6a8:	0800b657 	.word	0x0800b657
 800b6ac:	0800b7e3 	.word	0x0800b7e3
 800b6b0:	0800b657 	.word	0x0800b657
 800b6b4:	0800b657 	.word	0x0800b657
 800b6b8:	0800b657 	.word	0x0800b657
 800b6bc:	0800b657 	.word	0x0800b657
 800b6c0:	0800b79f 	.word	0x0800b79f
 800b6c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b6c8:	e7da      	b.n	800b680 <_scanf_float+0x90>
 800b6ca:	290e      	cmp	r1, #14
 800b6cc:	d8c3      	bhi.n	800b656 <_scanf_float+0x66>
 800b6ce:	a001      	add	r0, pc, #4	@ (adr r0, 800b6d4 <_scanf_float+0xe4>)
 800b6d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b6d4:	0800b78f 	.word	0x0800b78f
 800b6d8:	0800b657 	.word	0x0800b657
 800b6dc:	0800b78f 	.word	0x0800b78f
 800b6e0:	0800b81f 	.word	0x0800b81f
 800b6e4:	0800b657 	.word	0x0800b657
 800b6e8:	0800b731 	.word	0x0800b731
 800b6ec:	0800b775 	.word	0x0800b775
 800b6f0:	0800b775 	.word	0x0800b775
 800b6f4:	0800b775 	.word	0x0800b775
 800b6f8:	0800b775 	.word	0x0800b775
 800b6fc:	0800b775 	.word	0x0800b775
 800b700:	0800b775 	.word	0x0800b775
 800b704:	0800b775 	.word	0x0800b775
 800b708:	0800b775 	.word	0x0800b775
 800b70c:	0800b775 	.word	0x0800b775
 800b710:	2b6e      	cmp	r3, #110	@ 0x6e
 800b712:	d809      	bhi.n	800b728 <_scanf_float+0x138>
 800b714:	2b60      	cmp	r3, #96	@ 0x60
 800b716:	d8b1      	bhi.n	800b67c <_scanf_float+0x8c>
 800b718:	2b54      	cmp	r3, #84	@ 0x54
 800b71a:	d07b      	beq.n	800b814 <_scanf_float+0x224>
 800b71c:	2b59      	cmp	r3, #89	@ 0x59
 800b71e:	d19a      	bne.n	800b656 <_scanf_float+0x66>
 800b720:	2d07      	cmp	r5, #7
 800b722:	d198      	bne.n	800b656 <_scanf_float+0x66>
 800b724:	2508      	movs	r5, #8
 800b726:	e02f      	b.n	800b788 <_scanf_float+0x198>
 800b728:	2b74      	cmp	r3, #116	@ 0x74
 800b72a:	d073      	beq.n	800b814 <_scanf_float+0x224>
 800b72c:	2b79      	cmp	r3, #121	@ 0x79
 800b72e:	e7f6      	b.n	800b71e <_scanf_float+0x12e>
 800b730:	6821      	ldr	r1, [r4, #0]
 800b732:	05c8      	lsls	r0, r1, #23
 800b734:	d51e      	bpl.n	800b774 <_scanf_float+0x184>
 800b736:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b73a:	6021      	str	r1, [r4, #0]
 800b73c:	3701      	adds	r7, #1
 800b73e:	f1bb 0f00 	cmp.w	fp, #0
 800b742:	d003      	beq.n	800b74c <_scanf_float+0x15c>
 800b744:	3201      	adds	r2, #1
 800b746:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800b74a:	60a2      	str	r2, [r4, #8]
 800b74c:	68a3      	ldr	r3, [r4, #8]
 800b74e:	3b01      	subs	r3, #1
 800b750:	60a3      	str	r3, [r4, #8]
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	3301      	adds	r3, #1
 800b756:	6123      	str	r3, [r4, #16]
 800b758:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f8c9 3004 	str.w	r3, [r9, #4]
 800b764:	f340 8082 	ble.w	800b86c <_scanf_float+0x27c>
 800b768:	f8d9 3000 	ldr.w	r3, [r9]
 800b76c:	3301      	adds	r3, #1
 800b76e:	f8c9 3000 	str.w	r3, [r9]
 800b772:	e762      	b.n	800b63a <_scanf_float+0x4a>
 800b774:	eb1a 0105 	adds.w	r1, sl, r5
 800b778:	f47f af6d 	bne.w	800b656 <_scanf_float+0x66>
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b782:	6022      	str	r2, [r4, #0]
 800b784:	460d      	mov	r5, r1
 800b786:	468a      	mov	sl, r1
 800b788:	f806 3b01 	strb.w	r3, [r6], #1
 800b78c:	e7de      	b.n	800b74c <_scanf_float+0x15c>
 800b78e:	6822      	ldr	r2, [r4, #0]
 800b790:	0610      	lsls	r0, r2, #24
 800b792:	f57f af60 	bpl.w	800b656 <_scanf_float+0x66>
 800b796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b79a:	6022      	str	r2, [r4, #0]
 800b79c:	e7f4      	b.n	800b788 <_scanf_float+0x198>
 800b79e:	f1ba 0f00 	cmp.w	sl, #0
 800b7a2:	d10c      	bne.n	800b7be <_scanf_float+0x1ce>
 800b7a4:	b977      	cbnz	r7, 800b7c4 <_scanf_float+0x1d4>
 800b7a6:	6822      	ldr	r2, [r4, #0]
 800b7a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7b0:	d108      	bne.n	800b7c4 <_scanf_float+0x1d4>
 800b7b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7b6:	6022      	str	r2, [r4, #0]
 800b7b8:	f04f 0a01 	mov.w	sl, #1
 800b7bc:	e7e4      	b.n	800b788 <_scanf_float+0x198>
 800b7be:	f1ba 0f02 	cmp.w	sl, #2
 800b7c2:	d050      	beq.n	800b866 <_scanf_float+0x276>
 800b7c4:	2d01      	cmp	r5, #1
 800b7c6:	d002      	beq.n	800b7ce <_scanf_float+0x1de>
 800b7c8:	2d04      	cmp	r5, #4
 800b7ca:	f47f af44 	bne.w	800b656 <_scanf_float+0x66>
 800b7ce:	3501      	adds	r5, #1
 800b7d0:	b2ed      	uxtb	r5, r5
 800b7d2:	e7d9      	b.n	800b788 <_scanf_float+0x198>
 800b7d4:	f1ba 0f01 	cmp.w	sl, #1
 800b7d8:	f47f af3d 	bne.w	800b656 <_scanf_float+0x66>
 800b7dc:	f04f 0a02 	mov.w	sl, #2
 800b7e0:	e7d2      	b.n	800b788 <_scanf_float+0x198>
 800b7e2:	b975      	cbnz	r5, 800b802 <_scanf_float+0x212>
 800b7e4:	2f00      	cmp	r7, #0
 800b7e6:	f47f af37 	bne.w	800b658 <_scanf_float+0x68>
 800b7ea:	6822      	ldr	r2, [r4, #0]
 800b7ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7f4:	f040 8103 	bne.w	800b9fe <_scanf_float+0x40e>
 800b7f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7fc:	6022      	str	r2, [r4, #0]
 800b7fe:	2501      	movs	r5, #1
 800b800:	e7c2      	b.n	800b788 <_scanf_float+0x198>
 800b802:	2d03      	cmp	r5, #3
 800b804:	d0e3      	beq.n	800b7ce <_scanf_float+0x1de>
 800b806:	2d05      	cmp	r5, #5
 800b808:	e7df      	b.n	800b7ca <_scanf_float+0x1da>
 800b80a:	2d02      	cmp	r5, #2
 800b80c:	f47f af23 	bne.w	800b656 <_scanf_float+0x66>
 800b810:	2503      	movs	r5, #3
 800b812:	e7b9      	b.n	800b788 <_scanf_float+0x198>
 800b814:	2d06      	cmp	r5, #6
 800b816:	f47f af1e 	bne.w	800b656 <_scanf_float+0x66>
 800b81a:	2507      	movs	r5, #7
 800b81c:	e7b4      	b.n	800b788 <_scanf_float+0x198>
 800b81e:	6822      	ldr	r2, [r4, #0]
 800b820:	0591      	lsls	r1, r2, #22
 800b822:	f57f af18 	bpl.w	800b656 <_scanf_float+0x66>
 800b826:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b82a:	6022      	str	r2, [r4, #0]
 800b82c:	9702      	str	r7, [sp, #8]
 800b82e:	e7ab      	b.n	800b788 <_scanf_float+0x198>
 800b830:	6822      	ldr	r2, [r4, #0]
 800b832:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b836:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b83a:	d005      	beq.n	800b848 <_scanf_float+0x258>
 800b83c:	0550      	lsls	r0, r2, #21
 800b83e:	f57f af0a 	bpl.w	800b656 <_scanf_float+0x66>
 800b842:	2f00      	cmp	r7, #0
 800b844:	f000 80db 	beq.w	800b9fe <_scanf_float+0x40e>
 800b848:	0591      	lsls	r1, r2, #22
 800b84a:	bf58      	it	pl
 800b84c:	9902      	ldrpl	r1, [sp, #8]
 800b84e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b852:	bf58      	it	pl
 800b854:	1a79      	subpl	r1, r7, r1
 800b856:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b85a:	bf58      	it	pl
 800b85c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b860:	6022      	str	r2, [r4, #0]
 800b862:	2700      	movs	r7, #0
 800b864:	e790      	b.n	800b788 <_scanf_float+0x198>
 800b866:	f04f 0a03 	mov.w	sl, #3
 800b86a:	e78d      	b.n	800b788 <_scanf_float+0x198>
 800b86c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b870:	4649      	mov	r1, r9
 800b872:	4640      	mov	r0, r8
 800b874:	4798      	blx	r3
 800b876:	2800      	cmp	r0, #0
 800b878:	f43f aedf 	beq.w	800b63a <_scanf_float+0x4a>
 800b87c:	e6eb      	b.n	800b656 <_scanf_float+0x66>
 800b87e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b886:	464a      	mov	r2, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	4798      	blx	r3
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	3b01      	subs	r3, #1
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	e6eb      	b.n	800b66c <_scanf_float+0x7c>
 800b894:	1e6b      	subs	r3, r5, #1
 800b896:	2b06      	cmp	r3, #6
 800b898:	d824      	bhi.n	800b8e4 <_scanf_float+0x2f4>
 800b89a:	2d02      	cmp	r5, #2
 800b89c:	d836      	bhi.n	800b90c <_scanf_float+0x31c>
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	429e      	cmp	r6, r3
 800b8a2:	f67f aee7 	bls.w	800b674 <_scanf_float+0x84>
 800b8a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8ae:	464a      	mov	r2, r9
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4798      	blx	r3
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	e7f0      	b.n	800b89e <_scanf_float+0x2ae>
 800b8bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b8c4:	464a      	mov	r2, r9
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	4798      	blx	r3
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	6123      	str	r3, [r4, #16]
 800b8d0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b8d4:	fa5f fa8a 	uxtb.w	sl, sl
 800b8d8:	f1ba 0f02 	cmp.w	sl, #2
 800b8dc:	d1ee      	bne.n	800b8bc <_scanf_float+0x2cc>
 800b8de:	3d03      	subs	r5, #3
 800b8e0:	b2ed      	uxtb	r5, r5
 800b8e2:	1b76      	subs	r6, r6, r5
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	05da      	lsls	r2, r3, #23
 800b8e8:	d530      	bpl.n	800b94c <_scanf_float+0x35c>
 800b8ea:	055b      	lsls	r3, r3, #21
 800b8ec:	d511      	bpl.n	800b912 <_scanf_float+0x322>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	429e      	cmp	r6, r3
 800b8f2:	f67f aebf 	bls.w	800b674 <_scanf_float+0x84>
 800b8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8fe:	464a      	mov	r2, r9
 800b900:	4640      	mov	r0, r8
 800b902:	4798      	blx	r3
 800b904:	6923      	ldr	r3, [r4, #16]
 800b906:	3b01      	subs	r3, #1
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	e7f0      	b.n	800b8ee <_scanf_float+0x2fe>
 800b90c:	46aa      	mov	sl, r5
 800b90e:	46b3      	mov	fp, r6
 800b910:	e7de      	b.n	800b8d0 <_scanf_float+0x2e0>
 800b912:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b916:	6923      	ldr	r3, [r4, #16]
 800b918:	2965      	cmp	r1, #101	@ 0x65
 800b91a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b91e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	d00c      	beq.n	800b940 <_scanf_float+0x350>
 800b926:	2945      	cmp	r1, #69	@ 0x45
 800b928:	d00a      	beq.n	800b940 <_scanf_float+0x350>
 800b92a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b92e:	464a      	mov	r2, r9
 800b930:	4640      	mov	r0, r8
 800b932:	4798      	blx	r3
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	1eb5      	subs	r5, r6, #2
 800b93e:	6123      	str	r3, [r4, #16]
 800b940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b944:	464a      	mov	r2, r9
 800b946:	4640      	mov	r0, r8
 800b948:	4798      	blx	r3
 800b94a:	462e      	mov	r6, r5
 800b94c:	6822      	ldr	r2, [r4, #0]
 800b94e:	f012 0210 	ands.w	r2, r2, #16
 800b952:	d001      	beq.n	800b958 <_scanf_float+0x368>
 800b954:	2000      	movs	r0, #0
 800b956:	e68e      	b.n	800b676 <_scanf_float+0x86>
 800b958:	7032      	strb	r2, [r6, #0]
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b964:	d125      	bne.n	800b9b2 <_scanf_float+0x3c2>
 800b966:	9b02      	ldr	r3, [sp, #8]
 800b968:	429f      	cmp	r7, r3
 800b96a:	d00a      	beq.n	800b982 <_scanf_float+0x392>
 800b96c:	1bda      	subs	r2, r3, r7
 800b96e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b972:	429e      	cmp	r6, r3
 800b974:	bf28      	it	cs
 800b976:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b97a:	4922      	ldr	r1, [pc, #136]	@ (800ba04 <_scanf_float+0x414>)
 800b97c:	4630      	mov	r0, r6
 800b97e:	f000 f93d 	bl	800bbfc <siprintf>
 800b982:	9901      	ldr	r1, [sp, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	4640      	mov	r0, r8
 800b988:	f002 fc76 	bl	800e278 <_strtod_r>
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	6821      	ldr	r1, [r4, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f011 0f02 	tst.w	r1, #2
 800b996:	ec57 6b10 	vmov	r6, r7, d0
 800b99a:	f103 0204 	add.w	r2, r3, #4
 800b99e:	d015      	beq.n	800b9cc <_scanf_float+0x3dc>
 800b9a0:	9903      	ldr	r1, [sp, #12]
 800b9a2:	600a      	str	r2, [r1, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	e9c3 6700 	strd	r6, r7, [r3]
 800b9aa:	68e3      	ldr	r3, [r4, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60e3      	str	r3, [r4, #12]
 800b9b0:	e7d0      	b.n	800b954 <_scanf_float+0x364>
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0e4      	beq.n	800b982 <_scanf_float+0x392>
 800b9b8:	9905      	ldr	r1, [sp, #20]
 800b9ba:	230a      	movs	r3, #10
 800b9bc:	3101      	adds	r1, #1
 800b9be:	4640      	mov	r0, r8
 800b9c0:	f002 fcda 	bl	800e378 <_strtol_r>
 800b9c4:	9b04      	ldr	r3, [sp, #16]
 800b9c6:	9e05      	ldr	r6, [sp, #20]
 800b9c8:	1ac2      	subs	r2, r0, r3
 800b9ca:	e7d0      	b.n	800b96e <_scanf_float+0x37e>
 800b9cc:	f011 0f04 	tst.w	r1, #4
 800b9d0:	9903      	ldr	r1, [sp, #12]
 800b9d2:	600a      	str	r2, [r1, #0]
 800b9d4:	d1e6      	bne.n	800b9a4 <_scanf_float+0x3b4>
 800b9d6:	681d      	ldr	r5, [r3, #0]
 800b9d8:	4632      	mov	r2, r6
 800b9da:	463b      	mov	r3, r7
 800b9dc:	4630      	mov	r0, r6
 800b9de:	4639      	mov	r1, r7
 800b9e0:	f7f5 f8d4 	bl	8000b8c <__aeabi_dcmpun>
 800b9e4:	b128      	cbz	r0, 800b9f2 <_scanf_float+0x402>
 800b9e6:	4808      	ldr	r0, [pc, #32]	@ (800ba08 <_scanf_float+0x418>)
 800b9e8:	f000 fa3c 	bl	800be64 <nanf>
 800b9ec:	ed85 0a00 	vstr	s0, [r5]
 800b9f0:	e7db      	b.n	800b9aa <_scanf_float+0x3ba>
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	f7f5 f927 	bl	8000c48 <__aeabi_d2f>
 800b9fa:	6028      	str	r0, [r5, #0]
 800b9fc:	e7d5      	b.n	800b9aa <_scanf_float+0x3ba>
 800b9fe:	2700      	movs	r7, #0
 800ba00:	e62e      	b.n	800b660 <_scanf_float+0x70>
 800ba02:	bf00      	nop
 800ba04:	0801015a 	.word	0x0801015a
 800ba08:	080102b6 	.word	0x080102b6

0800ba0c <std>:
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	b510      	push	{r4, lr}
 800ba10:	4604      	mov	r4, r0
 800ba12:	e9c0 3300 	strd	r3, r3, [r0]
 800ba16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba1a:	6083      	str	r3, [r0, #8]
 800ba1c:	8181      	strh	r1, [r0, #12]
 800ba1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba20:	81c2      	strh	r2, [r0, #14]
 800ba22:	6183      	str	r3, [r0, #24]
 800ba24:	4619      	mov	r1, r3
 800ba26:	2208      	movs	r2, #8
 800ba28:	305c      	adds	r0, #92	@ 0x5c
 800ba2a:	f000 f97a 	bl	800bd22 <memset>
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba64 <std+0x58>)
 800ba30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba32:	4b0d      	ldr	r3, [pc, #52]	@ (800ba68 <std+0x5c>)
 800ba34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba36:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <std+0x60>)
 800ba38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba70 <std+0x64>)
 800ba3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <std+0x68>)
 800ba40:	6224      	str	r4, [r4, #32]
 800ba42:	429c      	cmp	r4, r3
 800ba44:	d006      	beq.n	800ba54 <std+0x48>
 800ba46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba4a:	4294      	cmp	r4, r2
 800ba4c:	d002      	beq.n	800ba54 <std+0x48>
 800ba4e:	33d0      	adds	r3, #208	@ 0xd0
 800ba50:	429c      	cmp	r4, r3
 800ba52:	d105      	bne.n	800ba60 <std+0x54>
 800ba54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba5c:	f000 b9f0 	b.w	800be40 <__retarget_lock_init_recursive>
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	bf00      	nop
 800ba64:	0800bc99 	.word	0x0800bc99
 800ba68:	0800bcbf 	.word	0x0800bcbf
 800ba6c:	0800bcf7 	.word	0x0800bcf7
 800ba70:	0800bd1b 	.word	0x0800bd1b
 800ba74:	20000c78 	.word	0x20000c78

0800ba78 <stdio_exit_handler>:
 800ba78:	4a02      	ldr	r2, [pc, #8]	@ (800ba84 <stdio_exit_handler+0xc>)
 800ba7a:	4903      	ldr	r1, [pc, #12]	@ (800ba88 <stdio_exit_handler+0x10>)
 800ba7c:	4803      	ldr	r0, [pc, #12]	@ (800ba8c <stdio_exit_handler+0x14>)
 800ba7e:	f000 b869 	b.w	800bb54 <_fwalk_sglue>
 800ba82:	bf00      	nop
 800ba84:	200003d8 	.word	0x200003d8
 800ba88:	0800ed71 	.word	0x0800ed71
 800ba8c:	200003e8 	.word	0x200003e8

0800ba90 <cleanup_stdio>:
 800ba90:	6841      	ldr	r1, [r0, #4]
 800ba92:	4b0c      	ldr	r3, [pc, #48]	@ (800bac4 <cleanup_stdio+0x34>)
 800ba94:	4299      	cmp	r1, r3
 800ba96:	b510      	push	{r4, lr}
 800ba98:	4604      	mov	r4, r0
 800ba9a:	d001      	beq.n	800baa0 <cleanup_stdio+0x10>
 800ba9c:	f003 f968 	bl	800ed70 <_fflush_r>
 800baa0:	68a1      	ldr	r1, [r4, #8]
 800baa2:	4b09      	ldr	r3, [pc, #36]	@ (800bac8 <cleanup_stdio+0x38>)
 800baa4:	4299      	cmp	r1, r3
 800baa6:	d002      	beq.n	800baae <cleanup_stdio+0x1e>
 800baa8:	4620      	mov	r0, r4
 800baaa:	f003 f961 	bl	800ed70 <_fflush_r>
 800baae:	68e1      	ldr	r1, [r4, #12]
 800bab0:	4b06      	ldr	r3, [pc, #24]	@ (800bacc <cleanup_stdio+0x3c>)
 800bab2:	4299      	cmp	r1, r3
 800bab4:	d004      	beq.n	800bac0 <cleanup_stdio+0x30>
 800bab6:	4620      	mov	r0, r4
 800bab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800babc:	f003 b958 	b.w	800ed70 <_fflush_r>
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	bf00      	nop
 800bac4:	20000c78 	.word	0x20000c78
 800bac8:	20000ce0 	.word	0x20000ce0
 800bacc:	20000d48 	.word	0x20000d48

0800bad0 <global_stdio_init.part.0>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb00 <global_stdio_init.part.0+0x30>)
 800bad4:	4c0b      	ldr	r4, [pc, #44]	@ (800bb04 <global_stdio_init.part.0+0x34>)
 800bad6:	4a0c      	ldr	r2, [pc, #48]	@ (800bb08 <global_stdio_init.part.0+0x38>)
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	4620      	mov	r0, r4
 800badc:	2200      	movs	r2, #0
 800bade:	2104      	movs	r1, #4
 800bae0:	f7ff ff94 	bl	800ba0c <std>
 800bae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bae8:	2201      	movs	r2, #1
 800baea:	2109      	movs	r1, #9
 800baec:	f7ff ff8e 	bl	800ba0c <std>
 800baf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baf4:	2202      	movs	r2, #2
 800baf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bafa:	2112      	movs	r1, #18
 800bafc:	f7ff bf86 	b.w	800ba0c <std>
 800bb00:	20000db0 	.word	0x20000db0
 800bb04:	20000c78 	.word	0x20000c78
 800bb08:	0800ba79 	.word	0x0800ba79

0800bb0c <__sfp_lock_acquire>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	@ (800bb14 <__sfp_lock_acquire+0x8>)
 800bb0e:	f000 b998 	b.w	800be42 <__retarget_lock_acquire_recursive>
 800bb12:	bf00      	nop
 800bb14:	20000db9 	.word	0x20000db9

0800bb18 <__sfp_lock_release>:
 800bb18:	4801      	ldr	r0, [pc, #4]	@ (800bb20 <__sfp_lock_release+0x8>)
 800bb1a:	f000 b993 	b.w	800be44 <__retarget_lock_release_recursive>
 800bb1e:	bf00      	nop
 800bb20:	20000db9 	.word	0x20000db9

0800bb24 <__sinit>:
 800bb24:	b510      	push	{r4, lr}
 800bb26:	4604      	mov	r4, r0
 800bb28:	f7ff fff0 	bl	800bb0c <__sfp_lock_acquire>
 800bb2c:	6a23      	ldr	r3, [r4, #32]
 800bb2e:	b11b      	cbz	r3, 800bb38 <__sinit+0x14>
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f7ff bff0 	b.w	800bb18 <__sfp_lock_release>
 800bb38:	4b04      	ldr	r3, [pc, #16]	@ (800bb4c <__sinit+0x28>)
 800bb3a:	6223      	str	r3, [r4, #32]
 800bb3c:	4b04      	ldr	r3, [pc, #16]	@ (800bb50 <__sinit+0x2c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1f5      	bne.n	800bb30 <__sinit+0xc>
 800bb44:	f7ff ffc4 	bl	800bad0 <global_stdio_init.part.0>
 800bb48:	e7f2      	b.n	800bb30 <__sinit+0xc>
 800bb4a:	bf00      	nop
 800bb4c:	0800ba91 	.word	0x0800ba91
 800bb50:	20000db0 	.word	0x20000db0

0800bb54 <_fwalk_sglue>:
 800bb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb58:	4607      	mov	r7, r0
 800bb5a:	4688      	mov	r8, r1
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	2600      	movs	r6, #0
 800bb60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb64:	f1b9 0901 	subs.w	r9, r9, #1
 800bb68:	d505      	bpl.n	800bb76 <_fwalk_sglue+0x22>
 800bb6a:	6824      	ldr	r4, [r4, #0]
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	d1f7      	bne.n	800bb60 <_fwalk_sglue+0xc>
 800bb70:	4630      	mov	r0, r6
 800bb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb76:	89ab      	ldrh	r3, [r5, #12]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d907      	bls.n	800bb8c <_fwalk_sglue+0x38>
 800bb7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb80:	3301      	adds	r3, #1
 800bb82:	d003      	beq.n	800bb8c <_fwalk_sglue+0x38>
 800bb84:	4629      	mov	r1, r5
 800bb86:	4638      	mov	r0, r7
 800bb88:	47c0      	blx	r8
 800bb8a:	4306      	orrs	r6, r0
 800bb8c:	3568      	adds	r5, #104	@ 0x68
 800bb8e:	e7e9      	b.n	800bb64 <_fwalk_sglue+0x10>

0800bb90 <sniprintf>:
 800bb90:	b40c      	push	{r2, r3}
 800bb92:	b530      	push	{r4, r5, lr}
 800bb94:	4b18      	ldr	r3, [pc, #96]	@ (800bbf8 <sniprintf+0x68>)
 800bb96:	1e0c      	subs	r4, r1, #0
 800bb98:	681d      	ldr	r5, [r3, #0]
 800bb9a:	b09d      	sub	sp, #116	@ 0x74
 800bb9c:	da08      	bge.n	800bbb0 <sniprintf+0x20>
 800bb9e:	238b      	movs	r3, #139	@ 0x8b
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bba6:	b01d      	add	sp, #116	@ 0x74
 800bba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbac:	b002      	add	sp, #8
 800bbae:	4770      	bx	lr
 800bbb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bbb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bbb8:	f04f 0300 	mov.w	r3, #0
 800bbbc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bbbe:	bf14      	ite	ne
 800bbc0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bbc4:	4623      	moveq	r3, r4
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	9307      	str	r3, [sp, #28]
 800bbca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bbce:	9002      	str	r0, [sp, #8]
 800bbd0:	9006      	str	r0, [sp, #24]
 800bbd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bbd6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bbd8:	ab21      	add	r3, sp, #132	@ 0x84
 800bbda:	a902      	add	r1, sp, #8
 800bbdc:	4628      	mov	r0, r5
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	f002 fc28 	bl	800e434 <_svfiprintf_r>
 800bbe4:	1c43      	adds	r3, r0, #1
 800bbe6:	bfbc      	itt	lt
 800bbe8:	238b      	movlt	r3, #139	@ 0x8b
 800bbea:	602b      	strlt	r3, [r5, #0]
 800bbec:	2c00      	cmp	r4, #0
 800bbee:	d0da      	beq.n	800bba6 <sniprintf+0x16>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	e7d6      	b.n	800bba6 <sniprintf+0x16>
 800bbf8:	200003e4 	.word	0x200003e4

0800bbfc <siprintf>:
 800bbfc:	b40e      	push	{r1, r2, r3}
 800bbfe:	b510      	push	{r4, lr}
 800bc00:	b09d      	sub	sp, #116	@ 0x74
 800bc02:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bc04:	9002      	str	r0, [sp, #8]
 800bc06:	9006      	str	r0, [sp, #24]
 800bc08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc0c:	480a      	ldr	r0, [pc, #40]	@ (800bc38 <siprintf+0x3c>)
 800bc0e:	9107      	str	r1, [sp, #28]
 800bc10:	9104      	str	r1, [sp, #16]
 800bc12:	490a      	ldr	r1, [pc, #40]	@ (800bc3c <siprintf+0x40>)
 800bc14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc18:	9105      	str	r1, [sp, #20]
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	a902      	add	r1, sp, #8
 800bc1e:	6800      	ldr	r0, [r0, #0]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bc24:	f002 fc06 	bl	800e434 <_svfiprintf_r>
 800bc28:	9b02      	ldr	r3, [sp, #8]
 800bc2a:	701c      	strb	r4, [r3, #0]
 800bc2c:	b01d      	add	sp, #116	@ 0x74
 800bc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc32:	b003      	add	sp, #12
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	200003e4 	.word	0x200003e4
 800bc3c:	ffff0208 	.word	0xffff0208

0800bc40 <siscanf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b570      	push	{r4, r5, r6, lr}
 800bc44:	b09d      	sub	sp, #116	@ 0x74
 800bc46:	ac21      	add	r4, sp, #132	@ 0x84
 800bc48:	2500      	movs	r5, #0
 800bc4a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bc4e:	f854 6b04 	ldr.w	r6, [r4], #4
 800bc52:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bc56:	951b      	str	r5, [sp, #108]	@ 0x6c
 800bc58:	9002      	str	r0, [sp, #8]
 800bc5a:	9006      	str	r0, [sp, #24]
 800bc5c:	f7f4 fb38 	bl	80002d0 <strlen>
 800bc60:	4b0b      	ldr	r3, [pc, #44]	@ (800bc90 <siscanf+0x50>)
 800bc62:	9003      	str	r0, [sp, #12]
 800bc64:	9007      	str	r0, [sp, #28]
 800bc66:	480b      	ldr	r0, [pc, #44]	@ (800bc94 <siscanf+0x54>)
 800bc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bc6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc72:	4632      	mov	r2, r6
 800bc74:	4623      	mov	r3, r4
 800bc76:	a902      	add	r1, sp, #8
 800bc78:	6800      	ldr	r0, [r0, #0]
 800bc7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bc7c:	9514      	str	r5, [sp, #80]	@ 0x50
 800bc7e:	9401      	str	r4, [sp, #4]
 800bc80:	f002 fd2e 	bl	800e6e0 <__ssvfiscanf_r>
 800bc84:	b01d      	add	sp, #116	@ 0x74
 800bc86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc8a:	b003      	add	sp, #12
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	0800bcbb 	.word	0x0800bcbb
 800bc94:	200003e4 	.word	0x200003e4

0800bc98 <__sread>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca0:	f000 f880 	bl	800bda4 <_read_r>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	bfab      	itete	ge
 800bca8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcaa:	89a3      	ldrhlt	r3, [r4, #12]
 800bcac:	181b      	addge	r3, r3, r0
 800bcae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcb2:	bfac      	ite	ge
 800bcb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcb6:	81a3      	strhlt	r3, [r4, #12]
 800bcb8:	bd10      	pop	{r4, pc}

0800bcba <__seofread>:
 800bcba:	2000      	movs	r0, #0
 800bcbc:	4770      	bx	lr

0800bcbe <__swrite>:
 800bcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	461f      	mov	r7, r3
 800bcc4:	898b      	ldrh	r3, [r1, #12]
 800bcc6:	05db      	lsls	r3, r3, #23
 800bcc8:	4605      	mov	r5, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4616      	mov	r6, r2
 800bcce:	d505      	bpl.n	800bcdc <__swrite+0x1e>
 800bcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f000 f852 	bl	800bd80 <_lseek_r>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bce6:	81a3      	strh	r3, [r4, #12]
 800bce8:	4632      	mov	r2, r6
 800bcea:	463b      	mov	r3, r7
 800bcec:	4628      	mov	r0, r5
 800bcee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf2:	f000 b869 	b.w	800bdc8 <_write_r>

0800bcf6 <__sseek>:
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	460c      	mov	r4, r1
 800bcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfe:	f000 f83f 	bl	800bd80 <_lseek_r>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	bf15      	itete	ne
 800bd08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd12:	81a3      	strheq	r3, [r4, #12]
 800bd14:	bf18      	it	ne
 800bd16:	81a3      	strhne	r3, [r4, #12]
 800bd18:	bd10      	pop	{r4, pc}

0800bd1a <__sclose>:
 800bd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1e:	f000 b81f 	b.w	800bd60 <_close_r>

0800bd22 <memset>:
 800bd22:	4402      	add	r2, r0
 800bd24:	4603      	mov	r3, r0
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d100      	bne.n	800bd2c <memset+0xa>
 800bd2a:	4770      	bx	lr
 800bd2c:	f803 1b01 	strb.w	r1, [r3], #1
 800bd30:	e7f9      	b.n	800bd26 <memset+0x4>

0800bd32 <strncpy>:
 800bd32:	b510      	push	{r4, lr}
 800bd34:	3901      	subs	r1, #1
 800bd36:	4603      	mov	r3, r0
 800bd38:	b132      	cbz	r2, 800bd48 <strncpy+0x16>
 800bd3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bd3e:	f803 4b01 	strb.w	r4, [r3], #1
 800bd42:	3a01      	subs	r2, #1
 800bd44:	2c00      	cmp	r4, #0
 800bd46:	d1f7      	bne.n	800bd38 <strncpy+0x6>
 800bd48:	441a      	add	r2, r3
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d100      	bne.n	800bd52 <strncpy+0x20>
 800bd50:	bd10      	pop	{r4, pc}
 800bd52:	f803 1b01 	strb.w	r1, [r3], #1
 800bd56:	e7f9      	b.n	800bd4c <strncpy+0x1a>

0800bd58 <_localeconv_r>:
 800bd58:	4800      	ldr	r0, [pc, #0]	@ (800bd5c <_localeconv_r+0x4>)
 800bd5a:	4770      	bx	lr
 800bd5c:	20000524 	.word	0x20000524

0800bd60 <_close_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	@ (800bd7c <_close_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f5 ff58 	bl	8001c20 <_close>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_close_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_close_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20000db4 	.word	0x20000db4

0800bd80 <_lseek_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d07      	ldr	r5, [pc, #28]	@ (800bda0 <_lseek_r+0x20>)
 800bd84:	4604      	mov	r4, r0
 800bd86:	4608      	mov	r0, r1
 800bd88:	4611      	mov	r1, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	602a      	str	r2, [r5, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f7f5 ff6d 	bl	8001c6e <_lseek>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d102      	bne.n	800bd9e <_lseek_r+0x1e>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b103      	cbz	r3, 800bd9e <_lseek_r+0x1e>
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	20000db4 	.word	0x20000db4

0800bda4 <_read_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	@ (800bdc4 <_read_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f5 fefb 	bl	8001bae <_read>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_read_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_read_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000db4 	.word	0x20000db4

0800bdc8 <_write_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	@ (800bde8 <_write_r+0x20>)
 800bdcc:	4604      	mov	r4, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	602a      	str	r2, [r5, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f7f5 ff06 	bl	8001be8 <_write>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_write_r+0x1e>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_write_r+0x1e>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000db4 	.word	0x20000db4

0800bdec <__errno>:
 800bdec:	4b01      	ldr	r3, [pc, #4]	@ (800bdf4 <__errno+0x8>)
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	200003e4 	.word	0x200003e4

0800bdf8 <__libc_init_array>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	4d0d      	ldr	r5, [pc, #52]	@ (800be30 <__libc_init_array+0x38>)
 800bdfc:	4c0d      	ldr	r4, [pc, #52]	@ (800be34 <__libc_init_array+0x3c>)
 800bdfe:	1b64      	subs	r4, r4, r5
 800be00:	10a4      	asrs	r4, r4, #2
 800be02:	2600      	movs	r6, #0
 800be04:	42a6      	cmp	r6, r4
 800be06:	d109      	bne.n	800be1c <__libc_init_array+0x24>
 800be08:	4d0b      	ldr	r5, [pc, #44]	@ (800be38 <__libc_init_array+0x40>)
 800be0a:	4c0c      	ldr	r4, [pc, #48]	@ (800be3c <__libc_init_array+0x44>)
 800be0c:	f004 f8f6 	bl	800fffc <_init>
 800be10:	1b64      	subs	r4, r4, r5
 800be12:	10a4      	asrs	r4, r4, #2
 800be14:	2600      	movs	r6, #0
 800be16:	42a6      	cmp	r6, r4
 800be18:	d105      	bne.n	800be26 <__libc_init_array+0x2e>
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be20:	4798      	blx	r3
 800be22:	3601      	adds	r6, #1
 800be24:	e7ee      	b.n	800be04 <__libc_init_array+0xc>
 800be26:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2a:	4798      	blx	r3
 800be2c:	3601      	adds	r6, #1
 800be2e:	e7f2      	b.n	800be16 <__libc_init_array+0x1e>
 800be30:	080105ac 	.word	0x080105ac
 800be34:	080105ac 	.word	0x080105ac
 800be38:	080105ac 	.word	0x080105ac
 800be3c:	080105b0 	.word	0x080105b0

0800be40 <__retarget_lock_init_recursive>:
 800be40:	4770      	bx	lr

0800be42 <__retarget_lock_acquire_recursive>:
 800be42:	4770      	bx	lr

0800be44 <__retarget_lock_release_recursive>:
 800be44:	4770      	bx	lr

0800be46 <memcpy>:
 800be46:	440a      	add	r2, r1
 800be48:	4291      	cmp	r1, r2
 800be4a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800be4e:	d100      	bne.n	800be52 <memcpy+0xc>
 800be50:	4770      	bx	lr
 800be52:	b510      	push	{r4, lr}
 800be54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5c:	4291      	cmp	r1, r2
 800be5e:	d1f9      	bne.n	800be54 <memcpy+0xe>
 800be60:	bd10      	pop	{r4, pc}
	...

0800be64 <nanf>:
 800be64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800be6c <nanf+0x8>
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	7fc00000 	.word	0x7fc00000

0800be70 <quorem>:
 800be70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	6903      	ldr	r3, [r0, #16]
 800be76:	690c      	ldr	r4, [r1, #16]
 800be78:	42a3      	cmp	r3, r4
 800be7a:	4607      	mov	r7, r0
 800be7c:	db7e      	blt.n	800bf7c <quorem+0x10c>
 800be7e:	3c01      	subs	r4, #1
 800be80:	f101 0814 	add.w	r8, r1, #20
 800be84:	00a3      	lsls	r3, r4, #2
 800be86:	f100 0514 	add.w	r5, r0, #20
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be9a:	3301      	adds	r3, #1
 800be9c:	429a      	cmp	r2, r3
 800be9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bea2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bea6:	d32e      	bcc.n	800bf06 <quorem+0x96>
 800bea8:	f04f 0a00 	mov.w	sl, #0
 800beac:	46c4      	mov	ip, r8
 800beae:	46ae      	mov	lr, r5
 800beb0:	46d3      	mov	fp, sl
 800beb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800beb6:	b298      	uxth	r0, r3
 800beb8:	fb06 a000 	mla	r0, r6, r0, sl
 800bebc:	0c02      	lsrs	r2, r0, #16
 800bebe:	0c1b      	lsrs	r3, r3, #16
 800bec0:	fb06 2303 	mla	r3, r6, r3, r2
 800bec4:	f8de 2000 	ldr.w	r2, [lr]
 800bec8:	b280      	uxth	r0, r0
 800beca:	b292      	uxth	r2, r2
 800becc:	1a12      	subs	r2, r2, r0
 800bece:	445a      	add	r2, fp
 800bed0:	f8de 0000 	ldr.w	r0, [lr]
 800bed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bed8:	b29b      	uxth	r3, r3
 800beda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bede:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bee2:	b292      	uxth	r2, r2
 800bee4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bee8:	45e1      	cmp	r9, ip
 800beea:	f84e 2b04 	str.w	r2, [lr], #4
 800beee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bef2:	d2de      	bcs.n	800beb2 <quorem+0x42>
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	58eb      	ldr	r3, [r5, r3]
 800bef8:	b92b      	cbnz	r3, 800bf06 <quorem+0x96>
 800befa:	9b01      	ldr	r3, [sp, #4]
 800befc:	3b04      	subs	r3, #4
 800befe:	429d      	cmp	r5, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	d32f      	bcc.n	800bf64 <quorem+0xf4>
 800bf04:	613c      	str	r4, [r7, #16]
 800bf06:	4638      	mov	r0, r7
 800bf08:	f001 f9c6 	bl	800d298 <__mcmp>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	db25      	blt.n	800bf5c <quorem+0xec>
 800bf10:	4629      	mov	r1, r5
 800bf12:	2000      	movs	r0, #0
 800bf14:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf18:	f8d1 c000 	ldr.w	ip, [r1]
 800bf1c:	fa1f fe82 	uxth.w	lr, r2
 800bf20:	fa1f f38c 	uxth.w	r3, ip
 800bf24:	eba3 030e 	sub.w	r3, r3, lr
 800bf28:	4403      	add	r3, r0
 800bf2a:	0c12      	lsrs	r2, r2, #16
 800bf2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf3a:	45c1      	cmp	r9, r8
 800bf3c:	f841 3b04 	str.w	r3, [r1], #4
 800bf40:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf44:	d2e6      	bcs.n	800bf14 <quorem+0xa4>
 800bf46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf4e:	b922      	cbnz	r2, 800bf5a <quorem+0xea>
 800bf50:	3b04      	subs	r3, #4
 800bf52:	429d      	cmp	r5, r3
 800bf54:	461a      	mov	r2, r3
 800bf56:	d30b      	bcc.n	800bf70 <quorem+0x100>
 800bf58:	613c      	str	r4, [r7, #16]
 800bf5a:	3601      	adds	r6, #1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	b003      	add	sp, #12
 800bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf64:	6812      	ldr	r2, [r2, #0]
 800bf66:	3b04      	subs	r3, #4
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	d1cb      	bne.n	800bf04 <quorem+0x94>
 800bf6c:	3c01      	subs	r4, #1
 800bf6e:	e7c6      	b.n	800befe <quorem+0x8e>
 800bf70:	6812      	ldr	r2, [r2, #0]
 800bf72:	3b04      	subs	r3, #4
 800bf74:	2a00      	cmp	r2, #0
 800bf76:	d1ef      	bne.n	800bf58 <quorem+0xe8>
 800bf78:	3c01      	subs	r4, #1
 800bf7a:	e7ea      	b.n	800bf52 <quorem+0xe2>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	e7ee      	b.n	800bf5e <quorem+0xee>

0800bf80 <_dtoa_r>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	69c7      	ldr	r7, [r0, #28]
 800bf86:	b097      	sub	sp, #92	@ 0x5c
 800bf88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bf8c:	ec55 4b10 	vmov	r4, r5, d0
 800bf90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bf92:	9107      	str	r1, [sp, #28]
 800bf94:	4681      	mov	r9, r0
 800bf96:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf98:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf9a:	b97f      	cbnz	r7, 800bfbc <_dtoa_r+0x3c>
 800bf9c:	2010      	movs	r0, #16
 800bf9e:	f000 fe09 	bl	800cbb4 <malloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bfa8:	b920      	cbnz	r0, 800bfb4 <_dtoa_r+0x34>
 800bfaa:	4ba9      	ldr	r3, [pc, #676]	@ (800c250 <_dtoa_r+0x2d0>)
 800bfac:	21ef      	movs	r1, #239	@ 0xef
 800bfae:	48a9      	ldr	r0, [pc, #676]	@ (800c254 <_dtoa_r+0x2d4>)
 800bfb0:	f002 ffbe 	bl	800ef30 <__assert_func>
 800bfb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfb8:	6007      	str	r7, [r0, #0]
 800bfba:	60c7      	str	r7, [r0, #12]
 800bfbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	b159      	cbz	r1, 800bfdc <_dtoa_r+0x5c>
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	604a      	str	r2, [r1, #4]
 800bfc8:	2301      	movs	r3, #1
 800bfca:	4093      	lsls	r3, r2
 800bfcc:	608b      	str	r3, [r1, #8]
 800bfce:	4648      	mov	r0, r9
 800bfd0:	f000 fee6 	bl	800cda0 <_Bfree>
 800bfd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	1e2b      	subs	r3, r5, #0
 800bfde:	bfb9      	ittee	lt
 800bfe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfe4:	9305      	strlt	r3, [sp, #20]
 800bfe6:	2300      	movge	r3, #0
 800bfe8:	6033      	strge	r3, [r6, #0]
 800bfea:	9f05      	ldr	r7, [sp, #20]
 800bfec:	4b9a      	ldr	r3, [pc, #616]	@ (800c258 <_dtoa_r+0x2d8>)
 800bfee:	bfbc      	itt	lt
 800bff0:	2201      	movlt	r2, #1
 800bff2:	6032      	strlt	r2, [r6, #0]
 800bff4:	43bb      	bics	r3, r7
 800bff6:	d112      	bne.n	800c01e <_dtoa_r+0x9e>
 800bff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bffa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c004:	4323      	orrs	r3, r4
 800c006:	f000 855a 	beq.w	800cabe <_dtoa_r+0xb3e>
 800c00a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c00c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c26c <_dtoa_r+0x2ec>
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 855c 	beq.w	800cace <_dtoa_r+0xb4e>
 800c016:	f10a 0303 	add.w	r3, sl, #3
 800c01a:	f000 bd56 	b.w	800caca <_dtoa_r+0xb4a>
 800c01e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c022:	2200      	movs	r2, #0
 800c024:	ec51 0b17 	vmov	r0, r1, d7
 800c028:	2300      	movs	r3, #0
 800c02a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c02e:	f7f4 fd7b 	bl	8000b28 <__aeabi_dcmpeq>
 800c032:	4680      	mov	r8, r0
 800c034:	b158      	cbz	r0, 800c04e <_dtoa_r+0xce>
 800c036:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c038:	2301      	movs	r3, #1
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c03e:	b113      	cbz	r3, 800c046 <_dtoa_r+0xc6>
 800c040:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c042:	4b86      	ldr	r3, [pc, #536]	@ (800c25c <_dtoa_r+0x2dc>)
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c270 <_dtoa_r+0x2f0>
 800c04a:	f000 bd40 	b.w	800cace <_dtoa_r+0xb4e>
 800c04e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c052:	aa14      	add	r2, sp, #80	@ 0x50
 800c054:	a915      	add	r1, sp, #84	@ 0x54
 800c056:	4648      	mov	r0, r9
 800c058:	f001 fa3e 	bl	800d4d8 <__d2b>
 800c05c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c060:	9002      	str	r0, [sp, #8]
 800c062:	2e00      	cmp	r6, #0
 800c064:	d078      	beq.n	800c158 <_dtoa_r+0x1d8>
 800c066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c068:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c07c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c080:	4619      	mov	r1, r3
 800c082:	2200      	movs	r2, #0
 800c084:	4b76      	ldr	r3, [pc, #472]	@ (800c260 <_dtoa_r+0x2e0>)
 800c086:	f7f4 f92f 	bl	80002e8 <__aeabi_dsub>
 800c08a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c238 <_dtoa_r+0x2b8>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 fae2 	bl	8000658 <__aeabi_dmul>
 800c094:	a36a      	add	r3, pc, #424	@ (adr r3, 800c240 <_dtoa_r+0x2c0>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 f927 	bl	80002ec <__adddf3>
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	f7f4 fa6e 	bl	8000584 <__aeabi_i2d>
 800c0a8:	a367      	add	r3, pc, #412	@ (adr r3, 800c248 <_dtoa_r+0x2c8>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 fad3 	bl	8000658 <__aeabi_dmul>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 f917 	bl	80002ec <__adddf3>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	f7f4 fd79 	bl	8000bb8 <__aeabi_d2iz>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	f7f4 fd34 	bl	8000b3c <__aeabi_dcmplt>
 800c0d4:	b140      	cbz	r0, 800c0e8 <_dtoa_r+0x168>
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	f7f4 fa54 	bl	8000584 <__aeabi_i2d>
 800c0dc:	4622      	mov	r2, r4
 800c0de:	462b      	mov	r3, r5
 800c0e0:	f7f4 fd22 	bl	8000b28 <__aeabi_dcmpeq>
 800c0e4:	b900      	cbnz	r0, 800c0e8 <_dtoa_r+0x168>
 800c0e6:	3f01      	subs	r7, #1
 800c0e8:	2f16      	cmp	r7, #22
 800c0ea:	d852      	bhi.n	800c192 <_dtoa_r+0x212>
 800c0ec:	4b5d      	ldr	r3, [pc, #372]	@ (800c264 <_dtoa_r+0x2e4>)
 800c0ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c0fa:	f7f4 fd1f 	bl	8000b3c <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d049      	beq.n	800c196 <_dtoa_r+0x216>
 800c102:	3f01      	subs	r7, #1
 800c104:	2300      	movs	r3, #0
 800c106:	9310      	str	r3, [sp, #64]	@ 0x40
 800c108:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c10a:	1b9b      	subs	r3, r3, r6
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	bf45      	ittet	mi
 800c110:	f1c3 0301 	rsbmi	r3, r3, #1
 800c114:	9300      	strmi	r3, [sp, #0]
 800c116:	2300      	movpl	r3, #0
 800c118:	2300      	movmi	r3, #0
 800c11a:	9206      	str	r2, [sp, #24]
 800c11c:	bf54      	ite	pl
 800c11e:	9300      	strpl	r3, [sp, #0]
 800c120:	9306      	strmi	r3, [sp, #24]
 800c122:	2f00      	cmp	r7, #0
 800c124:	db39      	blt.n	800c19a <_dtoa_r+0x21a>
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	970d      	str	r7, [sp, #52]	@ 0x34
 800c12a:	443b      	add	r3, r7
 800c12c:	9306      	str	r3, [sp, #24]
 800c12e:	2300      	movs	r3, #0
 800c130:	9308      	str	r3, [sp, #32]
 800c132:	9b07      	ldr	r3, [sp, #28]
 800c134:	2b09      	cmp	r3, #9
 800c136:	d863      	bhi.n	800c200 <_dtoa_r+0x280>
 800c138:	2b05      	cmp	r3, #5
 800c13a:	bfc4      	itt	gt
 800c13c:	3b04      	subgt	r3, #4
 800c13e:	9307      	strgt	r3, [sp, #28]
 800c140:	9b07      	ldr	r3, [sp, #28]
 800c142:	f1a3 0302 	sub.w	r3, r3, #2
 800c146:	bfcc      	ite	gt
 800c148:	2400      	movgt	r4, #0
 800c14a:	2401      	movle	r4, #1
 800c14c:	2b03      	cmp	r3, #3
 800c14e:	d863      	bhi.n	800c218 <_dtoa_r+0x298>
 800c150:	e8df f003 	tbb	[pc, r3]
 800c154:	2b375452 	.word	0x2b375452
 800c158:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c15c:	441e      	add	r6, r3
 800c15e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c162:	2b20      	cmp	r3, #32
 800c164:	bfc1      	itttt	gt
 800c166:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c16a:	409f      	lslgt	r7, r3
 800c16c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c170:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c174:	bfd6      	itet	le
 800c176:	f1c3 0320 	rsble	r3, r3, #32
 800c17a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c17e:	fa04 f003 	lslle.w	r0, r4, r3
 800c182:	f7f4 f9ef 	bl	8000564 <__aeabi_ui2d>
 800c186:	2201      	movs	r2, #1
 800c188:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c18c:	3e01      	subs	r6, #1
 800c18e:	9212      	str	r2, [sp, #72]	@ 0x48
 800c190:	e776      	b.n	800c080 <_dtoa_r+0x100>
 800c192:	2301      	movs	r3, #1
 800c194:	e7b7      	b.n	800c106 <_dtoa_r+0x186>
 800c196:	9010      	str	r0, [sp, #64]	@ 0x40
 800c198:	e7b6      	b.n	800c108 <_dtoa_r+0x188>
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	1bdb      	subs	r3, r3, r7
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	427b      	negs	r3, r7
 800c1a2:	9308      	str	r3, [sp, #32]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c1a8:	e7c3      	b.n	800c132 <_dtoa_r+0x1b2>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1b0:	eb07 0b03 	add.w	fp, r7, r3
 800c1b4:	f10b 0301 	add.w	r3, fp, #1
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	9303      	str	r3, [sp, #12]
 800c1bc:	bfb8      	it	lt
 800c1be:	2301      	movlt	r3, #1
 800c1c0:	e006      	b.n	800c1d0 <_dtoa_r+0x250>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	dd28      	ble.n	800c21e <_dtoa_r+0x29e>
 800c1cc:	469b      	mov	fp, r3
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	f102 0514 	add.w	r5, r2, #20
 800c1dc:	429d      	cmp	r5, r3
 800c1de:	d926      	bls.n	800c22e <_dtoa_r+0x2ae>
 800c1e0:	6041      	str	r1, [r0, #4]
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f000 fd9c 	bl	800cd20 <_Balloc>
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d142      	bne.n	800c274 <_dtoa_r+0x2f4>
 800c1ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c268 <_dtoa_r+0x2e8>)
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1f6:	e6da      	b.n	800bfae <_dtoa_r+0x2e>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e7e3      	b.n	800c1c4 <_dtoa_r+0x244>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e7d5      	b.n	800c1ac <_dtoa_r+0x22c>
 800c200:	2401      	movs	r4, #1
 800c202:	2300      	movs	r3, #0
 800c204:	9307      	str	r3, [sp, #28]
 800c206:	9409      	str	r4, [sp, #36]	@ 0x24
 800c208:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c212:	2312      	movs	r3, #18
 800c214:	920c      	str	r2, [sp, #48]	@ 0x30
 800c216:	e7db      	b.n	800c1d0 <_dtoa_r+0x250>
 800c218:	2301      	movs	r3, #1
 800c21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21c:	e7f4      	b.n	800c208 <_dtoa_r+0x288>
 800c21e:	f04f 0b01 	mov.w	fp, #1
 800c222:	f8cd b00c 	str.w	fp, [sp, #12]
 800c226:	465b      	mov	r3, fp
 800c228:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c22c:	e7d0      	b.n	800c1d0 <_dtoa_r+0x250>
 800c22e:	3101      	adds	r1, #1
 800c230:	0052      	lsls	r2, r2, #1
 800c232:	e7d1      	b.n	800c1d8 <_dtoa_r+0x258>
 800c234:	f3af 8000 	nop.w
 800c238:	636f4361 	.word	0x636f4361
 800c23c:	3fd287a7 	.word	0x3fd287a7
 800c240:	8b60c8b3 	.word	0x8b60c8b3
 800c244:	3fc68a28 	.word	0x3fc68a28
 800c248:	509f79fb 	.word	0x509f79fb
 800c24c:	3fd34413 	.word	0x3fd34413
 800c250:	0801016c 	.word	0x0801016c
 800c254:	08010183 	.word	0x08010183
 800c258:	7ff00000 	.word	0x7ff00000
 800c25c:	0801026f 	.word	0x0801026f
 800c260:	3ff80000 	.word	0x3ff80000
 800c264:	08010350 	.word	0x08010350
 800c268:	080101db 	.word	0x080101db
 800c26c:	08010168 	.word	0x08010168
 800c270:	0801026e 	.word	0x0801026e
 800c274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c278:	6018      	str	r0, [r3, #0]
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	2b0e      	cmp	r3, #14
 800c27e:	f200 80a1 	bhi.w	800c3c4 <_dtoa_r+0x444>
 800c282:	2c00      	cmp	r4, #0
 800c284:	f000 809e 	beq.w	800c3c4 <_dtoa_r+0x444>
 800c288:	2f00      	cmp	r7, #0
 800c28a:	dd33      	ble.n	800c2f4 <_dtoa_r+0x374>
 800c28c:	4b9c      	ldr	r3, [pc, #624]	@ (800c500 <_dtoa_r+0x580>)
 800c28e:	f007 020f 	and.w	r2, r7, #15
 800c292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c296:	ed93 7b00 	vldr	d7, [r3]
 800c29a:	05f8      	lsls	r0, r7, #23
 800c29c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c2a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c2a4:	d516      	bpl.n	800c2d4 <_dtoa_r+0x354>
 800c2a6:	4b97      	ldr	r3, [pc, #604]	@ (800c504 <_dtoa_r+0x584>)
 800c2a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2b0:	f7f4 fafc 	bl	80008ac <__aeabi_ddiv>
 800c2b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2b8:	f004 040f 	and.w	r4, r4, #15
 800c2bc:	2603      	movs	r6, #3
 800c2be:	4d91      	ldr	r5, [pc, #580]	@ (800c504 <_dtoa_r+0x584>)
 800c2c0:	b954      	cbnz	r4, 800c2d8 <_dtoa_r+0x358>
 800c2c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ca:	f7f4 faef 	bl	80008ac <__aeabi_ddiv>
 800c2ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2d2:	e028      	b.n	800c326 <_dtoa_r+0x3a6>
 800c2d4:	2602      	movs	r6, #2
 800c2d6:	e7f2      	b.n	800c2be <_dtoa_r+0x33e>
 800c2d8:	07e1      	lsls	r1, r4, #31
 800c2da:	d508      	bpl.n	800c2ee <_dtoa_r+0x36e>
 800c2dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c2e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2e4:	f7f4 f9b8 	bl	8000658 <__aeabi_dmul>
 800c2e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	1064      	asrs	r4, r4, #1
 800c2f0:	3508      	adds	r5, #8
 800c2f2:	e7e5      	b.n	800c2c0 <_dtoa_r+0x340>
 800c2f4:	f000 80af 	beq.w	800c456 <_dtoa_r+0x4d6>
 800c2f8:	427c      	negs	r4, r7
 800c2fa:	4b81      	ldr	r3, [pc, #516]	@ (800c500 <_dtoa_r+0x580>)
 800c2fc:	4d81      	ldr	r5, [pc, #516]	@ (800c504 <_dtoa_r+0x584>)
 800c2fe:	f004 020f 	and.w	r2, r4, #15
 800c302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c30e:	f7f4 f9a3 	bl	8000658 <__aeabi_dmul>
 800c312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c316:	1124      	asrs	r4, r4, #4
 800c318:	2300      	movs	r3, #0
 800c31a:	2602      	movs	r6, #2
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	f040 808f 	bne.w	800c440 <_dtoa_r+0x4c0>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1d3      	bne.n	800c2ce <_dtoa_r+0x34e>
 800c326:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c328:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 8094 	beq.w	800c45a <_dtoa_r+0x4da>
 800c332:	4b75      	ldr	r3, [pc, #468]	@ (800c508 <_dtoa_r+0x588>)
 800c334:	2200      	movs	r2, #0
 800c336:	4620      	mov	r0, r4
 800c338:	4629      	mov	r1, r5
 800c33a:	f7f4 fbff 	bl	8000b3c <__aeabi_dcmplt>
 800c33e:	2800      	cmp	r0, #0
 800c340:	f000 808b 	beq.w	800c45a <_dtoa_r+0x4da>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 8087 	beq.w	800c45a <_dtoa_r+0x4da>
 800c34c:	f1bb 0f00 	cmp.w	fp, #0
 800c350:	dd34      	ble.n	800c3bc <_dtoa_r+0x43c>
 800c352:	4620      	mov	r0, r4
 800c354:	4b6d      	ldr	r3, [pc, #436]	@ (800c50c <_dtoa_r+0x58c>)
 800c356:	2200      	movs	r2, #0
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f4 f97d 	bl	8000658 <__aeabi_dmul>
 800c35e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c362:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c366:	3601      	adds	r6, #1
 800c368:	465c      	mov	r4, fp
 800c36a:	4630      	mov	r0, r6
 800c36c:	f7f4 f90a 	bl	8000584 <__aeabi_i2d>
 800c370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c374:	f7f4 f970 	bl	8000658 <__aeabi_dmul>
 800c378:	4b65      	ldr	r3, [pc, #404]	@ (800c510 <_dtoa_r+0x590>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	f7f3 ffb6 	bl	80002ec <__adddf3>
 800c380:	4605      	mov	r5, r0
 800c382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c386:	2c00      	cmp	r4, #0
 800c388:	d16a      	bne.n	800c460 <_dtoa_r+0x4e0>
 800c38a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c38e:	4b61      	ldr	r3, [pc, #388]	@ (800c514 <_dtoa_r+0x594>)
 800c390:	2200      	movs	r2, #0
 800c392:	f7f3 ffa9 	bl	80002e8 <__aeabi_dsub>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c39e:	462a      	mov	r2, r5
 800c3a0:	4633      	mov	r3, r6
 800c3a2:	f7f4 fbe9 	bl	8000b78 <__aeabi_dcmpgt>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f040 8298 	bne.w	800c8dc <_dtoa_r+0x95c>
 800c3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3b0:	462a      	mov	r2, r5
 800c3b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3b6:	f7f4 fbc1 	bl	8000b3c <__aeabi_dcmplt>
 800c3ba:	bb38      	cbnz	r0, 800c40c <_dtoa_r+0x48c>
 800c3bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c3c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c3c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f2c0 8157 	blt.w	800c67a <_dtoa_r+0x6fa>
 800c3cc:	2f0e      	cmp	r7, #14
 800c3ce:	f300 8154 	bgt.w	800c67a <_dtoa_r+0x6fa>
 800c3d2:	4b4b      	ldr	r3, [pc, #300]	@ (800c500 <_dtoa_r+0x580>)
 800c3d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3d8:	ed93 7b00 	vldr	d7, [r3]
 800c3dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	ed8d 7b00 	vstr	d7, [sp]
 800c3e4:	f280 80e5 	bge.w	800c5b2 <_dtoa_r+0x632>
 800c3e8:	9b03      	ldr	r3, [sp, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f300 80e1 	bgt.w	800c5b2 <_dtoa_r+0x632>
 800c3f0:	d10c      	bne.n	800c40c <_dtoa_r+0x48c>
 800c3f2:	4b48      	ldr	r3, [pc, #288]	@ (800c514 <_dtoa_r+0x594>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	ec51 0b17 	vmov	r0, r1, d7
 800c3fa:	f7f4 f92d 	bl	8000658 <__aeabi_dmul>
 800c3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c402:	f7f4 fbaf 	bl	8000b64 <__aeabi_dcmpge>
 800c406:	2800      	cmp	r0, #0
 800c408:	f000 8266 	beq.w	800c8d8 <_dtoa_r+0x958>
 800c40c:	2400      	movs	r4, #0
 800c40e:	4625      	mov	r5, r4
 800c410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c412:	4656      	mov	r6, sl
 800c414:	ea6f 0803 	mvn.w	r8, r3
 800c418:	2700      	movs	r7, #0
 800c41a:	4621      	mov	r1, r4
 800c41c:	4648      	mov	r0, r9
 800c41e:	f000 fcbf 	bl	800cda0 <_Bfree>
 800c422:	2d00      	cmp	r5, #0
 800c424:	f000 80bd 	beq.w	800c5a2 <_dtoa_r+0x622>
 800c428:	b12f      	cbz	r7, 800c436 <_dtoa_r+0x4b6>
 800c42a:	42af      	cmp	r7, r5
 800c42c:	d003      	beq.n	800c436 <_dtoa_r+0x4b6>
 800c42e:	4639      	mov	r1, r7
 800c430:	4648      	mov	r0, r9
 800c432:	f000 fcb5 	bl	800cda0 <_Bfree>
 800c436:	4629      	mov	r1, r5
 800c438:	4648      	mov	r0, r9
 800c43a:	f000 fcb1 	bl	800cda0 <_Bfree>
 800c43e:	e0b0      	b.n	800c5a2 <_dtoa_r+0x622>
 800c440:	07e2      	lsls	r2, r4, #31
 800c442:	d505      	bpl.n	800c450 <_dtoa_r+0x4d0>
 800c444:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c448:	f7f4 f906 	bl	8000658 <__aeabi_dmul>
 800c44c:	3601      	adds	r6, #1
 800c44e:	2301      	movs	r3, #1
 800c450:	1064      	asrs	r4, r4, #1
 800c452:	3508      	adds	r5, #8
 800c454:	e762      	b.n	800c31c <_dtoa_r+0x39c>
 800c456:	2602      	movs	r6, #2
 800c458:	e765      	b.n	800c326 <_dtoa_r+0x3a6>
 800c45a:	9c03      	ldr	r4, [sp, #12]
 800c45c:	46b8      	mov	r8, r7
 800c45e:	e784      	b.n	800c36a <_dtoa_r+0x3ea>
 800c460:	4b27      	ldr	r3, [pc, #156]	@ (800c500 <_dtoa_r+0x580>)
 800c462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c464:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c468:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c46c:	4454      	add	r4, sl
 800c46e:	2900      	cmp	r1, #0
 800c470:	d054      	beq.n	800c51c <_dtoa_r+0x59c>
 800c472:	4929      	ldr	r1, [pc, #164]	@ (800c518 <_dtoa_r+0x598>)
 800c474:	2000      	movs	r0, #0
 800c476:	f7f4 fa19 	bl	80008ac <__aeabi_ddiv>
 800c47a:	4633      	mov	r3, r6
 800c47c:	462a      	mov	r2, r5
 800c47e:	f7f3 ff33 	bl	80002e8 <__aeabi_dsub>
 800c482:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c486:	4656      	mov	r6, sl
 800c488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48c:	f7f4 fb94 	bl	8000bb8 <__aeabi_d2iz>
 800c490:	4605      	mov	r5, r0
 800c492:	f7f4 f877 	bl	8000584 <__aeabi_i2d>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c49e:	f7f3 ff23 	bl	80002e8 <__aeabi_dsub>
 800c4a2:	3530      	adds	r5, #48	@ 0x30
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4ac:	f806 5b01 	strb.w	r5, [r6], #1
 800c4b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4b4:	f7f4 fb42 	bl	8000b3c <__aeabi_dcmplt>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d172      	bne.n	800c5a2 <_dtoa_r+0x622>
 800c4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c0:	4911      	ldr	r1, [pc, #68]	@ (800c508 <_dtoa_r+0x588>)
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	f7f3 ff10 	bl	80002e8 <__aeabi_dsub>
 800c4c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4cc:	f7f4 fb36 	bl	8000b3c <__aeabi_dcmplt>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	f040 80b4 	bne.w	800c63e <_dtoa_r+0x6be>
 800c4d6:	42a6      	cmp	r6, r4
 800c4d8:	f43f af70 	beq.w	800c3bc <_dtoa_r+0x43c>
 800c4dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c50c <_dtoa_r+0x58c>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f7f4 f8b8 	bl	8000658 <__aeabi_dmul>
 800c4e8:	4b08      	ldr	r3, [pc, #32]	@ (800c50c <_dtoa_r+0x58c>)
 800c4ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4f4:	f7f4 f8b0 	bl	8000658 <__aeabi_dmul>
 800c4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4fc:	e7c4      	b.n	800c488 <_dtoa_r+0x508>
 800c4fe:	bf00      	nop
 800c500:	08010350 	.word	0x08010350
 800c504:	08010328 	.word	0x08010328
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	40240000 	.word	0x40240000
 800c510:	401c0000 	.word	0x401c0000
 800c514:	40140000 	.word	0x40140000
 800c518:	3fe00000 	.word	0x3fe00000
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	f7f4 f89a 	bl	8000658 <__aeabi_dmul>
 800c524:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c528:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c52a:	4656      	mov	r6, sl
 800c52c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c530:	f7f4 fb42 	bl	8000bb8 <__aeabi_d2iz>
 800c534:	4605      	mov	r5, r0
 800c536:	f7f4 f825 	bl	8000584 <__aeabi_i2d>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c542:	f7f3 fed1 	bl	80002e8 <__aeabi_dsub>
 800c546:	3530      	adds	r5, #48	@ 0x30
 800c548:	f806 5b01 	strb.w	r5, [r6], #1
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	42a6      	cmp	r6, r4
 800c552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	d124      	bne.n	800c5a6 <_dtoa_r+0x626>
 800c55c:	4baf      	ldr	r3, [pc, #700]	@ (800c81c <_dtoa_r+0x89c>)
 800c55e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c562:	f7f3 fec3 	bl	80002ec <__adddf3>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c56e:	f7f4 fb03 	bl	8000b78 <__aeabi_dcmpgt>
 800c572:	2800      	cmp	r0, #0
 800c574:	d163      	bne.n	800c63e <_dtoa_r+0x6be>
 800c576:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c57a:	49a8      	ldr	r1, [pc, #672]	@ (800c81c <_dtoa_r+0x89c>)
 800c57c:	2000      	movs	r0, #0
 800c57e:	f7f3 feb3 	bl	80002e8 <__aeabi_dsub>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c58a:	f7f4 fad7 	bl	8000b3c <__aeabi_dcmplt>
 800c58e:	2800      	cmp	r0, #0
 800c590:	f43f af14 	beq.w	800c3bc <_dtoa_r+0x43c>
 800c594:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c596:	1e73      	subs	r3, r6, #1
 800c598:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c59a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c59e:	2b30      	cmp	r3, #48	@ 0x30
 800c5a0:	d0f8      	beq.n	800c594 <_dtoa_r+0x614>
 800c5a2:	4647      	mov	r7, r8
 800c5a4:	e03b      	b.n	800c61e <_dtoa_r+0x69e>
 800c5a6:	4b9e      	ldr	r3, [pc, #632]	@ (800c820 <_dtoa_r+0x8a0>)
 800c5a8:	f7f4 f856 	bl	8000658 <__aeabi_dmul>
 800c5ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5b0:	e7bc      	b.n	800c52c <_dtoa_r+0x5ac>
 800c5b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c5b6:	4656      	mov	r6, sl
 800c5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f4 f974 	bl	80008ac <__aeabi_ddiv>
 800c5c4:	f7f4 faf8 	bl	8000bb8 <__aeabi_d2iz>
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	f7f3 ffdb 	bl	8000584 <__aeabi_i2d>
 800c5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d2:	f7f4 f841 	bl	8000658 <__aeabi_dmul>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5e2:	f7f3 fe81 	bl	80002e8 <__aeabi_dsub>
 800c5e6:	f806 4b01 	strb.w	r4, [r6], #1
 800c5ea:	9d03      	ldr	r5, [sp, #12]
 800c5ec:	eba6 040a 	sub.w	r4, r6, sl
 800c5f0:	42a5      	cmp	r5, r4
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	d133      	bne.n	800c660 <_dtoa_r+0x6e0>
 800c5f8:	f7f3 fe78 	bl	80002ec <__adddf3>
 800c5fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c600:	4604      	mov	r4, r0
 800c602:	460d      	mov	r5, r1
 800c604:	f7f4 fab8 	bl	8000b78 <__aeabi_dcmpgt>
 800c608:	b9c0      	cbnz	r0, 800c63c <_dtoa_r+0x6bc>
 800c60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f4 fa89 	bl	8000b28 <__aeabi_dcmpeq>
 800c616:	b110      	cbz	r0, 800c61e <_dtoa_r+0x69e>
 800c618:	f018 0f01 	tst.w	r8, #1
 800c61c:	d10e      	bne.n	800c63c <_dtoa_r+0x6bc>
 800c61e:	9902      	ldr	r1, [sp, #8]
 800c620:	4648      	mov	r0, r9
 800c622:	f000 fbbd 	bl	800cda0 <_Bfree>
 800c626:	2300      	movs	r3, #0
 800c628:	7033      	strb	r3, [r6, #0]
 800c62a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c62c:	3701      	adds	r7, #1
 800c62e:	601f      	str	r7, [r3, #0]
 800c630:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 824b 	beq.w	800cace <_dtoa_r+0xb4e>
 800c638:	601e      	str	r6, [r3, #0]
 800c63a:	e248      	b.n	800cace <_dtoa_r+0xb4e>
 800c63c:	46b8      	mov	r8, r7
 800c63e:	4633      	mov	r3, r6
 800c640:	461e      	mov	r6, r3
 800c642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c646:	2a39      	cmp	r2, #57	@ 0x39
 800c648:	d106      	bne.n	800c658 <_dtoa_r+0x6d8>
 800c64a:	459a      	cmp	sl, r3
 800c64c:	d1f8      	bne.n	800c640 <_dtoa_r+0x6c0>
 800c64e:	2230      	movs	r2, #48	@ 0x30
 800c650:	f108 0801 	add.w	r8, r8, #1
 800c654:	f88a 2000 	strb.w	r2, [sl]
 800c658:	781a      	ldrb	r2, [r3, #0]
 800c65a:	3201      	adds	r2, #1
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	e7a0      	b.n	800c5a2 <_dtoa_r+0x622>
 800c660:	4b6f      	ldr	r3, [pc, #444]	@ (800c820 <_dtoa_r+0x8a0>)
 800c662:	2200      	movs	r2, #0
 800c664:	f7f3 fff8 	bl	8000658 <__aeabi_dmul>
 800c668:	2200      	movs	r2, #0
 800c66a:	2300      	movs	r3, #0
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	f7f4 fa5a 	bl	8000b28 <__aeabi_dcmpeq>
 800c674:	2800      	cmp	r0, #0
 800c676:	d09f      	beq.n	800c5b8 <_dtoa_r+0x638>
 800c678:	e7d1      	b.n	800c61e <_dtoa_r+0x69e>
 800c67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	f000 80ea 	beq.w	800c856 <_dtoa_r+0x8d6>
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	2a01      	cmp	r2, #1
 800c686:	f300 80cd 	bgt.w	800c824 <_dtoa_r+0x8a4>
 800c68a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c68c:	2a00      	cmp	r2, #0
 800c68e:	f000 80c1 	beq.w	800c814 <_dtoa_r+0x894>
 800c692:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c696:	9c08      	ldr	r4, [sp, #32]
 800c698:	9e00      	ldr	r6, [sp, #0]
 800c69a:	9a00      	ldr	r2, [sp, #0]
 800c69c:	441a      	add	r2, r3
 800c69e:	9200      	str	r2, [sp, #0]
 800c6a0:	9a06      	ldr	r2, [sp, #24]
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	441a      	add	r2, r3
 800c6a6:	4648      	mov	r0, r9
 800c6a8:	9206      	str	r2, [sp, #24]
 800c6aa:	f000 fc77 	bl	800cf9c <__i2b>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b166      	cbz	r6, 800c6cc <_dtoa_r+0x74c>
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd09      	ble.n	800c6cc <_dtoa_r+0x74c>
 800c6b8:	42b3      	cmp	r3, r6
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	bfa8      	it	ge
 800c6be:	4633      	movge	r3, r6
 800c6c0:	1ad2      	subs	r2, r2, r3
 800c6c2:	9200      	str	r2, [sp, #0]
 800c6c4:	9a06      	ldr	r2, [sp, #24]
 800c6c6:	1af6      	subs	r6, r6, r3
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	9306      	str	r3, [sp, #24]
 800c6cc:	9b08      	ldr	r3, [sp, #32]
 800c6ce:	b30b      	cbz	r3, 800c714 <_dtoa_r+0x794>
 800c6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80c6 	beq.w	800c864 <_dtoa_r+0x8e4>
 800c6d8:	2c00      	cmp	r4, #0
 800c6da:	f000 80c0 	beq.w	800c85e <_dtoa_r+0x8de>
 800c6de:	4629      	mov	r1, r5
 800c6e0:	4622      	mov	r2, r4
 800c6e2:	4648      	mov	r0, r9
 800c6e4:	f000 fd12 	bl	800d10c <__pow5mult>
 800c6e8:	9a02      	ldr	r2, [sp, #8]
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	4648      	mov	r0, r9
 800c6f0:	f000 fc6a 	bl	800cfc8 <__multiply>
 800c6f4:	9902      	ldr	r1, [sp, #8]
 800c6f6:	4680      	mov	r8, r0
 800c6f8:	4648      	mov	r0, r9
 800c6fa:	f000 fb51 	bl	800cda0 <_Bfree>
 800c6fe:	9b08      	ldr	r3, [sp, #32]
 800c700:	1b1b      	subs	r3, r3, r4
 800c702:	9308      	str	r3, [sp, #32]
 800c704:	f000 80b1 	beq.w	800c86a <_dtoa_r+0x8ea>
 800c708:	9a08      	ldr	r2, [sp, #32]
 800c70a:	4641      	mov	r1, r8
 800c70c:	4648      	mov	r0, r9
 800c70e:	f000 fcfd 	bl	800d10c <__pow5mult>
 800c712:	9002      	str	r0, [sp, #8]
 800c714:	2101      	movs	r1, #1
 800c716:	4648      	mov	r0, r9
 800c718:	f000 fc40 	bl	800cf9c <__i2b>
 800c71c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c71e:	4604      	mov	r4, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 81d8 	beq.w	800cad6 <_dtoa_r+0xb56>
 800c726:	461a      	mov	r2, r3
 800c728:	4601      	mov	r1, r0
 800c72a:	4648      	mov	r0, r9
 800c72c:	f000 fcee 	bl	800d10c <__pow5mult>
 800c730:	9b07      	ldr	r3, [sp, #28]
 800c732:	2b01      	cmp	r3, #1
 800c734:	4604      	mov	r4, r0
 800c736:	f300 809f 	bgt.w	800c878 <_dtoa_r+0x8f8>
 800c73a:	9b04      	ldr	r3, [sp, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f040 8097 	bne.w	800c870 <_dtoa_r+0x8f0>
 800c742:	9b05      	ldr	r3, [sp, #20]
 800c744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f040 8093 	bne.w	800c874 <_dtoa_r+0x8f4>
 800c74e:	9b05      	ldr	r3, [sp, #20]
 800c750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c754:	0d1b      	lsrs	r3, r3, #20
 800c756:	051b      	lsls	r3, r3, #20
 800c758:	b133      	cbz	r3, 800c768 <_dtoa_r+0x7e8>
 800c75a:	9b00      	ldr	r3, [sp, #0]
 800c75c:	3301      	adds	r3, #1
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	9b06      	ldr	r3, [sp, #24]
 800c762:	3301      	adds	r3, #1
 800c764:	9306      	str	r3, [sp, #24]
 800c766:	2301      	movs	r3, #1
 800c768:	9308      	str	r3, [sp, #32]
 800c76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 81b8 	beq.w	800cae2 <_dtoa_r+0xb62>
 800c772:	6923      	ldr	r3, [r4, #16]
 800c774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c778:	6918      	ldr	r0, [r3, #16]
 800c77a:	f000 fbc3 	bl	800cf04 <__hi0bits>
 800c77e:	f1c0 0020 	rsb	r0, r0, #32
 800c782:	9b06      	ldr	r3, [sp, #24]
 800c784:	4418      	add	r0, r3
 800c786:	f010 001f 	ands.w	r0, r0, #31
 800c78a:	f000 8082 	beq.w	800c892 <_dtoa_r+0x912>
 800c78e:	f1c0 0320 	rsb	r3, r0, #32
 800c792:	2b04      	cmp	r3, #4
 800c794:	dd73      	ble.n	800c87e <_dtoa_r+0x8fe>
 800c796:	9b00      	ldr	r3, [sp, #0]
 800c798:	f1c0 001c 	rsb	r0, r0, #28
 800c79c:	4403      	add	r3, r0
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	9b06      	ldr	r3, [sp, #24]
 800c7a2:	4403      	add	r3, r0
 800c7a4:	4406      	add	r6, r0
 800c7a6:	9306      	str	r3, [sp, #24]
 800c7a8:	9b00      	ldr	r3, [sp, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	dd05      	ble.n	800c7ba <_dtoa_r+0x83a>
 800c7ae:	9902      	ldr	r1, [sp, #8]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4648      	mov	r0, r9
 800c7b4:	f000 fd04 	bl	800d1c0 <__lshift>
 800c7b8:	9002      	str	r0, [sp, #8]
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd05      	ble.n	800c7cc <_dtoa_r+0x84c>
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4648      	mov	r0, r9
 800c7c6:	f000 fcfb 	bl	800d1c0 <__lshift>
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d061      	beq.n	800c896 <_dtoa_r+0x916>
 800c7d2:	9802      	ldr	r0, [sp, #8]
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f000 fd5f 	bl	800d298 <__mcmp>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	da5b      	bge.n	800c896 <_dtoa_r+0x916>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9902      	ldr	r1, [sp, #8]
 800c7e2:	220a      	movs	r2, #10
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	f000 fafd 	bl	800cde4 <__multadd>
 800c7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ec:	9002      	str	r0, [sp, #8]
 800c7ee:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 8177 	beq.w	800cae6 <_dtoa_r+0xb66>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	220a      	movs	r2, #10
 800c7fe:	4648      	mov	r0, r9
 800c800:	f000 faf0 	bl	800cde4 <__multadd>
 800c804:	f1bb 0f00 	cmp.w	fp, #0
 800c808:	4605      	mov	r5, r0
 800c80a:	dc6f      	bgt.n	800c8ec <_dtoa_r+0x96c>
 800c80c:	9b07      	ldr	r3, [sp, #28]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	dc49      	bgt.n	800c8a6 <_dtoa_r+0x926>
 800c812:	e06b      	b.n	800c8ec <_dtoa_r+0x96c>
 800c814:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c816:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c81a:	e73c      	b.n	800c696 <_dtoa_r+0x716>
 800c81c:	3fe00000 	.word	0x3fe00000
 800c820:	40240000 	.word	0x40240000
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1e5c      	subs	r4, r3, #1
 800c828:	9b08      	ldr	r3, [sp, #32]
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	db09      	blt.n	800c842 <_dtoa_r+0x8c2>
 800c82e:	1b1c      	subs	r4, r3, r4
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f6bf af30 	bge.w	800c698 <_dtoa_r+0x718>
 800c838:	9b00      	ldr	r3, [sp, #0]
 800c83a:	9a03      	ldr	r2, [sp, #12]
 800c83c:	1a9e      	subs	r6, r3, r2
 800c83e:	2300      	movs	r3, #0
 800c840:	e72b      	b.n	800c69a <_dtoa_r+0x71a>
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c846:	9408      	str	r4, [sp, #32]
 800c848:	1ae3      	subs	r3, r4, r3
 800c84a:	441a      	add	r2, r3
 800c84c:	9e00      	ldr	r6, [sp, #0]
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	920d      	str	r2, [sp, #52]	@ 0x34
 800c852:	2400      	movs	r4, #0
 800c854:	e721      	b.n	800c69a <_dtoa_r+0x71a>
 800c856:	9c08      	ldr	r4, [sp, #32]
 800c858:	9e00      	ldr	r6, [sp, #0]
 800c85a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c85c:	e728      	b.n	800c6b0 <_dtoa_r+0x730>
 800c85e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c862:	e751      	b.n	800c708 <_dtoa_r+0x788>
 800c864:	9a08      	ldr	r2, [sp, #32]
 800c866:	9902      	ldr	r1, [sp, #8]
 800c868:	e750      	b.n	800c70c <_dtoa_r+0x78c>
 800c86a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c86e:	e751      	b.n	800c714 <_dtoa_r+0x794>
 800c870:	2300      	movs	r3, #0
 800c872:	e779      	b.n	800c768 <_dtoa_r+0x7e8>
 800c874:	9b04      	ldr	r3, [sp, #16]
 800c876:	e777      	b.n	800c768 <_dtoa_r+0x7e8>
 800c878:	2300      	movs	r3, #0
 800c87a:	9308      	str	r3, [sp, #32]
 800c87c:	e779      	b.n	800c772 <_dtoa_r+0x7f2>
 800c87e:	d093      	beq.n	800c7a8 <_dtoa_r+0x828>
 800c880:	9a00      	ldr	r2, [sp, #0]
 800c882:	331c      	adds	r3, #28
 800c884:	441a      	add	r2, r3
 800c886:	9200      	str	r2, [sp, #0]
 800c888:	9a06      	ldr	r2, [sp, #24]
 800c88a:	441a      	add	r2, r3
 800c88c:	441e      	add	r6, r3
 800c88e:	9206      	str	r2, [sp, #24]
 800c890:	e78a      	b.n	800c7a8 <_dtoa_r+0x828>
 800c892:	4603      	mov	r3, r0
 800c894:	e7f4      	b.n	800c880 <_dtoa_r+0x900>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	46b8      	mov	r8, r7
 800c89c:	dc20      	bgt.n	800c8e0 <_dtoa_r+0x960>
 800c89e:	469b      	mov	fp, r3
 800c8a0:	9b07      	ldr	r3, [sp, #28]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	dd1e      	ble.n	800c8e4 <_dtoa_r+0x964>
 800c8a6:	f1bb 0f00 	cmp.w	fp, #0
 800c8aa:	f47f adb1 	bne.w	800c410 <_dtoa_r+0x490>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	465b      	mov	r3, fp
 800c8b2:	2205      	movs	r2, #5
 800c8b4:	4648      	mov	r0, r9
 800c8b6:	f000 fa95 	bl	800cde4 <__multadd>
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4604      	mov	r4, r0
 800c8be:	9802      	ldr	r0, [sp, #8]
 800c8c0:	f000 fcea 	bl	800d298 <__mcmp>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f77f ada3 	ble.w	800c410 <_dtoa_r+0x490>
 800c8ca:	4656      	mov	r6, sl
 800c8cc:	2331      	movs	r3, #49	@ 0x31
 800c8ce:	f806 3b01 	strb.w	r3, [r6], #1
 800c8d2:	f108 0801 	add.w	r8, r8, #1
 800c8d6:	e59f      	b.n	800c418 <_dtoa_r+0x498>
 800c8d8:	9c03      	ldr	r4, [sp, #12]
 800c8da:	46b8      	mov	r8, r7
 800c8dc:	4625      	mov	r5, r4
 800c8de:	e7f4      	b.n	800c8ca <_dtoa_r+0x94a>
 800c8e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 8101 	beq.w	800caee <_dtoa_r+0xb6e>
 800c8ec:	2e00      	cmp	r6, #0
 800c8ee:	dd05      	ble.n	800c8fc <_dtoa_r+0x97c>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4632      	mov	r2, r6
 800c8f4:	4648      	mov	r0, r9
 800c8f6:	f000 fc63 	bl	800d1c0 <__lshift>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	9b08      	ldr	r3, [sp, #32]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d05c      	beq.n	800c9bc <_dtoa_r+0xa3c>
 800c902:	6869      	ldr	r1, [r5, #4]
 800c904:	4648      	mov	r0, r9
 800c906:	f000 fa0b 	bl	800cd20 <_Balloc>
 800c90a:	4606      	mov	r6, r0
 800c90c:	b928      	cbnz	r0, 800c91a <_dtoa_r+0x99a>
 800c90e:	4b82      	ldr	r3, [pc, #520]	@ (800cb18 <_dtoa_r+0xb98>)
 800c910:	4602      	mov	r2, r0
 800c912:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c916:	f7ff bb4a 	b.w	800bfae <_dtoa_r+0x2e>
 800c91a:	692a      	ldr	r2, [r5, #16]
 800c91c:	3202      	adds	r2, #2
 800c91e:	0092      	lsls	r2, r2, #2
 800c920:	f105 010c 	add.w	r1, r5, #12
 800c924:	300c      	adds	r0, #12
 800c926:	f7ff fa8e 	bl	800be46 <memcpy>
 800c92a:	2201      	movs	r2, #1
 800c92c:	4631      	mov	r1, r6
 800c92e:	4648      	mov	r0, r9
 800c930:	f000 fc46 	bl	800d1c0 <__lshift>
 800c934:	f10a 0301 	add.w	r3, sl, #1
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	eb0a 030b 	add.w	r3, sl, fp
 800c93e:	9308      	str	r3, [sp, #32]
 800c940:	9b04      	ldr	r3, [sp, #16]
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	462f      	mov	r7, r5
 800c948:	9306      	str	r3, [sp, #24]
 800c94a:	4605      	mov	r5, r0
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	9802      	ldr	r0, [sp, #8]
 800c950:	4621      	mov	r1, r4
 800c952:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c956:	f7ff fa8b 	bl	800be70 <quorem>
 800c95a:	4603      	mov	r3, r0
 800c95c:	3330      	adds	r3, #48	@ 0x30
 800c95e:	9003      	str	r0, [sp, #12]
 800c960:	4639      	mov	r1, r7
 800c962:	9802      	ldr	r0, [sp, #8]
 800c964:	9309      	str	r3, [sp, #36]	@ 0x24
 800c966:	f000 fc97 	bl	800d298 <__mcmp>
 800c96a:	462a      	mov	r2, r5
 800c96c:	9004      	str	r0, [sp, #16]
 800c96e:	4621      	mov	r1, r4
 800c970:	4648      	mov	r0, r9
 800c972:	f000 fcad 	bl	800d2d0 <__mdiff>
 800c976:	68c2      	ldr	r2, [r0, #12]
 800c978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97a:	4606      	mov	r6, r0
 800c97c:	bb02      	cbnz	r2, 800c9c0 <_dtoa_r+0xa40>
 800c97e:	4601      	mov	r1, r0
 800c980:	9802      	ldr	r0, [sp, #8]
 800c982:	f000 fc89 	bl	800d298 <__mcmp>
 800c986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c988:	4602      	mov	r2, r0
 800c98a:	4631      	mov	r1, r6
 800c98c:	4648      	mov	r0, r9
 800c98e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c990:	9309      	str	r3, [sp, #36]	@ 0x24
 800c992:	f000 fa05 	bl	800cda0 <_Bfree>
 800c996:	9b07      	ldr	r3, [sp, #28]
 800c998:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c99a:	9e00      	ldr	r6, [sp, #0]
 800c99c:	ea42 0103 	orr.w	r1, r2, r3
 800c9a0:	9b06      	ldr	r3, [sp, #24]
 800c9a2:	4319      	orrs	r1, r3
 800c9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a6:	d10d      	bne.n	800c9c4 <_dtoa_r+0xa44>
 800c9a8:	2b39      	cmp	r3, #57	@ 0x39
 800c9aa:	d027      	beq.n	800c9fc <_dtoa_r+0xa7c>
 800c9ac:	9a04      	ldr	r2, [sp, #16]
 800c9ae:	2a00      	cmp	r2, #0
 800c9b0:	dd01      	ble.n	800c9b6 <_dtoa_r+0xa36>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	3331      	adds	r3, #49	@ 0x31
 800c9b6:	f88b 3000 	strb.w	r3, [fp]
 800c9ba:	e52e      	b.n	800c41a <_dtoa_r+0x49a>
 800c9bc:	4628      	mov	r0, r5
 800c9be:	e7b9      	b.n	800c934 <_dtoa_r+0x9b4>
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	e7e2      	b.n	800c98a <_dtoa_r+0xa0a>
 800c9c4:	9904      	ldr	r1, [sp, #16]
 800c9c6:	2900      	cmp	r1, #0
 800c9c8:	db04      	blt.n	800c9d4 <_dtoa_r+0xa54>
 800c9ca:	9807      	ldr	r0, [sp, #28]
 800c9cc:	4301      	orrs	r1, r0
 800c9ce:	9806      	ldr	r0, [sp, #24]
 800c9d0:	4301      	orrs	r1, r0
 800c9d2:	d120      	bne.n	800ca16 <_dtoa_r+0xa96>
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	ddee      	ble.n	800c9b6 <_dtoa_r+0xa36>
 800c9d8:	9902      	ldr	r1, [sp, #8]
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	4648      	mov	r0, r9
 800c9e0:	f000 fbee 	bl	800d1c0 <__lshift>
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	9002      	str	r0, [sp, #8]
 800c9e8:	f000 fc56 	bl	800d298 <__mcmp>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	9b00      	ldr	r3, [sp, #0]
 800c9f0:	dc02      	bgt.n	800c9f8 <_dtoa_r+0xa78>
 800c9f2:	d1e0      	bne.n	800c9b6 <_dtoa_r+0xa36>
 800c9f4:	07da      	lsls	r2, r3, #31
 800c9f6:	d5de      	bpl.n	800c9b6 <_dtoa_r+0xa36>
 800c9f8:	2b39      	cmp	r3, #57	@ 0x39
 800c9fa:	d1da      	bne.n	800c9b2 <_dtoa_r+0xa32>
 800c9fc:	2339      	movs	r3, #57	@ 0x39
 800c9fe:	f88b 3000 	strb.w	r3, [fp]
 800ca02:	4633      	mov	r3, r6
 800ca04:	461e      	mov	r6, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca0c:	2a39      	cmp	r2, #57	@ 0x39
 800ca0e:	d04e      	beq.n	800caae <_dtoa_r+0xb2e>
 800ca10:	3201      	adds	r2, #1
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e501      	b.n	800c41a <_dtoa_r+0x49a>
 800ca16:	2a00      	cmp	r2, #0
 800ca18:	dd03      	ble.n	800ca22 <_dtoa_r+0xaa2>
 800ca1a:	2b39      	cmp	r3, #57	@ 0x39
 800ca1c:	d0ee      	beq.n	800c9fc <_dtoa_r+0xa7c>
 800ca1e:	3301      	adds	r3, #1
 800ca20:	e7c9      	b.n	800c9b6 <_dtoa_r+0xa36>
 800ca22:	9a00      	ldr	r2, [sp, #0]
 800ca24:	9908      	ldr	r1, [sp, #32]
 800ca26:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca2a:	428a      	cmp	r2, r1
 800ca2c:	d028      	beq.n	800ca80 <_dtoa_r+0xb00>
 800ca2e:	9902      	ldr	r1, [sp, #8]
 800ca30:	2300      	movs	r3, #0
 800ca32:	220a      	movs	r2, #10
 800ca34:	4648      	mov	r0, r9
 800ca36:	f000 f9d5 	bl	800cde4 <__multadd>
 800ca3a:	42af      	cmp	r7, r5
 800ca3c:	9002      	str	r0, [sp, #8]
 800ca3e:	f04f 0300 	mov.w	r3, #0
 800ca42:	f04f 020a 	mov.w	r2, #10
 800ca46:	4639      	mov	r1, r7
 800ca48:	4648      	mov	r0, r9
 800ca4a:	d107      	bne.n	800ca5c <_dtoa_r+0xadc>
 800ca4c:	f000 f9ca 	bl	800cde4 <__multadd>
 800ca50:	4607      	mov	r7, r0
 800ca52:	4605      	mov	r5, r0
 800ca54:	9b00      	ldr	r3, [sp, #0]
 800ca56:	3301      	adds	r3, #1
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	e777      	b.n	800c94c <_dtoa_r+0x9cc>
 800ca5c:	f000 f9c2 	bl	800cde4 <__multadd>
 800ca60:	4629      	mov	r1, r5
 800ca62:	4607      	mov	r7, r0
 800ca64:	2300      	movs	r3, #0
 800ca66:	220a      	movs	r2, #10
 800ca68:	4648      	mov	r0, r9
 800ca6a:	f000 f9bb 	bl	800cde4 <__multadd>
 800ca6e:	4605      	mov	r5, r0
 800ca70:	e7f0      	b.n	800ca54 <_dtoa_r+0xad4>
 800ca72:	f1bb 0f00 	cmp.w	fp, #0
 800ca76:	bfcc      	ite	gt
 800ca78:	465e      	movgt	r6, fp
 800ca7a:	2601      	movle	r6, #1
 800ca7c:	4456      	add	r6, sl
 800ca7e:	2700      	movs	r7, #0
 800ca80:	9902      	ldr	r1, [sp, #8]
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	2201      	movs	r2, #1
 800ca86:	4648      	mov	r0, r9
 800ca88:	f000 fb9a 	bl	800d1c0 <__lshift>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	9002      	str	r0, [sp, #8]
 800ca90:	f000 fc02 	bl	800d298 <__mcmp>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	dcb4      	bgt.n	800ca02 <_dtoa_r+0xa82>
 800ca98:	d102      	bne.n	800caa0 <_dtoa_r+0xb20>
 800ca9a:	9b00      	ldr	r3, [sp, #0]
 800ca9c:	07db      	lsls	r3, r3, #31
 800ca9e:	d4b0      	bmi.n	800ca02 <_dtoa_r+0xa82>
 800caa0:	4633      	mov	r3, r6
 800caa2:	461e      	mov	r6, r3
 800caa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800caa8:	2a30      	cmp	r2, #48	@ 0x30
 800caaa:	d0fa      	beq.n	800caa2 <_dtoa_r+0xb22>
 800caac:	e4b5      	b.n	800c41a <_dtoa_r+0x49a>
 800caae:	459a      	cmp	sl, r3
 800cab0:	d1a8      	bne.n	800ca04 <_dtoa_r+0xa84>
 800cab2:	2331      	movs	r3, #49	@ 0x31
 800cab4:	f108 0801 	add.w	r8, r8, #1
 800cab8:	f88a 3000 	strb.w	r3, [sl]
 800cabc:	e4ad      	b.n	800c41a <_dtoa_r+0x49a>
 800cabe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cac0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cb1c <_dtoa_r+0xb9c>
 800cac4:	b11b      	cbz	r3, 800cace <_dtoa_r+0xb4e>
 800cac6:	f10a 0308 	add.w	r3, sl, #8
 800caca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	4650      	mov	r0, sl
 800cad0:	b017      	add	sp, #92	@ 0x5c
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad6:	9b07      	ldr	r3, [sp, #28]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	f77f ae2e 	ble.w	800c73a <_dtoa_r+0x7ba>
 800cade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cae0:	9308      	str	r3, [sp, #32]
 800cae2:	2001      	movs	r0, #1
 800cae4:	e64d      	b.n	800c782 <_dtoa_r+0x802>
 800cae6:	f1bb 0f00 	cmp.w	fp, #0
 800caea:	f77f aed9 	ble.w	800c8a0 <_dtoa_r+0x920>
 800caee:	4656      	mov	r6, sl
 800caf0:	9802      	ldr	r0, [sp, #8]
 800caf2:	4621      	mov	r1, r4
 800caf4:	f7ff f9bc 	bl	800be70 <quorem>
 800caf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cafc:	f806 3b01 	strb.w	r3, [r6], #1
 800cb00:	eba6 020a 	sub.w	r2, r6, sl
 800cb04:	4593      	cmp	fp, r2
 800cb06:	ddb4      	ble.n	800ca72 <_dtoa_r+0xaf2>
 800cb08:	9902      	ldr	r1, [sp, #8]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	220a      	movs	r2, #10
 800cb0e:	4648      	mov	r0, r9
 800cb10:	f000 f968 	bl	800cde4 <__multadd>
 800cb14:	9002      	str	r0, [sp, #8]
 800cb16:	e7eb      	b.n	800caf0 <_dtoa_r+0xb70>
 800cb18:	080101db 	.word	0x080101db
 800cb1c:	0801015f 	.word	0x0801015f

0800cb20 <_free_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4605      	mov	r5, r0
 800cb24:	2900      	cmp	r1, #0
 800cb26:	d041      	beq.n	800cbac <_free_r+0x8c>
 800cb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb2c:	1f0c      	subs	r4, r1, #4
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfb8      	it	lt
 800cb32:	18e4      	addlt	r4, r4, r3
 800cb34:	f000 f8e8 	bl	800cd08 <__malloc_lock>
 800cb38:	4a1d      	ldr	r2, [pc, #116]	@ (800cbb0 <_free_r+0x90>)
 800cb3a:	6813      	ldr	r3, [r2, #0]
 800cb3c:	b933      	cbnz	r3, 800cb4c <_free_r+0x2c>
 800cb3e:	6063      	str	r3, [r4, #4]
 800cb40:	6014      	str	r4, [r2, #0]
 800cb42:	4628      	mov	r0, r5
 800cb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb48:	f000 b8e4 	b.w	800cd14 <__malloc_unlock>
 800cb4c:	42a3      	cmp	r3, r4
 800cb4e:	d908      	bls.n	800cb62 <_free_r+0x42>
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	1821      	adds	r1, r4, r0
 800cb54:	428b      	cmp	r3, r1
 800cb56:	bf01      	itttt	eq
 800cb58:	6819      	ldreq	r1, [r3, #0]
 800cb5a:	685b      	ldreq	r3, [r3, #4]
 800cb5c:	1809      	addeq	r1, r1, r0
 800cb5e:	6021      	streq	r1, [r4, #0]
 800cb60:	e7ed      	b.n	800cb3e <_free_r+0x1e>
 800cb62:	461a      	mov	r2, r3
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	b10b      	cbz	r3, 800cb6c <_free_r+0x4c>
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	d9fa      	bls.n	800cb62 <_free_r+0x42>
 800cb6c:	6811      	ldr	r1, [r2, #0]
 800cb6e:	1850      	adds	r0, r2, r1
 800cb70:	42a0      	cmp	r0, r4
 800cb72:	d10b      	bne.n	800cb8c <_free_r+0x6c>
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	4401      	add	r1, r0
 800cb78:	1850      	adds	r0, r2, r1
 800cb7a:	4283      	cmp	r3, r0
 800cb7c:	6011      	str	r1, [r2, #0]
 800cb7e:	d1e0      	bne.n	800cb42 <_free_r+0x22>
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	6053      	str	r3, [r2, #4]
 800cb86:	4408      	add	r0, r1
 800cb88:	6010      	str	r0, [r2, #0]
 800cb8a:	e7da      	b.n	800cb42 <_free_r+0x22>
 800cb8c:	d902      	bls.n	800cb94 <_free_r+0x74>
 800cb8e:	230c      	movs	r3, #12
 800cb90:	602b      	str	r3, [r5, #0]
 800cb92:	e7d6      	b.n	800cb42 <_free_r+0x22>
 800cb94:	6820      	ldr	r0, [r4, #0]
 800cb96:	1821      	adds	r1, r4, r0
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	bf04      	itt	eq
 800cb9c:	6819      	ldreq	r1, [r3, #0]
 800cb9e:	685b      	ldreq	r3, [r3, #4]
 800cba0:	6063      	str	r3, [r4, #4]
 800cba2:	bf04      	itt	eq
 800cba4:	1809      	addeq	r1, r1, r0
 800cba6:	6021      	streq	r1, [r4, #0]
 800cba8:	6054      	str	r4, [r2, #4]
 800cbaa:	e7ca      	b.n	800cb42 <_free_r+0x22>
 800cbac:	bd38      	pop	{r3, r4, r5, pc}
 800cbae:	bf00      	nop
 800cbb0:	20000dc0 	.word	0x20000dc0

0800cbb4 <malloc>:
 800cbb4:	4b02      	ldr	r3, [pc, #8]	@ (800cbc0 <malloc+0xc>)
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f000 b825 	b.w	800cc08 <_malloc_r>
 800cbbe:	bf00      	nop
 800cbc0:	200003e4 	.word	0x200003e4

0800cbc4 <sbrk_aligned>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	4e0f      	ldr	r6, [pc, #60]	@ (800cc04 <sbrk_aligned+0x40>)
 800cbc8:	460c      	mov	r4, r1
 800cbca:	6831      	ldr	r1, [r6, #0]
 800cbcc:	4605      	mov	r5, r0
 800cbce:	b911      	cbnz	r1, 800cbd6 <sbrk_aligned+0x12>
 800cbd0:	f002 f996 	bl	800ef00 <_sbrk_r>
 800cbd4:	6030      	str	r0, [r6, #0]
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f002 f991 	bl	800ef00 <_sbrk_r>
 800cbde:	1c43      	adds	r3, r0, #1
 800cbe0:	d103      	bne.n	800cbea <sbrk_aligned+0x26>
 800cbe2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	bd70      	pop	{r4, r5, r6, pc}
 800cbea:	1cc4      	adds	r4, r0, #3
 800cbec:	f024 0403 	bic.w	r4, r4, #3
 800cbf0:	42a0      	cmp	r0, r4
 800cbf2:	d0f8      	beq.n	800cbe6 <sbrk_aligned+0x22>
 800cbf4:	1a21      	subs	r1, r4, r0
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f002 f982 	bl	800ef00 <_sbrk_r>
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	d1f2      	bne.n	800cbe6 <sbrk_aligned+0x22>
 800cc00:	e7ef      	b.n	800cbe2 <sbrk_aligned+0x1e>
 800cc02:	bf00      	nop
 800cc04:	20000dbc 	.word	0x20000dbc

0800cc08 <_malloc_r>:
 800cc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	1ccd      	adds	r5, r1, #3
 800cc0e:	f025 0503 	bic.w	r5, r5, #3
 800cc12:	3508      	adds	r5, #8
 800cc14:	2d0c      	cmp	r5, #12
 800cc16:	bf38      	it	cc
 800cc18:	250c      	movcc	r5, #12
 800cc1a:	2d00      	cmp	r5, #0
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	db01      	blt.n	800cc24 <_malloc_r+0x1c>
 800cc20:	42a9      	cmp	r1, r5
 800cc22:	d904      	bls.n	800cc2e <_malloc_r+0x26>
 800cc24:	230c      	movs	r3, #12
 800cc26:	6033      	str	r3, [r6, #0]
 800cc28:	2000      	movs	r0, #0
 800cc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd04 <_malloc_r+0xfc>
 800cc32:	f000 f869 	bl	800cd08 <__malloc_lock>
 800cc36:	f8d8 3000 	ldr.w	r3, [r8]
 800cc3a:	461c      	mov	r4, r3
 800cc3c:	bb44      	cbnz	r4, 800cc90 <_malloc_r+0x88>
 800cc3e:	4629      	mov	r1, r5
 800cc40:	4630      	mov	r0, r6
 800cc42:	f7ff ffbf 	bl	800cbc4 <sbrk_aligned>
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	4604      	mov	r4, r0
 800cc4a:	d158      	bne.n	800ccfe <_malloc_r+0xf6>
 800cc4c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc50:	4627      	mov	r7, r4
 800cc52:	2f00      	cmp	r7, #0
 800cc54:	d143      	bne.n	800ccde <_malloc_r+0xd6>
 800cc56:	2c00      	cmp	r4, #0
 800cc58:	d04b      	beq.n	800ccf2 <_malloc_r+0xea>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	4630      	mov	r0, r6
 800cc60:	eb04 0903 	add.w	r9, r4, r3
 800cc64:	f002 f94c 	bl	800ef00 <_sbrk_r>
 800cc68:	4581      	cmp	r9, r0
 800cc6a:	d142      	bne.n	800ccf2 <_malloc_r+0xea>
 800cc6c:	6821      	ldr	r1, [r4, #0]
 800cc6e:	1a6d      	subs	r5, r5, r1
 800cc70:	4629      	mov	r1, r5
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7ff ffa6 	bl	800cbc4 <sbrk_aligned>
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d03a      	beq.n	800ccf2 <_malloc_r+0xea>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	442b      	add	r3, r5
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	f8d8 3000 	ldr.w	r3, [r8]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	bb62      	cbnz	r2, 800cce4 <_malloc_r+0xdc>
 800cc8a:	f8c8 7000 	str.w	r7, [r8]
 800cc8e:	e00f      	b.n	800ccb0 <_malloc_r+0xa8>
 800cc90:	6822      	ldr	r2, [r4, #0]
 800cc92:	1b52      	subs	r2, r2, r5
 800cc94:	d420      	bmi.n	800ccd8 <_malloc_r+0xd0>
 800cc96:	2a0b      	cmp	r2, #11
 800cc98:	d917      	bls.n	800ccca <_malloc_r+0xc2>
 800cc9a:	1961      	adds	r1, r4, r5
 800cc9c:	42a3      	cmp	r3, r4
 800cc9e:	6025      	str	r5, [r4, #0]
 800cca0:	bf18      	it	ne
 800cca2:	6059      	strne	r1, [r3, #4]
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	bf08      	it	eq
 800cca8:	f8c8 1000 	streq.w	r1, [r8]
 800ccac:	5162      	str	r2, [r4, r5]
 800ccae:	604b      	str	r3, [r1, #4]
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f000 f82f 	bl	800cd14 <__malloc_unlock>
 800ccb6:	f104 000b 	add.w	r0, r4, #11
 800ccba:	1d23      	adds	r3, r4, #4
 800ccbc:	f020 0007 	bic.w	r0, r0, #7
 800ccc0:	1ac2      	subs	r2, r0, r3
 800ccc2:	bf1c      	itt	ne
 800ccc4:	1a1b      	subne	r3, r3, r0
 800ccc6:	50a3      	strne	r3, [r4, r2]
 800ccc8:	e7af      	b.n	800cc2a <_malloc_r+0x22>
 800ccca:	6862      	ldr	r2, [r4, #4]
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	bf0c      	ite	eq
 800ccd0:	f8c8 2000 	streq.w	r2, [r8]
 800ccd4:	605a      	strne	r2, [r3, #4]
 800ccd6:	e7eb      	b.n	800ccb0 <_malloc_r+0xa8>
 800ccd8:	4623      	mov	r3, r4
 800ccda:	6864      	ldr	r4, [r4, #4]
 800ccdc:	e7ae      	b.n	800cc3c <_malloc_r+0x34>
 800ccde:	463c      	mov	r4, r7
 800cce0:	687f      	ldr	r7, [r7, #4]
 800cce2:	e7b6      	b.n	800cc52 <_malloc_r+0x4a>
 800cce4:	461a      	mov	r2, r3
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	42a3      	cmp	r3, r4
 800ccea:	d1fb      	bne.n	800cce4 <_malloc_r+0xdc>
 800ccec:	2300      	movs	r3, #0
 800ccee:	6053      	str	r3, [r2, #4]
 800ccf0:	e7de      	b.n	800ccb0 <_malloc_r+0xa8>
 800ccf2:	230c      	movs	r3, #12
 800ccf4:	6033      	str	r3, [r6, #0]
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f000 f80c 	bl	800cd14 <__malloc_unlock>
 800ccfc:	e794      	b.n	800cc28 <_malloc_r+0x20>
 800ccfe:	6005      	str	r5, [r0, #0]
 800cd00:	e7d6      	b.n	800ccb0 <_malloc_r+0xa8>
 800cd02:	bf00      	nop
 800cd04:	20000dc0 	.word	0x20000dc0

0800cd08 <__malloc_lock>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__malloc_lock+0x8>)
 800cd0a:	f7ff b89a 	b.w	800be42 <__retarget_lock_acquire_recursive>
 800cd0e:	bf00      	nop
 800cd10:	20000db8 	.word	0x20000db8

0800cd14 <__malloc_unlock>:
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <__malloc_unlock+0x8>)
 800cd16:	f7ff b895 	b.w	800be44 <__retarget_lock_release_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	20000db8 	.word	0x20000db8

0800cd20 <_Balloc>:
 800cd20:	b570      	push	{r4, r5, r6, lr}
 800cd22:	69c6      	ldr	r6, [r0, #28]
 800cd24:	4604      	mov	r4, r0
 800cd26:	460d      	mov	r5, r1
 800cd28:	b976      	cbnz	r6, 800cd48 <_Balloc+0x28>
 800cd2a:	2010      	movs	r0, #16
 800cd2c:	f7ff ff42 	bl	800cbb4 <malloc>
 800cd30:	4602      	mov	r2, r0
 800cd32:	61e0      	str	r0, [r4, #28]
 800cd34:	b920      	cbnz	r0, 800cd40 <_Balloc+0x20>
 800cd36:	4b18      	ldr	r3, [pc, #96]	@ (800cd98 <_Balloc+0x78>)
 800cd38:	4818      	ldr	r0, [pc, #96]	@ (800cd9c <_Balloc+0x7c>)
 800cd3a:	216b      	movs	r1, #107	@ 0x6b
 800cd3c:	f002 f8f8 	bl	800ef30 <__assert_func>
 800cd40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd44:	6006      	str	r6, [r0, #0]
 800cd46:	60c6      	str	r6, [r0, #12]
 800cd48:	69e6      	ldr	r6, [r4, #28]
 800cd4a:	68f3      	ldr	r3, [r6, #12]
 800cd4c:	b183      	cbz	r3, 800cd70 <_Balloc+0x50>
 800cd4e:	69e3      	ldr	r3, [r4, #28]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd56:	b9b8      	cbnz	r0, 800cd88 <_Balloc+0x68>
 800cd58:	2101      	movs	r1, #1
 800cd5a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd5e:	1d72      	adds	r2, r6, #5
 800cd60:	0092      	lsls	r2, r2, #2
 800cd62:	4620      	mov	r0, r4
 800cd64:	f002 f902 	bl	800ef6c <_calloc_r>
 800cd68:	b160      	cbz	r0, 800cd84 <_Balloc+0x64>
 800cd6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd6e:	e00e      	b.n	800cd8e <_Balloc+0x6e>
 800cd70:	2221      	movs	r2, #33	@ 0x21
 800cd72:	2104      	movs	r1, #4
 800cd74:	4620      	mov	r0, r4
 800cd76:	f002 f8f9 	bl	800ef6c <_calloc_r>
 800cd7a:	69e3      	ldr	r3, [r4, #28]
 800cd7c:	60f0      	str	r0, [r6, #12]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1e4      	bne.n	800cd4e <_Balloc+0x2e>
 800cd84:	2000      	movs	r0, #0
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	6802      	ldr	r2, [r0, #0]
 800cd8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd94:	e7f7      	b.n	800cd86 <_Balloc+0x66>
 800cd96:	bf00      	nop
 800cd98:	0801016c 	.word	0x0801016c
 800cd9c:	080101ec 	.word	0x080101ec

0800cda0 <_Bfree>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	69c6      	ldr	r6, [r0, #28]
 800cda4:	4605      	mov	r5, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	b976      	cbnz	r6, 800cdc8 <_Bfree+0x28>
 800cdaa:	2010      	movs	r0, #16
 800cdac:	f7ff ff02 	bl	800cbb4 <malloc>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	61e8      	str	r0, [r5, #28]
 800cdb4:	b920      	cbnz	r0, 800cdc0 <_Bfree+0x20>
 800cdb6:	4b09      	ldr	r3, [pc, #36]	@ (800cddc <_Bfree+0x3c>)
 800cdb8:	4809      	ldr	r0, [pc, #36]	@ (800cde0 <_Bfree+0x40>)
 800cdba:	218f      	movs	r1, #143	@ 0x8f
 800cdbc:	f002 f8b8 	bl	800ef30 <__assert_func>
 800cdc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdc4:	6006      	str	r6, [r0, #0]
 800cdc6:	60c6      	str	r6, [r0, #12]
 800cdc8:	b13c      	cbz	r4, 800cdda <_Bfree+0x3a>
 800cdca:	69eb      	ldr	r3, [r5, #28]
 800cdcc:	6862      	ldr	r2, [r4, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdd4:	6021      	str	r1, [r4, #0]
 800cdd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	0801016c 	.word	0x0801016c
 800cde0:	080101ec 	.word	0x080101ec

0800cde4 <__multadd>:
 800cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde8:	690d      	ldr	r5, [r1, #16]
 800cdea:	4607      	mov	r7, r0
 800cdec:	460c      	mov	r4, r1
 800cdee:	461e      	mov	r6, r3
 800cdf0:	f101 0c14 	add.w	ip, r1, #20
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdfa:	b299      	uxth	r1, r3
 800cdfc:	fb02 6101 	mla	r1, r2, r1, r6
 800ce00:	0c1e      	lsrs	r6, r3, #16
 800ce02:	0c0b      	lsrs	r3, r1, #16
 800ce04:	fb02 3306 	mla	r3, r2, r6, r3
 800ce08:	b289      	uxth	r1, r1
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce10:	4285      	cmp	r5, r0
 800ce12:	f84c 1b04 	str.w	r1, [ip], #4
 800ce16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce1a:	dcec      	bgt.n	800cdf6 <__multadd+0x12>
 800ce1c:	b30e      	cbz	r6, 800ce62 <__multadd+0x7e>
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	42ab      	cmp	r3, r5
 800ce22:	dc19      	bgt.n	800ce58 <__multadd+0x74>
 800ce24:	6861      	ldr	r1, [r4, #4]
 800ce26:	4638      	mov	r0, r7
 800ce28:	3101      	adds	r1, #1
 800ce2a:	f7ff ff79 	bl	800cd20 <_Balloc>
 800ce2e:	4680      	mov	r8, r0
 800ce30:	b928      	cbnz	r0, 800ce3e <__multadd+0x5a>
 800ce32:	4602      	mov	r2, r0
 800ce34:	4b0c      	ldr	r3, [pc, #48]	@ (800ce68 <__multadd+0x84>)
 800ce36:	480d      	ldr	r0, [pc, #52]	@ (800ce6c <__multadd+0x88>)
 800ce38:	21ba      	movs	r1, #186	@ 0xba
 800ce3a:	f002 f879 	bl	800ef30 <__assert_func>
 800ce3e:	6922      	ldr	r2, [r4, #16]
 800ce40:	3202      	adds	r2, #2
 800ce42:	f104 010c 	add.w	r1, r4, #12
 800ce46:	0092      	lsls	r2, r2, #2
 800ce48:	300c      	adds	r0, #12
 800ce4a:	f7fe fffc 	bl	800be46 <memcpy>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7ff ffa5 	bl	800cda0 <_Bfree>
 800ce56:	4644      	mov	r4, r8
 800ce58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce5c:	3501      	adds	r5, #1
 800ce5e:	615e      	str	r6, [r3, #20]
 800ce60:	6125      	str	r5, [r4, #16]
 800ce62:	4620      	mov	r0, r4
 800ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce68:	080101db 	.word	0x080101db
 800ce6c:	080101ec 	.word	0x080101ec

0800ce70 <__s2b>:
 800ce70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce74:	460c      	mov	r4, r1
 800ce76:	4615      	mov	r5, r2
 800ce78:	461f      	mov	r7, r3
 800ce7a:	2209      	movs	r2, #9
 800ce7c:	3308      	adds	r3, #8
 800ce7e:	4606      	mov	r6, r0
 800ce80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce84:	2100      	movs	r1, #0
 800ce86:	2201      	movs	r2, #1
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	db09      	blt.n	800cea0 <__s2b+0x30>
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f7ff ff47 	bl	800cd20 <_Balloc>
 800ce92:	b940      	cbnz	r0, 800cea6 <__s2b+0x36>
 800ce94:	4602      	mov	r2, r0
 800ce96:	4b19      	ldr	r3, [pc, #100]	@ (800cefc <__s2b+0x8c>)
 800ce98:	4819      	ldr	r0, [pc, #100]	@ (800cf00 <__s2b+0x90>)
 800ce9a:	21d3      	movs	r1, #211	@ 0xd3
 800ce9c:	f002 f848 	bl	800ef30 <__assert_func>
 800cea0:	0052      	lsls	r2, r2, #1
 800cea2:	3101      	adds	r1, #1
 800cea4:	e7f0      	b.n	800ce88 <__s2b+0x18>
 800cea6:	9b08      	ldr	r3, [sp, #32]
 800cea8:	6143      	str	r3, [r0, #20]
 800ceaa:	2d09      	cmp	r5, #9
 800ceac:	f04f 0301 	mov.w	r3, #1
 800ceb0:	6103      	str	r3, [r0, #16]
 800ceb2:	dd16      	ble.n	800cee2 <__s2b+0x72>
 800ceb4:	f104 0909 	add.w	r9, r4, #9
 800ceb8:	46c8      	mov	r8, r9
 800ceba:	442c      	add	r4, r5
 800cebc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cec0:	4601      	mov	r1, r0
 800cec2:	3b30      	subs	r3, #48	@ 0x30
 800cec4:	220a      	movs	r2, #10
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ff8c 	bl	800cde4 <__multadd>
 800cecc:	45a0      	cmp	r8, r4
 800cece:	d1f5      	bne.n	800cebc <__s2b+0x4c>
 800ced0:	f1a5 0408 	sub.w	r4, r5, #8
 800ced4:	444c      	add	r4, r9
 800ced6:	1b2d      	subs	r5, r5, r4
 800ced8:	1963      	adds	r3, r4, r5
 800ceda:	42bb      	cmp	r3, r7
 800cedc:	db04      	blt.n	800cee8 <__s2b+0x78>
 800cede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee2:	340a      	adds	r4, #10
 800cee4:	2509      	movs	r5, #9
 800cee6:	e7f6      	b.n	800ced6 <__s2b+0x66>
 800cee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ceec:	4601      	mov	r1, r0
 800ceee:	3b30      	subs	r3, #48	@ 0x30
 800cef0:	220a      	movs	r2, #10
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff ff76 	bl	800cde4 <__multadd>
 800cef8:	e7ee      	b.n	800ced8 <__s2b+0x68>
 800cefa:	bf00      	nop
 800cefc:	080101db 	.word	0x080101db
 800cf00:	080101ec 	.word	0x080101ec

0800cf04 <__hi0bits>:
 800cf04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf08:	4603      	mov	r3, r0
 800cf0a:	bf36      	itet	cc
 800cf0c:	0403      	lslcc	r3, r0, #16
 800cf0e:	2000      	movcs	r0, #0
 800cf10:	2010      	movcc	r0, #16
 800cf12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf16:	bf3c      	itt	cc
 800cf18:	021b      	lslcc	r3, r3, #8
 800cf1a:	3008      	addcc	r0, #8
 800cf1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf20:	bf3c      	itt	cc
 800cf22:	011b      	lslcc	r3, r3, #4
 800cf24:	3004      	addcc	r0, #4
 800cf26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf2a:	bf3c      	itt	cc
 800cf2c:	009b      	lslcc	r3, r3, #2
 800cf2e:	3002      	addcc	r0, #2
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	db05      	blt.n	800cf40 <__hi0bits+0x3c>
 800cf34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf38:	f100 0001 	add.w	r0, r0, #1
 800cf3c:	bf08      	it	eq
 800cf3e:	2020      	moveq	r0, #32
 800cf40:	4770      	bx	lr

0800cf42 <__lo0bits>:
 800cf42:	6803      	ldr	r3, [r0, #0]
 800cf44:	4602      	mov	r2, r0
 800cf46:	f013 0007 	ands.w	r0, r3, #7
 800cf4a:	d00b      	beq.n	800cf64 <__lo0bits+0x22>
 800cf4c:	07d9      	lsls	r1, r3, #31
 800cf4e:	d421      	bmi.n	800cf94 <__lo0bits+0x52>
 800cf50:	0798      	lsls	r0, r3, #30
 800cf52:	bf49      	itett	mi
 800cf54:	085b      	lsrmi	r3, r3, #1
 800cf56:	089b      	lsrpl	r3, r3, #2
 800cf58:	2001      	movmi	r0, #1
 800cf5a:	6013      	strmi	r3, [r2, #0]
 800cf5c:	bf5c      	itt	pl
 800cf5e:	6013      	strpl	r3, [r2, #0]
 800cf60:	2002      	movpl	r0, #2
 800cf62:	4770      	bx	lr
 800cf64:	b299      	uxth	r1, r3
 800cf66:	b909      	cbnz	r1, 800cf6c <__lo0bits+0x2a>
 800cf68:	0c1b      	lsrs	r3, r3, #16
 800cf6a:	2010      	movs	r0, #16
 800cf6c:	b2d9      	uxtb	r1, r3
 800cf6e:	b909      	cbnz	r1, 800cf74 <__lo0bits+0x32>
 800cf70:	3008      	adds	r0, #8
 800cf72:	0a1b      	lsrs	r3, r3, #8
 800cf74:	0719      	lsls	r1, r3, #28
 800cf76:	bf04      	itt	eq
 800cf78:	091b      	lsreq	r3, r3, #4
 800cf7a:	3004      	addeq	r0, #4
 800cf7c:	0799      	lsls	r1, r3, #30
 800cf7e:	bf04      	itt	eq
 800cf80:	089b      	lsreq	r3, r3, #2
 800cf82:	3002      	addeq	r0, #2
 800cf84:	07d9      	lsls	r1, r3, #31
 800cf86:	d403      	bmi.n	800cf90 <__lo0bits+0x4e>
 800cf88:	085b      	lsrs	r3, r3, #1
 800cf8a:	f100 0001 	add.w	r0, r0, #1
 800cf8e:	d003      	beq.n	800cf98 <__lo0bits+0x56>
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	4770      	bx	lr
 800cf94:	2000      	movs	r0, #0
 800cf96:	4770      	bx	lr
 800cf98:	2020      	movs	r0, #32
 800cf9a:	4770      	bx	lr

0800cf9c <__i2b>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	f7ff febd 	bl	800cd20 <_Balloc>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	b928      	cbnz	r0, 800cfb6 <__i2b+0x1a>
 800cfaa:	4b05      	ldr	r3, [pc, #20]	@ (800cfc0 <__i2b+0x24>)
 800cfac:	4805      	ldr	r0, [pc, #20]	@ (800cfc4 <__i2b+0x28>)
 800cfae:	f240 1145 	movw	r1, #325	@ 0x145
 800cfb2:	f001 ffbd 	bl	800ef30 <__assert_func>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	6144      	str	r4, [r0, #20]
 800cfba:	6103      	str	r3, [r0, #16]
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	bf00      	nop
 800cfc0:	080101db 	.word	0x080101db
 800cfc4:	080101ec 	.word	0x080101ec

0800cfc8 <__multiply>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	4617      	mov	r7, r2
 800cfce:	690a      	ldr	r2, [r1, #16]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	bfa8      	it	ge
 800cfd6:	463b      	movge	r3, r7
 800cfd8:	4689      	mov	r9, r1
 800cfda:	bfa4      	itt	ge
 800cfdc:	460f      	movge	r7, r1
 800cfde:	4699      	movge	r9, r3
 800cfe0:	693d      	ldr	r5, [r7, #16]
 800cfe2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6879      	ldr	r1, [r7, #4]
 800cfea:	eb05 060a 	add.w	r6, r5, sl
 800cfee:	42b3      	cmp	r3, r6
 800cff0:	b085      	sub	sp, #20
 800cff2:	bfb8      	it	lt
 800cff4:	3101      	addlt	r1, #1
 800cff6:	f7ff fe93 	bl	800cd20 <_Balloc>
 800cffa:	b930      	cbnz	r0, 800d00a <__multiply+0x42>
 800cffc:	4602      	mov	r2, r0
 800cffe:	4b41      	ldr	r3, [pc, #260]	@ (800d104 <__multiply+0x13c>)
 800d000:	4841      	ldr	r0, [pc, #260]	@ (800d108 <__multiply+0x140>)
 800d002:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d006:	f001 ff93 	bl	800ef30 <__assert_func>
 800d00a:	f100 0414 	add.w	r4, r0, #20
 800d00e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d012:	4623      	mov	r3, r4
 800d014:	2200      	movs	r2, #0
 800d016:	4573      	cmp	r3, lr
 800d018:	d320      	bcc.n	800d05c <__multiply+0x94>
 800d01a:	f107 0814 	add.w	r8, r7, #20
 800d01e:	f109 0114 	add.w	r1, r9, #20
 800d022:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d026:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d02a:	9302      	str	r3, [sp, #8]
 800d02c:	1beb      	subs	r3, r5, r7
 800d02e:	3b15      	subs	r3, #21
 800d030:	f023 0303 	bic.w	r3, r3, #3
 800d034:	3304      	adds	r3, #4
 800d036:	3715      	adds	r7, #21
 800d038:	42bd      	cmp	r5, r7
 800d03a:	bf38      	it	cc
 800d03c:	2304      	movcc	r3, #4
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	9b02      	ldr	r3, [sp, #8]
 800d042:	9103      	str	r1, [sp, #12]
 800d044:	428b      	cmp	r3, r1
 800d046:	d80c      	bhi.n	800d062 <__multiply+0x9a>
 800d048:	2e00      	cmp	r6, #0
 800d04a:	dd03      	ble.n	800d054 <__multiply+0x8c>
 800d04c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d050:	2b00      	cmp	r3, #0
 800d052:	d055      	beq.n	800d100 <__multiply+0x138>
 800d054:	6106      	str	r6, [r0, #16]
 800d056:	b005      	add	sp, #20
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	f843 2b04 	str.w	r2, [r3], #4
 800d060:	e7d9      	b.n	800d016 <__multiply+0x4e>
 800d062:	f8b1 a000 	ldrh.w	sl, [r1]
 800d066:	f1ba 0f00 	cmp.w	sl, #0
 800d06a:	d01f      	beq.n	800d0ac <__multiply+0xe4>
 800d06c:	46c4      	mov	ip, r8
 800d06e:	46a1      	mov	r9, r4
 800d070:	2700      	movs	r7, #0
 800d072:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d076:	f8d9 3000 	ldr.w	r3, [r9]
 800d07a:	fa1f fb82 	uxth.w	fp, r2
 800d07e:	b29b      	uxth	r3, r3
 800d080:	fb0a 330b 	mla	r3, sl, fp, r3
 800d084:	443b      	add	r3, r7
 800d086:	f8d9 7000 	ldr.w	r7, [r9]
 800d08a:	0c12      	lsrs	r2, r2, #16
 800d08c:	0c3f      	lsrs	r7, r7, #16
 800d08e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d092:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d096:	b29b      	uxth	r3, r3
 800d098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d09c:	4565      	cmp	r5, ip
 800d09e:	f849 3b04 	str.w	r3, [r9], #4
 800d0a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d0a6:	d8e4      	bhi.n	800d072 <__multiply+0xaa>
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	50e7      	str	r7, [r4, r3]
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0b2:	3104      	adds	r1, #4
 800d0b4:	f1b9 0f00 	cmp.w	r9, #0
 800d0b8:	d020      	beq.n	800d0fc <__multiply+0x134>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	4647      	mov	r7, r8
 800d0be:	46a4      	mov	ip, r4
 800d0c0:	f04f 0a00 	mov.w	sl, #0
 800d0c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800d0c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d0cc:	fb09 220b 	mla	r2, r9, fp, r2
 800d0d0:	4452      	add	r2, sl
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0d8:	f84c 3b04 	str.w	r3, [ip], #4
 800d0dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800d0e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800d0e8:	fb09 330a 	mla	r3, r9, sl, r3
 800d0ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d0f0:	42bd      	cmp	r5, r7
 800d0f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0f6:	d8e5      	bhi.n	800d0c4 <__multiply+0xfc>
 800d0f8:	9a01      	ldr	r2, [sp, #4]
 800d0fa:	50a3      	str	r3, [r4, r2]
 800d0fc:	3404      	adds	r4, #4
 800d0fe:	e79f      	b.n	800d040 <__multiply+0x78>
 800d100:	3e01      	subs	r6, #1
 800d102:	e7a1      	b.n	800d048 <__multiply+0x80>
 800d104:	080101db 	.word	0x080101db
 800d108:	080101ec 	.word	0x080101ec

0800d10c <__pow5mult>:
 800d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d110:	4615      	mov	r5, r2
 800d112:	f012 0203 	ands.w	r2, r2, #3
 800d116:	4607      	mov	r7, r0
 800d118:	460e      	mov	r6, r1
 800d11a:	d007      	beq.n	800d12c <__pow5mult+0x20>
 800d11c:	4c25      	ldr	r4, [pc, #148]	@ (800d1b4 <__pow5mult+0xa8>)
 800d11e:	3a01      	subs	r2, #1
 800d120:	2300      	movs	r3, #0
 800d122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d126:	f7ff fe5d 	bl	800cde4 <__multadd>
 800d12a:	4606      	mov	r6, r0
 800d12c:	10ad      	asrs	r5, r5, #2
 800d12e:	d03d      	beq.n	800d1ac <__pow5mult+0xa0>
 800d130:	69fc      	ldr	r4, [r7, #28]
 800d132:	b97c      	cbnz	r4, 800d154 <__pow5mult+0x48>
 800d134:	2010      	movs	r0, #16
 800d136:	f7ff fd3d 	bl	800cbb4 <malloc>
 800d13a:	4602      	mov	r2, r0
 800d13c:	61f8      	str	r0, [r7, #28]
 800d13e:	b928      	cbnz	r0, 800d14c <__pow5mult+0x40>
 800d140:	4b1d      	ldr	r3, [pc, #116]	@ (800d1b8 <__pow5mult+0xac>)
 800d142:	481e      	ldr	r0, [pc, #120]	@ (800d1bc <__pow5mult+0xb0>)
 800d144:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d148:	f001 fef2 	bl	800ef30 <__assert_func>
 800d14c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d150:	6004      	str	r4, [r0, #0]
 800d152:	60c4      	str	r4, [r0, #12]
 800d154:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d15c:	b94c      	cbnz	r4, 800d172 <__pow5mult+0x66>
 800d15e:	f240 2171 	movw	r1, #625	@ 0x271
 800d162:	4638      	mov	r0, r7
 800d164:	f7ff ff1a 	bl	800cf9c <__i2b>
 800d168:	2300      	movs	r3, #0
 800d16a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d16e:	4604      	mov	r4, r0
 800d170:	6003      	str	r3, [r0, #0]
 800d172:	f04f 0900 	mov.w	r9, #0
 800d176:	07eb      	lsls	r3, r5, #31
 800d178:	d50a      	bpl.n	800d190 <__pow5mult+0x84>
 800d17a:	4631      	mov	r1, r6
 800d17c:	4622      	mov	r2, r4
 800d17e:	4638      	mov	r0, r7
 800d180:	f7ff ff22 	bl	800cfc8 <__multiply>
 800d184:	4631      	mov	r1, r6
 800d186:	4680      	mov	r8, r0
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff fe09 	bl	800cda0 <_Bfree>
 800d18e:	4646      	mov	r6, r8
 800d190:	106d      	asrs	r5, r5, #1
 800d192:	d00b      	beq.n	800d1ac <__pow5mult+0xa0>
 800d194:	6820      	ldr	r0, [r4, #0]
 800d196:	b938      	cbnz	r0, 800d1a8 <__pow5mult+0x9c>
 800d198:	4622      	mov	r2, r4
 800d19a:	4621      	mov	r1, r4
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7ff ff13 	bl	800cfc8 <__multiply>
 800d1a2:	6020      	str	r0, [r4, #0]
 800d1a4:	f8c0 9000 	str.w	r9, [r0]
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	e7e4      	b.n	800d176 <__pow5mult+0x6a>
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1b2:	bf00      	nop
 800d1b4:	08010318 	.word	0x08010318
 800d1b8:	0801016c 	.word	0x0801016c
 800d1bc:	080101ec 	.word	0x080101ec

0800d1c0 <__lshift>:
 800d1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	6849      	ldr	r1, [r1, #4]
 800d1c8:	6923      	ldr	r3, [r4, #16]
 800d1ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1ce:	68a3      	ldr	r3, [r4, #8]
 800d1d0:	4607      	mov	r7, r0
 800d1d2:	4691      	mov	r9, r2
 800d1d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1d8:	f108 0601 	add.w	r6, r8, #1
 800d1dc:	42b3      	cmp	r3, r6
 800d1de:	db0b      	blt.n	800d1f8 <__lshift+0x38>
 800d1e0:	4638      	mov	r0, r7
 800d1e2:	f7ff fd9d 	bl	800cd20 <_Balloc>
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	b948      	cbnz	r0, 800d1fe <__lshift+0x3e>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	4b28      	ldr	r3, [pc, #160]	@ (800d290 <__lshift+0xd0>)
 800d1ee:	4829      	ldr	r0, [pc, #164]	@ (800d294 <__lshift+0xd4>)
 800d1f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d1f4:	f001 fe9c 	bl	800ef30 <__assert_func>
 800d1f8:	3101      	adds	r1, #1
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	e7ee      	b.n	800d1dc <__lshift+0x1c>
 800d1fe:	2300      	movs	r3, #0
 800d200:	f100 0114 	add.w	r1, r0, #20
 800d204:	f100 0210 	add.w	r2, r0, #16
 800d208:	4618      	mov	r0, r3
 800d20a:	4553      	cmp	r3, sl
 800d20c:	db33      	blt.n	800d276 <__lshift+0xb6>
 800d20e:	6920      	ldr	r0, [r4, #16]
 800d210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d214:	f104 0314 	add.w	r3, r4, #20
 800d218:	f019 091f 	ands.w	r9, r9, #31
 800d21c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d224:	d02b      	beq.n	800d27e <__lshift+0xbe>
 800d226:	f1c9 0e20 	rsb	lr, r9, #32
 800d22a:	468a      	mov	sl, r1
 800d22c:	2200      	movs	r2, #0
 800d22e:	6818      	ldr	r0, [r3, #0]
 800d230:	fa00 f009 	lsl.w	r0, r0, r9
 800d234:	4310      	orrs	r0, r2
 800d236:	f84a 0b04 	str.w	r0, [sl], #4
 800d23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23e:	459c      	cmp	ip, r3
 800d240:	fa22 f20e 	lsr.w	r2, r2, lr
 800d244:	d8f3      	bhi.n	800d22e <__lshift+0x6e>
 800d246:	ebac 0304 	sub.w	r3, ip, r4
 800d24a:	3b15      	subs	r3, #21
 800d24c:	f023 0303 	bic.w	r3, r3, #3
 800d250:	3304      	adds	r3, #4
 800d252:	f104 0015 	add.w	r0, r4, #21
 800d256:	4560      	cmp	r0, ip
 800d258:	bf88      	it	hi
 800d25a:	2304      	movhi	r3, #4
 800d25c:	50ca      	str	r2, [r1, r3]
 800d25e:	b10a      	cbz	r2, 800d264 <__lshift+0xa4>
 800d260:	f108 0602 	add.w	r6, r8, #2
 800d264:	3e01      	subs	r6, #1
 800d266:	4638      	mov	r0, r7
 800d268:	612e      	str	r6, [r5, #16]
 800d26a:	4621      	mov	r1, r4
 800d26c:	f7ff fd98 	bl	800cda0 <_Bfree>
 800d270:	4628      	mov	r0, r5
 800d272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d276:	f842 0f04 	str.w	r0, [r2, #4]!
 800d27a:	3301      	adds	r3, #1
 800d27c:	e7c5      	b.n	800d20a <__lshift+0x4a>
 800d27e:	3904      	subs	r1, #4
 800d280:	f853 2b04 	ldr.w	r2, [r3], #4
 800d284:	f841 2f04 	str.w	r2, [r1, #4]!
 800d288:	459c      	cmp	ip, r3
 800d28a:	d8f9      	bhi.n	800d280 <__lshift+0xc0>
 800d28c:	e7ea      	b.n	800d264 <__lshift+0xa4>
 800d28e:	bf00      	nop
 800d290:	080101db 	.word	0x080101db
 800d294:	080101ec 	.word	0x080101ec

0800d298 <__mcmp>:
 800d298:	690a      	ldr	r2, [r1, #16]
 800d29a:	4603      	mov	r3, r0
 800d29c:	6900      	ldr	r0, [r0, #16]
 800d29e:	1a80      	subs	r0, r0, r2
 800d2a0:	b530      	push	{r4, r5, lr}
 800d2a2:	d10e      	bne.n	800d2c2 <__mcmp+0x2a>
 800d2a4:	3314      	adds	r3, #20
 800d2a6:	3114      	adds	r1, #20
 800d2a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2b8:	4295      	cmp	r5, r2
 800d2ba:	d003      	beq.n	800d2c4 <__mcmp+0x2c>
 800d2bc:	d205      	bcs.n	800d2ca <__mcmp+0x32>
 800d2be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2c2:	bd30      	pop	{r4, r5, pc}
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	d3f3      	bcc.n	800d2b0 <__mcmp+0x18>
 800d2c8:	e7fb      	b.n	800d2c2 <__mcmp+0x2a>
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	e7f9      	b.n	800d2c2 <__mcmp+0x2a>
	...

0800d2d0 <__mdiff>:
 800d2d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	4689      	mov	r9, r1
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	4611      	mov	r1, r2
 800d2da:	4648      	mov	r0, r9
 800d2dc:	4614      	mov	r4, r2
 800d2de:	f7ff ffdb 	bl	800d298 <__mcmp>
 800d2e2:	1e05      	subs	r5, r0, #0
 800d2e4:	d112      	bne.n	800d30c <__mdiff+0x3c>
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f7ff fd19 	bl	800cd20 <_Balloc>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	b928      	cbnz	r0, 800d2fe <__mdiff+0x2e>
 800d2f2:	4b3f      	ldr	r3, [pc, #252]	@ (800d3f0 <__mdiff+0x120>)
 800d2f4:	f240 2137 	movw	r1, #567	@ 0x237
 800d2f8:	483e      	ldr	r0, [pc, #248]	@ (800d3f4 <__mdiff+0x124>)
 800d2fa:	f001 fe19 	bl	800ef30 <__assert_func>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d304:	4610      	mov	r0, r2
 800d306:	b003      	add	sp, #12
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	bfbc      	itt	lt
 800d30e:	464b      	movlt	r3, r9
 800d310:	46a1      	movlt	r9, r4
 800d312:	4630      	mov	r0, r6
 800d314:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d318:	bfba      	itte	lt
 800d31a:	461c      	movlt	r4, r3
 800d31c:	2501      	movlt	r5, #1
 800d31e:	2500      	movge	r5, #0
 800d320:	f7ff fcfe 	bl	800cd20 <_Balloc>
 800d324:	4602      	mov	r2, r0
 800d326:	b918      	cbnz	r0, 800d330 <__mdiff+0x60>
 800d328:	4b31      	ldr	r3, [pc, #196]	@ (800d3f0 <__mdiff+0x120>)
 800d32a:	f240 2145 	movw	r1, #581	@ 0x245
 800d32e:	e7e3      	b.n	800d2f8 <__mdiff+0x28>
 800d330:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d334:	6926      	ldr	r6, [r4, #16]
 800d336:	60c5      	str	r5, [r0, #12]
 800d338:	f109 0310 	add.w	r3, r9, #16
 800d33c:	f109 0514 	add.w	r5, r9, #20
 800d340:	f104 0e14 	add.w	lr, r4, #20
 800d344:	f100 0b14 	add.w	fp, r0, #20
 800d348:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d34c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d350:	9301      	str	r3, [sp, #4]
 800d352:	46d9      	mov	r9, fp
 800d354:	f04f 0c00 	mov.w	ip, #0
 800d358:	9b01      	ldr	r3, [sp, #4]
 800d35a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d35e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d362:	9301      	str	r3, [sp, #4]
 800d364:	fa1f f38a 	uxth.w	r3, sl
 800d368:	4619      	mov	r1, r3
 800d36a:	b283      	uxth	r3, r0
 800d36c:	1acb      	subs	r3, r1, r3
 800d36e:	0c00      	lsrs	r0, r0, #16
 800d370:	4463      	add	r3, ip
 800d372:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d376:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d380:	4576      	cmp	r6, lr
 800d382:	f849 3b04 	str.w	r3, [r9], #4
 800d386:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d38a:	d8e5      	bhi.n	800d358 <__mdiff+0x88>
 800d38c:	1b33      	subs	r3, r6, r4
 800d38e:	3b15      	subs	r3, #21
 800d390:	f023 0303 	bic.w	r3, r3, #3
 800d394:	3415      	adds	r4, #21
 800d396:	3304      	adds	r3, #4
 800d398:	42a6      	cmp	r6, r4
 800d39a:	bf38      	it	cc
 800d39c:	2304      	movcc	r3, #4
 800d39e:	441d      	add	r5, r3
 800d3a0:	445b      	add	r3, fp
 800d3a2:	461e      	mov	r6, r3
 800d3a4:	462c      	mov	r4, r5
 800d3a6:	4544      	cmp	r4, r8
 800d3a8:	d30e      	bcc.n	800d3c8 <__mdiff+0xf8>
 800d3aa:	f108 0103 	add.w	r1, r8, #3
 800d3ae:	1b49      	subs	r1, r1, r5
 800d3b0:	f021 0103 	bic.w	r1, r1, #3
 800d3b4:	3d03      	subs	r5, #3
 800d3b6:	45a8      	cmp	r8, r5
 800d3b8:	bf38      	it	cc
 800d3ba:	2100      	movcc	r1, #0
 800d3bc:	440b      	add	r3, r1
 800d3be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3c2:	b191      	cbz	r1, 800d3ea <__mdiff+0x11a>
 800d3c4:	6117      	str	r7, [r2, #16]
 800d3c6:	e79d      	b.n	800d304 <__mdiff+0x34>
 800d3c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3cc:	46e6      	mov	lr, ip
 800d3ce:	0c08      	lsrs	r0, r1, #16
 800d3d0:	fa1c fc81 	uxtah	ip, ip, r1
 800d3d4:	4471      	add	r1, lr
 800d3d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3da:	b289      	uxth	r1, r1
 800d3dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3e0:	f846 1b04 	str.w	r1, [r6], #4
 800d3e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3e8:	e7dd      	b.n	800d3a6 <__mdiff+0xd6>
 800d3ea:	3f01      	subs	r7, #1
 800d3ec:	e7e7      	b.n	800d3be <__mdiff+0xee>
 800d3ee:	bf00      	nop
 800d3f0:	080101db 	.word	0x080101db
 800d3f4:	080101ec 	.word	0x080101ec

0800d3f8 <__ulp>:
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	ed8d 0b00 	vstr	d0, [sp]
 800d3fe:	9a01      	ldr	r2, [sp, #4]
 800d400:	4b0f      	ldr	r3, [pc, #60]	@ (800d440 <__ulp+0x48>)
 800d402:	4013      	ands	r3, r2
 800d404:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dc08      	bgt.n	800d41e <__ulp+0x26>
 800d40c:	425b      	negs	r3, r3
 800d40e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d412:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d416:	da04      	bge.n	800d422 <__ulp+0x2a>
 800d418:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d41c:	4113      	asrs	r3, r2
 800d41e:	2200      	movs	r2, #0
 800d420:	e008      	b.n	800d434 <__ulp+0x3c>
 800d422:	f1a2 0314 	sub.w	r3, r2, #20
 800d426:	2b1e      	cmp	r3, #30
 800d428:	bfda      	itte	le
 800d42a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d42e:	40da      	lsrle	r2, r3
 800d430:	2201      	movgt	r2, #1
 800d432:	2300      	movs	r3, #0
 800d434:	4619      	mov	r1, r3
 800d436:	4610      	mov	r0, r2
 800d438:	ec41 0b10 	vmov	d0, r0, r1
 800d43c:	b002      	add	sp, #8
 800d43e:	4770      	bx	lr
 800d440:	7ff00000 	.word	0x7ff00000

0800d444 <__b2d>:
 800d444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d448:	6906      	ldr	r6, [r0, #16]
 800d44a:	f100 0814 	add.w	r8, r0, #20
 800d44e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d452:	1f37      	subs	r7, r6, #4
 800d454:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d458:	4610      	mov	r0, r2
 800d45a:	f7ff fd53 	bl	800cf04 <__hi0bits>
 800d45e:	f1c0 0320 	rsb	r3, r0, #32
 800d462:	280a      	cmp	r0, #10
 800d464:	600b      	str	r3, [r1, #0]
 800d466:	491b      	ldr	r1, [pc, #108]	@ (800d4d4 <__b2d+0x90>)
 800d468:	dc15      	bgt.n	800d496 <__b2d+0x52>
 800d46a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d46e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d472:	45b8      	cmp	r8, r7
 800d474:	ea43 0501 	orr.w	r5, r3, r1
 800d478:	bf34      	ite	cc
 800d47a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d47e:	2300      	movcs	r3, #0
 800d480:	3015      	adds	r0, #21
 800d482:	fa02 f000 	lsl.w	r0, r2, r0
 800d486:	fa23 f30c 	lsr.w	r3, r3, ip
 800d48a:	4303      	orrs	r3, r0
 800d48c:	461c      	mov	r4, r3
 800d48e:	ec45 4b10 	vmov	d0, r4, r5
 800d492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d496:	45b8      	cmp	r8, r7
 800d498:	bf3a      	itte	cc
 800d49a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d49e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d4a2:	2300      	movcs	r3, #0
 800d4a4:	380b      	subs	r0, #11
 800d4a6:	d012      	beq.n	800d4ce <__b2d+0x8a>
 800d4a8:	f1c0 0120 	rsb	r1, r0, #32
 800d4ac:	fa23 f401 	lsr.w	r4, r3, r1
 800d4b0:	4082      	lsls	r2, r0
 800d4b2:	4322      	orrs	r2, r4
 800d4b4:	4547      	cmp	r7, r8
 800d4b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d4ba:	bf8c      	ite	hi
 800d4bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d4c0:	2200      	movls	r2, #0
 800d4c2:	4083      	lsls	r3, r0
 800d4c4:	40ca      	lsrs	r2, r1
 800d4c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	e7de      	b.n	800d48c <__b2d+0x48>
 800d4ce:	ea42 0501 	orr.w	r5, r2, r1
 800d4d2:	e7db      	b.n	800d48c <__b2d+0x48>
 800d4d4:	3ff00000 	.word	0x3ff00000

0800d4d8 <__d2b>:
 800d4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	460f      	mov	r7, r1
 800d4de:	2101      	movs	r1, #1
 800d4e0:	ec59 8b10 	vmov	r8, r9, d0
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	f7ff fc1b 	bl	800cd20 <_Balloc>
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	b930      	cbnz	r0, 800d4fc <__d2b+0x24>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	4b23      	ldr	r3, [pc, #140]	@ (800d580 <__d2b+0xa8>)
 800d4f2:	4824      	ldr	r0, [pc, #144]	@ (800d584 <__d2b+0xac>)
 800d4f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d4f8:	f001 fd1a 	bl	800ef30 <__assert_func>
 800d4fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d504:	b10d      	cbz	r5, 800d50a <__d2b+0x32>
 800d506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	f1b8 0300 	subs.w	r3, r8, #0
 800d510:	d023      	beq.n	800d55a <__d2b+0x82>
 800d512:	4668      	mov	r0, sp
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	f7ff fd14 	bl	800cf42 <__lo0bits>
 800d51a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d51e:	b1d0      	cbz	r0, 800d556 <__d2b+0x7e>
 800d520:	f1c0 0320 	rsb	r3, r0, #32
 800d524:	fa02 f303 	lsl.w	r3, r2, r3
 800d528:	430b      	orrs	r3, r1
 800d52a:	40c2      	lsrs	r2, r0
 800d52c:	6163      	str	r3, [r4, #20]
 800d52e:	9201      	str	r2, [sp, #4]
 800d530:	9b01      	ldr	r3, [sp, #4]
 800d532:	61a3      	str	r3, [r4, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	bf0c      	ite	eq
 800d538:	2201      	moveq	r2, #1
 800d53a:	2202      	movne	r2, #2
 800d53c:	6122      	str	r2, [r4, #16]
 800d53e:	b1a5      	cbz	r5, 800d56a <__d2b+0x92>
 800d540:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d544:	4405      	add	r5, r0
 800d546:	603d      	str	r5, [r7, #0]
 800d548:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d54c:	6030      	str	r0, [r6, #0]
 800d54e:	4620      	mov	r0, r4
 800d550:	b003      	add	sp, #12
 800d552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d556:	6161      	str	r1, [r4, #20]
 800d558:	e7ea      	b.n	800d530 <__d2b+0x58>
 800d55a:	a801      	add	r0, sp, #4
 800d55c:	f7ff fcf1 	bl	800cf42 <__lo0bits>
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	6163      	str	r3, [r4, #20]
 800d564:	3020      	adds	r0, #32
 800d566:	2201      	movs	r2, #1
 800d568:	e7e8      	b.n	800d53c <__d2b+0x64>
 800d56a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d56e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d572:	6038      	str	r0, [r7, #0]
 800d574:	6918      	ldr	r0, [r3, #16]
 800d576:	f7ff fcc5 	bl	800cf04 <__hi0bits>
 800d57a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d57e:	e7e5      	b.n	800d54c <__d2b+0x74>
 800d580:	080101db 	.word	0x080101db
 800d584:	080101ec 	.word	0x080101ec

0800d588 <__ratio>:
 800d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	b085      	sub	sp, #20
 800d58e:	e9cd 1000 	strd	r1, r0, [sp]
 800d592:	a902      	add	r1, sp, #8
 800d594:	f7ff ff56 	bl	800d444 <__b2d>
 800d598:	9800      	ldr	r0, [sp, #0]
 800d59a:	a903      	add	r1, sp, #12
 800d59c:	ec55 4b10 	vmov	r4, r5, d0
 800d5a0:	f7ff ff50 	bl	800d444 <__b2d>
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	6919      	ldr	r1, [r3, #16]
 800d5a8:	9b00      	ldr	r3, [sp, #0]
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	1ac9      	subs	r1, r1, r3
 800d5ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d5b2:	1a9b      	subs	r3, r3, r2
 800d5b4:	ec5b ab10 	vmov	sl, fp, d0
 800d5b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	bfce      	itee	gt
 800d5c0:	462a      	movgt	r2, r5
 800d5c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d5c6:	465a      	movle	r2, fp
 800d5c8:	462f      	mov	r7, r5
 800d5ca:	46d9      	mov	r9, fp
 800d5cc:	bfcc      	ite	gt
 800d5ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d5d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d5d6:	464b      	mov	r3, r9
 800d5d8:	4652      	mov	r2, sl
 800d5da:	4620      	mov	r0, r4
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f3 f965 	bl	80008ac <__aeabi_ddiv>
 800d5e2:	ec41 0b10 	vmov	d0, r0, r1
 800d5e6:	b005      	add	sp, #20
 800d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5ec <__copybits>:
 800d5ec:	3901      	subs	r1, #1
 800d5ee:	b570      	push	{r4, r5, r6, lr}
 800d5f0:	1149      	asrs	r1, r1, #5
 800d5f2:	6914      	ldr	r4, [r2, #16]
 800d5f4:	3101      	adds	r1, #1
 800d5f6:	f102 0314 	add.w	r3, r2, #20
 800d5fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d602:	1f05      	subs	r5, r0, #4
 800d604:	42a3      	cmp	r3, r4
 800d606:	d30c      	bcc.n	800d622 <__copybits+0x36>
 800d608:	1aa3      	subs	r3, r4, r2
 800d60a:	3b11      	subs	r3, #17
 800d60c:	f023 0303 	bic.w	r3, r3, #3
 800d610:	3211      	adds	r2, #17
 800d612:	42a2      	cmp	r2, r4
 800d614:	bf88      	it	hi
 800d616:	2300      	movhi	r3, #0
 800d618:	4418      	add	r0, r3
 800d61a:	2300      	movs	r3, #0
 800d61c:	4288      	cmp	r0, r1
 800d61e:	d305      	bcc.n	800d62c <__copybits+0x40>
 800d620:	bd70      	pop	{r4, r5, r6, pc}
 800d622:	f853 6b04 	ldr.w	r6, [r3], #4
 800d626:	f845 6f04 	str.w	r6, [r5, #4]!
 800d62a:	e7eb      	b.n	800d604 <__copybits+0x18>
 800d62c:	f840 3b04 	str.w	r3, [r0], #4
 800d630:	e7f4      	b.n	800d61c <__copybits+0x30>

0800d632 <__any_on>:
 800d632:	f100 0214 	add.w	r2, r0, #20
 800d636:	6900      	ldr	r0, [r0, #16]
 800d638:	114b      	asrs	r3, r1, #5
 800d63a:	4298      	cmp	r0, r3
 800d63c:	b510      	push	{r4, lr}
 800d63e:	db11      	blt.n	800d664 <__any_on+0x32>
 800d640:	dd0a      	ble.n	800d658 <__any_on+0x26>
 800d642:	f011 011f 	ands.w	r1, r1, #31
 800d646:	d007      	beq.n	800d658 <__any_on+0x26>
 800d648:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d64c:	fa24 f001 	lsr.w	r0, r4, r1
 800d650:	fa00 f101 	lsl.w	r1, r0, r1
 800d654:	428c      	cmp	r4, r1
 800d656:	d10b      	bne.n	800d670 <__any_on+0x3e>
 800d658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d803      	bhi.n	800d668 <__any_on+0x36>
 800d660:	2000      	movs	r0, #0
 800d662:	bd10      	pop	{r4, pc}
 800d664:	4603      	mov	r3, r0
 800d666:	e7f7      	b.n	800d658 <__any_on+0x26>
 800d668:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d66c:	2900      	cmp	r1, #0
 800d66e:	d0f5      	beq.n	800d65c <__any_on+0x2a>
 800d670:	2001      	movs	r0, #1
 800d672:	e7f6      	b.n	800d662 <__any_on+0x30>

0800d674 <sulp>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	4604      	mov	r4, r0
 800d678:	460d      	mov	r5, r1
 800d67a:	ec45 4b10 	vmov	d0, r4, r5
 800d67e:	4616      	mov	r6, r2
 800d680:	f7ff feba 	bl	800d3f8 <__ulp>
 800d684:	ec51 0b10 	vmov	r0, r1, d0
 800d688:	b17e      	cbz	r6, 800d6aa <sulp+0x36>
 800d68a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d68e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d692:	2b00      	cmp	r3, #0
 800d694:	dd09      	ble.n	800d6aa <sulp+0x36>
 800d696:	051b      	lsls	r3, r3, #20
 800d698:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d69c:	2400      	movs	r4, #0
 800d69e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	f7f2 ffd7 	bl	8000658 <__aeabi_dmul>
 800d6aa:	ec41 0b10 	vmov	d0, r0, r1
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}

0800d6b0 <_strtod_l>:
 800d6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	b09f      	sub	sp, #124	@ 0x7c
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800d6be:	9005      	str	r0, [sp, #20]
 800d6c0:	f04f 0a00 	mov.w	sl, #0
 800d6c4:	f04f 0b00 	mov.w	fp, #0
 800d6c8:	460a      	mov	r2, r1
 800d6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6cc:	7811      	ldrb	r1, [r2, #0]
 800d6ce:	292b      	cmp	r1, #43	@ 0x2b
 800d6d0:	d04a      	beq.n	800d768 <_strtod_l+0xb8>
 800d6d2:	d838      	bhi.n	800d746 <_strtod_l+0x96>
 800d6d4:	290d      	cmp	r1, #13
 800d6d6:	d832      	bhi.n	800d73e <_strtod_l+0x8e>
 800d6d8:	2908      	cmp	r1, #8
 800d6da:	d832      	bhi.n	800d742 <_strtod_l+0x92>
 800d6dc:	2900      	cmp	r1, #0
 800d6de:	d03b      	beq.n	800d758 <_strtod_l+0xa8>
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d6e6:	782a      	ldrb	r2, [r5, #0]
 800d6e8:	2a30      	cmp	r2, #48	@ 0x30
 800d6ea:	f040 80b2 	bne.w	800d852 <_strtod_l+0x1a2>
 800d6ee:	786a      	ldrb	r2, [r5, #1]
 800d6f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6f4:	2a58      	cmp	r2, #88	@ 0x58
 800d6f6:	d16e      	bne.n	800d7d6 <_strtod_l+0x126>
 800d6f8:	9302      	str	r3, [sp, #8]
 800d6fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	4a8f      	ldr	r2, [pc, #572]	@ (800d940 <_strtod_l+0x290>)
 800d704:	9805      	ldr	r0, [sp, #20]
 800d706:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d708:	a919      	add	r1, sp, #100	@ 0x64
 800d70a:	f001 fcab 	bl	800f064 <__gethex>
 800d70e:	f010 060f 	ands.w	r6, r0, #15
 800d712:	4604      	mov	r4, r0
 800d714:	d005      	beq.n	800d722 <_strtod_l+0x72>
 800d716:	2e06      	cmp	r6, #6
 800d718:	d128      	bne.n	800d76c <_strtod_l+0xbc>
 800d71a:	3501      	adds	r5, #1
 800d71c:	2300      	movs	r3, #0
 800d71e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d720:	930e      	str	r3, [sp, #56]	@ 0x38
 800d722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d724:	2b00      	cmp	r3, #0
 800d726:	f040 858e 	bne.w	800e246 <_strtod_l+0xb96>
 800d72a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d72c:	b1cb      	cbz	r3, 800d762 <_strtod_l+0xb2>
 800d72e:	4652      	mov	r2, sl
 800d730:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d734:	ec43 2b10 	vmov	d0, r2, r3
 800d738:	b01f      	add	sp, #124	@ 0x7c
 800d73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73e:	2920      	cmp	r1, #32
 800d740:	d1ce      	bne.n	800d6e0 <_strtod_l+0x30>
 800d742:	3201      	adds	r2, #1
 800d744:	e7c1      	b.n	800d6ca <_strtod_l+0x1a>
 800d746:	292d      	cmp	r1, #45	@ 0x2d
 800d748:	d1ca      	bne.n	800d6e0 <_strtod_l+0x30>
 800d74a:	2101      	movs	r1, #1
 800d74c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d74e:	1c51      	adds	r1, r2, #1
 800d750:	9119      	str	r1, [sp, #100]	@ 0x64
 800d752:	7852      	ldrb	r2, [r2, #1]
 800d754:	2a00      	cmp	r2, #0
 800d756:	d1c5      	bne.n	800d6e4 <_strtod_l+0x34>
 800d758:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d75a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f040 8570 	bne.w	800e242 <_strtod_l+0xb92>
 800d762:	4652      	mov	r2, sl
 800d764:	465b      	mov	r3, fp
 800d766:	e7e5      	b.n	800d734 <_strtod_l+0x84>
 800d768:	2100      	movs	r1, #0
 800d76a:	e7ef      	b.n	800d74c <_strtod_l+0x9c>
 800d76c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d76e:	b13a      	cbz	r2, 800d780 <_strtod_l+0xd0>
 800d770:	2135      	movs	r1, #53	@ 0x35
 800d772:	a81c      	add	r0, sp, #112	@ 0x70
 800d774:	f7ff ff3a 	bl	800d5ec <__copybits>
 800d778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d77a:	9805      	ldr	r0, [sp, #20]
 800d77c:	f7ff fb10 	bl	800cda0 <_Bfree>
 800d780:	3e01      	subs	r6, #1
 800d782:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d784:	2e04      	cmp	r6, #4
 800d786:	d806      	bhi.n	800d796 <_strtod_l+0xe6>
 800d788:	e8df f006 	tbb	[pc, r6]
 800d78c:	201d0314 	.word	0x201d0314
 800d790:	14          	.byte	0x14
 800d791:	00          	.byte	0x00
 800d792:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d796:	05e1      	lsls	r1, r4, #23
 800d798:	bf48      	it	mi
 800d79a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d79e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7a2:	0d1b      	lsrs	r3, r3, #20
 800d7a4:	051b      	lsls	r3, r3, #20
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1bb      	bne.n	800d722 <_strtod_l+0x72>
 800d7aa:	f7fe fb1f 	bl	800bdec <__errno>
 800d7ae:	2322      	movs	r3, #34	@ 0x22
 800d7b0:	6003      	str	r3, [r0, #0]
 800d7b2:	e7b6      	b.n	800d722 <_strtod_l+0x72>
 800d7b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d7b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d7bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d7c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d7c4:	e7e7      	b.n	800d796 <_strtod_l+0xe6>
 800d7c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d948 <_strtod_l+0x298>
 800d7ca:	e7e4      	b.n	800d796 <_strtod_l+0xe6>
 800d7cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d7d0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d7d4:	e7df      	b.n	800d796 <_strtod_l+0xe6>
 800d7d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7dc:	785b      	ldrb	r3, [r3, #1]
 800d7de:	2b30      	cmp	r3, #48	@ 0x30
 800d7e0:	d0f9      	beq.n	800d7d6 <_strtod_l+0x126>
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d09d      	beq.n	800d722 <_strtod_l+0x72>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	2700      	movs	r7, #0
 800d7ea:	9308      	str	r3, [sp, #32]
 800d7ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d7f2:	46b9      	mov	r9, r7
 800d7f4:	220a      	movs	r2, #10
 800d7f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d7f8:	7805      	ldrb	r5, [r0, #0]
 800d7fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d7fe:	b2d9      	uxtb	r1, r3
 800d800:	2909      	cmp	r1, #9
 800d802:	d928      	bls.n	800d856 <_strtod_l+0x1a6>
 800d804:	494f      	ldr	r1, [pc, #316]	@ (800d944 <_strtod_l+0x294>)
 800d806:	2201      	movs	r2, #1
 800d808:	f001 fb67 	bl	800eeda <strncmp>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d032      	beq.n	800d876 <_strtod_l+0x1c6>
 800d810:	2000      	movs	r0, #0
 800d812:	462a      	mov	r2, r5
 800d814:	900a      	str	r0, [sp, #40]	@ 0x28
 800d816:	464d      	mov	r5, r9
 800d818:	4603      	mov	r3, r0
 800d81a:	2a65      	cmp	r2, #101	@ 0x65
 800d81c:	d001      	beq.n	800d822 <_strtod_l+0x172>
 800d81e:	2a45      	cmp	r2, #69	@ 0x45
 800d820:	d114      	bne.n	800d84c <_strtod_l+0x19c>
 800d822:	b91d      	cbnz	r5, 800d82c <_strtod_l+0x17c>
 800d824:	9a08      	ldr	r2, [sp, #32]
 800d826:	4302      	orrs	r2, r0
 800d828:	d096      	beq.n	800d758 <_strtod_l+0xa8>
 800d82a:	2500      	movs	r5, #0
 800d82c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d82e:	1c62      	adds	r2, r4, #1
 800d830:	9219      	str	r2, [sp, #100]	@ 0x64
 800d832:	7862      	ldrb	r2, [r4, #1]
 800d834:	2a2b      	cmp	r2, #43	@ 0x2b
 800d836:	d07a      	beq.n	800d92e <_strtod_l+0x27e>
 800d838:	2a2d      	cmp	r2, #45	@ 0x2d
 800d83a:	d07e      	beq.n	800d93a <_strtod_l+0x28a>
 800d83c:	f04f 0c00 	mov.w	ip, #0
 800d840:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d844:	2909      	cmp	r1, #9
 800d846:	f240 8085 	bls.w	800d954 <_strtod_l+0x2a4>
 800d84a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d84c:	f04f 0800 	mov.w	r8, #0
 800d850:	e0a5      	b.n	800d99e <_strtod_l+0x2ee>
 800d852:	2300      	movs	r3, #0
 800d854:	e7c8      	b.n	800d7e8 <_strtod_l+0x138>
 800d856:	f1b9 0f08 	cmp.w	r9, #8
 800d85a:	bfd8      	it	le
 800d85c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d85e:	f100 0001 	add.w	r0, r0, #1
 800d862:	bfda      	itte	le
 800d864:	fb02 3301 	mlale	r3, r2, r1, r3
 800d868:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d86a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d86e:	f109 0901 	add.w	r9, r9, #1
 800d872:	9019      	str	r0, [sp, #100]	@ 0x64
 800d874:	e7bf      	b.n	800d7f6 <_strtod_l+0x146>
 800d876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d87c:	785a      	ldrb	r2, [r3, #1]
 800d87e:	f1b9 0f00 	cmp.w	r9, #0
 800d882:	d03b      	beq.n	800d8fc <_strtod_l+0x24c>
 800d884:	900a      	str	r0, [sp, #40]	@ 0x28
 800d886:	464d      	mov	r5, r9
 800d888:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d88c:	2b09      	cmp	r3, #9
 800d88e:	d912      	bls.n	800d8b6 <_strtod_l+0x206>
 800d890:	2301      	movs	r3, #1
 800d892:	e7c2      	b.n	800d81a <_strtod_l+0x16a>
 800d894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	9219      	str	r2, [sp, #100]	@ 0x64
 800d89a:	785a      	ldrb	r2, [r3, #1]
 800d89c:	3001      	adds	r0, #1
 800d89e:	2a30      	cmp	r2, #48	@ 0x30
 800d8a0:	d0f8      	beq.n	800d894 <_strtod_l+0x1e4>
 800d8a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d8a6:	2b08      	cmp	r3, #8
 800d8a8:	f200 84d2 	bhi.w	800e250 <_strtod_l+0xba0>
 800d8ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	3a30      	subs	r2, #48	@ 0x30
 800d8b8:	f100 0301 	add.w	r3, r0, #1
 800d8bc:	d018      	beq.n	800d8f0 <_strtod_l+0x240>
 800d8be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8c0:	4419      	add	r1, r3
 800d8c2:	910a      	str	r1, [sp, #40]	@ 0x28
 800d8c4:	462e      	mov	r6, r5
 800d8c6:	f04f 0e0a 	mov.w	lr, #10
 800d8ca:	1c71      	adds	r1, r6, #1
 800d8cc:	eba1 0c05 	sub.w	ip, r1, r5
 800d8d0:	4563      	cmp	r3, ip
 800d8d2:	dc15      	bgt.n	800d900 <_strtod_l+0x250>
 800d8d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d8d8:	182b      	adds	r3, r5, r0
 800d8da:	2b08      	cmp	r3, #8
 800d8dc:	f105 0501 	add.w	r5, r5, #1
 800d8e0:	4405      	add	r5, r0
 800d8e2:	dc1a      	bgt.n	800d91a <_strtod_l+0x26a>
 800d8e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8e6:	230a      	movs	r3, #10
 800d8e8:	fb03 2301 	mla	r3, r3, r1, r2
 800d8ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8f2:	1c51      	adds	r1, r2, #1
 800d8f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8f6:	7852      	ldrb	r2, [r2, #1]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	e7c5      	b.n	800d888 <_strtod_l+0x1d8>
 800d8fc:	4648      	mov	r0, r9
 800d8fe:	e7ce      	b.n	800d89e <_strtod_l+0x1ee>
 800d900:	2e08      	cmp	r6, #8
 800d902:	dc05      	bgt.n	800d910 <_strtod_l+0x260>
 800d904:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d906:	fb0e f606 	mul.w	r6, lr, r6
 800d90a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d90c:	460e      	mov	r6, r1
 800d90e:	e7dc      	b.n	800d8ca <_strtod_l+0x21a>
 800d910:	2910      	cmp	r1, #16
 800d912:	bfd8      	it	le
 800d914:	fb0e f707 	mulle.w	r7, lr, r7
 800d918:	e7f8      	b.n	800d90c <_strtod_l+0x25c>
 800d91a:	2b0f      	cmp	r3, #15
 800d91c:	bfdc      	itt	le
 800d91e:	230a      	movle	r3, #10
 800d920:	fb03 2707 	mlale	r7, r3, r7, r2
 800d924:	e7e3      	b.n	800d8ee <_strtod_l+0x23e>
 800d926:	2300      	movs	r3, #0
 800d928:	930a      	str	r3, [sp, #40]	@ 0x28
 800d92a:	2301      	movs	r3, #1
 800d92c:	e77a      	b.n	800d824 <_strtod_l+0x174>
 800d92e:	f04f 0c00 	mov.w	ip, #0
 800d932:	1ca2      	adds	r2, r4, #2
 800d934:	9219      	str	r2, [sp, #100]	@ 0x64
 800d936:	78a2      	ldrb	r2, [r4, #2]
 800d938:	e782      	b.n	800d840 <_strtod_l+0x190>
 800d93a:	f04f 0c01 	mov.w	ip, #1
 800d93e:	e7f8      	b.n	800d932 <_strtod_l+0x282>
 800d940:	0801042c 	.word	0x0801042c
 800d944:	08010245 	.word	0x08010245
 800d948:	7ff00000 	.word	0x7ff00000
 800d94c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d94e:	1c51      	adds	r1, r2, #1
 800d950:	9119      	str	r1, [sp, #100]	@ 0x64
 800d952:	7852      	ldrb	r2, [r2, #1]
 800d954:	2a30      	cmp	r2, #48	@ 0x30
 800d956:	d0f9      	beq.n	800d94c <_strtod_l+0x29c>
 800d958:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d95c:	2908      	cmp	r1, #8
 800d95e:	f63f af75 	bhi.w	800d84c <_strtod_l+0x19c>
 800d962:	3a30      	subs	r2, #48	@ 0x30
 800d964:	9209      	str	r2, [sp, #36]	@ 0x24
 800d966:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d968:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d96a:	f04f 080a 	mov.w	r8, #10
 800d96e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d970:	1c56      	adds	r6, r2, #1
 800d972:	9619      	str	r6, [sp, #100]	@ 0x64
 800d974:	7852      	ldrb	r2, [r2, #1]
 800d976:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d97a:	f1be 0f09 	cmp.w	lr, #9
 800d97e:	d939      	bls.n	800d9f4 <_strtod_l+0x344>
 800d980:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d982:	1a76      	subs	r6, r6, r1
 800d984:	2e08      	cmp	r6, #8
 800d986:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d98a:	dc03      	bgt.n	800d994 <_strtod_l+0x2e4>
 800d98c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d98e:	4588      	cmp	r8, r1
 800d990:	bfa8      	it	ge
 800d992:	4688      	movge	r8, r1
 800d994:	f1bc 0f00 	cmp.w	ip, #0
 800d998:	d001      	beq.n	800d99e <_strtod_l+0x2ee>
 800d99a:	f1c8 0800 	rsb	r8, r8, #0
 800d99e:	2d00      	cmp	r5, #0
 800d9a0:	d14e      	bne.n	800da40 <_strtod_l+0x390>
 800d9a2:	9908      	ldr	r1, [sp, #32]
 800d9a4:	4308      	orrs	r0, r1
 800d9a6:	f47f aebc 	bne.w	800d722 <_strtod_l+0x72>
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f47f aed4 	bne.w	800d758 <_strtod_l+0xa8>
 800d9b0:	2a69      	cmp	r2, #105	@ 0x69
 800d9b2:	d028      	beq.n	800da06 <_strtod_l+0x356>
 800d9b4:	dc25      	bgt.n	800da02 <_strtod_l+0x352>
 800d9b6:	2a49      	cmp	r2, #73	@ 0x49
 800d9b8:	d025      	beq.n	800da06 <_strtod_l+0x356>
 800d9ba:	2a4e      	cmp	r2, #78	@ 0x4e
 800d9bc:	f47f aecc 	bne.w	800d758 <_strtod_l+0xa8>
 800d9c0:	499a      	ldr	r1, [pc, #616]	@ (800dc2c <_strtod_l+0x57c>)
 800d9c2:	a819      	add	r0, sp, #100	@ 0x64
 800d9c4:	f001 fd70 	bl	800f4a8 <__match>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f43f aec5 	beq.w	800d758 <_strtod_l+0xa8>
 800d9ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b28      	cmp	r3, #40	@ 0x28
 800d9d4:	d12e      	bne.n	800da34 <_strtod_l+0x384>
 800d9d6:	4996      	ldr	r1, [pc, #600]	@ (800dc30 <_strtod_l+0x580>)
 800d9d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d9da:	a819      	add	r0, sp, #100	@ 0x64
 800d9dc:	f001 fd78 	bl	800f4d0 <__hexnan>
 800d9e0:	2805      	cmp	r0, #5
 800d9e2:	d127      	bne.n	800da34 <_strtod_l+0x384>
 800d9e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d9e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d9ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d9ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d9f2:	e696      	b.n	800d722 <_strtod_l+0x72>
 800d9f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9f6:	fb08 2101 	mla	r1, r8, r1, r2
 800d9fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800da00:	e7b5      	b.n	800d96e <_strtod_l+0x2be>
 800da02:	2a6e      	cmp	r2, #110	@ 0x6e
 800da04:	e7da      	b.n	800d9bc <_strtod_l+0x30c>
 800da06:	498b      	ldr	r1, [pc, #556]	@ (800dc34 <_strtod_l+0x584>)
 800da08:	a819      	add	r0, sp, #100	@ 0x64
 800da0a:	f001 fd4d 	bl	800f4a8 <__match>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f43f aea2 	beq.w	800d758 <_strtod_l+0xa8>
 800da14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da16:	4988      	ldr	r1, [pc, #544]	@ (800dc38 <_strtod_l+0x588>)
 800da18:	3b01      	subs	r3, #1
 800da1a:	a819      	add	r0, sp, #100	@ 0x64
 800da1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800da1e:	f001 fd43 	bl	800f4a8 <__match>
 800da22:	b910      	cbnz	r0, 800da2a <_strtod_l+0x37a>
 800da24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da26:	3301      	adds	r3, #1
 800da28:	9319      	str	r3, [sp, #100]	@ 0x64
 800da2a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dc48 <_strtod_l+0x598>
 800da2e:	f04f 0a00 	mov.w	sl, #0
 800da32:	e676      	b.n	800d722 <_strtod_l+0x72>
 800da34:	4881      	ldr	r0, [pc, #516]	@ (800dc3c <_strtod_l+0x58c>)
 800da36:	f001 fa73 	bl	800ef20 <nan>
 800da3a:	ec5b ab10 	vmov	sl, fp, d0
 800da3e:	e670      	b.n	800d722 <_strtod_l+0x72>
 800da40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800da44:	eba8 0303 	sub.w	r3, r8, r3
 800da48:	f1b9 0f00 	cmp.w	r9, #0
 800da4c:	bf08      	it	eq
 800da4e:	46a9      	moveq	r9, r5
 800da50:	2d10      	cmp	r5, #16
 800da52:	9309      	str	r3, [sp, #36]	@ 0x24
 800da54:	462c      	mov	r4, r5
 800da56:	bfa8      	it	ge
 800da58:	2410      	movge	r4, #16
 800da5a:	f7f2 fd83 	bl	8000564 <__aeabi_ui2d>
 800da5e:	2d09      	cmp	r5, #9
 800da60:	4682      	mov	sl, r0
 800da62:	468b      	mov	fp, r1
 800da64:	dc13      	bgt.n	800da8e <_strtod_l+0x3de>
 800da66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f43f ae5a 	beq.w	800d722 <_strtod_l+0x72>
 800da6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da70:	dd78      	ble.n	800db64 <_strtod_l+0x4b4>
 800da72:	2b16      	cmp	r3, #22
 800da74:	dc5f      	bgt.n	800db36 <_strtod_l+0x486>
 800da76:	4972      	ldr	r1, [pc, #456]	@ (800dc40 <_strtod_l+0x590>)
 800da78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da80:	4652      	mov	r2, sl
 800da82:	465b      	mov	r3, fp
 800da84:	f7f2 fde8 	bl	8000658 <__aeabi_dmul>
 800da88:	4682      	mov	sl, r0
 800da8a:	468b      	mov	fp, r1
 800da8c:	e649      	b.n	800d722 <_strtod_l+0x72>
 800da8e:	4b6c      	ldr	r3, [pc, #432]	@ (800dc40 <_strtod_l+0x590>)
 800da90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800da98:	f7f2 fdde 	bl	8000658 <__aeabi_dmul>
 800da9c:	4682      	mov	sl, r0
 800da9e:	4638      	mov	r0, r7
 800daa0:	468b      	mov	fp, r1
 800daa2:	f7f2 fd5f 	bl	8000564 <__aeabi_ui2d>
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4650      	mov	r0, sl
 800daac:	4659      	mov	r1, fp
 800daae:	f7f2 fc1d 	bl	80002ec <__adddf3>
 800dab2:	2d0f      	cmp	r5, #15
 800dab4:	4682      	mov	sl, r0
 800dab6:	468b      	mov	fp, r1
 800dab8:	ddd5      	ble.n	800da66 <_strtod_l+0x3b6>
 800daba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dabc:	1b2c      	subs	r4, r5, r4
 800dabe:	441c      	add	r4, r3
 800dac0:	2c00      	cmp	r4, #0
 800dac2:	f340 8093 	ble.w	800dbec <_strtod_l+0x53c>
 800dac6:	f014 030f 	ands.w	r3, r4, #15
 800daca:	d00a      	beq.n	800dae2 <_strtod_l+0x432>
 800dacc:	495c      	ldr	r1, [pc, #368]	@ (800dc40 <_strtod_l+0x590>)
 800dace:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dad2:	4652      	mov	r2, sl
 800dad4:	465b      	mov	r3, fp
 800dad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dada:	f7f2 fdbd 	bl	8000658 <__aeabi_dmul>
 800dade:	4682      	mov	sl, r0
 800dae0:	468b      	mov	fp, r1
 800dae2:	f034 040f 	bics.w	r4, r4, #15
 800dae6:	d073      	beq.n	800dbd0 <_strtod_l+0x520>
 800dae8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800daec:	dd49      	ble.n	800db82 <_strtod_l+0x4d2>
 800daee:	2400      	movs	r4, #0
 800daf0:	46a0      	mov	r8, r4
 800daf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800daf4:	46a1      	mov	r9, r4
 800daf6:	9a05      	ldr	r2, [sp, #20]
 800daf8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dc48 <_strtod_l+0x598>
 800dafc:	2322      	movs	r3, #34	@ 0x22
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	f04f 0a00 	mov.w	sl, #0
 800db04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db06:	2b00      	cmp	r3, #0
 800db08:	f43f ae0b 	beq.w	800d722 <_strtod_l+0x72>
 800db0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db0e:	9805      	ldr	r0, [sp, #20]
 800db10:	f7ff f946 	bl	800cda0 <_Bfree>
 800db14:	9805      	ldr	r0, [sp, #20]
 800db16:	4649      	mov	r1, r9
 800db18:	f7ff f942 	bl	800cda0 <_Bfree>
 800db1c:	9805      	ldr	r0, [sp, #20]
 800db1e:	4641      	mov	r1, r8
 800db20:	f7ff f93e 	bl	800cda0 <_Bfree>
 800db24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db26:	9805      	ldr	r0, [sp, #20]
 800db28:	f7ff f93a 	bl	800cda0 <_Bfree>
 800db2c:	9805      	ldr	r0, [sp, #20]
 800db2e:	4621      	mov	r1, r4
 800db30:	f7ff f936 	bl	800cda0 <_Bfree>
 800db34:	e5f5      	b.n	800d722 <_strtod_l+0x72>
 800db36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800db3c:	4293      	cmp	r3, r2
 800db3e:	dbbc      	blt.n	800daba <_strtod_l+0x40a>
 800db40:	4c3f      	ldr	r4, [pc, #252]	@ (800dc40 <_strtod_l+0x590>)
 800db42:	f1c5 050f 	rsb	r5, r5, #15
 800db46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800db4a:	4652      	mov	r2, sl
 800db4c:	465b      	mov	r3, fp
 800db4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db52:	f7f2 fd81 	bl	8000658 <__aeabi_dmul>
 800db56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db58:	1b5d      	subs	r5, r3, r5
 800db5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800db5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800db62:	e78f      	b.n	800da84 <_strtod_l+0x3d4>
 800db64:	3316      	adds	r3, #22
 800db66:	dba8      	blt.n	800daba <_strtod_l+0x40a>
 800db68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6a:	eba3 0808 	sub.w	r8, r3, r8
 800db6e:	4b34      	ldr	r3, [pc, #208]	@ (800dc40 <_strtod_l+0x590>)
 800db70:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800db74:	e9d8 2300 	ldrd	r2, r3, [r8]
 800db78:	4650      	mov	r0, sl
 800db7a:	4659      	mov	r1, fp
 800db7c:	f7f2 fe96 	bl	80008ac <__aeabi_ddiv>
 800db80:	e782      	b.n	800da88 <_strtod_l+0x3d8>
 800db82:	2300      	movs	r3, #0
 800db84:	4f2f      	ldr	r7, [pc, #188]	@ (800dc44 <_strtod_l+0x594>)
 800db86:	1124      	asrs	r4, r4, #4
 800db88:	4650      	mov	r0, sl
 800db8a:	4659      	mov	r1, fp
 800db8c:	461e      	mov	r6, r3
 800db8e:	2c01      	cmp	r4, #1
 800db90:	dc21      	bgt.n	800dbd6 <_strtod_l+0x526>
 800db92:	b10b      	cbz	r3, 800db98 <_strtod_l+0x4e8>
 800db94:	4682      	mov	sl, r0
 800db96:	468b      	mov	fp, r1
 800db98:	492a      	ldr	r1, [pc, #168]	@ (800dc44 <_strtod_l+0x594>)
 800db9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800db9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dba2:	4652      	mov	r2, sl
 800dba4:	465b      	mov	r3, fp
 800dba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbaa:	f7f2 fd55 	bl	8000658 <__aeabi_dmul>
 800dbae:	4b26      	ldr	r3, [pc, #152]	@ (800dc48 <_strtod_l+0x598>)
 800dbb0:	460a      	mov	r2, r1
 800dbb2:	400b      	ands	r3, r1
 800dbb4:	4925      	ldr	r1, [pc, #148]	@ (800dc4c <_strtod_l+0x59c>)
 800dbb6:	428b      	cmp	r3, r1
 800dbb8:	4682      	mov	sl, r0
 800dbba:	d898      	bhi.n	800daee <_strtod_l+0x43e>
 800dbbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dbc0:	428b      	cmp	r3, r1
 800dbc2:	bf86      	itte	hi
 800dbc4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dc50 <_strtod_l+0x5a0>
 800dbc8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800dbcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9308      	str	r3, [sp, #32]
 800dbd4:	e076      	b.n	800dcc4 <_strtod_l+0x614>
 800dbd6:	07e2      	lsls	r2, r4, #31
 800dbd8:	d504      	bpl.n	800dbe4 <_strtod_l+0x534>
 800dbda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbde:	f7f2 fd3b 	bl	8000658 <__aeabi_dmul>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	3601      	adds	r6, #1
 800dbe6:	1064      	asrs	r4, r4, #1
 800dbe8:	3708      	adds	r7, #8
 800dbea:	e7d0      	b.n	800db8e <_strtod_l+0x4de>
 800dbec:	d0f0      	beq.n	800dbd0 <_strtod_l+0x520>
 800dbee:	4264      	negs	r4, r4
 800dbf0:	f014 020f 	ands.w	r2, r4, #15
 800dbf4:	d00a      	beq.n	800dc0c <_strtod_l+0x55c>
 800dbf6:	4b12      	ldr	r3, [pc, #72]	@ (800dc40 <_strtod_l+0x590>)
 800dbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfc:	4650      	mov	r0, sl
 800dbfe:	4659      	mov	r1, fp
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f7f2 fe52 	bl	80008ac <__aeabi_ddiv>
 800dc08:	4682      	mov	sl, r0
 800dc0a:	468b      	mov	fp, r1
 800dc0c:	1124      	asrs	r4, r4, #4
 800dc0e:	d0df      	beq.n	800dbd0 <_strtod_l+0x520>
 800dc10:	2c1f      	cmp	r4, #31
 800dc12:	dd1f      	ble.n	800dc54 <_strtod_l+0x5a4>
 800dc14:	2400      	movs	r4, #0
 800dc16:	46a0      	mov	r8, r4
 800dc18:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc1a:	46a1      	mov	r9, r4
 800dc1c:	9a05      	ldr	r2, [sp, #20]
 800dc1e:	2322      	movs	r3, #34	@ 0x22
 800dc20:	f04f 0a00 	mov.w	sl, #0
 800dc24:	f04f 0b00 	mov.w	fp, #0
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	e76b      	b.n	800db04 <_strtod_l+0x454>
 800dc2c:	08010135 	.word	0x08010135
 800dc30:	08010418 	.word	0x08010418
 800dc34:	0801012d 	.word	0x0801012d
 800dc38:	08010162 	.word	0x08010162
 800dc3c:	080102b6 	.word	0x080102b6
 800dc40:	08010350 	.word	0x08010350
 800dc44:	08010328 	.word	0x08010328
 800dc48:	7ff00000 	.word	0x7ff00000
 800dc4c:	7ca00000 	.word	0x7ca00000
 800dc50:	7fefffff 	.word	0x7fefffff
 800dc54:	f014 0310 	ands.w	r3, r4, #16
 800dc58:	bf18      	it	ne
 800dc5a:	236a      	movne	r3, #106	@ 0x6a
 800dc5c:	4ea9      	ldr	r6, [pc, #676]	@ (800df04 <_strtod_l+0x854>)
 800dc5e:	9308      	str	r3, [sp, #32]
 800dc60:	4650      	mov	r0, sl
 800dc62:	4659      	mov	r1, fp
 800dc64:	2300      	movs	r3, #0
 800dc66:	07e7      	lsls	r7, r4, #31
 800dc68:	d504      	bpl.n	800dc74 <_strtod_l+0x5c4>
 800dc6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc6e:	f7f2 fcf3 	bl	8000658 <__aeabi_dmul>
 800dc72:	2301      	movs	r3, #1
 800dc74:	1064      	asrs	r4, r4, #1
 800dc76:	f106 0608 	add.w	r6, r6, #8
 800dc7a:	d1f4      	bne.n	800dc66 <_strtod_l+0x5b6>
 800dc7c:	b10b      	cbz	r3, 800dc82 <_strtod_l+0x5d2>
 800dc7e:	4682      	mov	sl, r0
 800dc80:	468b      	mov	fp, r1
 800dc82:	9b08      	ldr	r3, [sp, #32]
 800dc84:	b1b3      	cbz	r3, 800dcb4 <_strtod_l+0x604>
 800dc86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dc8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	4659      	mov	r1, fp
 800dc92:	dd0f      	ble.n	800dcb4 <_strtod_l+0x604>
 800dc94:	2b1f      	cmp	r3, #31
 800dc96:	dd56      	ble.n	800dd46 <_strtod_l+0x696>
 800dc98:	2b34      	cmp	r3, #52	@ 0x34
 800dc9a:	bfde      	ittt	le
 800dc9c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800dca0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dca4:	4093      	lslle	r3, r2
 800dca6:	f04f 0a00 	mov.w	sl, #0
 800dcaa:	bfcc      	ite	gt
 800dcac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dcb0:	ea03 0b01 	andle.w	fp, r3, r1
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	4650      	mov	r0, sl
 800dcba:	4659      	mov	r1, fp
 800dcbc:	f7f2 ff34 	bl	8000b28 <__aeabi_dcmpeq>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d1a7      	bne.n	800dc14 <_strtod_l+0x564>
 800dcc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dcca:	9805      	ldr	r0, [sp, #20]
 800dccc:	462b      	mov	r3, r5
 800dcce:	464a      	mov	r2, r9
 800dcd0:	f7ff f8ce 	bl	800ce70 <__s2b>
 800dcd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f43f af09 	beq.w	800daee <_strtod_l+0x43e>
 800dcdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	eba3 0308 	sub.w	r3, r3, r8
 800dce6:	bfa8      	it	ge
 800dce8:	2300      	movge	r3, #0
 800dcea:	9312      	str	r3, [sp, #72]	@ 0x48
 800dcec:	2400      	movs	r4, #0
 800dcee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dcf2:	9316      	str	r3, [sp, #88]	@ 0x58
 800dcf4:	46a0      	mov	r8, r4
 800dcf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcf8:	9805      	ldr	r0, [sp, #20]
 800dcfa:	6859      	ldr	r1, [r3, #4]
 800dcfc:	f7ff f810 	bl	800cd20 <_Balloc>
 800dd00:	4681      	mov	r9, r0
 800dd02:	2800      	cmp	r0, #0
 800dd04:	f43f aef7 	beq.w	800daf6 <_strtod_l+0x446>
 800dd08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd0a:	691a      	ldr	r2, [r3, #16]
 800dd0c:	3202      	adds	r2, #2
 800dd0e:	f103 010c 	add.w	r1, r3, #12
 800dd12:	0092      	lsls	r2, r2, #2
 800dd14:	300c      	adds	r0, #12
 800dd16:	f7fe f896 	bl	800be46 <memcpy>
 800dd1a:	ec4b ab10 	vmov	d0, sl, fp
 800dd1e:	9805      	ldr	r0, [sp, #20]
 800dd20:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd22:	a91b      	add	r1, sp, #108	@ 0x6c
 800dd24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dd28:	f7ff fbd6 	bl	800d4d8 <__d2b>
 800dd2c:	901a      	str	r0, [sp, #104]	@ 0x68
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	f43f aee1 	beq.w	800daf6 <_strtod_l+0x446>
 800dd34:	9805      	ldr	r0, [sp, #20]
 800dd36:	2101      	movs	r1, #1
 800dd38:	f7ff f930 	bl	800cf9c <__i2b>
 800dd3c:	4680      	mov	r8, r0
 800dd3e:	b948      	cbnz	r0, 800dd54 <_strtod_l+0x6a4>
 800dd40:	f04f 0800 	mov.w	r8, #0
 800dd44:	e6d7      	b.n	800daf6 <_strtod_l+0x446>
 800dd46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4e:	ea03 0a0a 	and.w	sl, r3, sl
 800dd52:	e7af      	b.n	800dcb4 <_strtod_l+0x604>
 800dd54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dd56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dd58:	2d00      	cmp	r5, #0
 800dd5a:	bfab      	itete	ge
 800dd5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dd5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dd60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dd62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dd64:	bfac      	ite	ge
 800dd66:	18ef      	addge	r7, r5, r3
 800dd68:	1b5e      	sublt	r6, r3, r5
 800dd6a:	9b08      	ldr	r3, [sp, #32]
 800dd6c:	1aed      	subs	r5, r5, r3
 800dd6e:	4415      	add	r5, r2
 800dd70:	4b65      	ldr	r3, [pc, #404]	@ (800df08 <_strtod_l+0x858>)
 800dd72:	3d01      	subs	r5, #1
 800dd74:	429d      	cmp	r5, r3
 800dd76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dd7a:	da50      	bge.n	800de1e <_strtod_l+0x76e>
 800dd7c:	1b5b      	subs	r3, r3, r5
 800dd7e:	2b1f      	cmp	r3, #31
 800dd80:	eba2 0203 	sub.w	r2, r2, r3
 800dd84:	f04f 0101 	mov.w	r1, #1
 800dd88:	dc3d      	bgt.n	800de06 <_strtod_l+0x756>
 800dd8a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd90:	2300      	movs	r3, #0
 800dd92:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd94:	18bd      	adds	r5, r7, r2
 800dd96:	9b08      	ldr	r3, [sp, #32]
 800dd98:	42af      	cmp	r7, r5
 800dd9a:	4416      	add	r6, r2
 800dd9c:	441e      	add	r6, r3
 800dd9e:	463b      	mov	r3, r7
 800dda0:	bfa8      	it	ge
 800dda2:	462b      	movge	r3, r5
 800dda4:	42b3      	cmp	r3, r6
 800dda6:	bfa8      	it	ge
 800dda8:	4633      	movge	r3, r6
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	bfc2      	ittt	gt
 800ddae:	1aed      	subgt	r5, r5, r3
 800ddb0:	1af6      	subgt	r6, r6, r3
 800ddb2:	1aff      	subgt	r7, r7, r3
 800ddb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	dd16      	ble.n	800dde8 <_strtod_l+0x738>
 800ddba:	4641      	mov	r1, r8
 800ddbc:	9805      	ldr	r0, [sp, #20]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f7ff f9a4 	bl	800d10c <__pow5mult>
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d0ba      	beq.n	800dd40 <_strtod_l+0x690>
 800ddca:	4601      	mov	r1, r0
 800ddcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ddce:	9805      	ldr	r0, [sp, #20]
 800ddd0:	f7ff f8fa 	bl	800cfc8 <__multiply>
 800ddd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	f43f ae8d 	beq.w	800daf6 <_strtod_l+0x446>
 800dddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddde:	9805      	ldr	r0, [sp, #20]
 800dde0:	f7fe ffde 	bl	800cda0 <_Bfree>
 800dde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dde6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dde8:	2d00      	cmp	r5, #0
 800ddea:	dc1d      	bgt.n	800de28 <_strtod_l+0x778>
 800ddec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dd23      	ble.n	800de3a <_strtod_l+0x78a>
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ddf6:	9805      	ldr	r0, [sp, #20]
 800ddf8:	f7ff f988 	bl	800d10c <__pow5mult>
 800ddfc:	4681      	mov	r9, r0
 800ddfe:	b9e0      	cbnz	r0, 800de3a <_strtod_l+0x78a>
 800de00:	f04f 0900 	mov.w	r9, #0
 800de04:	e677      	b.n	800daf6 <_strtod_l+0x446>
 800de06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800de0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800de0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800de12:	35e2      	adds	r5, #226	@ 0xe2
 800de14:	fa01 f305 	lsl.w	r3, r1, r5
 800de18:	9310      	str	r3, [sp, #64]	@ 0x40
 800de1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800de1c:	e7ba      	b.n	800dd94 <_strtod_l+0x6e4>
 800de1e:	2300      	movs	r3, #0
 800de20:	9310      	str	r3, [sp, #64]	@ 0x40
 800de22:	2301      	movs	r3, #1
 800de24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de26:	e7b5      	b.n	800dd94 <_strtod_l+0x6e4>
 800de28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de2a:	9805      	ldr	r0, [sp, #20]
 800de2c:	462a      	mov	r2, r5
 800de2e:	f7ff f9c7 	bl	800d1c0 <__lshift>
 800de32:	901a      	str	r0, [sp, #104]	@ 0x68
 800de34:	2800      	cmp	r0, #0
 800de36:	d1d9      	bne.n	800ddec <_strtod_l+0x73c>
 800de38:	e65d      	b.n	800daf6 <_strtod_l+0x446>
 800de3a:	2e00      	cmp	r6, #0
 800de3c:	dd07      	ble.n	800de4e <_strtod_l+0x79e>
 800de3e:	4649      	mov	r1, r9
 800de40:	9805      	ldr	r0, [sp, #20]
 800de42:	4632      	mov	r2, r6
 800de44:	f7ff f9bc 	bl	800d1c0 <__lshift>
 800de48:	4681      	mov	r9, r0
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d0d8      	beq.n	800de00 <_strtod_l+0x750>
 800de4e:	2f00      	cmp	r7, #0
 800de50:	dd08      	ble.n	800de64 <_strtod_l+0x7b4>
 800de52:	4641      	mov	r1, r8
 800de54:	9805      	ldr	r0, [sp, #20]
 800de56:	463a      	mov	r2, r7
 800de58:	f7ff f9b2 	bl	800d1c0 <__lshift>
 800de5c:	4680      	mov	r8, r0
 800de5e:	2800      	cmp	r0, #0
 800de60:	f43f ae49 	beq.w	800daf6 <_strtod_l+0x446>
 800de64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de66:	9805      	ldr	r0, [sp, #20]
 800de68:	464a      	mov	r2, r9
 800de6a:	f7ff fa31 	bl	800d2d0 <__mdiff>
 800de6e:	4604      	mov	r4, r0
 800de70:	2800      	cmp	r0, #0
 800de72:	f43f ae40 	beq.w	800daf6 <_strtod_l+0x446>
 800de76:	68c3      	ldr	r3, [r0, #12]
 800de78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de7a:	2300      	movs	r3, #0
 800de7c:	60c3      	str	r3, [r0, #12]
 800de7e:	4641      	mov	r1, r8
 800de80:	f7ff fa0a 	bl	800d298 <__mcmp>
 800de84:	2800      	cmp	r0, #0
 800de86:	da45      	bge.n	800df14 <_strtod_l+0x864>
 800de88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de8a:	ea53 030a 	orrs.w	r3, r3, sl
 800de8e:	d16b      	bne.n	800df68 <_strtod_l+0x8b8>
 800de90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de94:	2b00      	cmp	r3, #0
 800de96:	d167      	bne.n	800df68 <_strtod_l+0x8b8>
 800de98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de9c:	0d1b      	lsrs	r3, r3, #20
 800de9e:	051b      	lsls	r3, r3, #20
 800dea0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dea4:	d960      	bls.n	800df68 <_strtod_l+0x8b8>
 800dea6:	6963      	ldr	r3, [r4, #20]
 800dea8:	b913      	cbnz	r3, 800deb0 <_strtod_l+0x800>
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	2b01      	cmp	r3, #1
 800deae:	dd5b      	ble.n	800df68 <_strtod_l+0x8b8>
 800deb0:	4621      	mov	r1, r4
 800deb2:	2201      	movs	r2, #1
 800deb4:	9805      	ldr	r0, [sp, #20]
 800deb6:	f7ff f983 	bl	800d1c0 <__lshift>
 800deba:	4641      	mov	r1, r8
 800debc:	4604      	mov	r4, r0
 800debe:	f7ff f9eb 	bl	800d298 <__mcmp>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	dd50      	ble.n	800df68 <_strtod_l+0x8b8>
 800dec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800deca:	9a08      	ldr	r2, [sp, #32]
 800decc:	0d1b      	lsrs	r3, r3, #20
 800dece:	051b      	lsls	r3, r3, #20
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	d06a      	beq.n	800dfaa <_strtod_l+0x8fa>
 800ded4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ded8:	d867      	bhi.n	800dfaa <_strtod_l+0x8fa>
 800deda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dede:	f67f ae9d 	bls.w	800dc1c <_strtod_l+0x56c>
 800dee2:	4b0a      	ldr	r3, [pc, #40]	@ (800df0c <_strtod_l+0x85c>)
 800dee4:	4650      	mov	r0, sl
 800dee6:	4659      	mov	r1, fp
 800dee8:	2200      	movs	r2, #0
 800deea:	f7f2 fbb5 	bl	8000658 <__aeabi_dmul>
 800deee:	4b08      	ldr	r3, [pc, #32]	@ (800df10 <_strtod_l+0x860>)
 800def0:	400b      	ands	r3, r1
 800def2:	4682      	mov	sl, r0
 800def4:	468b      	mov	fp, r1
 800def6:	2b00      	cmp	r3, #0
 800def8:	f47f ae08 	bne.w	800db0c <_strtod_l+0x45c>
 800defc:	9a05      	ldr	r2, [sp, #20]
 800defe:	2322      	movs	r3, #34	@ 0x22
 800df00:	6013      	str	r3, [r2, #0]
 800df02:	e603      	b.n	800db0c <_strtod_l+0x45c>
 800df04:	08010440 	.word	0x08010440
 800df08:	fffffc02 	.word	0xfffffc02
 800df0c:	39500000 	.word	0x39500000
 800df10:	7ff00000 	.word	0x7ff00000
 800df14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800df18:	d165      	bne.n	800dfe6 <_strtod_l+0x936>
 800df1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800df1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df20:	b35a      	cbz	r2, 800df7a <_strtod_l+0x8ca>
 800df22:	4a9f      	ldr	r2, [pc, #636]	@ (800e1a0 <_strtod_l+0xaf0>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d12b      	bne.n	800df80 <_strtod_l+0x8d0>
 800df28:	9b08      	ldr	r3, [sp, #32]
 800df2a:	4651      	mov	r1, sl
 800df2c:	b303      	cbz	r3, 800df70 <_strtod_l+0x8c0>
 800df2e:	4b9d      	ldr	r3, [pc, #628]	@ (800e1a4 <_strtod_l+0xaf4>)
 800df30:	465a      	mov	r2, fp
 800df32:	4013      	ands	r3, r2
 800df34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800df38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df3c:	d81b      	bhi.n	800df76 <_strtod_l+0x8c6>
 800df3e:	0d1b      	lsrs	r3, r3, #20
 800df40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df44:	fa02 f303 	lsl.w	r3, r2, r3
 800df48:	4299      	cmp	r1, r3
 800df4a:	d119      	bne.n	800df80 <_strtod_l+0x8d0>
 800df4c:	4b96      	ldr	r3, [pc, #600]	@ (800e1a8 <_strtod_l+0xaf8>)
 800df4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df50:	429a      	cmp	r2, r3
 800df52:	d102      	bne.n	800df5a <_strtod_l+0x8aa>
 800df54:	3101      	adds	r1, #1
 800df56:	f43f adce 	beq.w	800daf6 <_strtod_l+0x446>
 800df5a:	4b92      	ldr	r3, [pc, #584]	@ (800e1a4 <_strtod_l+0xaf4>)
 800df5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df5e:	401a      	ands	r2, r3
 800df60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800df64:	f04f 0a00 	mov.w	sl, #0
 800df68:	9b08      	ldr	r3, [sp, #32]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1b9      	bne.n	800dee2 <_strtod_l+0x832>
 800df6e:	e5cd      	b.n	800db0c <_strtod_l+0x45c>
 800df70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df74:	e7e8      	b.n	800df48 <_strtod_l+0x898>
 800df76:	4613      	mov	r3, r2
 800df78:	e7e6      	b.n	800df48 <_strtod_l+0x898>
 800df7a:	ea53 030a 	orrs.w	r3, r3, sl
 800df7e:	d0a2      	beq.n	800dec6 <_strtod_l+0x816>
 800df80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df82:	b1db      	cbz	r3, 800dfbc <_strtod_l+0x90c>
 800df84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df86:	4213      	tst	r3, r2
 800df88:	d0ee      	beq.n	800df68 <_strtod_l+0x8b8>
 800df8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df8c:	9a08      	ldr	r2, [sp, #32]
 800df8e:	4650      	mov	r0, sl
 800df90:	4659      	mov	r1, fp
 800df92:	b1bb      	cbz	r3, 800dfc4 <_strtod_l+0x914>
 800df94:	f7ff fb6e 	bl	800d674 <sulp>
 800df98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df9c:	ec53 2b10 	vmov	r2, r3, d0
 800dfa0:	f7f2 f9a4 	bl	80002ec <__adddf3>
 800dfa4:	4682      	mov	sl, r0
 800dfa6:	468b      	mov	fp, r1
 800dfa8:	e7de      	b.n	800df68 <_strtod_l+0x8b8>
 800dfaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dfae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dfb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dfb6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dfba:	e7d5      	b.n	800df68 <_strtod_l+0x8b8>
 800dfbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfbe:	ea13 0f0a 	tst.w	r3, sl
 800dfc2:	e7e1      	b.n	800df88 <_strtod_l+0x8d8>
 800dfc4:	f7ff fb56 	bl	800d674 <sulp>
 800dfc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfcc:	ec53 2b10 	vmov	r2, r3, d0
 800dfd0:	f7f2 f98a 	bl	80002e8 <__aeabi_dsub>
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	4682      	mov	sl, r0
 800dfda:	468b      	mov	fp, r1
 800dfdc:	f7f2 fda4 	bl	8000b28 <__aeabi_dcmpeq>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d0c1      	beq.n	800df68 <_strtod_l+0x8b8>
 800dfe4:	e61a      	b.n	800dc1c <_strtod_l+0x56c>
 800dfe6:	4641      	mov	r1, r8
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7ff facd 	bl	800d588 <__ratio>
 800dfee:	ec57 6b10 	vmov	r6, r7, d0
 800dff2:	2200      	movs	r2, #0
 800dff4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dff8:	4630      	mov	r0, r6
 800dffa:	4639      	mov	r1, r7
 800dffc:	f7f2 fda8 	bl	8000b50 <__aeabi_dcmple>
 800e000:	2800      	cmp	r0, #0
 800e002:	d06f      	beq.n	800e0e4 <_strtod_l+0xa34>
 800e004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e006:	2b00      	cmp	r3, #0
 800e008:	d17a      	bne.n	800e100 <_strtod_l+0xa50>
 800e00a:	f1ba 0f00 	cmp.w	sl, #0
 800e00e:	d158      	bne.n	800e0c2 <_strtod_l+0xa12>
 800e010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e016:	2b00      	cmp	r3, #0
 800e018:	d15a      	bne.n	800e0d0 <_strtod_l+0xa20>
 800e01a:	4b64      	ldr	r3, [pc, #400]	@ (800e1ac <_strtod_l+0xafc>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	4630      	mov	r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	f7f2 fd8b 	bl	8000b3c <__aeabi_dcmplt>
 800e026:	2800      	cmp	r0, #0
 800e028:	d159      	bne.n	800e0de <_strtod_l+0xa2e>
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	4b60      	ldr	r3, [pc, #384]	@ (800e1b0 <_strtod_l+0xb00>)
 800e030:	2200      	movs	r2, #0
 800e032:	f7f2 fb11 	bl	8000658 <__aeabi_dmul>
 800e036:	4606      	mov	r6, r0
 800e038:	460f      	mov	r7, r1
 800e03a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e03e:	9606      	str	r6, [sp, #24]
 800e040:	9307      	str	r3, [sp, #28]
 800e042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e046:	4d57      	ldr	r5, [pc, #348]	@ (800e1a4 <_strtod_l+0xaf4>)
 800e048:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e04e:	401d      	ands	r5, r3
 800e050:	4b58      	ldr	r3, [pc, #352]	@ (800e1b4 <_strtod_l+0xb04>)
 800e052:	429d      	cmp	r5, r3
 800e054:	f040 80b2 	bne.w	800e1bc <_strtod_l+0xb0c>
 800e058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e05a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e05e:	ec4b ab10 	vmov	d0, sl, fp
 800e062:	f7ff f9c9 	bl	800d3f8 <__ulp>
 800e066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e06a:	ec51 0b10 	vmov	r0, r1, d0
 800e06e:	f7f2 faf3 	bl	8000658 <__aeabi_dmul>
 800e072:	4652      	mov	r2, sl
 800e074:	465b      	mov	r3, fp
 800e076:	f7f2 f939 	bl	80002ec <__adddf3>
 800e07a:	460b      	mov	r3, r1
 800e07c:	4949      	ldr	r1, [pc, #292]	@ (800e1a4 <_strtod_l+0xaf4>)
 800e07e:	4a4e      	ldr	r2, [pc, #312]	@ (800e1b8 <_strtod_l+0xb08>)
 800e080:	4019      	ands	r1, r3
 800e082:	4291      	cmp	r1, r2
 800e084:	4682      	mov	sl, r0
 800e086:	d942      	bls.n	800e10e <_strtod_l+0xa5e>
 800e088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e08a:	4b47      	ldr	r3, [pc, #284]	@ (800e1a8 <_strtod_l+0xaf8>)
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d103      	bne.n	800e098 <_strtod_l+0x9e8>
 800e090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e092:	3301      	adds	r3, #1
 800e094:	f43f ad2f 	beq.w	800daf6 <_strtod_l+0x446>
 800e098:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e1a8 <_strtod_l+0xaf8>
 800e09c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e0a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0a2:	9805      	ldr	r0, [sp, #20]
 800e0a4:	f7fe fe7c 	bl	800cda0 <_Bfree>
 800e0a8:	9805      	ldr	r0, [sp, #20]
 800e0aa:	4649      	mov	r1, r9
 800e0ac:	f7fe fe78 	bl	800cda0 <_Bfree>
 800e0b0:	9805      	ldr	r0, [sp, #20]
 800e0b2:	4641      	mov	r1, r8
 800e0b4:	f7fe fe74 	bl	800cda0 <_Bfree>
 800e0b8:	9805      	ldr	r0, [sp, #20]
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	f7fe fe70 	bl	800cda0 <_Bfree>
 800e0c0:	e619      	b.n	800dcf6 <_strtod_l+0x646>
 800e0c2:	f1ba 0f01 	cmp.w	sl, #1
 800e0c6:	d103      	bne.n	800e0d0 <_strtod_l+0xa20>
 800e0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f43f ada6 	beq.w	800dc1c <_strtod_l+0x56c>
 800e0d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e180 <_strtod_l+0xad0>
 800e0d4:	4f35      	ldr	r7, [pc, #212]	@ (800e1ac <_strtod_l+0xafc>)
 800e0d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0da:	2600      	movs	r6, #0
 800e0dc:	e7b1      	b.n	800e042 <_strtod_l+0x992>
 800e0de:	4f34      	ldr	r7, [pc, #208]	@ (800e1b0 <_strtod_l+0xb00>)
 800e0e0:	2600      	movs	r6, #0
 800e0e2:	e7aa      	b.n	800e03a <_strtod_l+0x98a>
 800e0e4:	4b32      	ldr	r3, [pc, #200]	@ (800e1b0 <_strtod_l+0xb00>)
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	4639      	mov	r1, r7
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f7f2 fab4 	bl	8000658 <__aeabi_dmul>
 800e0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	460f      	mov	r7, r1
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d09f      	beq.n	800e03a <_strtod_l+0x98a>
 800e0fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e0fe:	e7a0      	b.n	800e042 <_strtod_l+0x992>
 800e100:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e188 <_strtod_l+0xad8>
 800e104:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e108:	ec57 6b17 	vmov	r6, r7, d7
 800e10c:	e799      	b.n	800e042 <_strtod_l+0x992>
 800e10e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e112:	9b08      	ldr	r3, [sp, #32]
 800e114:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1c1      	bne.n	800e0a0 <_strtod_l+0x9f0>
 800e11c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e120:	0d1b      	lsrs	r3, r3, #20
 800e122:	051b      	lsls	r3, r3, #20
 800e124:	429d      	cmp	r5, r3
 800e126:	d1bb      	bne.n	800e0a0 <_strtod_l+0x9f0>
 800e128:	4630      	mov	r0, r6
 800e12a:	4639      	mov	r1, r7
 800e12c:	f7f2 fdf4 	bl	8000d18 <__aeabi_d2lz>
 800e130:	f7f2 fa64 	bl	80005fc <__aeabi_l2d>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	4630      	mov	r0, r6
 800e13a:	4639      	mov	r1, r7
 800e13c:	f7f2 f8d4 	bl	80002e8 <__aeabi_dsub>
 800e140:	460b      	mov	r3, r1
 800e142:	4602      	mov	r2, r0
 800e144:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e148:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e14e:	ea46 060a 	orr.w	r6, r6, sl
 800e152:	431e      	orrs	r6, r3
 800e154:	d06f      	beq.n	800e236 <_strtod_l+0xb86>
 800e156:	a30e      	add	r3, pc, #56	@ (adr r3, 800e190 <_strtod_l+0xae0>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	f7f2 fcee 	bl	8000b3c <__aeabi_dcmplt>
 800e160:	2800      	cmp	r0, #0
 800e162:	f47f acd3 	bne.w	800db0c <_strtod_l+0x45c>
 800e166:	a30c      	add	r3, pc, #48	@ (adr r3, 800e198 <_strtod_l+0xae8>)
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e170:	f7f2 fd02 	bl	8000b78 <__aeabi_dcmpgt>
 800e174:	2800      	cmp	r0, #0
 800e176:	d093      	beq.n	800e0a0 <_strtod_l+0x9f0>
 800e178:	e4c8      	b.n	800db0c <_strtod_l+0x45c>
 800e17a:	bf00      	nop
 800e17c:	f3af 8000 	nop.w
 800e180:	00000000 	.word	0x00000000
 800e184:	bff00000 	.word	0xbff00000
 800e188:	00000000 	.word	0x00000000
 800e18c:	3ff00000 	.word	0x3ff00000
 800e190:	94a03595 	.word	0x94a03595
 800e194:	3fdfffff 	.word	0x3fdfffff
 800e198:	35afe535 	.word	0x35afe535
 800e19c:	3fe00000 	.word	0x3fe00000
 800e1a0:	000fffff 	.word	0x000fffff
 800e1a4:	7ff00000 	.word	0x7ff00000
 800e1a8:	7fefffff 	.word	0x7fefffff
 800e1ac:	3ff00000 	.word	0x3ff00000
 800e1b0:	3fe00000 	.word	0x3fe00000
 800e1b4:	7fe00000 	.word	0x7fe00000
 800e1b8:	7c9fffff 	.word	0x7c9fffff
 800e1bc:	9b08      	ldr	r3, [sp, #32]
 800e1be:	b323      	cbz	r3, 800e20a <_strtod_l+0xb5a>
 800e1c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e1c4:	d821      	bhi.n	800e20a <_strtod_l+0xb5a>
 800e1c6:	a328      	add	r3, pc, #160	@ (adr r3, 800e268 <_strtod_l+0xbb8>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	4639      	mov	r1, r7
 800e1d0:	f7f2 fcbe 	bl	8000b50 <__aeabi_dcmple>
 800e1d4:	b1a0      	cbz	r0, 800e200 <_strtod_l+0xb50>
 800e1d6:	4639      	mov	r1, r7
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f7f2 fd15 	bl	8000c08 <__aeabi_d2uiz>
 800e1de:	2801      	cmp	r0, #1
 800e1e0:	bf38      	it	cc
 800e1e2:	2001      	movcc	r0, #1
 800e1e4:	f7f2 f9be 	bl	8000564 <__aeabi_ui2d>
 800e1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	460f      	mov	r7, r1
 800e1ee:	b9fb      	cbnz	r3, 800e230 <_strtod_l+0xb80>
 800e1f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e1f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e1fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e202:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e206:	1b5b      	subs	r3, r3, r5
 800e208:	9311      	str	r3, [sp, #68]	@ 0x44
 800e20a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e20e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e212:	f7ff f8f1 	bl	800d3f8 <__ulp>
 800e216:	4650      	mov	r0, sl
 800e218:	ec53 2b10 	vmov	r2, r3, d0
 800e21c:	4659      	mov	r1, fp
 800e21e:	f7f2 fa1b 	bl	8000658 <__aeabi_dmul>
 800e222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e226:	f7f2 f861 	bl	80002ec <__adddf3>
 800e22a:	4682      	mov	sl, r0
 800e22c:	468b      	mov	fp, r1
 800e22e:	e770      	b.n	800e112 <_strtod_l+0xa62>
 800e230:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e234:	e7e0      	b.n	800e1f8 <_strtod_l+0xb48>
 800e236:	a30e      	add	r3, pc, #56	@ (adr r3, 800e270 <_strtod_l+0xbc0>)
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	f7f2 fc7e 	bl	8000b3c <__aeabi_dcmplt>
 800e240:	e798      	b.n	800e174 <_strtod_l+0xac4>
 800e242:	2300      	movs	r3, #0
 800e244:	930e      	str	r3, [sp, #56]	@ 0x38
 800e246:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	f7ff ba6d 	b.w	800d72a <_strtod_l+0x7a>
 800e250:	2a65      	cmp	r2, #101	@ 0x65
 800e252:	f43f ab68 	beq.w	800d926 <_strtod_l+0x276>
 800e256:	2a45      	cmp	r2, #69	@ 0x45
 800e258:	f43f ab65 	beq.w	800d926 <_strtod_l+0x276>
 800e25c:	2301      	movs	r3, #1
 800e25e:	f7ff bba0 	b.w	800d9a2 <_strtod_l+0x2f2>
 800e262:	bf00      	nop
 800e264:	f3af 8000 	nop.w
 800e268:	ffc00000 	.word	0xffc00000
 800e26c:	41dfffff 	.word	0x41dfffff
 800e270:	94a03595 	.word	0x94a03595
 800e274:	3fcfffff 	.word	0x3fcfffff

0800e278 <_strtod_r>:
 800e278:	4b01      	ldr	r3, [pc, #4]	@ (800e280 <_strtod_r+0x8>)
 800e27a:	f7ff ba19 	b.w	800d6b0 <_strtod_l>
 800e27e:	bf00      	nop
 800e280:	20000434 	.word	0x20000434

0800e284 <_strtol_l.isra.0>:
 800e284:	2b24      	cmp	r3, #36	@ 0x24
 800e286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28a:	4686      	mov	lr, r0
 800e28c:	4690      	mov	r8, r2
 800e28e:	d801      	bhi.n	800e294 <_strtol_l.isra.0+0x10>
 800e290:	2b01      	cmp	r3, #1
 800e292:	d106      	bne.n	800e2a2 <_strtol_l.isra.0+0x1e>
 800e294:	f7fd fdaa 	bl	800bdec <__errno>
 800e298:	2316      	movs	r3, #22
 800e29a:	6003      	str	r3, [r0, #0]
 800e29c:	2000      	movs	r0, #0
 800e29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a2:	4834      	ldr	r0, [pc, #208]	@ (800e374 <_strtol_l.isra.0+0xf0>)
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	462a      	mov	r2, r5
 800e2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2ac:	5d06      	ldrb	r6, [r0, r4]
 800e2ae:	f016 0608 	ands.w	r6, r6, #8
 800e2b2:	d1f8      	bne.n	800e2a6 <_strtol_l.isra.0+0x22>
 800e2b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e2b6:	d110      	bne.n	800e2da <_strtol_l.isra.0+0x56>
 800e2b8:	782c      	ldrb	r4, [r5, #0]
 800e2ba:	2601      	movs	r6, #1
 800e2bc:	1c95      	adds	r5, r2, #2
 800e2be:	f033 0210 	bics.w	r2, r3, #16
 800e2c2:	d115      	bne.n	800e2f0 <_strtol_l.isra.0+0x6c>
 800e2c4:	2c30      	cmp	r4, #48	@ 0x30
 800e2c6:	d10d      	bne.n	800e2e4 <_strtol_l.isra.0+0x60>
 800e2c8:	782a      	ldrb	r2, [r5, #0]
 800e2ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e2ce:	2a58      	cmp	r2, #88	@ 0x58
 800e2d0:	d108      	bne.n	800e2e4 <_strtol_l.isra.0+0x60>
 800e2d2:	786c      	ldrb	r4, [r5, #1]
 800e2d4:	3502      	adds	r5, #2
 800e2d6:	2310      	movs	r3, #16
 800e2d8:	e00a      	b.n	800e2f0 <_strtol_l.isra.0+0x6c>
 800e2da:	2c2b      	cmp	r4, #43	@ 0x2b
 800e2dc:	bf04      	itt	eq
 800e2de:	782c      	ldrbeq	r4, [r5, #0]
 800e2e0:	1c95      	addeq	r5, r2, #2
 800e2e2:	e7ec      	b.n	800e2be <_strtol_l.isra.0+0x3a>
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1f6      	bne.n	800e2d6 <_strtol_l.isra.0+0x52>
 800e2e8:	2c30      	cmp	r4, #48	@ 0x30
 800e2ea:	bf14      	ite	ne
 800e2ec:	230a      	movne	r3, #10
 800e2ee:	2308      	moveq	r3, #8
 800e2f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e2f4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	fbbc f9f3 	udiv	r9, ip, r3
 800e2fe:	4610      	mov	r0, r2
 800e300:	fb03 ca19 	mls	sl, r3, r9, ip
 800e304:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e308:	2f09      	cmp	r7, #9
 800e30a:	d80f      	bhi.n	800e32c <_strtol_l.isra.0+0xa8>
 800e30c:	463c      	mov	r4, r7
 800e30e:	42a3      	cmp	r3, r4
 800e310:	dd1b      	ble.n	800e34a <_strtol_l.isra.0+0xc6>
 800e312:	1c57      	adds	r7, r2, #1
 800e314:	d007      	beq.n	800e326 <_strtol_l.isra.0+0xa2>
 800e316:	4581      	cmp	r9, r0
 800e318:	d314      	bcc.n	800e344 <_strtol_l.isra.0+0xc0>
 800e31a:	d101      	bne.n	800e320 <_strtol_l.isra.0+0x9c>
 800e31c:	45a2      	cmp	sl, r4
 800e31e:	db11      	blt.n	800e344 <_strtol_l.isra.0+0xc0>
 800e320:	fb00 4003 	mla	r0, r0, r3, r4
 800e324:	2201      	movs	r2, #1
 800e326:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e32a:	e7eb      	b.n	800e304 <_strtol_l.isra.0+0x80>
 800e32c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e330:	2f19      	cmp	r7, #25
 800e332:	d801      	bhi.n	800e338 <_strtol_l.isra.0+0xb4>
 800e334:	3c37      	subs	r4, #55	@ 0x37
 800e336:	e7ea      	b.n	800e30e <_strtol_l.isra.0+0x8a>
 800e338:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e33c:	2f19      	cmp	r7, #25
 800e33e:	d804      	bhi.n	800e34a <_strtol_l.isra.0+0xc6>
 800e340:	3c57      	subs	r4, #87	@ 0x57
 800e342:	e7e4      	b.n	800e30e <_strtol_l.isra.0+0x8a>
 800e344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e348:	e7ed      	b.n	800e326 <_strtol_l.isra.0+0xa2>
 800e34a:	1c53      	adds	r3, r2, #1
 800e34c:	d108      	bne.n	800e360 <_strtol_l.isra.0+0xdc>
 800e34e:	2322      	movs	r3, #34	@ 0x22
 800e350:	f8ce 3000 	str.w	r3, [lr]
 800e354:	4660      	mov	r0, ip
 800e356:	f1b8 0f00 	cmp.w	r8, #0
 800e35a:	d0a0      	beq.n	800e29e <_strtol_l.isra.0+0x1a>
 800e35c:	1e69      	subs	r1, r5, #1
 800e35e:	e006      	b.n	800e36e <_strtol_l.isra.0+0xea>
 800e360:	b106      	cbz	r6, 800e364 <_strtol_l.isra.0+0xe0>
 800e362:	4240      	negs	r0, r0
 800e364:	f1b8 0f00 	cmp.w	r8, #0
 800e368:	d099      	beq.n	800e29e <_strtol_l.isra.0+0x1a>
 800e36a:	2a00      	cmp	r2, #0
 800e36c:	d1f6      	bne.n	800e35c <_strtol_l.isra.0+0xd8>
 800e36e:	f8c8 1000 	str.w	r1, [r8]
 800e372:	e794      	b.n	800e29e <_strtol_l.isra.0+0x1a>
 800e374:	08010469 	.word	0x08010469

0800e378 <_strtol_r>:
 800e378:	f7ff bf84 	b.w	800e284 <_strtol_l.isra.0>

0800e37c <__ssputs_r>:
 800e37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e380:	688e      	ldr	r6, [r1, #8]
 800e382:	461f      	mov	r7, r3
 800e384:	42be      	cmp	r6, r7
 800e386:	680b      	ldr	r3, [r1, #0]
 800e388:	4682      	mov	sl, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	4690      	mov	r8, r2
 800e38e:	d82d      	bhi.n	800e3ec <__ssputs_r+0x70>
 800e390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e398:	d026      	beq.n	800e3e8 <__ssputs_r+0x6c>
 800e39a:	6965      	ldr	r5, [r4, #20]
 800e39c:	6909      	ldr	r1, [r1, #16]
 800e39e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3a2:	eba3 0901 	sub.w	r9, r3, r1
 800e3a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3aa:	1c7b      	adds	r3, r7, #1
 800e3ac:	444b      	add	r3, r9
 800e3ae:	106d      	asrs	r5, r5, #1
 800e3b0:	429d      	cmp	r5, r3
 800e3b2:	bf38      	it	cc
 800e3b4:	461d      	movcc	r5, r3
 800e3b6:	0553      	lsls	r3, r2, #21
 800e3b8:	d527      	bpl.n	800e40a <__ssputs_r+0x8e>
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	f7fe fc24 	bl	800cc08 <_malloc_r>
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	b360      	cbz	r0, 800e41e <__ssputs_r+0xa2>
 800e3c4:	6921      	ldr	r1, [r4, #16]
 800e3c6:	464a      	mov	r2, r9
 800e3c8:	f7fd fd3d 	bl	800be46 <memcpy>
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3d6:	81a3      	strh	r3, [r4, #12]
 800e3d8:	6126      	str	r6, [r4, #16]
 800e3da:	6165      	str	r5, [r4, #20]
 800e3dc:	444e      	add	r6, r9
 800e3de:	eba5 0509 	sub.w	r5, r5, r9
 800e3e2:	6026      	str	r6, [r4, #0]
 800e3e4:	60a5      	str	r5, [r4, #8]
 800e3e6:	463e      	mov	r6, r7
 800e3e8:	42be      	cmp	r6, r7
 800e3ea:	d900      	bls.n	800e3ee <__ssputs_r+0x72>
 800e3ec:	463e      	mov	r6, r7
 800e3ee:	6820      	ldr	r0, [r4, #0]
 800e3f0:	4632      	mov	r2, r6
 800e3f2:	4641      	mov	r1, r8
 800e3f4:	f000 fd57 	bl	800eea6 <memmove>
 800e3f8:	68a3      	ldr	r3, [r4, #8]
 800e3fa:	1b9b      	subs	r3, r3, r6
 800e3fc:	60a3      	str	r3, [r4, #8]
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	4433      	add	r3, r6
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	2000      	movs	r0, #0
 800e406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e40a:	462a      	mov	r2, r5
 800e40c:	f001 f90d 	bl	800f62a <_realloc_r>
 800e410:	4606      	mov	r6, r0
 800e412:	2800      	cmp	r0, #0
 800e414:	d1e0      	bne.n	800e3d8 <__ssputs_r+0x5c>
 800e416:	6921      	ldr	r1, [r4, #16]
 800e418:	4650      	mov	r0, sl
 800e41a:	f7fe fb81 	bl	800cb20 <_free_r>
 800e41e:	230c      	movs	r3, #12
 800e420:	f8ca 3000 	str.w	r3, [sl]
 800e424:	89a3      	ldrh	r3, [r4, #12]
 800e426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e42a:	81a3      	strh	r3, [r4, #12]
 800e42c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e430:	e7e9      	b.n	800e406 <__ssputs_r+0x8a>
	...

0800e434 <_svfiprintf_r>:
 800e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e438:	4698      	mov	r8, r3
 800e43a:	898b      	ldrh	r3, [r1, #12]
 800e43c:	061b      	lsls	r3, r3, #24
 800e43e:	b09d      	sub	sp, #116	@ 0x74
 800e440:	4607      	mov	r7, r0
 800e442:	460d      	mov	r5, r1
 800e444:	4614      	mov	r4, r2
 800e446:	d510      	bpl.n	800e46a <_svfiprintf_r+0x36>
 800e448:	690b      	ldr	r3, [r1, #16]
 800e44a:	b973      	cbnz	r3, 800e46a <_svfiprintf_r+0x36>
 800e44c:	2140      	movs	r1, #64	@ 0x40
 800e44e:	f7fe fbdb 	bl	800cc08 <_malloc_r>
 800e452:	6028      	str	r0, [r5, #0]
 800e454:	6128      	str	r0, [r5, #16]
 800e456:	b930      	cbnz	r0, 800e466 <_svfiprintf_r+0x32>
 800e458:	230c      	movs	r3, #12
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e460:	b01d      	add	sp, #116	@ 0x74
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e466:	2340      	movs	r3, #64	@ 0x40
 800e468:	616b      	str	r3, [r5, #20]
 800e46a:	2300      	movs	r3, #0
 800e46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e46e:	2320      	movs	r3, #32
 800e470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e474:	f8cd 800c 	str.w	r8, [sp, #12]
 800e478:	2330      	movs	r3, #48	@ 0x30
 800e47a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e618 <_svfiprintf_r+0x1e4>
 800e47e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e482:	f04f 0901 	mov.w	r9, #1
 800e486:	4623      	mov	r3, r4
 800e488:	469a      	mov	sl, r3
 800e48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e48e:	b10a      	cbz	r2, 800e494 <_svfiprintf_r+0x60>
 800e490:	2a25      	cmp	r2, #37	@ 0x25
 800e492:	d1f9      	bne.n	800e488 <_svfiprintf_r+0x54>
 800e494:	ebba 0b04 	subs.w	fp, sl, r4
 800e498:	d00b      	beq.n	800e4b2 <_svfiprintf_r+0x7e>
 800e49a:	465b      	mov	r3, fp
 800e49c:	4622      	mov	r2, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f7ff ff6b 	bl	800e37c <__ssputs_r>
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	f000 80a7 	beq.w	800e5fa <_svfiprintf_r+0x1c6>
 800e4ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4ae:	445a      	add	r2, fp
 800e4b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f000 809f 	beq.w	800e5fa <_svfiprintf_r+0x1c6>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4c6:	f10a 0a01 	add.w	sl, sl, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	9307      	str	r3, [sp, #28]
 800e4ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4d4:	4654      	mov	r4, sl
 800e4d6:	2205      	movs	r2, #5
 800e4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4dc:	484e      	ldr	r0, [pc, #312]	@ (800e618 <_svfiprintf_r+0x1e4>)
 800e4de:	f7f1 fea7 	bl	8000230 <memchr>
 800e4e2:	9a04      	ldr	r2, [sp, #16]
 800e4e4:	b9d8      	cbnz	r0, 800e51e <_svfiprintf_r+0xea>
 800e4e6:	06d0      	lsls	r0, r2, #27
 800e4e8:	bf44      	itt	mi
 800e4ea:	2320      	movmi	r3, #32
 800e4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4f0:	0711      	lsls	r1, r2, #28
 800e4f2:	bf44      	itt	mi
 800e4f4:	232b      	movmi	r3, #43	@ 0x2b
 800e4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e500:	d015      	beq.n	800e52e <_svfiprintf_r+0xfa>
 800e502:	9a07      	ldr	r2, [sp, #28]
 800e504:	4654      	mov	r4, sl
 800e506:	2000      	movs	r0, #0
 800e508:	f04f 0c0a 	mov.w	ip, #10
 800e50c:	4621      	mov	r1, r4
 800e50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e512:	3b30      	subs	r3, #48	@ 0x30
 800e514:	2b09      	cmp	r3, #9
 800e516:	d94b      	bls.n	800e5b0 <_svfiprintf_r+0x17c>
 800e518:	b1b0      	cbz	r0, 800e548 <_svfiprintf_r+0x114>
 800e51a:	9207      	str	r2, [sp, #28]
 800e51c:	e014      	b.n	800e548 <_svfiprintf_r+0x114>
 800e51e:	eba0 0308 	sub.w	r3, r0, r8
 800e522:	fa09 f303 	lsl.w	r3, r9, r3
 800e526:	4313      	orrs	r3, r2
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	46a2      	mov	sl, r4
 800e52c:	e7d2      	b.n	800e4d4 <_svfiprintf_r+0xa0>
 800e52e:	9b03      	ldr	r3, [sp, #12]
 800e530:	1d19      	adds	r1, r3, #4
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	9103      	str	r1, [sp, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	bfbb      	ittet	lt
 800e53a:	425b      	neglt	r3, r3
 800e53c:	f042 0202 	orrlt.w	r2, r2, #2
 800e540:	9307      	strge	r3, [sp, #28]
 800e542:	9307      	strlt	r3, [sp, #28]
 800e544:	bfb8      	it	lt
 800e546:	9204      	strlt	r2, [sp, #16]
 800e548:	7823      	ldrb	r3, [r4, #0]
 800e54a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e54c:	d10a      	bne.n	800e564 <_svfiprintf_r+0x130>
 800e54e:	7863      	ldrb	r3, [r4, #1]
 800e550:	2b2a      	cmp	r3, #42	@ 0x2a
 800e552:	d132      	bne.n	800e5ba <_svfiprintf_r+0x186>
 800e554:	9b03      	ldr	r3, [sp, #12]
 800e556:	1d1a      	adds	r2, r3, #4
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	9203      	str	r2, [sp, #12]
 800e55c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e560:	3402      	adds	r4, #2
 800e562:	9305      	str	r3, [sp, #20]
 800e564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e628 <_svfiprintf_r+0x1f4>
 800e568:	7821      	ldrb	r1, [r4, #0]
 800e56a:	2203      	movs	r2, #3
 800e56c:	4650      	mov	r0, sl
 800e56e:	f7f1 fe5f 	bl	8000230 <memchr>
 800e572:	b138      	cbz	r0, 800e584 <_svfiprintf_r+0x150>
 800e574:	9b04      	ldr	r3, [sp, #16]
 800e576:	eba0 000a 	sub.w	r0, r0, sl
 800e57a:	2240      	movs	r2, #64	@ 0x40
 800e57c:	4082      	lsls	r2, r0
 800e57e:	4313      	orrs	r3, r2
 800e580:	3401      	adds	r4, #1
 800e582:	9304      	str	r3, [sp, #16]
 800e584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e588:	4824      	ldr	r0, [pc, #144]	@ (800e61c <_svfiprintf_r+0x1e8>)
 800e58a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e58e:	2206      	movs	r2, #6
 800e590:	f7f1 fe4e 	bl	8000230 <memchr>
 800e594:	2800      	cmp	r0, #0
 800e596:	d036      	beq.n	800e606 <_svfiprintf_r+0x1d2>
 800e598:	4b21      	ldr	r3, [pc, #132]	@ (800e620 <_svfiprintf_r+0x1ec>)
 800e59a:	bb1b      	cbnz	r3, 800e5e4 <_svfiprintf_r+0x1b0>
 800e59c:	9b03      	ldr	r3, [sp, #12]
 800e59e:	3307      	adds	r3, #7
 800e5a0:	f023 0307 	bic.w	r3, r3, #7
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	9303      	str	r3, [sp, #12]
 800e5a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5aa:	4433      	add	r3, r6
 800e5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ae:	e76a      	b.n	800e486 <_svfiprintf_r+0x52>
 800e5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5b4:	460c      	mov	r4, r1
 800e5b6:	2001      	movs	r0, #1
 800e5b8:	e7a8      	b.n	800e50c <_svfiprintf_r+0xd8>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	3401      	adds	r4, #1
 800e5be:	9305      	str	r3, [sp, #20]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f04f 0c0a 	mov.w	ip, #10
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5cc:	3a30      	subs	r2, #48	@ 0x30
 800e5ce:	2a09      	cmp	r2, #9
 800e5d0:	d903      	bls.n	800e5da <_svfiprintf_r+0x1a6>
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d0c6      	beq.n	800e564 <_svfiprintf_r+0x130>
 800e5d6:	9105      	str	r1, [sp, #20]
 800e5d8:	e7c4      	b.n	800e564 <_svfiprintf_r+0x130>
 800e5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5de:	4604      	mov	r4, r0
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e7f0      	b.n	800e5c6 <_svfiprintf_r+0x192>
 800e5e4:	ab03      	add	r3, sp, #12
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	462a      	mov	r2, r5
 800e5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e624 <_svfiprintf_r+0x1f0>)
 800e5ec:	a904      	add	r1, sp, #16
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	f7fc fc48 	bl	800ae84 <_printf_float>
 800e5f4:	1c42      	adds	r2, r0, #1
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	d1d6      	bne.n	800e5a8 <_svfiprintf_r+0x174>
 800e5fa:	89ab      	ldrh	r3, [r5, #12]
 800e5fc:	065b      	lsls	r3, r3, #25
 800e5fe:	f53f af2d 	bmi.w	800e45c <_svfiprintf_r+0x28>
 800e602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e604:	e72c      	b.n	800e460 <_svfiprintf_r+0x2c>
 800e606:	ab03      	add	r3, sp, #12
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	462a      	mov	r2, r5
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <_svfiprintf_r+0x1f0>)
 800e60e:	a904      	add	r1, sp, #16
 800e610:	4638      	mov	r0, r7
 800e612:	f7fc fecf 	bl	800b3b4 <_printf_i>
 800e616:	e7ed      	b.n	800e5f4 <_svfiprintf_r+0x1c0>
 800e618:	08010247 	.word	0x08010247
 800e61c:	08010251 	.word	0x08010251
 800e620:	0800ae85 	.word	0x0800ae85
 800e624:	0800e37d 	.word	0x0800e37d
 800e628:	0801024d 	.word	0x0801024d

0800e62c <_sungetc_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	1c4b      	adds	r3, r1, #1
 800e630:	4614      	mov	r4, r2
 800e632:	d103      	bne.n	800e63c <_sungetc_r+0x10>
 800e634:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e638:	4628      	mov	r0, r5
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
 800e63c:	8993      	ldrh	r3, [r2, #12]
 800e63e:	f023 0320 	bic.w	r3, r3, #32
 800e642:	8193      	strh	r3, [r2, #12]
 800e644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e646:	6852      	ldr	r2, [r2, #4]
 800e648:	b2cd      	uxtb	r5, r1
 800e64a:	b18b      	cbz	r3, 800e670 <_sungetc_r+0x44>
 800e64c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e64e:	4293      	cmp	r3, r2
 800e650:	dd08      	ble.n	800e664 <_sungetc_r+0x38>
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	1e5a      	subs	r2, r3, #1
 800e656:	6022      	str	r2, [r4, #0]
 800e658:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e65c:	6863      	ldr	r3, [r4, #4]
 800e65e:	3301      	adds	r3, #1
 800e660:	6063      	str	r3, [r4, #4]
 800e662:	e7e9      	b.n	800e638 <_sungetc_r+0xc>
 800e664:	4621      	mov	r1, r4
 800e666:	f000 fbe4 	bl	800ee32 <__submore>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d0f1      	beq.n	800e652 <_sungetc_r+0x26>
 800e66e:	e7e1      	b.n	800e634 <_sungetc_r+0x8>
 800e670:	6921      	ldr	r1, [r4, #16]
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	b151      	cbz	r1, 800e68c <_sungetc_r+0x60>
 800e676:	4299      	cmp	r1, r3
 800e678:	d208      	bcs.n	800e68c <_sungetc_r+0x60>
 800e67a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e67e:	42a9      	cmp	r1, r5
 800e680:	d104      	bne.n	800e68c <_sungetc_r+0x60>
 800e682:	3b01      	subs	r3, #1
 800e684:	3201      	adds	r2, #1
 800e686:	6023      	str	r3, [r4, #0]
 800e688:	6062      	str	r2, [r4, #4]
 800e68a:	e7d5      	b.n	800e638 <_sungetc_r+0xc>
 800e68c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800e690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e694:	6363      	str	r3, [r4, #52]	@ 0x34
 800e696:	2303      	movs	r3, #3
 800e698:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e69a:	4623      	mov	r3, r4
 800e69c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e7dc      	b.n	800e660 <_sungetc_r+0x34>

0800e6a6 <__ssrefill_r>:
 800e6a6:	b510      	push	{r4, lr}
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e6ac:	b169      	cbz	r1, 800e6ca <__ssrefill_r+0x24>
 800e6ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6b2:	4299      	cmp	r1, r3
 800e6b4:	d001      	beq.n	800e6ba <__ssrefill_r+0x14>
 800e6b6:	f7fe fa33 	bl	800cb20 <_free_r>
 800e6ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6bc:	6063      	str	r3, [r4, #4]
 800e6be:	2000      	movs	r0, #0
 800e6c0:	6360      	str	r0, [r4, #52]	@ 0x34
 800e6c2:	b113      	cbz	r3, 800e6ca <__ssrefill_r+0x24>
 800e6c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e6c6:	6023      	str	r3, [r4, #0]
 800e6c8:	bd10      	pop	{r4, pc}
 800e6ca:	6923      	ldr	r3, [r4, #16]
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	6063      	str	r3, [r4, #4]
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f043 0320 	orr.w	r3, r3, #32
 800e6d8:	81a3      	strh	r3, [r4, #12]
 800e6da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6de:	e7f3      	b.n	800e6c8 <__ssrefill_r+0x22>

0800e6e0 <__ssvfiscanf_r>:
 800e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e6f0:	49a6      	ldr	r1, [pc, #664]	@ (800e98c <__ssvfiscanf_r+0x2ac>)
 800e6f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e6f4:	f10d 0804 	add.w	r8, sp, #4
 800e6f8:	49a5      	ldr	r1, [pc, #660]	@ (800e990 <__ssvfiscanf_r+0x2b0>)
 800e6fa:	4fa6      	ldr	r7, [pc, #664]	@ (800e994 <__ssvfiscanf_r+0x2b4>)
 800e6fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e700:	4606      	mov	r6, r0
 800e702:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	f892 9000 	ldrb.w	r9, [r2]
 800e70a:	f1b9 0f00 	cmp.w	r9, #0
 800e70e:	f000 8158 	beq.w	800e9c2 <__ssvfiscanf_r+0x2e2>
 800e712:	f817 3009 	ldrb.w	r3, [r7, r9]
 800e716:	f013 0308 	ands.w	r3, r3, #8
 800e71a:	f102 0501 	add.w	r5, r2, #1
 800e71e:	d019      	beq.n	800e754 <__ssvfiscanf_r+0x74>
 800e720:	6863      	ldr	r3, [r4, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	dd0f      	ble.n	800e746 <__ssvfiscanf_r+0x66>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	781a      	ldrb	r2, [r3, #0]
 800e72a:	5cba      	ldrb	r2, [r7, r2]
 800e72c:	0712      	lsls	r2, r2, #28
 800e72e:	d401      	bmi.n	800e734 <__ssvfiscanf_r+0x54>
 800e730:	462a      	mov	r2, r5
 800e732:	e7e8      	b.n	800e706 <__ssvfiscanf_r+0x26>
 800e734:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e736:	3201      	adds	r2, #1
 800e738:	9245      	str	r2, [sp, #276]	@ 0x114
 800e73a:	6862      	ldr	r2, [r4, #4]
 800e73c:	3301      	adds	r3, #1
 800e73e:	3a01      	subs	r2, #1
 800e740:	6062      	str	r2, [r4, #4]
 800e742:	6023      	str	r3, [r4, #0]
 800e744:	e7ec      	b.n	800e720 <__ssvfiscanf_r+0x40>
 800e746:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e748:	4621      	mov	r1, r4
 800e74a:	4630      	mov	r0, r6
 800e74c:	4798      	blx	r3
 800e74e:	2800      	cmp	r0, #0
 800e750:	d0e9      	beq.n	800e726 <__ssvfiscanf_r+0x46>
 800e752:	e7ed      	b.n	800e730 <__ssvfiscanf_r+0x50>
 800e754:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800e758:	f040 8085 	bne.w	800e866 <__ssvfiscanf_r+0x186>
 800e75c:	9341      	str	r3, [sp, #260]	@ 0x104
 800e75e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800e760:	7853      	ldrb	r3, [r2, #1]
 800e762:	2b2a      	cmp	r3, #42	@ 0x2a
 800e764:	bf02      	ittt	eq
 800e766:	2310      	moveq	r3, #16
 800e768:	1c95      	addeq	r5, r2, #2
 800e76a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e76c:	220a      	movs	r2, #10
 800e76e:	46aa      	mov	sl, r5
 800e770:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e774:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e778:	2b09      	cmp	r3, #9
 800e77a:	d91e      	bls.n	800e7ba <__ssvfiscanf_r+0xda>
 800e77c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800e998 <__ssvfiscanf_r+0x2b8>
 800e780:	2203      	movs	r2, #3
 800e782:	4658      	mov	r0, fp
 800e784:	f7f1 fd54 	bl	8000230 <memchr>
 800e788:	b138      	cbz	r0, 800e79a <__ssvfiscanf_r+0xba>
 800e78a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e78c:	eba0 000b 	sub.w	r0, r0, fp
 800e790:	2301      	movs	r3, #1
 800e792:	4083      	lsls	r3, r0
 800e794:	4313      	orrs	r3, r2
 800e796:	9341      	str	r3, [sp, #260]	@ 0x104
 800e798:	4655      	mov	r5, sl
 800e79a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e79e:	2b78      	cmp	r3, #120	@ 0x78
 800e7a0:	d806      	bhi.n	800e7b0 <__ssvfiscanf_r+0xd0>
 800e7a2:	2b57      	cmp	r3, #87	@ 0x57
 800e7a4:	d810      	bhi.n	800e7c8 <__ssvfiscanf_r+0xe8>
 800e7a6:	2b25      	cmp	r3, #37	@ 0x25
 800e7a8:	d05d      	beq.n	800e866 <__ssvfiscanf_r+0x186>
 800e7aa:	d857      	bhi.n	800e85c <__ssvfiscanf_r+0x17c>
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d075      	beq.n	800e89c <__ssvfiscanf_r+0x1bc>
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e7b4:	230a      	movs	r3, #10
 800e7b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800e7b8:	e088      	b.n	800e8cc <__ssvfiscanf_r+0x1ec>
 800e7ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e7bc:	fb02 1103 	mla	r1, r2, r3, r1
 800e7c0:	3930      	subs	r1, #48	@ 0x30
 800e7c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e7c4:	4655      	mov	r5, sl
 800e7c6:	e7d2      	b.n	800e76e <__ssvfiscanf_r+0x8e>
 800e7c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e7cc:	2a20      	cmp	r2, #32
 800e7ce:	d8ef      	bhi.n	800e7b0 <__ssvfiscanf_r+0xd0>
 800e7d0:	a101      	add	r1, pc, #4	@ (adr r1, 800e7d8 <__ssvfiscanf_r+0xf8>)
 800e7d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e7d6:	bf00      	nop
 800e7d8:	0800e8ab 	.word	0x0800e8ab
 800e7dc:	0800e7b1 	.word	0x0800e7b1
 800e7e0:	0800e7b1 	.word	0x0800e7b1
 800e7e4:	0800e905 	.word	0x0800e905
 800e7e8:	0800e7b1 	.word	0x0800e7b1
 800e7ec:	0800e7b1 	.word	0x0800e7b1
 800e7f0:	0800e7b1 	.word	0x0800e7b1
 800e7f4:	0800e7b1 	.word	0x0800e7b1
 800e7f8:	0800e7b1 	.word	0x0800e7b1
 800e7fc:	0800e7b1 	.word	0x0800e7b1
 800e800:	0800e7b1 	.word	0x0800e7b1
 800e804:	0800e91b 	.word	0x0800e91b
 800e808:	0800e901 	.word	0x0800e901
 800e80c:	0800e863 	.word	0x0800e863
 800e810:	0800e863 	.word	0x0800e863
 800e814:	0800e863 	.word	0x0800e863
 800e818:	0800e7b1 	.word	0x0800e7b1
 800e81c:	0800e8bd 	.word	0x0800e8bd
 800e820:	0800e7b1 	.word	0x0800e7b1
 800e824:	0800e7b1 	.word	0x0800e7b1
 800e828:	0800e7b1 	.word	0x0800e7b1
 800e82c:	0800e7b1 	.word	0x0800e7b1
 800e830:	0800e92b 	.word	0x0800e92b
 800e834:	0800e8c5 	.word	0x0800e8c5
 800e838:	0800e8a3 	.word	0x0800e8a3
 800e83c:	0800e7b1 	.word	0x0800e7b1
 800e840:	0800e7b1 	.word	0x0800e7b1
 800e844:	0800e927 	.word	0x0800e927
 800e848:	0800e7b1 	.word	0x0800e7b1
 800e84c:	0800e901 	.word	0x0800e901
 800e850:	0800e7b1 	.word	0x0800e7b1
 800e854:	0800e7b1 	.word	0x0800e7b1
 800e858:	0800e8ab 	.word	0x0800e8ab
 800e85c:	3b45      	subs	r3, #69	@ 0x45
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d8a6      	bhi.n	800e7b0 <__ssvfiscanf_r+0xd0>
 800e862:	2305      	movs	r3, #5
 800e864:	e031      	b.n	800e8ca <__ssvfiscanf_r+0x1ea>
 800e866:	6863      	ldr	r3, [r4, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	dd0d      	ble.n	800e888 <__ssvfiscanf_r+0x1a8>
 800e86c:	6823      	ldr	r3, [r4, #0]
 800e86e:	781a      	ldrb	r2, [r3, #0]
 800e870:	454a      	cmp	r2, r9
 800e872:	f040 80a6 	bne.w	800e9c2 <__ssvfiscanf_r+0x2e2>
 800e876:	3301      	adds	r3, #1
 800e878:	6862      	ldr	r2, [r4, #4]
 800e87a:	6023      	str	r3, [r4, #0]
 800e87c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e87e:	3a01      	subs	r2, #1
 800e880:	3301      	adds	r3, #1
 800e882:	6062      	str	r2, [r4, #4]
 800e884:	9345      	str	r3, [sp, #276]	@ 0x114
 800e886:	e753      	b.n	800e730 <__ssvfiscanf_r+0x50>
 800e888:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e88a:	4621      	mov	r1, r4
 800e88c:	4630      	mov	r0, r6
 800e88e:	4798      	blx	r3
 800e890:	2800      	cmp	r0, #0
 800e892:	d0eb      	beq.n	800e86c <__ssvfiscanf_r+0x18c>
 800e894:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e896:	2800      	cmp	r0, #0
 800e898:	f040 808b 	bne.w	800e9b2 <__ssvfiscanf_r+0x2d2>
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8a0:	e08b      	b.n	800e9ba <__ssvfiscanf_r+0x2da>
 800e8a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e8a4:	f042 0220 	orr.w	r2, r2, #32
 800e8a8:	9241      	str	r2, [sp, #260]	@ 0x104
 800e8aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e8ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e8b0:	9241      	str	r2, [sp, #260]	@ 0x104
 800e8b2:	2210      	movs	r2, #16
 800e8b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800e8b6:	9242      	str	r2, [sp, #264]	@ 0x108
 800e8b8:	d902      	bls.n	800e8c0 <__ssvfiscanf_r+0x1e0>
 800e8ba:	e005      	b.n	800e8c8 <__ssvfiscanf_r+0x1e8>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	9342      	str	r3, [sp, #264]	@ 0x108
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e002      	b.n	800e8ca <__ssvfiscanf_r+0x1ea>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	9342      	str	r3, [sp, #264]	@ 0x108
 800e8c8:	2304      	movs	r3, #4
 800e8ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e8cc:	6863      	ldr	r3, [r4, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	dd39      	ble.n	800e946 <__ssvfiscanf_r+0x266>
 800e8d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e8d4:	0659      	lsls	r1, r3, #25
 800e8d6:	d404      	bmi.n	800e8e2 <__ssvfiscanf_r+0x202>
 800e8d8:	6823      	ldr	r3, [r4, #0]
 800e8da:	781a      	ldrb	r2, [r3, #0]
 800e8dc:	5cba      	ldrb	r2, [r7, r2]
 800e8de:	0712      	lsls	r2, r2, #28
 800e8e0:	d438      	bmi.n	800e954 <__ssvfiscanf_r+0x274>
 800e8e2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	dc47      	bgt.n	800e978 <__ssvfiscanf_r+0x298>
 800e8e8:	466b      	mov	r3, sp
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	a941      	add	r1, sp, #260	@ 0x104
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f000 f86c 	bl	800e9cc <_scanf_chars>
 800e8f4:	2801      	cmp	r0, #1
 800e8f6:	d064      	beq.n	800e9c2 <__ssvfiscanf_r+0x2e2>
 800e8f8:	2802      	cmp	r0, #2
 800e8fa:	f47f af19 	bne.w	800e730 <__ssvfiscanf_r+0x50>
 800e8fe:	e7c9      	b.n	800e894 <__ssvfiscanf_r+0x1b4>
 800e900:	220a      	movs	r2, #10
 800e902:	e7d7      	b.n	800e8b4 <__ssvfiscanf_r+0x1d4>
 800e904:	4629      	mov	r1, r5
 800e906:	4640      	mov	r0, r8
 800e908:	f000 fa5a 	bl	800edc0 <__sccl>
 800e90c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e912:	9341      	str	r3, [sp, #260]	@ 0x104
 800e914:	4605      	mov	r5, r0
 800e916:	2301      	movs	r3, #1
 800e918:	e7d7      	b.n	800e8ca <__ssvfiscanf_r+0x1ea>
 800e91a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e920:	9341      	str	r3, [sp, #260]	@ 0x104
 800e922:	2300      	movs	r3, #0
 800e924:	e7d1      	b.n	800e8ca <__ssvfiscanf_r+0x1ea>
 800e926:	2302      	movs	r3, #2
 800e928:	e7cf      	b.n	800e8ca <__ssvfiscanf_r+0x1ea>
 800e92a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e92c:	06c3      	lsls	r3, r0, #27
 800e92e:	f53f aeff 	bmi.w	800e730 <__ssvfiscanf_r+0x50>
 800e932:	9b00      	ldr	r3, [sp, #0]
 800e934:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e936:	1d19      	adds	r1, r3, #4
 800e938:	9100      	str	r1, [sp, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	07c0      	lsls	r0, r0, #31
 800e93e:	bf4c      	ite	mi
 800e940:	801a      	strhmi	r2, [r3, #0]
 800e942:	601a      	strpl	r2, [r3, #0]
 800e944:	e6f4      	b.n	800e730 <__ssvfiscanf_r+0x50>
 800e946:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e948:	4621      	mov	r1, r4
 800e94a:	4630      	mov	r0, r6
 800e94c:	4798      	blx	r3
 800e94e:	2800      	cmp	r0, #0
 800e950:	d0bf      	beq.n	800e8d2 <__ssvfiscanf_r+0x1f2>
 800e952:	e79f      	b.n	800e894 <__ssvfiscanf_r+0x1b4>
 800e954:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e956:	3201      	adds	r2, #1
 800e958:	9245      	str	r2, [sp, #276]	@ 0x114
 800e95a:	6862      	ldr	r2, [r4, #4]
 800e95c:	3a01      	subs	r2, #1
 800e95e:	2a00      	cmp	r2, #0
 800e960:	6062      	str	r2, [r4, #4]
 800e962:	dd02      	ble.n	800e96a <__ssvfiscanf_r+0x28a>
 800e964:	3301      	adds	r3, #1
 800e966:	6023      	str	r3, [r4, #0]
 800e968:	e7b6      	b.n	800e8d8 <__ssvfiscanf_r+0x1f8>
 800e96a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e96c:	4621      	mov	r1, r4
 800e96e:	4630      	mov	r0, r6
 800e970:	4798      	blx	r3
 800e972:	2800      	cmp	r0, #0
 800e974:	d0b0      	beq.n	800e8d8 <__ssvfiscanf_r+0x1f8>
 800e976:	e78d      	b.n	800e894 <__ssvfiscanf_r+0x1b4>
 800e978:	2b04      	cmp	r3, #4
 800e97a:	dc0f      	bgt.n	800e99c <__ssvfiscanf_r+0x2bc>
 800e97c:	466b      	mov	r3, sp
 800e97e:	4622      	mov	r2, r4
 800e980:	a941      	add	r1, sp, #260	@ 0x104
 800e982:	4630      	mov	r0, r6
 800e984:	f000 f87c 	bl	800ea80 <_scanf_i>
 800e988:	e7b4      	b.n	800e8f4 <__ssvfiscanf_r+0x214>
 800e98a:	bf00      	nop
 800e98c:	0800e62d 	.word	0x0800e62d
 800e990:	0800e6a7 	.word	0x0800e6a7
 800e994:	08010469 	.word	0x08010469
 800e998:	0801024d 	.word	0x0801024d
 800e99c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c8 <__ssvfiscanf_r+0x2e8>)
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f43f aec6 	beq.w	800e730 <__ssvfiscanf_r+0x50>
 800e9a4:	466b      	mov	r3, sp
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	a941      	add	r1, sp, #260	@ 0x104
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7fc fe20 	bl	800b5f0 <_scanf_float>
 800e9b0:	e7a0      	b.n	800e8f4 <__ssvfiscanf_r+0x214>
 800e9b2:	89a3      	ldrh	r3, [r4, #12]
 800e9b4:	065b      	lsls	r3, r3, #25
 800e9b6:	f53f af71 	bmi.w	800e89c <__ssvfiscanf_r+0x1bc>
 800e9ba:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e9c4:	e7f9      	b.n	800e9ba <__ssvfiscanf_r+0x2da>
 800e9c6:	bf00      	nop
 800e9c8:	0800b5f1 	.word	0x0800b5f1

0800e9cc <_scanf_chars>:
 800e9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d0:	4615      	mov	r5, r2
 800e9d2:	688a      	ldr	r2, [r1, #8]
 800e9d4:	4680      	mov	r8, r0
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	b932      	cbnz	r2, 800e9e8 <_scanf_chars+0x1c>
 800e9da:	698a      	ldr	r2, [r1, #24]
 800e9dc:	2a00      	cmp	r2, #0
 800e9de:	bf14      	ite	ne
 800e9e0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800e9e4:	2201      	moveq	r2, #1
 800e9e6:	608a      	str	r2, [r1, #8]
 800e9e8:	6822      	ldr	r2, [r4, #0]
 800e9ea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ea7c <_scanf_chars+0xb0>
 800e9ee:	06d1      	lsls	r1, r2, #27
 800e9f0:	bf5f      	itttt	pl
 800e9f2:	681a      	ldrpl	r2, [r3, #0]
 800e9f4:	1d11      	addpl	r1, r2, #4
 800e9f6:	6019      	strpl	r1, [r3, #0]
 800e9f8:	6816      	ldrpl	r6, [r2, #0]
 800e9fa:	2700      	movs	r7, #0
 800e9fc:	69a0      	ldr	r0, [r4, #24]
 800e9fe:	b188      	cbz	r0, 800ea24 <_scanf_chars+0x58>
 800ea00:	2801      	cmp	r0, #1
 800ea02:	d107      	bne.n	800ea14 <_scanf_chars+0x48>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	781a      	ldrb	r2, [r3, #0]
 800ea08:	6963      	ldr	r3, [r4, #20]
 800ea0a:	5c9b      	ldrb	r3, [r3, r2]
 800ea0c:	b953      	cbnz	r3, 800ea24 <_scanf_chars+0x58>
 800ea0e:	2f00      	cmp	r7, #0
 800ea10:	d031      	beq.n	800ea76 <_scanf_chars+0xaa>
 800ea12:	e022      	b.n	800ea5a <_scanf_chars+0x8e>
 800ea14:	2802      	cmp	r0, #2
 800ea16:	d120      	bne.n	800ea5a <_scanf_chars+0x8e>
 800ea18:	682b      	ldr	r3, [r5, #0]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ea20:	071b      	lsls	r3, r3, #28
 800ea22:	d41a      	bmi.n	800ea5a <_scanf_chars+0x8e>
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	06da      	lsls	r2, r3, #27
 800ea28:	bf5e      	ittt	pl
 800ea2a:	682b      	ldrpl	r3, [r5, #0]
 800ea2c:	781b      	ldrbpl	r3, [r3, #0]
 800ea2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ea32:	682a      	ldr	r2, [r5, #0]
 800ea34:	686b      	ldr	r3, [r5, #4]
 800ea36:	3201      	adds	r2, #1
 800ea38:	602a      	str	r2, [r5, #0]
 800ea3a:	68a2      	ldr	r2, [r4, #8]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	3a01      	subs	r2, #1
 800ea40:	606b      	str	r3, [r5, #4]
 800ea42:	3701      	adds	r7, #1
 800ea44:	60a2      	str	r2, [r4, #8]
 800ea46:	b142      	cbz	r2, 800ea5a <_scanf_chars+0x8e>
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	dcd7      	bgt.n	800e9fc <_scanf_chars+0x30>
 800ea4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ea50:	4629      	mov	r1, r5
 800ea52:	4640      	mov	r0, r8
 800ea54:	4798      	blx	r3
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d0d0      	beq.n	800e9fc <_scanf_chars+0x30>
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	f013 0310 	ands.w	r3, r3, #16
 800ea60:	d105      	bne.n	800ea6e <_scanf_chars+0xa2>
 800ea62:	68e2      	ldr	r2, [r4, #12]
 800ea64:	3201      	adds	r2, #1
 800ea66:	60e2      	str	r2, [r4, #12]
 800ea68:	69a2      	ldr	r2, [r4, #24]
 800ea6a:	b102      	cbz	r2, 800ea6e <_scanf_chars+0xa2>
 800ea6c:	7033      	strb	r3, [r6, #0]
 800ea6e:	6923      	ldr	r3, [r4, #16]
 800ea70:	443b      	add	r3, r7
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	2000      	movs	r0, #0
 800ea76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea7a:	bf00      	nop
 800ea7c:	08010469 	.word	0x08010469

0800ea80 <_scanf_i>:
 800ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea84:	4698      	mov	r8, r3
 800ea86:	4b74      	ldr	r3, [pc, #464]	@ (800ec58 <_scanf_i+0x1d8>)
 800ea88:	460c      	mov	r4, r1
 800ea8a:	4682      	mov	sl, r0
 800ea8c:	4616      	mov	r6, r2
 800ea8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea92:	b087      	sub	sp, #28
 800ea94:	ab03      	add	r3, sp, #12
 800ea96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea9a:	4b70      	ldr	r3, [pc, #448]	@ (800ec5c <_scanf_i+0x1dc>)
 800ea9c:	69a1      	ldr	r1, [r4, #24]
 800ea9e:	4a70      	ldr	r2, [pc, #448]	@ (800ec60 <_scanf_i+0x1e0>)
 800eaa0:	2903      	cmp	r1, #3
 800eaa2:	bf08      	it	eq
 800eaa4:	461a      	moveq	r2, r3
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	9201      	str	r2, [sp, #4]
 800eaaa:	1e5a      	subs	r2, r3, #1
 800eaac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800eab0:	bf88      	it	hi
 800eab2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800eab6:	4627      	mov	r7, r4
 800eab8:	bf82      	ittt	hi
 800eaba:	eb03 0905 	addhi.w	r9, r3, r5
 800eabe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800eac2:	60a3      	strhi	r3, [r4, #8]
 800eac4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800eac8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800eacc:	bf98      	it	ls
 800eace:	f04f 0900 	movls.w	r9, #0
 800ead2:	6023      	str	r3, [r4, #0]
 800ead4:	463d      	mov	r5, r7
 800ead6:	f04f 0b00 	mov.w	fp, #0
 800eada:	6831      	ldr	r1, [r6, #0]
 800eadc:	ab03      	add	r3, sp, #12
 800eade:	7809      	ldrb	r1, [r1, #0]
 800eae0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eae4:	2202      	movs	r2, #2
 800eae6:	f7f1 fba3 	bl	8000230 <memchr>
 800eaea:	b328      	cbz	r0, 800eb38 <_scanf_i+0xb8>
 800eaec:	f1bb 0f01 	cmp.w	fp, #1
 800eaf0:	d159      	bne.n	800eba6 <_scanf_i+0x126>
 800eaf2:	6862      	ldr	r2, [r4, #4]
 800eaf4:	b92a      	cbnz	r2, 800eb02 <_scanf_i+0x82>
 800eaf6:	6822      	ldr	r2, [r4, #0]
 800eaf8:	2108      	movs	r1, #8
 800eafa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eafe:	6061      	str	r1, [r4, #4]
 800eb00:	6022      	str	r2, [r4, #0]
 800eb02:	6822      	ldr	r2, [r4, #0]
 800eb04:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800eb08:	6022      	str	r2, [r4, #0]
 800eb0a:	68a2      	ldr	r2, [r4, #8]
 800eb0c:	1e51      	subs	r1, r2, #1
 800eb0e:	60a1      	str	r1, [r4, #8]
 800eb10:	b192      	cbz	r2, 800eb38 <_scanf_i+0xb8>
 800eb12:	6832      	ldr	r2, [r6, #0]
 800eb14:	1c51      	adds	r1, r2, #1
 800eb16:	6031      	str	r1, [r6, #0]
 800eb18:	7812      	ldrb	r2, [r2, #0]
 800eb1a:	f805 2b01 	strb.w	r2, [r5], #1
 800eb1e:	6872      	ldr	r2, [r6, #4]
 800eb20:	3a01      	subs	r2, #1
 800eb22:	2a00      	cmp	r2, #0
 800eb24:	6072      	str	r2, [r6, #4]
 800eb26:	dc07      	bgt.n	800eb38 <_scanf_i+0xb8>
 800eb28:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4650      	mov	r0, sl
 800eb30:	4790      	blx	r2
 800eb32:	2800      	cmp	r0, #0
 800eb34:	f040 8085 	bne.w	800ec42 <_scanf_i+0x1c2>
 800eb38:	f10b 0b01 	add.w	fp, fp, #1
 800eb3c:	f1bb 0f03 	cmp.w	fp, #3
 800eb40:	d1cb      	bne.n	800eada <_scanf_i+0x5a>
 800eb42:	6863      	ldr	r3, [r4, #4]
 800eb44:	b90b      	cbnz	r3, 800eb4a <_scanf_i+0xca>
 800eb46:	230a      	movs	r3, #10
 800eb48:	6063      	str	r3, [r4, #4]
 800eb4a:	6863      	ldr	r3, [r4, #4]
 800eb4c:	4945      	ldr	r1, [pc, #276]	@ (800ec64 <_scanf_i+0x1e4>)
 800eb4e:	6960      	ldr	r0, [r4, #20]
 800eb50:	1ac9      	subs	r1, r1, r3
 800eb52:	f000 f935 	bl	800edc0 <__sccl>
 800eb56:	f04f 0b00 	mov.w	fp, #0
 800eb5a:	68a3      	ldr	r3, [r4, #8]
 800eb5c:	6822      	ldr	r2, [r4, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d03d      	beq.n	800ebde <_scanf_i+0x15e>
 800eb62:	6831      	ldr	r1, [r6, #0]
 800eb64:	6960      	ldr	r0, [r4, #20]
 800eb66:	f891 c000 	ldrb.w	ip, [r1]
 800eb6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d035      	beq.n	800ebde <_scanf_i+0x15e>
 800eb72:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800eb76:	d124      	bne.n	800ebc2 <_scanf_i+0x142>
 800eb78:	0510      	lsls	r0, r2, #20
 800eb7a:	d522      	bpl.n	800ebc2 <_scanf_i+0x142>
 800eb7c:	f10b 0b01 	add.w	fp, fp, #1
 800eb80:	f1b9 0f00 	cmp.w	r9, #0
 800eb84:	d003      	beq.n	800eb8e <_scanf_i+0x10e>
 800eb86:	3301      	adds	r3, #1
 800eb88:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800eb8c:	60a3      	str	r3, [r4, #8]
 800eb8e:	6873      	ldr	r3, [r6, #4]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	6073      	str	r3, [r6, #4]
 800eb96:	dd1b      	ble.n	800ebd0 <_scanf_i+0x150>
 800eb98:	6833      	ldr	r3, [r6, #0]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	6033      	str	r3, [r6, #0]
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	60a3      	str	r3, [r4, #8]
 800eba4:	e7d9      	b.n	800eb5a <_scanf_i+0xda>
 800eba6:	f1bb 0f02 	cmp.w	fp, #2
 800ebaa:	d1ae      	bne.n	800eb0a <_scanf_i+0x8a>
 800ebac:	6822      	ldr	r2, [r4, #0]
 800ebae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ebb2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ebb6:	d1c4      	bne.n	800eb42 <_scanf_i+0xc2>
 800ebb8:	2110      	movs	r1, #16
 800ebba:	6061      	str	r1, [r4, #4]
 800ebbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ebc0:	e7a2      	b.n	800eb08 <_scanf_i+0x88>
 800ebc2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ebc6:	6022      	str	r2, [r4, #0]
 800ebc8:	780b      	ldrb	r3, [r1, #0]
 800ebca:	f805 3b01 	strb.w	r3, [r5], #1
 800ebce:	e7de      	b.n	800eb8e <_scanf_i+0x10e>
 800ebd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4650      	mov	r0, sl
 800ebd8:	4798      	blx	r3
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d0df      	beq.n	800eb9e <_scanf_i+0x11e>
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	05d9      	lsls	r1, r3, #23
 800ebe2:	d50d      	bpl.n	800ec00 <_scanf_i+0x180>
 800ebe4:	42bd      	cmp	r5, r7
 800ebe6:	d909      	bls.n	800ebfc <_scanf_i+0x17c>
 800ebe8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ebec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebf0:	4632      	mov	r2, r6
 800ebf2:	4650      	mov	r0, sl
 800ebf4:	4798      	blx	r3
 800ebf6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ebfa:	464d      	mov	r5, r9
 800ebfc:	42bd      	cmp	r5, r7
 800ebfe:	d028      	beq.n	800ec52 <_scanf_i+0x1d2>
 800ec00:	6822      	ldr	r2, [r4, #0]
 800ec02:	f012 0210 	ands.w	r2, r2, #16
 800ec06:	d113      	bne.n	800ec30 <_scanf_i+0x1b0>
 800ec08:	702a      	strb	r2, [r5, #0]
 800ec0a:	6863      	ldr	r3, [r4, #4]
 800ec0c:	9e01      	ldr	r6, [sp, #4]
 800ec0e:	4639      	mov	r1, r7
 800ec10:	4650      	mov	r0, sl
 800ec12:	47b0      	blx	r6
 800ec14:	f8d8 3000 	ldr.w	r3, [r8]
 800ec18:	6821      	ldr	r1, [r4, #0]
 800ec1a:	1d1a      	adds	r2, r3, #4
 800ec1c:	f8c8 2000 	str.w	r2, [r8]
 800ec20:	f011 0f20 	tst.w	r1, #32
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	d00f      	beq.n	800ec48 <_scanf_i+0x1c8>
 800ec28:	6018      	str	r0, [r3, #0]
 800ec2a:	68e3      	ldr	r3, [r4, #12]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	60e3      	str	r3, [r4, #12]
 800ec30:	6923      	ldr	r3, [r4, #16]
 800ec32:	1bed      	subs	r5, r5, r7
 800ec34:	445d      	add	r5, fp
 800ec36:	442b      	add	r3, r5
 800ec38:	6123      	str	r3, [r4, #16]
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	b007      	add	sp, #28
 800ec3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec42:	f04f 0b00 	mov.w	fp, #0
 800ec46:	e7ca      	b.n	800ebde <_scanf_i+0x15e>
 800ec48:	07ca      	lsls	r2, r1, #31
 800ec4a:	bf4c      	ite	mi
 800ec4c:	8018      	strhmi	r0, [r3, #0]
 800ec4e:	6018      	strpl	r0, [r3, #0]
 800ec50:	e7eb      	b.n	800ec2a <_scanf_i+0x1aa>
 800ec52:	2001      	movs	r0, #1
 800ec54:	e7f2      	b.n	800ec3c <_scanf_i+0x1bc>
 800ec56:	bf00      	nop
 800ec58:	080100f0 	.word	0x080100f0
 800ec5c:	0800e379 	.word	0x0800e379
 800ec60:	0800f765 	.word	0x0800f765
 800ec64:	08010268 	.word	0x08010268

0800ec68 <__sflush_r>:
 800ec68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec70:	0716      	lsls	r6, r2, #28
 800ec72:	4605      	mov	r5, r0
 800ec74:	460c      	mov	r4, r1
 800ec76:	d454      	bmi.n	800ed22 <__sflush_r+0xba>
 800ec78:	684b      	ldr	r3, [r1, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	dc02      	bgt.n	800ec84 <__sflush_r+0x1c>
 800ec7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	dd48      	ble.n	800ed16 <__sflush_r+0xae>
 800ec84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec86:	2e00      	cmp	r6, #0
 800ec88:	d045      	beq.n	800ed16 <__sflush_r+0xae>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec90:	682f      	ldr	r7, [r5, #0]
 800ec92:	6a21      	ldr	r1, [r4, #32]
 800ec94:	602b      	str	r3, [r5, #0]
 800ec96:	d030      	beq.n	800ecfa <__sflush_r+0x92>
 800ec98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	0759      	lsls	r1, r3, #29
 800ec9e:	d505      	bpl.n	800ecac <__sflush_r+0x44>
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	1ad2      	subs	r2, r2, r3
 800eca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eca6:	b10b      	cbz	r3, 800ecac <__sflush_r+0x44>
 800eca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ecaa:	1ad2      	subs	r2, r2, r3
 800ecac:	2300      	movs	r3, #0
 800ecae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecb0:	6a21      	ldr	r1, [r4, #32]
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	47b0      	blx	r6
 800ecb6:	1c43      	adds	r3, r0, #1
 800ecb8:	89a3      	ldrh	r3, [r4, #12]
 800ecba:	d106      	bne.n	800ecca <__sflush_r+0x62>
 800ecbc:	6829      	ldr	r1, [r5, #0]
 800ecbe:	291d      	cmp	r1, #29
 800ecc0:	d82b      	bhi.n	800ed1a <__sflush_r+0xb2>
 800ecc2:	4a2a      	ldr	r2, [pc, #168]	@ (800ed6c <__sflush_r+0x104>)
 800ecc4:	40ca      	lsrs	r2, r1
 800ecc6:	07d6      	lsls	r6, r2, #31
 800ecc8:	d527      	bpl.n	800ed1a <__sflush_r+0xb2>
 800ecca:	2200      	movs	r2, #0
 800eccc:	6062      	str	r2, [r4, #4]
 800ecce:	04d9      	lsls	r1, r3, #19
 800ecd0:	6922      	ldr	r2, [r4, #16]
 800ecd2:	6022      	str	r2, [r4, #0]
 800ecd4:	d504      	bpl.n	800ece0 <__sflush_r+0x78>
 800ecd6:	1c42      	adds	r2, r0, #1
 800ecd8:	d101      	bne.n	800ecde <__sflush_r+0x76>
 800ecda:	682b      	ldr	r3, [r5, #0]
 800ecdc:	b903      	cbnz	r3, 800ece0 <__sflush_r+0x78>
 800ecde:	6560      	str	r0, [r4, #84]	@ 0x54
 800ece0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ece2:	602f      	str	r7, [r5, #0]
 800ece4:	b1b9      	cbz	r1, 800ed16 <__sflush_r+0xae>
 800ece6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ecea:	4299      	cmp	r1, r3
 800ecec:	d002      	beq.n	800ecf4 <__sflush_r+0x8c>
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f7fd ff16 	bl	800cb20 <_free_r>
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecf8:	e00d      	b.n	800ed16 <__sflush_r+0xae>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	4628      	mov	r0, r5
 800ecfe:	47b0      	blx	r6
 800ed00:	4602      	mov	r2, r0
 800ed02:	1c50      	adds	r0, r2, #1
 800ed04:	d1c9      	bne.n	800ec9a <__sflush_r+0x32>
 800ed06:	682b      	ldr	r3, [r5, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0c6      	beq.n	800ec9a <__sflush_r+0x32>
 800ed0c:	2b1d      	cmp	r3, #29
 800ed0e:	d001      	beq.n	800ed14 <__sflush_r+0xac>
 800ed10:	2b16      	cmp	r3, #22
 800ed12:	d11e      	bne.n	800ed52 <__sflush_r+0xea>
 800ed14:	602f      	str	r7, [r5, #0]
 800ed16:	2000      	movs	r0, #0
 800ed18:	e022      	b.n	800ed60 <__sflush_r+0xf8>
 800ed1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed1e:	b21b      	sxth	r3, r3
 800ed20:	e01b      	b.n	800ed5a <__sflush_r+0xf2>
 800ed22:	690f      	ldr	r7, [r1, #16]
 800ed24:	2f00      	cmp	r7, #0
 800ed26:	d0f6      	beq.n	800ed16 <__sflush_r+0xae>
 800ed28:	0793      	lsls	r3, r2, #30
 800ed2a:	680e      	ldr	r6, [r1, #0]
 800ed2c:	bf08      	it	eq
 800ed2e:	694b      	ldreq	r3, [r1, #20]
 800ed30:	600f      	str	r7, [r1, #0]
 800ed32:	bf18      	it	ne
 800ed34:	2300      	movne	r3, #0
 800ed36:	eba6 0807 	sub.w	r8, r6, r7
 800ed3a:	608b      	str	r3, [r1, #8]
 800ed3c:	f1b8 0f00 	cmp.w	r8, #0
 800ed40:	dde9      	ble.n	800ed16 <__sflush_r+0xae>
 800ed42:	6a21      	ldr	r1, [r4, #32]
 800ed44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed46:	4643      	mov	r3, r8
 800ed48:	463a      	mov	r2, r7
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	47b0      	blx	r6
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	dc08      	bgt.n	800ed64 <__sflush_r+0xfc>
 800ed52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed5a:	81a3      	strh	r3, [r4, #12]
 800ed5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed64:	4407      	add	r7, r0
 800ed66:	eba8 0800 	sub.w	r8, r8, r0
 800ed6a:	e7e7      	b.n	800ed3c <__sflush_r+0xd4>
 800ed6c:	20400001 	.word	0x20400001

0800ed70 <_fflush_r>:
 800ed70:	b538      	push	{r3, r4, r5, lr}
 800ed72:	690b      	ldr	r3, [r1, #16]
 800ed74:	4605      	mov	r5, r0
 800ed76:	460c      	mov	r4, r1
 800ed78:	b913      	cbnz	r3, 800ed80 <_fflush_r+0x10>
 800ed7a:	2500      	movs	r5, #0
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	b118      	cbz	r0, 800ed8a <_fflush_r+0x1a>
 800ed82:	6a03      	ldr	r3, [r0, #32]
 800ed84:	b90b      	cbnz	r3, 800ed8a <_fflush_r+0x1a>
 800ed86:	f7fc fecd 	bl	800bb24 <__sinit>
 800ed8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d0f3      	beq.n	800ed7a <_fflush_r+0xa>
 800ed92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed94:	07d0      	lsls	r0, r2, #31
 800ed96:	d404      	bmi.n	800eda2 <_fflush_r+0x32>
 800ed98:	0599      	lsls	r1, r3, #22
 800ed9a:	d402      	bmi.n	800eda2 <_fflush_r+0x32>
 800ed9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed9e:	f7fd f850 	bl	800be42 <__retarget_lock_acquire_recursive>
 800eda2:	4628      	mov	r0, r5
 800eda4:	4621      	mov	r1, r4
 800eda6:	f7ff ff5f 	bl	800ec68 <__sflush_r>
 800edaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edac:	07da      	lsls	r2, r3, #31
 800edae:	4605      	mov	r5, r0
 800edb0:	d4e4      	bmi.n	800ed7c <_fflush_r+0xc>
 800edb2:	89a3      	ldrh	r3, [r4, #12]
 800edb4:	059b      	lsls	r3, r3, #22
 800edb6:	d4e1      	bmi.n	800ed7c <_fflush_r+0xc>
 800edb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edba:	f7fd f843 	bl	800be44 <__retarget_lock_release_recursive>
 800edbe:	e7dd      	b.n	800ed7c <_fflush_r+0xc>

0800edc0 <__sccl>:
 800edc0:	b570      	push	{r4, r5, r6, lr}
 800edc2:	780b      	ldrb	r3, [r1, #0]
 800edc4:	4604      	mov	r4, r0
 800edc6:	2b5e      	cmp	r3, #94	@ 0x5e
 800edc8:	bf0b      	itete	eq
 800edca:	784b      	ldrbeq	r3, [r1, #1]
 800edcc:	1c4a      	addne	r2, r1, #1
 800edce:	1c8a      	addeq	r2, r1, #2
 800edd0:	2100      	movne	r1, #0
 800edd2:	bf08      	it	eq
 800edd4:	2101      	moveq	r1, #1
 800edd6:	3801      	subs	r0, #1
 800edd8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800eddc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ede0:	42a8      	cmp	r0, r5
 800ede2:	d1fb      	bne.n	800eddc <__sccl+0x1c>
 800ede4:	b90b      	cbnz	r3, 800edea <__sccl+0x2a>
 800ede6:	1e50      	subs	r0, r2, #1
 800ede8:	bd70      	pop	{r4, r5, r6, pc}
 800edea:	f081 0101 	eor.w	r1, r1, #1
 800edee:	54e1      	strb	r1, [r4, r3]
 800edf0:	4610      	mov	r0, r2
 800edf2:	4602      	mov	r2, r0
 800edf4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800edf8:	2d2d      	cmp	r5, #45	@ 0x2d
 800edfa:	d005      	beq.n	800ee08 <__sccl+0x48>
 800edfc:	2d5d      	cmp	r5, #93	@ 0x5d
 800edfe:	d016      	beq.n	800ee2e <__sccl+0x6e>
 800ee00:	2d00      	cmp	r5, #0
 800ee02:	d0f1      	beq.n	800ede8 <__sccl+0x28>
 800ee04:	462b      	mov	r3, r5
 800ee06:	e7f2      	b.n	800edee <__sccl+0x2e>
 800ee08:	7846      	ldrb	r6, [r0, #1]
 800ee0a:	2e5d      	cmp	r6, #93	@ 0x5d
 800ee0c:	d0fa      	beq.n	800ee04 <__sccl+0x44>
 800ee0e:	42b3      	cmp	r3, r6
 800ee10:	dcf8      	bgt.n	800ee04 <__sccl+0x44>
 800ee12:	3002      	adds	r0, #2
 800ee14:	461a      	mov	r2, r3
 800ee16:	3201      	adds	r2, #1
 800ee18:	4296      	cmp	r6, r2
 800ee1a:	54a1      	strb	r1, [r4, r2]
 800ee1c:	dcfb      	bgt.n	800ee16 <__sccl+0x56>
 800ee1e:	1af2      	subs	r2, r6, r3
 800ee20:	3a01      	subs	r2, #1
 800ee22:	1c5d      	adds	r5, r3, #1
 800ee24:	42b3      	cmp	r3, r6
 800ee26:	bfa8      	it	ge
 800ee28:	2200      	movge	r2, #0
 800ee2a:	18ab      	adds	r3, r5, r2
 800ee2c:	e7e1      	b.n	800edf2 <__sccl+0x32>
 800ee2e:	4610      	mov	r0, r2
 800ee30:	e7da      	b.n	800ede8 <__sccl+0x28>

0800ee32 <__submore>:
 800ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee36:	460c      	mov	r4, r1
 800ee38:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ee3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee3e:	4299      	cmp	r1, r3
 800ee40:	d11d      	bne.n	800ee7e <__submore+0x4c>
 800ee42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ee46:	f7fd fedf 	bl	800cc08 <_malloc_r>
 800ee4a:	b918      	cbnz	r0, 800ee54 <__submore+0x22>
 800ee4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee58:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ee5a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ee5e:	6360      	str	r0, [r4, #52]	@ 0x34
 800ee60:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ee64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ee68:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ee6c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee70:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ee74:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ee78:	6020      	str	r0, [r4, #0]
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e7e8      	b.n	800ee50 <__submore+0x1e>
 800ee7e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ee80:	0077      	lsls	r7, r6, #1
 800ee82:	463a      	mov	r2, r7
 800ee84:	f000 fbd1 	bl	800f62a <_realloc_r>
 800ee88:	4605      	mov	r5, r0
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d0de      	beq.n	800ee4c <__submore+0x1a>
 800ee8e:	eb00 0806 	add.w	r8, r0, r6
 800ee92:	4601      	mov	r1, r0
 800ee94:	4632      	mov	r2, r6
 800ee96:	4640      	mov	r0, r8
 800ee98:	f7fc ffd5 	bl	800be46 <memcpy>
 800ee9c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800eea0:	f8c4 8000 	str.w	r8, [r4]
 800eea4:	e7e9      	b.n	800ee7a <__submore+0x48>

0800eea6 <memmove>:
 800eea6:	4288      	cmp	r0, r1
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	eb01 0402 	add.w	r4, r1, r2
 800eeae:	d902      	bls.n	800eeb6 <memmove+0x10>
 800eeb0:	4284      	cmp	r4, r0
 800eeb2:	4623      	mov	r3, r4
 800eeb4:	d807      	bhi.n	800eec6 <memmove+0x20>
 800eeb6:	1e43      	subs	r3, r0, #1
 800eeb8:	42a1      	cmp	r1, r4
 800eeba:	d008      	beq.n	800eece <memmove+0x28>
 800eebc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eec0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eec4:	e7f8      	b.n	800eeb8 <memmove+0x12>
 800eec6:	4402      	add	r2, r0
 800eec8:	4601      	mov	r1, r0
 800eeca:	428a      	cmp	r2, r1
 800eecc:	d100      	bne.n	800eed0 <memmove+0x2a>
 800eece:	bd10      	pop	{r4, pc}
 800eed0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eed4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eed8:	e7f7      	b.n	800eeca <memmove+0x24>

0800eeda <strncmp>:
 800eeda:	b510      	push	{r4, lr}
 800eedc:	b16a      	cbz	r2, 800eefa <strncmp+0x20>
 800eede:	3901      	subs	r1, #1
 800eee0:	1884      	adds	r4, r0, r2
 800eee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eee6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d103      	bne.n	800eef6 <strncmp+0x1c>
 800eeee:	42a0      	cmp	r0, r4
 800eef0:	d001      	beq.n	800eef6 <strncmp+0x1c>
 800eef2:	2a00      	cmp	r2, #0
 800eef4:	d1f5      	bne.n	800eee2 <strncmp+0x8>
 800eef6:	1ad0      	subs	r0, r2, r3
 800eef8:	bd10      	pop	{r4, pc}
 800eefa:	4610      	mov	r0, r2
 800eefc:	e7fc      	b.n	800eef8 <strncmp+0x1e>
	...

0800ef00 <_sbrk_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4d06      	ldr	r5, [pc, #24]	@ (800ef1c <_sbrk_r+0x1c>)
 800ef04:	2300      	movs	r3, #0
 800ef06:	4604      	mov	r4, r0
 800ef08:	4608      	mov	r0, r1
 800ef0a:	602b      	str	r3, [r5, #0]
 800ef0c:	f7f2 febc 	bl	8001c88 <_sbrk>
 800ef10:	1c43      	adds	r3, r0, #1
 800ef12:	d102      	bne.n	800ef1a <_sbrk_r+0x1a>
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	b103      	cbz	r3, 800ef1a <_sbrk_r+0x1a>
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	20000db4 	.word	0x20000db4

0800ef20 <nan>:
 800ef20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef28 <nan+0x8>
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	00000000 	.word	0x00000000
 800ef2c:	7ff80000 	.word	0x7ff80000

0800ef30 <__assert_func>:
 800ef30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef32:	4614      	mov	r4, r2
 800ef34:	461a      	mov	r2, r3
 800ef36:	4b09      	ldr	r3, [pc, #36]	@ (800ef5c <__assert_func+0x2c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	68d8      	ldr	r0, [r3, #12]
 800ef3e:	b14c      	cbz	r4, 800ef54 <__assert_func+0x24>
 800ef40:	4b07      	ldr	r3, [pc, #28]	@ (800ef60 <__assert_func+0x30>)
 800ef42:	9100      	str	r1, [sp, #0]
 800ef44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef48:	4906      	ldr	r1, [pc, #24]	@ (800ef64 <__assert_func+0x34>)
 800ef4a:	462b      	mov	r3, r5
 800ef4c:	f000 fc1a 	bl	800f784 <fiprintf>
 800ef50:	f000 fc2a 	bl	800f7a8 <abort>
 800ef54:	4b04      	ldr	r3, [pc, #16]	@ (800ef68 <__assert_func+0x38>)
 800ef56:	461c      	mov	r4, r3
 800ef58:	e7f3      	b.n	800ef42 <__assert_func+0x12>
 800ef5a:	bf00      	nop
 800ef5c:	200003e4 	.word	0x200003e4
 800ef60:	0801027b 	.word	0x0801027b
 800ef64:	08010288 	.word	0x08010288
 800ef68:	080102b6 	.word	0x080102b6

0800ef6c <_calloc_r>:
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	fba1 5402 	umull	r5, r4, r1, r2
 800ef72:	b934      	cbnz	r4, 800ef82 <_calloc_r+0x16>
 800ef74:	4629      	mov	r1, r5
 800ef76:	f7fd fe47 	bl	800cc08 <_malloc_r>
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	b928      	cbnz	r0, 800ef8a <_calloc_r+0x1e>
 800ef7e:	4630      	mov	r0, r6
 800ef80:	bd70      	pop	{r4, r5, r6, pc}
 800ef82:	220c      	movs	r2, #12
 800ef84:	6002      	str	r2, [r0, #0]
 800ef86:	2600      	movs	r6, #0
 800ef88:	e7f9      	b.n	800ef7e <_calloc_r+0x12>
 800ef8a:	462a      	mov	r2, r5
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	f7fc fec8 	bl	800bd22 <memset>
 800ef92:	e7f4      	b.n	800ef7e <_calloc_r+0x12>

0800ef94 <rshift>:
 800ef94:	6903      	ldr	r3, [r0, #16]
 800ef96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efa2:	f100 0414 	add.w	r4, r0, #20
 800efa6:	dd45      	ble.n	800f034 <rshift+0xa0>
 800efa8:	f011 011f 	ands.w	r1, r1, #31
 800efac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800efb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800efb4:	d10c      	bne.n	800efd0 <rshift+0x3c>
 800efb6:	f100 0710 	add.w	r7, r0, #16
 800efba:	4629      	mov	r1, r5
 800efbc:	42b1      	cmp	r1, r6
 800efbe:	d334      	bcc.n	800f02a <rshift+0x96>
 800efc0:	1a9b      	subs	r3, r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	1eea      	subs	r2, r5, #3
 800efc6:	4296      	cmp	r6, r2
 800efc8:	bf38      	it	cc
 800efca:	2300      	movcc	r3, #0
 800efcc:	4423      	add	r3, r4
 800efce:	e015      	b.n	800effc <rshift+0x68>
 800efd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800efd4:	f1c1 0820 	rsb	r8, r1, #32
 800efd8:	40cf      	lsrs	r7, r1
 800efda:	f105 0e04 	add.w	lr, r5, #4
 800efde:	46a1      	mov	r9, r4
 800efe0:	4576      	cmp	r6, lr
 800efe2:	46f4      	mov	ip, lr
 800efe4:	d815      	bhi.n	800f012 <rshift+0x7e>
 800efe6:	1a9a      	subs	r2, r3, r2
 800efe8:	0092      	lsls	r2, r2, #2
 800efea:	3a04      	subs	r2, #4
 800efec:	3501      	adds	r5, #1
 800efee:	42ae      	cmp	r6, r5
 800eff0:	bf38      	it	cc
 800eff2:	2200      	movcc	r2, #0
 800eff4:	18a3      	adds	r3, r4, r2
 800eff6:	50a7      	str	r7, [r4, r2]
 800eff8:	b107      	cbz	r7, 800effc <rshift+0x68>
 800effa:	3304      	adds	r3, #4
 800effc:	1b1a      	subs	r2, r3, r4
 800effe:	42a3      	cmp	r3, r4
 800f000:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f004:	bf08      	it	eq
 800f006:	2300      	moveq	r3, #0
 800f008:	6102      	str	r2, [r0, #16]
 800f00a:	bf08      	it	eq
 800f00c:	6143      	streq	r3, [r0, #20]
 800f00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f012:	f8dc c000 	ldr.w	ip, [ip]
 800f016:	fa0c fc08 	lsl.w	ip, ip, r8
 800f01a:	ea4c 0707 	orr.w	r7, ip, r7
 800f01e:	f849 7b04 	str.w	r7, [r9], #4
 800f022:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f026:	40cf      	lsrs	r7, r1
 800f028:	e7da      	b.n	800efe0 <rshift+0x4c>
 800f02a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f02e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f032:	e7c3      	b.n	800efbc <rshift+0x28>
 800f034:	4623      	mov	r3, r4
 800f036:	e7e1      	b.n	800effc <rshift+0x68>

0800f038 <__hexdig_fun>:
 800f038:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f03c:	2b09      	cmp	r3, #9
 800f03e:	d802      	bhi.n	800f046 <__hexdig_fun+0xe>
 800f040:	3820      	subs	r0, #32
 800f042:	b2c0      	uxtb	r0, r0
 800f044:	4770      	bx	lr
 800f046:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f04a:	2b05      	cmp	r3, #5
 800f04c:	d801      	bhi.n	800f052 <__hexdig_fun+0x1a>
 800f04e:	3847      	subs	r0, #71	@ 0x47
 800f050:	e7f7      	b.n	800f042 <__hexdig_fun+0xa>
 800f052:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f056:	2b05      	cmp	r3, #5
 800f058:	d801      	bhi.n	800f05e <__hexdig_fun+0x26>
 800f05a:	3827      	subs	r0, #39	@ 0x27
 800f05c:	e7f1      	b.n	800f042 <__hexdig_fun+0xa>
 800f05e:	2000      	movs	r0, #0
 800f060:	4770      	bx	lr
	...

0800f064 <__gethex>:
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	b085      	sub	sp, #20
 800f06a:	468a      	mov	sl, r1
 800f06c:	9302      	str	r3, [sp, #8]
 800f06e:	680b      	ldr	r3, [r1, #0]
 800f070:	9001      	str	r0, [sp, #4]
 800f072:	4690      	mov	r8, r2
 800f074:	1c9c      	adds	r4, r3, #2
 800f076:	46a1      	mov	r9, r4
 800f078:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f07c:	2830      	cmp	r0, #48	@ 0x30
 800f07e:	d0fa      	beq.n	800f076 <__gethex+0x12>
 800f080:	eba9 0303 	sub.w	r3, r9, r3
 800f084:	f1a3 0b02 	sub.w	fp, r3, #2
 800f088:	f7ff ffd6 	bl	800f038 <__hexdig_fun>
 800f08c:	4605      	mov	r5, r0
 800f08e:	2800      	cmp	r0, #0
 800f090:	d168      	bne.n	800f164 <__gethex+0x100>
 800f092:	49a0      	ldr	r1, [pc, #640]	@ (800f314 <__gethex+0x2b0>)
 800f094:	2201      	movs	r2, #1
 800f096:	4648      	mov	r0, r9
 800f098:	f7ff ff1f 	bl	800eeda <strncmp>
 800f09c:	4607      	mov	r7, r0
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d167      	bne.n	800f172 <__gethex+0x10e>
 800f0a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f0a6:	4626      	mov	r6, r4
 800f0a8:	f7ff ffc6 	bl	800f038 <__hexdig_fun>
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d062      	beq.n	800f176 <__gethex+0x112>
 800f0b0:	4623      	mov	r3, r4
 800f0b2:	7818      	ldrb	r0, [r3, #0]
 800f0b4:	2830      	cmp	r0, #48	@ 0x30
 800f0b6:	4699      	mov	r9, r3
 800f0b8:	f103 0301 	add.w	r3, r3, #1
 800f0bc:	d0f9      	beq.n	800f0b2 <__gethex+0x4e>
 800f0be:	f7ff ffbb 	bl	800f038 <__hexdig_fun>
 800f0c2:	fab0 f580 	clz	r5, r0
 800f0c6:	096d      	lsrs	r5, r5, #5
 800f0c8:	f04f 0b01 	mov.w	fp, #1
 800f0cc:	464a      	mov	r2, r9
 800f0ce:	4616      	mov	r6, r2
 800f0d0:	3201      	adds	r2, #1
 800f0d2:	7830      	ldrb	r0, [r6, #0]
 800f0d4:	f7ff ffb0 	bl	800f038 <__hexdig_fun>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d1f8      	bne.n	800f0ce <__gethex+0x6a>
 800f0dc:	498d      	ldr	r1, [pc, #564]	@ (800f314 <__gethex+0x2b0>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7ff fefa 	bl	800eeda <strncmp>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d13f      	bne.n	800f16a <__gethex+0x106>
 800f0ea:	b944      	cbnz	r4, 800f0fe <__gethex+0x9a>
 800f0ec:	1c74      	adds	r4, r6, #1
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	4616      	mov	r6, r2
 800f0f2:	3201      	adds	r2, #1
 800f0f4:	7830      	ldrb	r0, [r6, #0]
 800f0f6:	f7ff ff9f 	bl	800f038 <__hexdig_fun>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d1f8      	bne.n	800f0f0 <__gethex+0x8c>
 800f0fe:	1ba4      	subs	r4, r4, r6
 800f100:	00a7      	lsls	r7, r4, #2
 800f102:	7833      	ldrb	r3, [r6, #0]
 800f104:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f108:	2b50      	cmp	r3, #80	@ 0x50
 800f10a:	d13e      	bne.n	800f18a <__gethex+0x126>
 800f10c:	7873      	ldrb	r3, [r6, #1]
 800f10e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f110:	d033      	beq.n	800f17a <__gethex+0x116>
 800f112:	2b2d      	cmp	r3, #45	@ 0x2d
 800f114:	d034      	beq.n	800f180 <__gethex+0x11c>
 800f116:	1c71      	adds	r1, r6, #1
 800f118:	2400      	movs	r4, #0
 800f11a:	7808      	ldrb	r0, [r1, #0]
 800f11c:	f7ff ff8c 	bl	800f038 <__hexdig_fun>
 800f120:	1e43      	subs	r3, r0, #1
 800f122:	b2db      	uxtb	r3, r3
 800f124:	2b18      	cmp	r3, #24
 800f126:	d830      	bhi.n	800f18a <__gethex+0x126>
 800f128:	f1a0 0210 	sub.w	r2, r0, #16
 800f12c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f130:	f7ff ff82 	bl	800f038 <__hexdig_fun>
 800f134:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800f138:	fa5f fc8c 	uxtb.w	ip, ip
 800f13c:	f1bc 0f18 	cmp.w	ip, #24
 800f140:	f04f 030a 	mov.w	r3, #10
 800f144:	d91e      	bls.n	800f184 <__gethex+0x120>
 800f146:	b104      	cbz	r4, 800f14a <__gethex+0xe6>
 800f148:	4252      	negs	r2, r2
 800f14a:	4417      	add	r7, r2
 800f14c:	f8ca 1000 	str.w	r1, [sl]
 800f150:	b1ed      	cbz	r5, 800f18e <__gethex+0x12a>
 800f152:	f1bb 0f00 	cmp.w	fp, #0
 800f156:	bf0c      	ite	eq
 800f158:	2506      	moveq	r5, #6
 800f15a:	2500      	movne	r5, #0
 800f15c:	4628      	mov	r0, r5
 800f15e:	b005      	add	sp, #20
 800f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f164:	2500      	movs	r5, #0
 800f166:	462c      	mov	r4, r5
 800f168:	e7b0      	b.n	800f0cc <__gethex+0x68>
 800f16a:	2c00      	cmp	r4, #0
 800f16c:	d1c7      	bne.n	800f0fe <__gethex+0x9a>
 800f16e:	4627      	mov	r7, r4
 800f170:	e7c7      	b.n	800f102 <__gethex+0x9e>
 800f172:	464e      	mov	r6, r9
 800f174:	462f      	mov	r7, r5
 800f176:	2501      	movs	r5, #1
 800f178:	e7c3      	b.n	800f102 <__gethex+0x9e>
 800f17a:	2400      	movs	r4, #0
 800f17c:	1cb1      	adds	r1, r6, #2
 800f17e:	e7cc      	b.n	800f11a <__gethex+0xb6>
 800f180:	2401      	movs	r4, #1
 800f182:	e7fb      	b.n	800f17c <__gethex+0x118>
 800f184:	fb03 0002 	mla	r0, r3, r2, r0
 800f188:	e7ce      	b.n	800f128 <__gethex+0xc4>
 800f18a:	4631      	mov	r1, r6
 800f18c:	e7de      	b.n	800f14c <__gethex+0xe8>
 800f18e:	eba6 0309 	sub.w	r3, r6, r9
 800f192:	3b01      	subs	r3, #1
 800f194:	4629      	mov	r1, r5
 800f196:	2b07      	cmp	r3, #7
 800f198:	dc0a      	bgt.n	800f1b0 <__gethex+0x14c>
 800f19a:	9801      	ldr	r0, [sp, #4]
 800f19c:	f7fd fdc0 	bl	800cd20 <_Balloc>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	b940      	cbnz	r0, 800f1b6 <__gethex+0x152>
 800f1a4:	4b5c      	ldr	r3, [pc, #368]	@ (800f318 <__gethex+0x2b4>)
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	21e4      	movs	r1, #228	@ 0xe4
 800f1aa:	485c      	ldr	r0, [pc, #368]	@ (800f31c <__gethex+0x2b8>)
 800f1ac:	f7ff fec0 	bl	800ef30 <__assert_func>
 800f1b0:	3101      	adds	r1, #1
 800f1b2:	105b      	asrs	r3, r3, #1
 800f1b4:	e7ef      	b.n	800f196 <__gethex+0x132>
 800f1b6:	f100 0a14 	add.w	sl, r0, #20
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	4655      	mov	r5, sl
 800f1be:	469b      	mov	fp, r3
 800f1c0:	45b1      	cmp	r9, r6
 800f1c2:	d337      	bcc.n	800f234 <__gethex+0x1d0>
 800f1c4:	f845 bb04 	str.w	fp, [r5], #4
 800f1c8:	eba5 050a 	sub.w	r5, r5, sl
 800f1cc:	10ad      	asrs	r5, r5, #2
 800f1ce:	6125      	str	r5, [r4, #16]
 800f1d0:	4658      	mov	r0, fp
 800f1d2:	f7fd fe97 	bl	800cf04 <__hi0bits>
 800f1d6:	016d      	lsls	r5, r5, #5
 800f1d8:	f8d8 6000 	ldr.w	r6, [r8]
 800f1dc:	1a2d      	subs	r5, r5, r0
 800f1de:	42b5      	cmp	r5, r6
 800f1e0:	dd54      	ble.n	800f28c <__gethex+0x228>
 800f1e2:	1bad      	subs	r5, r5, r6
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7fe fa23 	bl	800d632 <__any_on>
 800f1ec:	4681      	mov	r9, r0
 800f1ee:	b178      	cbz	r0, 800f210 <__gethex+0x1ac>
 800f1f0:	1e6b      	subs	r3, r5, #1
 800f1f2:	1159      	asrs	r1, r3, #5
 800f1f4:	f003 021f 	and.w	r2, r3, #31
 800f1f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f1fc:	f04f 0901 	mov.w	r9, #1
 800f200:	fa09 f202 	lsl.w	r2, r9, r2
 800f204:	420a      	tst	r2, r1
 800f206:	d003      	beq.n	800f210 <__gethex+0x1ac>
 800f208:	454b      	cmp	r3, r9
 800f20a:	dc36      	bgt.n	800f27a <__gethex+0x216>
 800f20c:	f04f 0902 	mov.w	r9, #2
 800f210:	4629      	mov	r1, r5
 800f212:	4620      	mov	r0, r4
 800f214:	f7ff febe 	bl	800ef94 <rshift>
 800f218:	442f      	add	r7, r5
 800f21a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f21e:	42bb      	cmp	r3, r7
 800f220:	da42      	bge.n	800f2a8 <__gethex+0x244>
 800f222:	9801      	ldr	r0, [sp, #4]
 800f224:	4621      	mov	r1, r4
 800f226:	f7fd fdbb 	bl	800cda0 <_Bfree>
 800f22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f22c:	2300      	movs	r3, #0
 800f22e:	6013      	str	r3, [r2, #0]
 800f230:	25a3      	movs	r5, #163	@ 0xa3
 800f232:	e793      	b.n	800f15c <__gethex+0xf8>
 800f234:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f238:	2a2e      	cmp	r2, #46	@ 0x2e
 800f23a:	d012      	beq.n	800f262 <__gethex+0x1fe>
 800f23c:	2b20      	cmp	r3, #32
 800f23e:	d104      	bne.n	800f24a <__gethex+0x1e6>
 800f240:	f845 bb04 	str.w	fp, [r5], #4
 800f244:	f04f 0b00 	mov.w	fp, #0
 800f248:	465b      	mov	r3, fp
 800f24a:	7830      	ldrb	r0, [r6, #0]
 800f24c:	9303      	str	r3, [sp, #12]
 800f24e:	f7ff fef3 	bl	800f038 <__hexdig_fun>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	f000 000f 	and.w	r0, r0, #15
 800f258:	4098      	lsls	r0, r3
 800f25a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f25e:	3304      	adds	r3, #4
 800f260:	e7ae      	b.n	800f1c0 <__gethex+0x15c>
 800f262:	45b1      	cmp	r9, r6
 800f264:	d8ea      	bhi.n	800f23c <__gethex+0x1d8>
 800f266:	492b      	ldr	r1, [pc, #172]	@ (800f314 <__gethex+0x2b0>)
 800f268:	9303      	str	r3, [sp, #12]
 800f26a:	2201      	movs	r2, #1
 800f26c:	4630      	mov	r0, r6
 800f26e:	f7ff fe34 	bl	800eeda <strncmp>
 800f272:	9b03      	ldr	r3, [sp, #12]
 800f274:	2800      	cmp	r0, #0
 800f276:	d1e1      	bne.n	800f23c <__gethex+0x1d8>
 800f278:	e7a2      	b.n	800f1c0 <__gethex+0x15c>
 800f27a:	1ea9      	subs	r1, r5, #2
 800f27c:	4620      	mov	r0, r4
 800f27e:	f7fe f9d8 	bl	800d632 <__any_on>
 800f282:	2800      	cmp	r0, #0
 800f284:	d0c2      	beq.n	800f20c <__gethex+0x1a8>
 800f286:	f04f 0903 	mov.w	r9, #3
 800f28a:	e7c1      	b.n	800f210 <__gethex+0x1ac>
 800f28c:	da09      	bge.n	800f2a2 <__gethex+0x23e>
 800f28e:	1b75      	subs	r5, r6, r5
 800f290:	4621      	mov	r1, r4
 800f292:	9801      	ldr	r0, [sp, #4]
 800f294:	462a      	mov	r2, r5
 800f296:	f7fd ff93 	bl	800d1c0 <__lshift>
 800f29a:	1b7f      	subs	r7, r7, r5
 800f29c:	4604      	mov	r4, r0
 800f29e:	f100 0a14 	add.w	sl, r0, #20
 800f2a2:	f04f 0900 	mov.w	r9, #0
 800f2a6:	e7b8      	b.n	800f21a <__gethex+0x1b6>
 800f2a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2ac:	42bd      	cmp	r5, r7
 800f2ae:	dd6f      	ble.n	800f390 <__gethex+0x32c>
 800f2b0:	1bed      	subs	r5, r5, r7
 800f2b2:	42ae      	cmp	r6, r5
 800f2b4:	dc34      	bgt.n	800f320 <__gethex+0x2bc>
 800f2b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2ba:	2b02      	cmp	r3, #2
 800f2bc:	d022      	beq.n	800f304 <__gethex+0x2a0>
 800f2be:	2b03      	cmp	r3, #3
 800f2c0:	d024      	beq.n	800f30c <__gethex+0x2a8>
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d115      	bne.n	800f2f2 <__gethex+0x28e>
 800f2c6:	42ae      	cmp	r6, r5
 800f2c8:	d113      	bne.n	800f2f2 <__gethex+0x28e>
 800f2ca:	2e01      	cmp	r6, #1
 800f2cc:	d10b      	bne.n	800f2e6 <__gethex+0x282>
 800f2ce:	9a02      	ldr	r2, [sp, #8]
 800f2d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f2d4:	6013      	str	r3, [r2, #0]
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	6123      	str	r3, [r4, #16]
 800f2da:	f8ca 3000 	str.w	r3, [sl]
 800f2de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e0:	2562      	movs	r5, #98	@ 0x62
 800f2e2:	601c      	str	r4, [r3, #0]
 800f2e4:	e73a      	b.n	800f15c <__gethex+0xf8>
 800f2e6:	1e71      	subs	r1, r6, #1
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f7fe f9a2 	bl	800d632 <__any_on>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d1ed      	bne.n	800f2ce <__gethex+0x26a>
 800f2f2:	9801      	ldr	r0, [sp, #4]
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	f7fd fd53 	bl	800cda0 <_Bfree>
 800f2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	6013      	str	r3, [r2, #0]
 800f300:	2550      	movs	r5, #80	@ 0x50
 800f302:	e72b      	b.n	800f15c <__gethex+0xf8>
 800f304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1f3      	bne.n	800f2f2 <__gethex+0x28e>
 800f30a:	e7e0      	b.n	800f2ce <__gethex+0x26a>
 800f30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1dd      	bne.n	800f2ce <__gethex+0x26a>
 800f312:	e7ee      	b.n	800f2f2 <__gethex+0x28e>
 800f314:	08010245 	.word	0x08010245
 800f318:	080101db 	.word	0x080101db
 800f31c:	080102b7 	.word	0x080102b7
 800f320:	1e6f      	subs	r7, r5, #1
 800f322:	f1b9 0f00 	cmp.w	r9, #0
 800f326:	d130      	bne.n	800f38a <__gethex+0x326>
 800f328:	b127      	cbz	r7, 800f334 <__gethex+0x2d0>
 800f32a:	4639      	mov	r1, r7
 800f32c:	4620      	mov	r0, r4
 800f32e:	f7fe f980 	bl	800d632 <__any_on>
 800f332:	4681      	mov	r9, r0
 800f334:	117a      	asrs	r2, r7, #5
 800f336:	2301      	movs	r3, #1
 800f338:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f33c:	f007 071f 	and.w	r7, r7, #31
 800f340:	40bb      	lsls	r3, r7
 800f342:	4213      	tst	r3, r2
 800f344:	4629      	mov	r1, r5
 800f346:	4620      	mov	r0, r4
 800f348:	bf18      	it	ne
 800f34a:	f049 0902 	orrne.w	r9, r9, #2
 800f34e:	f7ff fe21 	bl	800ef94 <rshift>
 800f352:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f356:	1b76      	subs	r6, r6, r5
 800f358:	2502      	movs	r5, #2
 800f35a:	f1b9 0f00 	cmp.w	r9, #0
 800f35e:	d047      	beq.n	800f3f0 <__gethex+0x38c>
 800f360:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f364:	2b02      	cmp	r3, #2
 800f366:	d015      	beq.n	800f394 <__gethex+0x330>
 800f368:	2b03      	cmp	r3, #3
 800f36a:	d017      	beq.n	800f39c <__gethex+0x338>
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d109      	bne.n	800f384 <__gethex+0x320>
 800f370:	f019 0f02 	tst.w	r9, #2
 800f374:	d006      	beq.n	800f384 <__gethex+0x320>
 800f376:	f8da 3000 	ldr.w	r3, [sl]
 800f37a:	ea49 0903 	orr.w	r9, r9, r3
 800f37e:	f019 0f01 	tst.w	r9, #1
 800f382:	d10e      	bne.n	800f3a2 <__gethex+0x33e>
 800f384:	f045 0510 	orr.w	r5, r5, #16
 800f388:	e032      	b.n	800f3f0 <__gethex+0x38c>
 800f38a:	f04f 0901 	mov.w	r9, #1
 800f38e:	e7d1      	b.n	800f334 <__gethex+0x2d0>
 800f390:	2501      	movs	r5, #1
 800f392:	e7e2      	b.n	800f35a <__gethex+0x2f6>
 800f394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f396:	f1c3 0301 	rsb	r3, r3, #1
 800f39a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d0f0      	beq.n	800f384 <__gethex+0x320>
 800f3a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3a6:	f104 0314 	add.w	r3, r4, #20
 800f3aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3b2:	f04f 0c00 	mov.w	ip, #0
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3bc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f3c0:	d01b      	beq.n	800f3fa <__gethex+0x396>
 800f3c2:	3201      	adds	r2, #1
 800f3c4:	6002      	str	r2, [r0, #0]
 800f3c6:	2d02      	cmp	r5, #2
 800f3c8:	f104 0314 	add.w	r3, r4, #20
 800f3cc:	d13c      	bne.n	800f448 <__gethex+0x3e4>
 800f3ce:	f8d8 2000 	ldr.w	r2, [r8]
 800f3d2:	3a01      	subs	r2, #1
 800f3d4:	42b2      	cmp	r2, r6
 800f3d6:	d109      	bne.n	800f3ec <__gethex+0x388>
 800f3d8:	1171      	asrs	r1, r6, #5
 800f3da:	2201      	movs	r2, #1
 800f3dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3e0:	f006 061f 	and.w	r6, r6, #31
 800f3e4:	fa02 f606 	lsl.w	r6, r2, r6
 800f3e8:	421e      	tst	r6, r3
 800f3ea:	d13a      	bne.n	800f462 <__gethex+0x3fe>
 800f3ec:	f045 0520 	orr.w	r5, r5, #32
 800f3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3f2:	601c      	str	r4, [r3, #0]
 800f3f4:	9b02      	ldr	r3, [sp, #8]
 800f3f6:	601f      	str	r7, [r3, #0]
 800f3f8:	e6b0      	b.n	800f15c <__gethex+0xf8>
 800f3fa:	4299      	cmp	r1, r3
 800f3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f400:	d8d9      	bhi.n	800f3b6 <__gethex+0x352>
 800f402:	68a3      	ldr	r3, [r4, #8]
 800f404:	459b      	cmp	fp, r3
 800f406:	db17      	blt.n	800f438 <__gethex+0x3d4>
 800f408:	6861      	ldr	r1, [r4, #4]
 800f40a:	9801      	ldr	r0, [sp, #4]
 800f40c:	3101      	adds	r1, #1
 800f40e:	f7fd fc87 	bl	800cd20 <_Balloc>
 800f412:	4681      	mov	r9, r0
 800f414:	b918      	cbnz	r0, 800f41e <__gethex+0x3ba>
 800f416:	4b1a      	ldr	r3, [pc, #104]	@ (800f480 <__gethex+0x41c>)
 800f418:	4602      	mov	r2, r0
 800f41a:	2184      	movs	r1, #132	@ 0x84
 800f41c:	e6c5      	b.n	800f1aa <__gethex+0x146>
 800f41e:	6922      	ldr	r2, [r4, #16]
 800f420:	3202      	adds	r2, #2
 800f422:	f104 010c 	add.w	r1, r4, #12
 800f426:	0092      	lsls	r2, r2, #2
 800f428:	300c      	adds	r0, #12
 800f42a:	f7fc fd0c 	bl	800be46 <memcpy>
 800f42e:	4621      	mov	r1, r4
 800f430:	9801      	ldr	r0, [sp, #4]
 800f432:	f7fd fcb5 	bl	800cda0 <_Bfree>
 800f436:	464c      	mov	r4, r9
 800f438:	6923      	ldr	r3, [r4, #16]
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f440:	6122      	str	r2, [r4, #16]
 800f442:	2201      	movs	r2, #1
 800f444:	615a      	str	r2, [r3, #20]
 800f446:	e7be      	b.n	800f3c6 <__gethex+0x362>
 800f448:	6922      	ldr	r2, [r4, #16]
 800f44a:	455a      	cmp	r2, fp
 800f44c:	dd0b      	ble.n	800f466 <__gethex+0x402>
 800f44e:	2101      	movs	r1, #1
 800f450:	4620      	mov	r0, r4
 800f452:	f7ff fd9f 	bl	800ef94 <rshift>
 800f456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f45a:	3701      	adds	r7, #1
 800f45c:	42bb      	cmp	r3, r7
 800f45e:	f6ff aee0 	blt.w	800f222 <__gethex+0x1be>
 800f462:	2501      	movs	r5, #1
 800f464:	e7c2      	b.n	800f3ec <__gethex+0x388>
 800f466:	f016 061f 	ands.w	r6, r6, #31
 800f46a:	d0fa      	beq.n	800f462 <__gethex+0x3fe>
 800f46c:	4453      	add	r3, sl
 800f46e:	f1c6 0620 	rsb	r6, r6, #32
 800f472:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f476:	f7fd fd45 	bl	800cf04 <__hi0bits>
 800f47a:	42b0      	cmp	r0, r6
 800f47c:	dbe7      	blt.n	800f44e <__gethex+0x3ea>
 800f47e:	e7f0      	b.n	800f462 <__gethex+0x3fe>
 800f480:	080101db 	.word	0x080101db

0800f484 <L_shift>:
 800f484:	f1c2 0208 	rsb	r2, r2, #8
 800f488:	0092      	lsls	r2, r2, #2
 800f48a:	b570      	push	{r4, r5, r6, lr}
 800f48c:	f1c2 0620 	rsb	r6, r2, #32
 800f490:	6843      	ldr	r3, [r0, #4]
 800f492:	6804      	ldr	r4, [r0, #0]
 800f494:	fa03 f506 	lsl.w	r5, r3, r6
 800f498:	432c      	orrs	r4, r5
 800f49a:	40d3      	lsrs	r3, r2
 800f49c:	6004      	str	r4, [r0, #0]
 800f49e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4a2:	4288      	cmp	r0, r1
 800f4a4:	d3f4      	bcc.n	800f490 <L_shift+0xc>
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}

0800f4a8 <__match>:
 800f4a8:	b530      	push	{r4, r5, lr}
 800f4aa:	6803      	ldr	r3, [r0, #0]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4b2:	b914      	cbnz	r4, 800f4ba <__match+0x12>
 800f4b4:	6003      	str	r3, [r0, #0]
 800f4b6:	2001      	movs	r0, #1
 800f4b8:	bd30      	pop	{r4, r5, pc}
 800f4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f4c2:	2d19      	cmp	r5, #25
 800f4c4:	bf98      	it	ls
 800f4c6:	3220      	addls	r2, #32
 800f4c8:	42a2      	cmp	r2, r4
 800f4ca:	d0f0      	beq.n	800f4ae <__match+0x6>
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	e7f3      	b.n	800f4b8 <__match+0x10>

0800f4d0 <__hexnan>:
 800f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d4:	680b      	ldr	r3, [r1, #0]
 800f4d6:	6801      	ldr	r1, [r0, #0]
 800f4d8:	115e      	asrs	r6, r3, #5
 800f4da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f4de:	f013 031f 	ands.w	r3, r3, #31
 800f4e2:	b087      	sub	sp, #28
 800f4e4:	bf18      	it	ne
 800f4e6:	3604      	addne	r6, #4
 800f4e8:	2500      	movs	r5, #0
 800f4ea:	1f37      	subs	r7, r6, #4
 800f4ec:	4682      	mov	sl, r0
 800f4ee:	4690      	mov	r8, r2
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4f6:	46b9      	mov	r9, r7
 800f4f8:	463c      	mov	r4, r7
 800f4fa:	9502      	str	r5, [sp, #8]
 800f4fc:	46ab      	mov	fp, r5
 800f4fe:	784a      	ldrb	r2, [r1, #1]
 800f500:	1c4b      	adds	r3, r1, #1
 800f502:	9303      	str	r3, [sp, #12]
 800f504:	b342      	cbz	r2, 800f558 <__hexnan+0x88>
 800f506:	4610      	mov	r0, r2
 800f508:	9105      	str	r1, [sp, #20]
 800f50a:	9204      	str	r2, [sp, #16]
 800f50c:	f7ff fd94 	bl	800f038 <__hexdig_fun>
 800f510:	2800      	cmp	r0, #0
 800f512:	d151      	bne.n	800f5b8 <__hexnan+0xe8>
 800f514:	9a04      	ldr	r2, [sp, #16]
 800f516:	9905      	ldr	r1, [sp, #20]
 800f518:	2a20      	cmp	r2, #32
 800f51a:	d818      	bhi.n	800f54e <__hexnan+0x7e>
 800f51c:	9b02      	ldr	r3, [sp, #8]
 800f51e:	459b      	cmp	fp, r3
 800f520:	dd13      	ble.n	800f54a <__hexnan+0x7a>
 800f522:	454c      	cmp	r4, r9
 800f524:	d206      	bcs.n	800f534 <__hexnan+0x64>
 800f526:	2d07      	cmp	r5, #7
 800f528:	dc04      	bgt.n	800f534 <__hexnan+0x64>
 800f52a:	462a      	mov	r2, r5
 800f52c:	4649      	mov	r1, r9
 800f52e:	4620      	mov	r0, r4
 800f530:	f7ff ffa8 	bl	800f484 <L_shift>
 800f534:	4544      	cmp	r4, r8
 800f536:	d952      	bls.n	800f5de <__hexnan+0x10e>
 800f538:	2300      	movs	r3, #0
 800f53a:	f1a4 0904 	sub.w	r9, r4, #4
 800f53e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f542:	f8cd b008 	str.w	fp, [sp, #8]
 800f546:	464c      	mov	r4, r9
 800f548:	461d      	mov	r5, r3
 800f54a:	9903      	ldr	r1, [sp, #12]
 800f54c:	e7d7      	b.n	800f4fe <__hexnan+0x2e>
 800f54e:	2a29      	cmp	r2, #41	@ 0x29
 800f550:	d157      	bne.n	800f602 <__hexnan+0x132>
 800f552:	3102      	adds	r1, #2
 800f554:	f8ca 1000 	str.w	r1, [sl]
 800f558:	f1bb 0f00 	cmp.w	fp, #0
 800f55c:	d051      	beq.n	800f602 <__hexnan+0x132>
 800f55e:	454c      	cmp	r4, r9
 800f560:	d206      	bcs.n	800f570 <__hexnan+0xa0>
 800f562:	2d07      	cmp	r5, #7
 800f564:	dc04      	bgt.n	800f570 <__hexnan+0xa0>
 800f566:	462a      	mov	r2, r5
 800f568:	4649      	mov	r1, r9
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7ff ff8a 	bl	800f484 <L_shift>
 800f570:	4544      	cmp	r4, r8
 800f572:	d936      	bls.n	800f5e2 <__hexnan+0x112>
 800f574:	f1a8 0204 	sub.w	r2, r8, #4
 800f578:	4623      	mov	r3, r4
 800f57a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f57e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f582:	429f      	cmp	r7, r3
 800f584:	d2f9      	bcs.n	800f57a <__hexnan+0xaa>
 800f586:	1b3b      	subs	r3, r7, r4
 800f588:	f023 0303 	bic.w	r3, r3, #3
 800f58c:	3304      	adds	r3, #4
 800f58e:	3401      	adds	r4, #1
 800f590:	3e03      	subs	r6, #3
 800f592:	42b4      	cmp	r4, r6
 800f594:	bf88      	it	hi
 800f596:	2304      	movhi	r3, #4
 800f598:	4443      	add	r3, r8
 800f59a:	2200      	movs	r2, #0
 800f59c:	f843 2b04 	str.w	r2, [r3], #4
 800f5a0:	429f      	cmp	r7, r3
 800f5a2:	d2fb      	bcs.n	800f59c <__hexnan+0xcc>
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	b91b      	cbnz	r3, 800f5b0 <__hexnan+0xe0>
 800f5a8:	4547      	cmp	r7, r8
 800f5aa:	d128      	bne.n	800f5fe <__hexnan+0x12e>
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	603b      	str	r3, [r7, #0]
 800f5b0:	2005      	movs	r0, #5
 800f5b2:	b007      	add	sp, #28
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	2d08      	cmp	r5, #8
 800f5bc:	f10b 0b01 	add.w	fp, fp, #1
 800f5c0:	dd06      	ble.n	800f5d0 <__hexnan+0x100>
 800f5c2:	4544      	cmp	r4, r8
 800f5c4:	d9c1      	bls.n	800f54a <__hexnan+0x7a>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5cc:	2501      	movs	r5, #1
 800f5ce:	3c04      	subs	r4, #4
 800f5d0:	6822      	ldr	r2, [r4, #0]
 800f5d2:	f000 000f 	and.w	r0, r0, #15
 800f5d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f5da:	6020      	str	r0, [r4, #0]
 800f5dc:	e7b5      	b.n	800f54a <__hexnan+0x7a>
 800f5de:	2508      	movs	r5, #8
 800f5e0:	e7b3      	b.n	800f54a <__hexnan+0x7a>
 800f5e2:	9b01      	ldr	r3, [sp, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d0dd      	beq.n	800f5a4 <__hexnan+0xd4>
 800f5e8:	f1c3 0320 	rsb	r3, r3, #32
 800f5ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5f0:	40da      	lsrs	r2, r3
 800f5f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f5fc:	e7d2      	b.n	800f5a4 <__hexnan+0xd4>
 800f5fe:	3f04      	subs	r7, #4
 800f600:	e7d0      	b.n	800f5a4 <__hexnan+0xd4>
 800f602:	2004      	movs	r0, #4
 800f604:	e7d5      	b.n	800f5b2 <__hexnan+0xe2>

0800f606 <__ascii_mbtowc>:
 800f606:	b082      	sub	sp, #8
 800f608:	b901      	cbnz	r1, 800f60c <__ascii_mbtowc+0x6>
 800f60a:	a901      	add	r1, sp, #4
 800f60c:	b142      	cbz	r2, 800f620 <__ascii_mbtowc+0x1a>
 800f60e:	b14b      	cbz	r3, 800f624 <__ascii_mbtowc+0x1e>
 800f610:	7813      	ldrb	r3, [r2, #0]
 800f612:	600b      	str	r3, [r1, #0]
 800f614:	7812      	ldrb	r2, [r2, #0]
 800f616:	1e10      	subs	r0, r2, #0
 800f618:	bf18      	it	ne
 800f61a:	2001      	movne	r0, #1
 800f61c:	b002      	add	sp, #8
 800f61e:	4770      	bx	lr
 800f620:	4610      	mov	r0, r2
 800f622:	e7fb      	b.n	800f61c <__ascii_mbtowc+0x16>
 800f624:	f06f 0001 	mvn.w	r0, #1
 800f628:	e7f8      	b.n	800f61c <__ascii_mbtowc+0x16>

0800f62a <_realloc_r>:
 800f62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62e:	4607      	mov	r7, r0
 800f630:	4614      	mov	r4, r2
 800f632:	460d      	mov	r5, r1
 800f634:	b921      	cbnz	r1, 800f640 <_realloc_r+0x16>
 800f636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f63a:	4611      	mov	r1, r2
 800f63c:	f7fd bae4 	b.w	800cc08 <_malloc_r>
 800f640:	b92a      	cbnz	r2, 800f64e <_realloc_r+0x24>
 800f642:	f7fd fa6d 	bl	800cb20 <_free_r>
 800f646:	4625      	mov	r5, r4
 800f648:	4628      	mov	r0, r5
 800f64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f64e:	f000 f8b2 	bl	800f7b6 <_malloc_usable_size_r>
 800f652:	4284      	cmp	r4, r0
 800f654:	4606      	mov	r6, r0
 800f656:	d802      	bhi.n	800f65e <_realloc_r+0x34>
 800f658:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f65c:	d8f4      	bhi.n	800f648 <_realloc_r+0x1e>
 800f65e:	4621      	mov	r1, r4
 800f660:	4638      	mov	r0, r7
 800f662:	f7fd fad1 	bl	800cc08 <_malloc_r>
 800f666:	4680      	mov	r8, r0
 800f668:	b908      	cbnz	r0, 800f66e <_realloc_r+0x44>
 800f66a:	4645      	mov	r5, r8
 800f66c:	e7ec      	b.n	800f648 <_realloc_r+0x1e>
 800f66e:	42b4      	cmp	r4, r6
 800f670:	4622      	mov	r2, r4
 800f672:	4629      	mov	r1, r5
 800f674:	bf28      	it	cs
 800f676:	4632      	movcs	r2, r6
 800f678:	f7fc fbe5 	bl	800be46 <memcpy>
 800f67c:	4629      	mov	r1, r5
 800f67e:	4638      	mov	r0, r7
 800f680:	f7fd fa4e 	bl	800cb20 <_free_r>
 800f684:	e7f1      	b.n	800f66a <_realloc_r+0x40>
	...

0800f688 <_strtoul_l.isra.0>:
 800f688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f68c:	4e34      	ldr	r6, [pc, #208]	@ (800f760 <_strtoul_l.isra.0+0xd8>)
 800f68e:	4686      	mov	lr, r0
 800f690:	460d      	mov	r5, r1
 800f692:	4628      	mov	r0, r5
 800f694:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f698:	5d37      	ldrb	r7, [r6, r4]
 800f69a:	f017 0708 	ands.w	r7, r7, #8
 800f69e:	d1f8      	bne.n	800f692 <_strtoul_l.isra.0+0xa>
 800f6a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f6a2:	d110      	bne.n	800f6c6 <_strtoul_l.isra.0+0x3e>
 800f6a4:	782c      	ldrb	r4, [r5, #0]
 800f6a6:	2701      	movs	r7, #1
 800f6a8:	1c85      	adds	r5, r0, #2
 800f6aa:	f033 0010 	bics.w	r0, r3, #16
 800f6ae:	d115      	bne.n	800f6dc <_strtoul_l.isra.0+0x54>
 800f6b0:	2c30      	cmp	r4, #48	@ 0x30
 800f6b2:	d10d      	bne.n	800f6d0 <_strtoul_l.isra.0+0x48>
 800f6b4:	7828      	ldrb	r0, [r5, #0]
 800f6b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f6ba:	2858      	cmp	r0, #88	@ 0x58
 800f6bc:	d108      	bne.n	800f6d0 <_strtoul_l.isra.0+0x48>
 800f6be:	786c      	ldrb	r4, [r5, #1]
 800f6c0:	3502      	adds	r5, #2
 800f6c2:	2310      	movs	r3, #16
 800f6c4:	e00a      	b.n	800f6dc <_strtoul_l.isra.0+0x54>
 800f6c6:	2c2b      	cmp	r4, #43	@ 0x2b
 800f6c8:	bf04      	itt	eq
 800f6ca:	782c      	ldrbeq	r4, [r5, #0]
 800f6cc:	1c85      	addeq	r5, r0, #2
 800f6ce:	e7ec      	b.n	800f6aa <_strtoul_l.isra.0+0x22>
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1f6      	bne.n	800f6c2 <_strtoul_l.isra.0+0x3a>
 800f6d4:	2c30      	cmp	r4, #48	@ 0x30
 800f6d6:	bf14      	ite	ne
 800f6d8:	230a      	movne	r3, #10
 800f6da:	2308      	moveq	r3, #8
 800f6dc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f6e0:	2600      	movs	r6, #0
 800f6e2:	fbb8 f8f3 	udiv	r8, r8, r3
 800f6e6:	fb03 f908 	mul.w	r9, r3, r8
 800f6ea:	ea6f 0909 	mvn.w	r9, r9
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f6f4:	f1bc 0f09 	cmp.w	ip, #9
 800f6f8:	d810      	bhi.n	800f71c <_strtoul_l.isra.0+0x94>
 800f6fa:	4664      	mov	r4, ip
 800f6fc:	42a3      	cmp	r3, r4
 800f6fe:	dd1e      	ble.n	800f73e <_strtoul_l.isra.0+0xb6>
 800f700:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800f704:	d007      	beq.n	800f716 <_strtoul_l.isra.0+0x8e>
 800f706:	4580      	cmp	r8, r0
 800f708:	d316      	bcc.n	800f738 <_strtoul_l.isra.0+0xb0>
 800f70a:	d101      	bne.n	800f710 <_strtoul_l.isra.0+0x88>
 800f70c:	45a1      	cmp	r9, r4
 800f70e:	db13      	blt.n	800f738 <_strtoul_l.isra.0+0xb0>
 800f710:	fb00 4003 	mla	r0, r0, r3, r4
 800f714:	2601      	movs	r6, #1
 800f716:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f71a:	e7e9      	b.n	800f6f0 <_strtoul_l.isra.0+0x68>
 800f71c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f720:	f1bc 0f19 	cmp.w	ip, #25
 800f724:	d801      	bhi.n	800f72a <_strtoul_l.isra.0+0xa2>
 800f726:	3c37      	subs	r4, #55	@ 0x37
 800f728:	e7e8      	b.n	800f6fc <_strtoul_l.isra.0+0x74>
 800f72a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f72e:	f1bc 0f19 	cmp.w	ip, #25
 800f732:	d804      	bhi.n	800f73e <_strtoul_l.isra.0+0xb6>
 800f734:	3c57      	subs	r4, #87	@ 0x57
 800f736:	e7e1      	b.n	800f6fc <_strtoul_l.isra.0+0x74>
 800f738:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800f73c:	e7eb      	b.n	800f716 <_strtoul_l.isra.0+0x8e>
 800f73e:	1c73      	adds	r3, r6, #1
 800f740:	d106      	bne.n	800f750 <_strtoul_l.isra.0+0xc8>
 800f742:	2322      	movs	r3, #34	@ 0x22
 800f744:	f8ce 3000 	str.w	r3, [lr]
 800f748:	4630      	mov	r0, r6
 800f74a:	b932      	cbnz	r2, 800f75a <_strtoul_l.isra.0+0xd2>
 800f74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f750:	b107      	cbz	r7, 800f754 <_strtoul_l.isra.0+0xcc>
 800f752:	4240      	negs	r0, r0
 800f754:	2a00      	cmp	r2, #0
 800f756:	d0f9      	beq.n	800f74c <_strtoul_l.isra.0+0xc4>
 800f758:	b106      	cbz	r6, 800f75c <_strtoul_l.isra.0+0xd4>
 800f75a:	1e69      	subs	r1, r5, #1
 800f75c:	6011      	str	r1, [r2, #0]
 800f75e:	e7f5      	b.n	800f74c <_strtoul_l.isra.0+0xc4>
 800f760:	08010469 	.word	0x08010469

0800f764 <_strtoul_r>:
 800f764:	f7ff bf90 	b.w	800f688 <_strtoul_l.isra.0>

0800f768 <__ascii_wctomb>:
 800f768:	4603      	mov	r3, r0
 800f76a:	4608      	mov	r0, r1
 800f76c:	b141      	cbz	r1, 800f780 <__ascii_wctomb+0x18>
 800f76e:	2aff      	cmp	r2, #255	@ 0xff
 800f770:	d904      	bls.n	800f77c <__ascii_wctomb+0x14>
 800f772:	228a      	movs	r2, #138	@ 0x8a
 800f774:	601a      	str	r2, [r3, #0]
 800f776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f77a:	4770      	bx	lr
 800f77c:	700a      	strb	r2, [r1, #0]
 800f77e:	2001      	movs	r0, #1
 800f780:	4770      	bx	lr
	...

0800f784 <fiprintf>:
 800f784:	b40e      	push	{r1, r2, r3}
 800f786:	b503      	push	{r0, r1, lr}
 800f788:	4601      	mov	r1, r0
 800f78a:	ab03      	add	r3, sp, #12
 800f78c:	4805      	ldr	r0, [pc, #20]	@ (800f7a4 <fiprintf+0x20>)
 800f78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f792:	6800      	ldr	r0, [r0, #0]
 800f794:	9301      	str	r3, [sp, #4]
 800f796:	f000 f83f 	bl	800f818 <_vfiprintf_r>
 800f79a:	b002      	add	sp, #8
 800f79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7a0:	b003      	add	sp, #12
 800f7a2:	4770      	bx	lr
 800f7a4:	200003e4 	.word	0x200003e4

0800f7a8 <abort>:
 800f7a8:	b508      	push	{r3, lr}
 800f7aa:	2006      	movs	r0, #6
 800f7ac:	f000 fa08 	bl	800fbc0 <raise>
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	f7f2 f9f1 	bl	8001b98 <_exit>

0800f7b6 <_malloc_usable_size_r>:
 800f7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7ba:	1f18      	subs	r0, r3, #4
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	bfbc      	itt	lt
 800f7c0:	580b      	ldrlt	r3, [r1, r0]
 800f7c2:	18c0      	addlt	r0, r0, r3
 800f7c4:	4770      	bx	lr

0800f7c6 <__sfputc_r>:
 800f7c6:	6893      	ldr	r3, [r2, #8]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	b410      	push	{r4}
 800f7ce:	6093      	str	r3, [r2, #8]
 800f7d0:	da08      	bge.n	800f7e4 <__sfputc_r+0x1e>
 800f7d2:	6994      	ldr	r4, [r2, #24]
 800f7d4:	42a3      	cmp	r3, r4
 800f7d6:	db01      	blt.n	800f7dc <__sfputc_r+0x16>
 800f7d8:	290a      	cmp	r1, #10
 800f7da:	d103      	bne.n	800f7e4 <__sfputc_r+0x1e>
 800f7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7e0:	f000 b932 	b.w	800fa48 <__swbuf_r>
 800f7e4:	6813      	ldr	r3, [r2, #0]
 800f7e6:	1c58      	adds	r0, r3, #1
 800f7e8:	6010      	str	r0, [r2, #0]
 800f7ea:	7019      	strb	r1, [r3, #0]
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <__sfputs_r>:
 800f7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	4614      	mov	r4, r2
 800f7fc:	18d5      	adds	r5, r2, r3
 800f7fe:	42ac      	cmp	r4, r5
 800f800:	d101      	bne.n	800f806 <__sfputs_r+0x12>
 800f802:	2000      	movs	r0, #0
 800f804:	e007      	b.n	800f816 <__sfputs_r+0x22>
 800f806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f80a:	463a      	mov	r2, r7
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff ffda 	bl	800f7c6 <__sfputc_r>
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	d1f3      	bne.n	800f7fe <__sfputs_r+0xa>
 800f816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f818 <_vfiprintf_r>:
 800f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	460d      	mov	r5, r1
 800f81e:	b09d      	sub	sp, #116	@ 0x74
 800f820:	4614      	mov	r4, r2
 800f822:	4698      	mov	r8, r3
 800f824:	4606      	mov	r6, r0
 800f826:	b118      	cbz	r0, 800f830 <_vfiprintf_r+0x18>
 800f828:	6a03      	ldr	r3, [r0, #32]
 800f82a:	b90b      	cbnz	r3, 800f830 <_vfiprintf_r+0x18>
 800f82c:	f7fc f97a 	bl	800bb24 <__sinit>
 800f830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f832:	07d9      	lsls	r1, r3, #31
 800f834:	d405      	bmi.n	800f842 <_vfiprintf_r+0x2a>
 800f836:	89ab      	ldrh	r3, [r5, #12]
 800f838:	059a      	lsls	r2, r3, #22
 800f83a:	d402      	bmi.n	800f842 <_vfiprintf_r+0x2a>
 800f83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f83e:	f7fc fb00 	bl	800be42 <__retarget_lock_acquire_recursive>
 800f842:	89ab      	ldrh	r3, [r5, #12]
 800f844:	071b      	lsls	r3, r3, #28
 800f846:	d501      	bpl.n	800f84c <_vfiprintf_r+0x34>
 800f848:	692b      	ldr	r3, [r5, #16]
 800f84a:	b99b      	cbnz	r3, 800f874 <_vfiprintf_r+0x5c>
 800f84c:	4629      	mov	r1, r5
 800f84e:	4630      	mov	r0, r6
 800f850:	f000 f938 	bl	800fac4 <__swsetup_r>
 800f854:	b170      	cbz	r0, 800f874 <_vfiprintf_r+0x5c>
 800f856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f858:	07dc      	lsls	r4, r3, #31
 800f85a:	d504      	bpl.n	800f866 <_vfiprintf_r+0x4e>
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f860:	b01d      	add	sp, #116	@ 0x74
 800f862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f866:	89ab      	ldrh	r3, [r5, #12]
 800f868:	0598      	lsls	r0, r3, #22
 800f86a:	d4f7      	bmi.n	800f85c <_vfiprintf_r+0x44>
 800f86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f86e:	f7fc fae9 	bl	800be44 <__retarget_lock_release_recursive>
 800f872:	e7f3      	b.n	800f85c <_vfiprintf_r+0x44>
 800f874:	2300      	movs	r3, #0
 800f876:	9309      	str	r3, [sp, #36]	@ 0x24
 800f878:	2320      	movs	r3, #32
 800f87a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f882:	2330      	movs	r3, #48	@ 0x30
 800f884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa34 <_vfiprintf_r+0x21c>
 800f888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f88c:	f04f 0901 	mov.w	r9, #1
 800f890:	4623      	mov	r3, r4
 800f892:	469a      	mov	sl, r3
 800f894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f898:	b10a      	cbz	r2, 800f89e <_vfiprintf_r+0x86>
 800f89a:	2a25      	cmp	r2, #37	@ 0x25
 800f89c:	d1f9      	bne.n	800f892 <_vfiprintf_r+0x7a>
 800f89e:	ebba 0b04 	subs.w	fp, sl, r4
 800f8a2:	d00b      	beq.n	800f8bc <_vfiprintf_r+0xa4>
 800f8a4:	465b      	mov	r3, fp
 800f8a6:	4622      	mov	r2, r4
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f7ff ffa2 	bl	800f7f4 <__sfputs_r>
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	f000 80a7 	beq.w	800fa04 <_vfiprintf_r+0x1ec>
 800f8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8b8:	445a      	add	r2, fp
 800f8ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 809f 	beq.w	800fa04 <_vfiprintf_r+0x1ec>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8d0:	f10a 0a01 	add.w	sl, sl, #1
 800f8d4:	9304      	str	r3, [sp, #16]
 800f8d6:	9307      	str	r3, [sp, #28]
 800f8d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8de:	4654      	mov	r4, sl
 800f8e0:	2205      	movs	r2, #5
 800f8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e6:	4853      	ldr	r0, [pc, #332]	@ (800fa34 <_vfiprintf_r+0x21c>)
 800f8e8:	f7f0 fca2 	bl	8000230 <memchr>
 800f8ec:	9a04      	ldr	r2, [sp, #16]
 800f8ee:	b9d8      	cbnz	r0, 800f928 <_vfiprintf_r+0x110>
 800f8f0:	06d1      	lsls	r1, r2, #27
 800f8f2:	bf44      	itt	mi
 800f8f4:	2320      	movmi	r3, #32
 800f8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8fa:	0713      	lsls	r3, r2, #28
 800f8fc:	bf44      	itt	mi
 800f8fe:	232b      	movmi	r3, #43	@ 0x2b
 800f900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f904:	f89a 3000 	ldrb.w	r3, [sl]
 800f908:	2b2a      	cmp	r3, #42	@ 0x2a
 800f90a:	d015      	beq.n	800f938 <_vfiprintf_r+0x120>
 800f90c:	9a07      	ldr	r2, [sp, #28]
 800f90e:	4654      	mov	r4, sl
 800f910:	2000      	movs	r0, #0
 800f912:	f04f 0c0a 	mov.w	ip, #10
 800f916:	4621      	mov	r1, r4
 800f918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f91c:	3b30      	subs	r3, #48	@ 0x30
 800f91e:	2b09      	cmp	r3, #9
 800f920:	d94b      	bls.n	800f9ba <_vfiprintf_r+0x1a2>
 800f922:	b1b0      	cbz	r0, 800f952 <_vfiprintf_r+0x13a>
 800f924:	9207      	str	r2, [sp, #28]
 800f926:	e014      	b.n	800f952 <_vfiprintf_r+0x13a>
 800f928:	eba0 0308 	sub.w	r3, r0, r8
 800f92c:	fa09 f303 	lsl.w	r3, r9, r3
 800f930:	4313      	orrs	r3, r2
 800f932:	9304      	str	r3, [sp, #16]
 800f934:	46a2      	mov	sl, r4
 800f936:	e7d2      	b.n	800f8de <_vfiprintf_r+0xc6>
 800f938:	9b03      	ldr	r3, [sp, #12]
 800f93a:	1d19      	adds	r1, r3, #4
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	9103      	str	r1, [sp, #12]
 800f940:	2b00      	cmp	r3, #0
 800f942:	bfbb      	ittet	lt
 800f944:	425b      	neglt	r3, r3
 800f946:	f042 0202 	orrlt.w	r2, r2, #2
 800f94a:	9307      	strge	r3, [sp, #28]
 800f94c:	9307      	strlt	r3, [sp, #28]
 800f94e:	bfb8      	it	lt
 800f950:	9204      	strlt	r2, [sp, #16]
 800f952:	7823      	ldrb	r3, [r4, #0]
 800f954:	2b2e      	cmp	r3, #46	@ 0x2e
 800f956:	d10a      	bne.n	800f96e <_vfiprintf_r+0x156>
 800f958:	7863      	ldrb	r3, [r4, #1]
 800f95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f95c:	d132      	bne.n	800f9c4 <_vfiprintf_r+0x1ac>
 800f95e:	9b03      	ldr	r3, [sp, #12]
 800f960:	1d1a      	adds	r2, r3, #4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	9203      	str	r2, [sp, #12]
 800f966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f96a:	3402      	adds	r4, #2
 800f96c:	9305      	str	r3, [sp, #20]
 800f96e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa44 <_vfiprintf_r+0x22c>
 800f972:	7821      	ldrb	r1, [r4, #0]
 800f974:	2203      	movs	r2, #3
 800f976:	4650      	mov	r0, sl
 800f978:	f7f0 fc5a 	bl	8000230 <memchr>
 800f97c:	b138      	cbz	r0, 800f98e <_vfiprintf_r+0x176>
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	eba0 000a 	sub.w	r0, r0, sl
 800f984:	2240      	movs	r2, #64	@ 0x40
 800f986:	4082      	lsls	r2, r0
 800f988:	4313      	orrs	r3, r2
 800f98a:	3401      	adds	r4, #1
 800f98c:	9304      	str	r3, [sp, #16]
 800f98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f992:	4829      	ldr	r0, [pc, #164]	@ (800fa38 <_vfiprintf_r+0x220>)
 800f994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f998:	2206      	movs	r2, #6
 800f99a:	f7f0 fc49 	bl	8000230 <memchr>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d03f      	beq.n	800fa22 <_vfiprintf_r+0x20a>
 800f9a2:	4b26      	ldr	r3, [pc, #152]	@ (800fa3c <_vfiprintf_r+0x224>)
 800f9a4:	bb1b      	cbnz	r3, 800f9ee <_vfiprintf_r+0x1d6>
 800f9a6:	9b03      	ldr	r3, [sp, #12]
 800f9a8:	3307      	adds	r3, #7
 800f9aa:	f023 0307 	bic.w	r3, r3, #7
 800f9ae:	3308      	adds	r3, #8
 800f9b0:	9303      	str	r3, [sp, #12]
 800f9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b4:	443b      	add	r3, r7
 800f9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9b8:	e76a      	b.n	800f890 <_vfiprintf_r+0x78>
 800f9ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9be:	460c      	mov	r4, r1
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	e7a8      	b.n	800f916 <_vfiprintf_r+0xfe>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	3401      	adds	r4, #1
 800f9c8:	9305      	str	r3, [sp, #20]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f04f 0c0a 	mov.w	ip, #10
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9d6:	3a30      	subs	r2, #48	@ 0x30
 800f9d8:	2a09      	cmp	r2, #9
 800f9da:	d903      	bls.n	800f9e4 <_vfiprintf_r+0x1cc>
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d0c6      	beq.n	800f96e <_vfiprintf_r+0x156>
 800f9e0:	9105      	str	r1, [sp, #20]
 800f9e2:	e7c4      	b.n	800f96e <_vfiprintf_r+0x156>
 800f9e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e7f0      	b.n	800f9d0 <_vfiprintf_r+0x1b8>
 800f9ee:	ab03      	add	r3, sp, #12
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	462a      	mov	r2, r5
 800f9f4:	4b12      	ldr	r3, [pc, #72]	@ (800fa40 <_vfiprintf_r+0x228>)
 800f9f6:	a904      	add	r1, sp, #16
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f7fb fa43 	bl	800ae84 <_printf_float>
 800f9fe:	4607      	mov	r7, r0
 800fa00:	1c78      	adds	r0, r7, #1
 800fa02:	d1d6      	bne.n	800f9b2 <_vfiprintf_r+0x19a>
 800fa04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa06:	07d9      	lsls	r1, r3, #31
 800fa08:	d405      	bmi.n	800fa16 <_vfiprintf_r+0x1fe>
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	059a      	lsls	r2, r3, #22
 800fa0e:	d402      	bmi.n	800fa16 <_vfiprintf_r+0x1fe>
 800fa10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa12:	f7fc fa17 	bl	800be44 <__retarget_lock_release_recursive>
 800fa16:	89ab      	ldrh	r3, [r5, #12]
 800fa18:	065b      	lsls	r3, r3, #25
 800fa1a:	f53f af1f 	bmi.w	800f85c <_vfiprintf_r+0x44>
 800fa1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa20:	e71e      	b.n	800f860 <_vfiprintf_r+0x48>
 800fa22:	ab03      	add	r3, sp, #12
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	462a      	mov	r2, r5
 800fa28:	4b05      	ldr	r3, [pc, #20]	@ (800fa40 <_vfiprintf_r+0x228>)
 800fa2a:	a904      	add	r1, sp, #16
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7fb fcc1 	bl	800b3b4 <_printf_i>
 800fa32:	e7e4      	b.n	800f9fe <_vfiprintf_r+0x1e6>
 800fa34:	08010247 	.word	0x08010247
 800fa38:	08010251 	.word	0x08010251
 800fa3c:	0800ae85 	.word	0x0800ae85
 800fa40:	0800f7f5 	.word	0x0800f7f5
 800fa44:	0801024d 	.word	0x0801024d

0800fa48 <__swbuf_r>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	460e      	mov	r6, r1
 800fa4c:	4614      	mov	r4, r2
 800fa4e:	4605      	mov	r5, r0
 800fa50:	b118      	cbz	r0, 800fa5a <__swbuf_r+0x12>
 800fa52:	6a03      	ldr	r3, [r0, #32]
 800fa54:	b90b      	cbnz	r3, 800fa5a <__swbuf_r+0x12>
 800fa56:	f7fc f865 	bl	800bb24 <__sinit>
 800fa5a:	69a3      	ldr	r3, [r4, #24]
 800fa5c:	60a3      	str	r3, [r4, #8]
 800fa5e:	89a3      	ldrh	r3, [r4, #12]
 800fa60:	071a      	lsls	r2, r3, #28
 800fa62:	d501      	bpl.n	800fa68 <__swbuf_r+0x20>
 800fa64:	6923      	ldr	r3, [r4, #16]
 800fa66:	b943      	cbnz	r3, 800fa7a <__swbuf_r+0x32>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f000 f82a 	bl	800fac4 <__swsetup_r>
 800fa70:	b118      	cbz	r0, 800fa7a <__swbuf_r+0x32>
 800fa72:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fa76:	4638      	mov	r0, r7
 800fa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	6922      	ldr	r2, [r4, #16]
 800fa7e:	1a98      	subs	r0, r3, r2
 800fa80:	6963      	ldr	r3, [r4, #20]
 800fa82:	b2f6      	uxtb	r6, r6
 800fa84:	4283      	cmp	r3, r0
 800fa86:	4637      	mov	r7, r6
 800fa88:	dc05      	bgt.n	800fa96 <__swbuf_r+0x4e>
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f7ff f96f 	bl	800ed70 <_fflush_r>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d1ed      	bne.n	800fa72 <__swbuf_r+0x2a>
 800fa96:	68a3      	ldr	r3, [r4, #8]
 800fa98:	3b01      	subs	r3, #1
 800fa9a:	60a3      	str	r3, [r4, #8]
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	6022      	str	r2, [r4, #0]
 800faa2:	701e      	strb	r6, [r3, #0]
 800faa4:	6962      	ldr	r2, [r4, #20]
 800faa6:	1c43      	adds	r3, r0, #1
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d004      	beq.n	800fab6 <__swbuf_r+0x6e>
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	07db      	lsls	r3, r3, #31
 800fab0:	d5e1      	bpl.n	800fa76 <__swbuf_r+0x2e>
 800fab2:	2e0a      	cmp	r6, #10
 800fab4:	d1df      	bne.n	800fa76 <__swbuf_r+0x2e>
 800fab6:	4621      	mov	r1, r4
 800fab8:	4628      	mov	r0, r5
 800faba:	f7ff f959 	bl	800ed70 <_fflush_r>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d0d9      	beq.n	800fa76 <__swbuf_r+0x2e>
 800fac2:	e7d6      	b.n	800fa72 <__swbuf_r+0x2a>

0800fac4 <__swsetup_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4b29      	ldr	r3, [pc, #164]	@ (800fb6c <__swsetup_r+0xa8>)
 800fac8:	4605      	mov	r5, r0
 800faca:	6818      	ldr	r0, [r3, #0]
 800facc:	460c      	mov	r4, r1
 800face:	b118      	cbz	r0, 800fad8 <__swsetup_r+0x14>
 800fad0:	6a03      	ldr	r3, [r0, #32]
 800fad2:	b90b      	cbnz	r3, 800fad8 <__swsetup_r+0x14>
 800fad4:	f7fc f826 	bl	800bb24 <__sinit>
 800fad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fadc:	0719      	lsls	r1, r3, #28
 800fade:	d422      	bmi.n	800fb26 <__swsetup_r+0x62>
 800fae0:	06da      	lsls	r2, r3, #27
 800fae2:	d407      	bmi.n	800faf4 <__swsetup_r+0x30>
 800fae4:	2209      	movs	r2, #9
 800fae6:	602a      	str	r2, [r5, #0]
 800fae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faec:	81a3      	strh	r3, [r4, #12]
 800faee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800faf2:	e033      	b.n	800fb5c <__swsetup_r+0x98>
 800faf4:	0758      	lsls	r0, r3, #29
 800faf6:	d512      	bpl.n	800fb1e <__swsetup_r+0x5a>
 800faf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fafa:	b141      	cbz	r1, 800fb0e <__swsetup_r+0x4a>
 800fafc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb00:	4299      	cmp	r1, r3
 800fb02:	d002      	beq.n	800fb0a <__swsetup_r+0x46>
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7fd f80b 	bl	800cb20 <_free_r>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb0e:	89a3      	ldrh	r3, [r4, #12]
 800fb10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	2300      	movs	r3, #0
 800fb18:	6063      	str	r3, [r4, #4]
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	6023      	str	r3, [r4, #0]
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f043 0308 	orr.w	r3, r3, #8
 800fb24:	81a3      	strh	r3, [r4, #12]
 800fb26:	6923      	ldr	r3, [r4, #16]
 800fb28:	b94b      	cbnz	r3, 800fb3e <__swsetup_r+0x7a>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb34:	d003      	beq.n	800fb3e <__swsetup_r+0x7a>
 800fb36:	4621      	mov	r1, r4
 800fb38:	4628      	mov	r0, r5
 800fb3a:	f000 f883 	bl	800fc44 <__smakebuf_r>
 800fb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb42:	f013 0201 	ands.w	r2, r3, #1
 800fb46:	d00a      	beq.n	800fb5e <__swsetup_r+0x9a>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	60a2      	str	r2, [r4, #8]
 800fb4c:	6962      	ldr	r2, [r4, #20]
 800fb4e:	4252      	negs	r2, r2
 800fb50:	61a2      	str	r2, [r4, #24]
 800fb52:	6922      	ldr	r2, [r4, #16]
 800fb54:	b942      	cbnz	r2, 800fb68 <__swsetup_r+0xa4>
 800fb56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb5a:	d1c5      	bne.n	800fae8 <__swsetup_r+0x24>
 800fb5c:	bd38      	pop	{r3, r4, r5, pc}
 800fb5e:	0799      	lsls	r1, r3, #30
 800fb60:	bf58      	it	pl
 800fb62:	6962      	ldrpl	r2, [r4, #20]
 800fb64:	60a2      	str	r2, [r4, #8]
 800fb66:	e7f4      	b.n	800fb52 <__swsetup_r+0x8e>
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e7f7      	b.n	800fb5c <__swsetup_r+0x98>
 800fb6c:	200003e4 	.word	0x200003e4

0800fb70 <_raise_r>:
 800fb70:	291f      	cmp	r1, #31
 800fb72:	b538      	push	{r3, r4, r5, lr}
 800fb74:	4605      	mov	r5, r0
 800fb76:	460c      	mov	r4, r1
 800fb78:	d904      	bls.n	800fb84 <_raise_r+0x14>
 800fb7a:	2316      	movs	r3, #22
 800fb7c:	6003      	str	r3, [r0, #0]
 800fb7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb86:	b112      	cbz	r2, 800fb8e <_raise_r+0x1e>
 800fb88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb8c:	b94b      	cbnz	r3, 800fba2 <_raise_r+0x32>
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f000 f830 	bl	800fbf4 <_getpid_r>
 800fb94:	4622      	mov	r2, r4
 800fb96:	4601      	mov	r1, r0
 800fb98:	4628      	mov	r0, r5
 800fb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb9e:	f000 b817 	b.w	800fbd0 <_kill_r>
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d00a      	beq.n	800fbbc <_raise_r+0x4c>
 800fba6:	1c59      	adds	r1, r3, #1
 800fba8:	d103      	bne.n	800fbb2 <_raise_r+0x42>
 800fbaa:	2316      	movs	r3, #22
 800fbac:	6003      	str	r3, [r0, #0]
 800fbae:	2001      	movs	r0, #1
 800fbb0:	e7e7      	b.n	800fb82 <_raise_r+0x12>
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4798      	blx	r3
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	e7e0      	b.n	800fb82 <_raise_r+0x12>

0800fbc0 <raise>:
 800fbc0:	4b02      	ldr	r3, [pc, #8]	@ (800fbcc <raise+0xc>)
 800fbc2:	4601      	mov	r1, r0
 800fbc4:	6818      	ldr	r0, [r3, #0]
 800fbc6:	f7ff bfd3 	b.w	800fb70 <_raise_r>
 800fbca:	bf00      	nop
 800fbcc:	200003e4 	.word	0x200003e4

0800fbd0 <_kill_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4d07      	ldr	r5, [pc, #28]	@ (800fbf0 <_kill_r+0x20>)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	4611      	mov	r1, r2
 800fbdc:	602b      	str	r3, [r5, #0]
 800fbde:	f7f1 ffcb 	bl	8001b78 <_kill>
 800fbe2:	1c43      	adds	r3, r0, #1
 800fbe4:	d102      	bne.n	800fbec <_kill_r+0x1c>
 800fbe6:	682b      	ldr	r3, [r5, #0]
 800fbe8:	b103      	cbz	r3, 800fbec <_kill_r+0x1c>
 800fbea:	6023      	str	r3, [r4, #0]
 800fbec:	bd38      	pop	{r3, r4, r5, pc}
 800fbee:	bf00      	nop
 800fbf0:	20000db4 	.word	0x20000db4

0800fbf4 <_getpid_r>:
 800fbf4:	f7f1 bfb8 	b.w	8001b68 <_getpid>

0800fbf8 <__swhatbuf_r>:
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc00:	2900      	cmp	r1, #0
 800fc02:	b096      	sub	sp, #88	@ 0x58
 800fc04:	4615      	mov	r5, r2
 800fc06:	461e      	mov	r6, r3
 800fc08:	da0d      	bge.n	800fc26 <__swhatbuf_r+0x2e>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc10:	f04f 0100 	mov.w	r1, #0
 800fc14:	bf14      	ite	ne
 800fc16:	2340      	movne	r3, #64	@ 0x40
 800fc18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	6031      	str	r1, [r6, #0]
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	b016      	add	sp, #88	@ 0x58
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	466a      	mov	r2, sp
 800fc28:	f000 f848 	bl	800fcbc <_fstat_r>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	dbec      	blt.n	800fc0a <__swhatbuf_r+0x12>
 800fc30:	9901      	ldr	r1, [sp, #4]
 800fc32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc3a:	4259      	negs	r1, r3
 800fc3c:	4159      	adcs	r1, r3
 800fc3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc42:	e7eb      	b.n	800fc1c <__swhatbuf_r+0x24>

0800fc44 <__smakebuf_r>:
 800fc44:	898b      	ldrh	r3, [r1, #12]
 800fc46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc48:	079d      	lsls	r5, r3, #30
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	d507      	bpl.n	800fc60 <__smakebuf_r+0x1c>
 800fc50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	6123      	str	r3, [r4, #16]
 800fc58:	2301      	movs	r3, #1
 800fc5a:	6163      	str	r3, [r4, #20]
 800fc5c:	b003      	add	sp, #12
 800fc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc60:	ab01      	add	r3, sp, #4
 800fc62:	466a      	mov	r2, sp
 800fc64:	f7ff ffc8 	bl	800fbf8 <__swhatbuf_r>
 800fc68:	9f00      	ldr	r7, [sp, #0]
 800fc6a:	4605      	mov	r5, r0
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7fc ffca 	bl	800cc08 <_malloc_r>
 800fc74:	b948      	cbnz	r0, 800fc8a <__smakebuf_r+0x46>
 800fc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc7a:	059a      	lsls	r2, r3, #22
 800fc7c:	d4ee      	bmi.n	800fc5c <__smakebuf_r+0x18>
 800fc7e:	f023 0303 	bic.w	r3, r3, #3
 800fc82:	f043 0302 	orr.w	r3, r3, #2
 800fc86:	81a3      	strh	r3, [r4, #12]
 800fc88:	e7e2      	b.n	800fc50 <__smakebuf_r+0xc>
 800fc8a:	89a3      	ldrh	r3, [r4, #12]
 800fc8c:	6020      	str	r0, [r4, #0]
 800fc8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc92:	81a3      	strh	r3, [r4, #12]
 800fc94:	9b01      	ldr	r3, [sp, #4]
 800fc96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc9a:	b15b      	cbz	r3, 800fcb4 <__smakebuf_r+0x70>
 800fc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fca0:	4630      	mov	r0, r6
 800fca2:	f000 f81d 	bl	800fce0 <_isatty_r>
 800fca6:	b128      	cbz	r0, 800fcb4 <__smakebuf_r+0x70>
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	f023 0303 	bic.w	r3, r3, #3
 800fcae:	f043 0301 	orr.w	r3, r3, #1
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	431d      	orrs	r5, r3
 800fcb8:	81a5      	strh	r5, [r4, #12]
 800fcba:	e7cf      	b.n	800fc5c <__smakebuf_r+0x18>

0800fcbc <_fstat_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d07      	ldr	r5, [pc, #28]	@ (800fcdc <_fstat_r+0x20>)
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	602b      	str	r3, [r5, #0]
 800fcca:	f7f1 ffb5 	bl	8001c38 <_fstat>
 800fcce:	1c43      	adds	r3, r0, #1
 800fcd0:	d102      	bne.n	800fcd8 <_fstat_r+0x1c>
 800fcd2:	682b      	ldr	r3, [r5, #0]
 800fcd4:	b103      	cbz	r3, 800fcd8 <_fstat_r+0x1c>
 800fcd6:	6023      	str	r3, [r4, #0]
 800fcd8:	bd38      	pop	{r3, r4, r5, pc}
 800fcda:	bf00      	nop
 800fcdc:	20000db4 	.word	0x20000db4

0800fce0 <_isatty_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d06      	ldr	r5, [pc, #24]	@ (800fcfc <_isatty_r+0x1c>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	602b      	str	r3, [r5, #0]
 800fcec:	f7f1 ffb4 	bl	8001c58 <_isatty>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_isatty_r+0x1a>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_isatty_r+0x1a>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	20000db4 	.word	0x20000db4

0800fd00 <atan2f>:
 800fd00:	f000 b800 	b.w	800fd04 <__ieee754_atan2f>

0800fd04 <__ieee754_atan2f>:
 800fd04:	ee10 2a90 	vmov	r2, s1
 800fd08:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800fd0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fd10:	b510      	push	{r4, lr}
 800fd12:	eef0 7a40 	vmov.f32	s15, s0
 800fd16:	d806      	bhi.n	800fd26 <__ieee754_atan2f+0x22>
 800fd18:	ee10 0a10 	vmov	r0, s0
 800fd1c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800fd20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fd24:	d904      	bls.n	800fd30 <__ieee754_atan2f+0x2c>
 800fd26:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fd2a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd2e:	bd10      	pop	{r4, pc}
 800fd30:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800fd34:	d103      	bne.n	800fd3e <__ieee754_atan2f+0x3a>
 800fd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd3a:	f000 b883 	b.w	800fe44 <atanf>
 800fd3e:	1794      	asrs	r4, r2, #30
 800fd40:	f004 0402 	and.w	r4, r4, #2
 800fd44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fd48:	b943      	cbnz	r3, 800fd5c <__ieee754_atan2f+0x58>
 800fd4a:	2c02      	cmp	r4, #2
 800fd4c:	d05e      	beq.n	800fe0c <__ieee754_atan2f+0x108>
 800fd4e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fe20 <__ieee754_atan2f+0x11c>
 800fd52:	2c03      	cmp	r4, #3
 800fd54:	bf08      	it	eq
 800fd56:	eef0 7a47 	vmoveq.f32	s15, s14
 800fd5a:	e7e6      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fd5c:	b941      	cbnz	r1, 800fd70 <__ieee754_atan2f+0x6c>
 800fd5e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800fe24 <__ieee754_atan2f+0x120>
 800fd62:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fe28 <__ieee754_atan2f+0x124>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	bfa8      	it	ge
 800fd6a:	eef0 7a47 	vmovge.f32	s15, s14
 800fd6e:	e7dc      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fd70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fd74:	d110      	bne.n	800fd98 <__ieee754_atan2f+0x94>
 800fd76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fd7a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800fd7e:	d107      	bne.n	800fd90 <__ieee754_atan2f+0x8c>
 800fd80:	2c02      	cmp	r4, #2
 800fd82:	d846      	bhi.n	800fe12 <__ieee754_atan2f+0x10e>
 800fd84:	4b29      	ldr	r3, [pc, #164]	@ (800fe2c <__ieee754_atan2f+0x128>)
 800fd86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fd8a:	edd3 7a00 	vldr	s15, [r3]
 800fd8e:	e7cc      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fd90:	2c02      	cmp	r4, #2
 800fd92:	d841      	bhi.n	800fe18 <__ieee754_atan2f+0x114>
 800fd94:	4b26      	ldr	r3, [pc, #152]	@ (800fe30 <__ieee754_atan2f+0x12c>)
 800fd96:	e7f6      	b.n	800fd86 <__ieee754_atan2f+0x82>
 800fd98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fd9c:	d0df      	beq.n	800fd5e <__ieee754_atan2f+0x5a>
 800fd9e:	1a5b      	subs	r3, r3, r1
 800fda0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800fda4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800fda8:	da1a      	bge.n	800fde0 <__ieee754_atan2f+0xdc>
 800fdaa:	2a00      	cmp	r2, #0
 800fdac:	da01      	bge.n	800fdb2 <__ieee754_atan2f+0xae>
 800fdae:	313c      	adds	r1, #60	@ 0x3c
 800fdb0:	db19      	blt.n	800fde6 <__ieee754_atan2f+0xe2>
 800fdb2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fdb6:	f000 f919 	bl	800ffec <fabsf>
 800fdba:	f000 f843 	bl	800fe44 <atanf>
 800fdbe:	eef0 7a40 	vmov.f32	s15, s0
 800fdc2:	2c01      	cmp	r4, #1
 800fdc4:	d012      	beq.n	800fdec <__ieee754_atan2f+0xe8>
 800fdc6:	2c02      	cmp	r4, #2
 800fdc8:	d017      	beq.n	800fdfa <__ieee754_atan2f+0xf6>
 800fdca:	2c00      	cmp	r4, #0
 800fdcc:	d0ad      	beq.n	800fd2a <__ieee754_atan2f+0x26>
 800fdce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800fe34 <__ieee754_atan2f+0x130>
 800fdd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdd6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fe38 <__ieee754_atan2f+0x134>
 800fdda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdde:	e7a4      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fde0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800fe28 <__ieee754_atan2f+0x124>
 800fde4:	e7ed      	b.n	800fdc2 <__ieee754_atan2f+0xbe>
 800fde6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fe3c <__ieee754_atan2f+0x138>
 800fdea:	e7ea      	b.n	800fdc2 <__ieee754_atan2f+0xbe>
 800fdec:	ee17 3a90 	vmov	r3, s15
 800fdf0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800fdf4:	ee07 3a90 	vmov	s15, r3
 800fdf8:	e797      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fdfa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800fe34 <__ieee754_atan2f+0x130>
 800fdfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe02:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800fe38 <__ieee754_atan2f+0x134>
 800fe06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe0a:	e78e      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fe0c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800fe38 <__ieee754_atan2f+0x134>
 800fe10:	e78b      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fe12:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800fe40 <__ieee754_atan2f+0x13c>
 800fe16:	e788      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fe18:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800fe3c <__ieee754_atan2f+0x138>
 800fe1c:	e785      	b.n	800fd2a <__ieee754_atan2f+0x26>
 800fe1e:	bf00      	nop
 800fe20:	c0490fdb 	.word	0xc0490fdb
 800fe24:	bfc90fdb 	.word	0xbfc90fdb
 800fe28:	3fc90fdb 	.word	0x3fc90fdb
 800fe2c:	08010578 	.word	0x08010578
 800fe30:	0801056c 	.word	0x0801056c
 800fe34:	33bbbd2e 	.word	0x33bbbd2e
 800fe38:	40490fdb 	.word	0x40490fdb
 800fe3c:	00000000 	.word	0x00000000
 800fe40:	3f490fdb 	.word	0x3f490fdb

0800fe44 <atanf>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	ee10 5a10 	vmov	r5, s0
 800fe4a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800fe4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800fe52:	eef0 7a40 	vmov.f32	s15, s0
 800fe56:	d310      	bcc.n	800fe7a <atanf+0x36>
 800fe58:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800fe5c:	d904      	bls.n	800fe68 <atanf+0x24>
 800fe5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fe62:	eeb0 0a67 	vmov.f32	s0, s15
 800fe66:	bd38      	pop	{r3, r4, r5, pc}
 800fe68:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ffa0 <atanf+0x15c>
 800fe6c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ffa4 <atanf+0x160>
 800fe70:	2d00      	cmp	r5, #0
 800fe72:	bfc8      	it	gt
 800fe74:	eef0 7a47 	vmovgt.f32	s15, s14
 800fe78:	e7f3      	b.n	800fe62 <atanf+0x1e>
 800fe7a:	4b4b      	ldr	r3, [pc, #300]	@ (800ffa8 <atanf+0x164>)
 800fe7c:	429c      	cmp	r4, r3
 800fe7e:	d810      	bhi.n	800fea2 <atanf+0x5e>
 800fe80:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800fe84:	d20a      	bcs.n	800fe9c <atanf+0x58>
 800fe86:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ffac <atanf+0x168>
 800fe8a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fe8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fe96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9a:	dce2      	bgt.n	800fe62 <atanf+0x1e>
 800fe9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fea0:	e013      	b.n	800feca <atanf+0x86>
 800fea2:	f000 f8a3 	bl	800ffec <fabsf>
 800fea6:	4b42      	ldr	r3, [pc, #264]	@ (800ffb0 <atanf+0x16c>)
 800fea8:	429c      	cmp	r4, r3
 800feaa:	d84f      	bhi.n	800ff4c <atanf+0x108>
 800feac:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800feb0:	429c      	cmp	r4, r3
 800feb2:	d841      	bhi.n	800ff38 <atanf+0xf4>
 800feb4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800feb8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800febc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fec0:	2300      	movs	r3, #0
 800fec2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fed0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ffb4 <atanf+0x170>
 800fed4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ffb8 <atanf+0x174>
 800fed8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ffbc <atanf+0x178>
 800fedc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fee0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fee4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ffc0 <atanf+0x17c>
 800fee8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800feec:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ffc4 <atanf+0x180>
 800fef0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fef4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ffc8 <atanf+0x184>
 800fef8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fefc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ffcc <atanf+0x188>
 800ff00:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ff04:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ffd0 <atanf+0x18c>
 800ff08:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ff0c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ffd4 <atanf+0x190>
 800ff10:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ff14:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ffd8 <atanf+0x194>
 800ff18:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ff1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ffdc <atanf+0x198>
 800ff20:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ff24:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ff28:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ff2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff30:	d121      	bne.n	800ff76 <atanf+0x132>
 800ff32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff36:	e794      	b.n	800fe62 <atanf+0x1e>
 800ff38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ff3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ff40:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff44:	2301      	movs	r3, #1
 800ff46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff4a:	e7be      	b.n	800feca <atanf+0x86>
 800ff4c:	4b24      	ldr	r3, [pc, #144]	@ (800ffe0 <atanf+0x19c>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d80b      	bhi.n	800ff6a <atanf+0x126>
 800ff52:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ff56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ff5e:	2302      	movs	r3, #2
 800ff60:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ff64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff68:	e7af      	b.n	800feca <atanf+0x86>
 800ff6a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ff6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff72:	2303      	movs	r3, #3
 800ff74:	e7a9      	b.n	800feca <atanf+0x86>
 800ff76:	4a1b      	ldr	r2, [pc, #108]	@ (800ffe4 <atanf+0x1a0>)
 800ff78:	491b      	ldr	r1, [pc, #108]	@ (800ffe8 <atanf+0x1a4>)
 800ff7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ff7e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ff82:	edd3 6a00 	vldr	s13, [r3]
 800ff86:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ff8a:	2d00      	cmp	r5, #0
 800ff8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff90:	edd2 7a00 	vldr	s15, [r2]
 800ff94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff98:	bfb8      	it	lt
 800ff9a:	eef1 7a67 	vneglt.f32	s15, s15
 800ff9e:	e760      	b.n	800fe62 <atanf+0x1e>
 800ffa0:	bfc90fdb 	.word	0xbfc90fdb
 800ffa4:	3fc90fdb 	.word	0x3fc90fdb
 800ffa8:	3edfffff 	.word	0x3edfffff
 800ffac:	7149f2ca 	.word	0x7149f2ca
 800ffb0:	3f97ffff 	.word	0x3f97ffff
 800ffb4:	3c8569d7 	.word	0x3c8569d7
 800ffb8:	3d4bda59 	.word	0x3d4bda59
 800ffbc:	bd6ef16b 	.word	0xbd6ef16b
 800ffc0:	3d886b35 	.word	0x3d886b35
 800ffc4:	3dba2e6e 	.word	0x3dba2e6e
 800ffc8:	3e124925 	.word	0x3e124925
 800ffcc:	3eaaaaab 	.word	0x3eaaaaab
 800ffd0:	bd15a221 	.word	0xbd15a221
 800ffd4:	bd9d8795 	.word	0xbd9d8795
 800ffd8:	bde38e38 	.word	0xbde38e38
 800ffdc:	be4ccccd 	.word	0xbe4ccccd
 800ffe0:	401bffff 	.word	0x401bffff
 800ffe4:	08010594 	.word	0x08010594
 800ffe8:	08010584 	.word	0x08010584

0800ffec <fabsf>:
 800ffec:	ee10 3a10 	vmov	r3, s0
 800fff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fff4:	ee00 3a10 	vmov	s0, r3
 800fff8:	4770      	bx	lr
	...

0800fffc <_init>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	bf00      	nop
 8010000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010002:	bc08      	pop	{r3}
 8010004:	469e      	mov	lr, r3
 8010006:	4770      	bx	lr

08010008 <_fini>:
 8010008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801000a:	bf00      	nop
 801000c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801000e:	bc08      	pop	{r3}
 8010010:	469e      	mov	lr, r3
 8010012:	4770      	bx	lr
