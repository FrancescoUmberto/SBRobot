
SBRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011164  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08011338  08011338  00012338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118b4  080118b4  00013594  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080118b4  080118b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118bc  080118bc  00013594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118bc  080118bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080118c0  080118c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000594  20000000  080118c4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  20000594  08011e58  00013594  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  08011e58  00013ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013594  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9fd  00000000  00000000  000135c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049b6  00000000  00000000  00030fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00035978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122e  00000000  00000000  000370c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c20  00000000  00000000  000382f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022152  00000000  00000000  00060f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6e4a  00000000  00000000  00083068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d4  00000000  00000000  00169ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001715cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000594 	.word	0x20000594
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801131c 	.word	0x0801131c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000598 	.word	0x20000598
 800020c:	0801131c 	.word	0x0801131c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f004 fc15 	bl	8005910 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fc5b 	bl	80019a6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f0:	2309      	movs	r3, #9
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f004 fde7 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fc4b 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005b0 	.word	0x200005b0
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f005 fced 	bl	8006b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_DMA_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <MX_DMA_Init+0x68>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_DMA_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_DMA_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200b      	movs	r0, #11
 80011f0:	f005 f879 	bl	80062e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011f4:	200b      	movs	r0, #11
 80011f6:	f005 f892 	bl	800631e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2039      	movs	r0, #57	@ 0x39
 8001200:	f005 f871 	bl	80062e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001204:	2039      	movs	r0, #57	@ 0x39
 8001206:	f005 f88a 	bl	800631e <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b73      	ldr	r3, [pc, #460]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a72      	ldr	r2, [pc, #456]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b6c      	ldr	r3, [pc, #432]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a6b      	ldr	r2, [pc, #428]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a64      	ldr	r2, [pc, #400]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b5e      	ldr	r3, [pc, #376]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a5d      	ldr	r2, [pc, #372]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a56      	ldr	r2, [pc, #344]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2130      	movs	r1, #48	@ 0x30
 80012be:	4851      	ldr	r0, [pc, #324]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80012c0:	f005 fe02 	bl	8006ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2111      	movs	r1, #17
 80012c8:	484f      	ldr	r0, [pc, #316]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80012ca:	f005 fdfd 	bl	8006ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d4:	484d      	ldr	r0, [pc, #308]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012d6:	f005 fdf7 	bl	8006ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4846      	ldr	r0, [pc, #280]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012f2:	f005 fc3d 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012f6:	f641 531d 	movw	r3, #7453	@ 0x1d1d
 80012fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4840      	ldr	r0, [pc, #256]	@ (800140c <MX_GPIO_Init+0x1f4>)
 800130c:	f005 fc30 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001310:	2330      	movs	r3, #48	@ 0x30
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4837      	ldr	r0, [pc, #220]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 8001328:	f005 fc22 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4832      	ldr	r0, [pc, #200]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001342:	f005 fc15 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	482a      	ldr	r0, [pc, #168]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 800135e:	f005 fc07 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001362:	f24f 0324 	movw	r3, #61476	@ 0xf024
 8001366:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4824      	ldr	r0, [pc, #144]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 8001378:	f005 fbfa 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 800137c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	481d      	ldr	r0, [pc, #116]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001396:	f005 fbeb 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800139a:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 800139e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80013b0:	f005 fbde 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b4:	2304      	movs	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <MX_GPIO_Init+0x1f8>)
 80013c8:	f005 fbd2 	bl	8006b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4809      	ldr	r0, [pc, #36]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80013e4:	f005 fbc4 	bl	8006b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2017      	movs	r0, #23
 80013ee:	f004 ff7a 	bl	80062e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f2:	2017      	movs	r0, #23
 80013f4:	f004 ff93 	bl	800631e <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00

08001414 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f005 fd6b 	bl	8006f2c <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 faa3 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200005f8 	.word	0x200005f8
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <HAL_I2C_MspInit+0xe0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d15a      	bne.n	8001548 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4823      	ldr	r0, [pc, #140]	@ (8001558 <HAL_I2C_MspInit+0xe8>)
 80014cc:	f005 fb50 	bl	8006b70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_I2C_MspInit+0xf0>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800152e:	f004 ff11 	bl	8006354 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001538:	f000 fa35 	bl	80019a6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
 8001542:	4a06      	ldr	r2, [pc, #24]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400
 800155c:	2000064c 	.word	0x2000064c
 8001560:	40026010 	.word	0x40026010

08001564 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800156c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001570:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800157c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001580:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001584:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800158c:	e000      	b.n	8001590 <ITM_SendChar+0x2c>
    {
      __NOP();
 800158e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001590:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f9      	beq.n	800158e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800159a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f004 f913 	bl	80057e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f8b1 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c2:	f7ff fe29 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c6:	f7ff fdf1 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015ca:	f001 f8b1 	bl	8002730 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80015ce:	f000 fd3f 	bl	8002050 <MX_TIM4_Init>
  MX_TIM6_Init();
 80015d2:	f000 fe11 	bl	80021f8 <MX_TIM6_Init>
  MX_SPI2_Init();
 80015d6:	f000 f9ed 	bl	80019b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015da:	f000 fc67 	bl	8001eac <MX_TIM2_Init>
  MX_TIM7_Init();
 80015de:	f000 fe41 	bl	8002264 <MX_TIM7_Init>
  MX_TIM3_Init();
 80015e2:	f000 fcbb 	bl	8001f5c <MX_TIM3_Init>
  MX_TIM5_Init();
 80015e6:	f000 fdad 	bl	8002144 <MX_TIM5_Init>
  MX_ADC1_Init();
 80015ea:	f7ff fd49 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015ee:	f7ff ff11 	bl	8001414 <MX_I2C1_Init>
  MX_TIM10_Init();
 80015f2:	f000 febf 	bl	8002374 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80015f6:	f001 f8c5 	bl	8002784 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80015fa:	f000 fc07 	bl	8001e0c <MX_TIM1_Init>
  MX_TIM8_Init();
 80015fe:	f000 fe67 	bl	80022d0 <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 8001602:	2032      	movs	r0, #50	@ 0x32
 8001604:	f004 f960 	bl	80058c8 <HAL_Delay>
  Robot_init(&robot);
 8001608:	4837      	ldr	r0, [pc, #220]	@ (80016e8 <main+0x134>)
 800160a:	f002 f857 	bl	80036bc <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_r.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.angle, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
 800160e:	4a37      	ldr	r2, [pc, #220]	@ (80016ec <main+0x138>)
 8001610:	463b      	mov	r3, r7
 8001612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001616:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	4834      	ldr	r0, [pc, #208]	@ (80016f0 <main+0x13c>)
 8001620:	f002 fe35 	bl	800428e <MAX72_Add_Data>

//  display_data_t data4 = {&power_module.voltage, PRINT_FLOAT, NO_SETTINGS, DISPLAY_TYPE_FLOAT, 2};
//  MAX72_Add_Data(&display, &data4);

  HAL_UART_Receive_DMA(&huart6, (uint8_t*)js_buffer, 14);
 8001624:	220e      	movs	r2, #14
 8001626:	4933      	ldr	r1, [pc, #204]	@ (80016f4 <main+0x140>)
 8001628:	4833      	ldr	r0, [pc, #204]	@ (80016f8 <main+0x144>)
 800162a:	f009 fcc9 	bl	800afc0 <HAL_UART_Receive_DMA>
	pid.active ^= 1;
 800162e:	4b33      	ldr	r3, [pc, #204]	@ (80016fc <main+0x148>)
 8001630:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001634:	f083 0301 	eor.w	r3, r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <main+0x148>)
 800163c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	if (pid.active) {
 8001640:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <main+0x148>)
 8001642:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <main+0x9e>
		PID_Reset(&pid);
 800164a:	482c      	ldr	r0, [pc, #176]	@ (80016fc <main+0x148>)
 800164c:	f002 fbc2 	bl	8003dd4 <PID_Reset>
 8001650:	e009      	b.n	8001666 <main+0xb2>
	} else {
		set_speed(&stepper_l, 0);
 8001652:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001700 <main+0x14c>
 8001656:	482b      	ldr	r0, [pc, #172]	@ (8001704 <main+0x150>)
 8001658:	f002 fcda 	bl	8004010 <set_speed>
		set_speed(&stepper_r, 0);
 800165c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001700 <main+0x14c>
 8001660:	4829      	ldr	r0, [pc, #164]	@ (8001708 <main+0x154>)
 8001662:	f002 fcd5 	bl	8004010 <set_speed>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IMU_Rx_Cplt) {
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <main+0x158>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <main+0xc6>
		  IMU_Rx_Cplt = 0; // Reset flag
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <main+0x158>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		  IMU_Compute_Data(&imu); // Process received data
 8001674:	4826      	ldr	r0, [pc, #152]	@ (8001710 <main+0x15c>)
 8001676:	f001 fd63 	bl	8003140 <IMU_Compute_Data>
	  }

	  if (js_msg_ready) {
 800167a:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <main+0x160>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <main+0xd4>
		  js_msg_ready = 0; // Reset flag
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <main+0x160>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
//		  }
		    // Robot_read_serial_msg(&robot, js_buffer);
	  }

	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <main+0x164>)
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <main+0x168>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d0e8      	beq.n	8001666 <main+0xb2>
	      last_cnt = tim6_update_cnt;
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <main+0x168>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <main+0x164>)
 800169a:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      MAX72_Update_Data(&display);
 800169c:	4814      	ldr	r0, [pc, #80]	@ (80016f0 <main+0x13c>)
 800169e:	f002 fe21 	bl	80042e4 <MAX72_Update_Data>
	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <main+0x168>)
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <main+0x16c>)
 80016a8:	fba3 1302 	umull	r1, r3, r3, r2
 80016ac:	0899      	lsrs	r1, r3, #2
 80016ae:	460b      	mov	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <main+0x12c>

	    	  // Send IMU data via UART for debugging
//	    	  transmit_IMU_data();
//			  show_calibration_messages();

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <main+0x168>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <main+0x16c>)
 80016c2:	fba3 1302 	umull	r1, r3, r3, r2
 80016c6:	08d9      	lsrs	r1, r3, #3
 80016c8:	460b      	mov	r3, r1
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <main+0x12c>
	    		  MAX72_Change_Data(&display,0);
 80016d8:	2100      	movs	r1, #0
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <main+0x13c>)
 80016dc:	f002 ff02 	bl	80044e4 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 80016e0:	f003 fc26 	bl	8004f30 <MAX72_Scroll_Process>
  {
 80016e4:	e7bf      	b.n	8001666 <main+0xb2>
 80016e6:	bf00      	nop
 80016e8:	200006c0 	.word	0x200006c0
 80016ec:	080113c0 	.word	0x080113c0
 80016f0:	20000d0c 	.word	0x20000d0c
 80016f4:	200006b0 	.word	0x200006b0
 80016f8:	20000a0c 	.word	0x20000a0c
 80016fc:	20000cb4 	.word	0x20000cb4
 8001700:	00000000 	.word	0x00000000
 8001704:	20000ba0 	.word	0x20000ba0
 8001708:	20000b1c 	.word	0x20000b1c
 800170c:	200006ad 	.word	0x200006ad
 8001710:	20000bc4 	.word	0x20000bc4
 8001714:	200006bf 	.word	0x200006bf
 8001718:	20000000 	.word	0x20000000
 800171c:	200006ac 	.word	0x200006ac
 8001720:	cccccccd 	.word	0xcccccccd

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b094      	sub	sp, #80	@ 0x50
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2234      	movs	r2, #52	@ 0x34
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f00b fcd9 	bl	800d0ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b2a      	ldr	r3, [pc, #168]	@ (80017f8 <SystemClock_Config+0xd4>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <SystemClock_Config+0xd4>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <SystemClock_Config+0xd4>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <SystemClock_Config+0xd8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001770:	4a22      	ldr	r2, [pc, #136]	@ (80017fc <SystemClock_Config+0xd8>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <SystemClock_Config+0xd8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2310      	movs	r3, #16
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001798:	2310      	movs	r3, #16
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800179c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017a2:	2304      	movs	r3, #4
 80017a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017a6:	2302      	movs	r3, #2
 80017a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4618      	mov	r0, r3
 80017b4:	f007 f9fc 	bl	8008bb0 <HAL_RCC_OscConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017be:	f000 f8f2 	bl	80019a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c2:	230f      	movs	r3, #15
 80017c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2302      	movs	r3, #2
 80017c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	2102      	movs	r1, #2
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fe9c 	bl	800851c <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017ea:	f000 f8dc 	bl	80019a6 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3750      	adds	r7, #80	@ 0x50
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800181c:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2bfa      	cmp	r3, #250	@ 0xfa
 8001824:	d11f      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x66>
			tim6_update_cnt = 0;
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 800182c:	e01b      	b.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM7) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d10e      	bne.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x56>
		if (pid.active){
 8001838:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800183a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_TIM_PeriodElapsedCallback+0x48>
		  PID_Update(&pid);
 8001842:	480e      	ldr	r0, [pc, #56]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001844:	f002 fab8 	bl	8003db8 <PID_Update>
		speed_control(&stepper_r);
 8001848:	480d      	ldr	r0, [pc, #52]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800184a:	f002 faed 	bl	8003e28 <speed_control>
		speed_control(&stepper_l);
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001850:	f002 faea 	bl	8003e28 <speed_control>
}
 8001854:	e007      	b.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM10){
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x66>
		IMU_ReadData(&imu);
 8001860:	480a      	ldr	r0, [pc, #40]	@ (800188c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001862:	f001 fc56 	bl	8003112 <IMU_ReadData>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40001000 	.word	0x40001000
 8001874:	200006ac 	.word	0x200006ac
 8001878:	40001400 	.word	0x40001400
 800187c:	20000cb4 	.word	0x20000cb4
 8001880:	20000b1c 	.word	0x20000b1c
 8001884:	20000ba0 	.word	0x20000ba0
 8001888:	40014400 	.word	0x40014400
 800188c:	20000bc4 	.word	0x20000bc4

08001890 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d112      	bne.n	80018c8 <HAL_TIM_OC_DelayElapsedCallback+0x38>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7f1b      	ldrb	r3, [r3, #28]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d10e      	bne.n	80018c8 <HAL_TIM_OC_DelayElapsedCallback+0x38>
    {
    	Encoder_event(&encoder_l);
 80018aa:	4816      	ldr	r0, [pc, #88]	@ (8001904 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80018ac:	f001 fb18 	bl	8002ee0 <Encoder_event>
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, !htim->Instance->CCR3);  // per ogni tick
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
	{
    	Encoder_event(&encoder_r);
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, !htim->Instance->CCR3);  // per ogni tick
	}
}
 80018c6:	e016      	b.n	80018f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
    } else if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d111      	bne.n	80018f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7f1b      	ldrb	r3, [r3, #28]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d10d      	bne.n	80018f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
    	Encoder_event(&encoder_r);
 80018da:	480c      	ldr	r0, [pc, #48]	@ (800190c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80018dc:	f001 fb00 	bl	8002ee0 <Encoder_event>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, !htim->Instance->CCR3);  // per ogni tick
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40000400 	.word	0x40000400
 8001904:	20000b40 	.word	0x20000b40
 8001908:	40000800 	.word	0x40000800
 800190c:	20000abc 	.word	0x20000abc

08001910 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
//    on_click();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_I2C_MemRxCpltCallback+0x24>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d102      	bne.n	8001940 <HAL_I2C_MemRxCpltCallback+0x18>
		// Data received from IMU, process it
		IMU_Rx_Cplt = 1; // Set flag to indicate data is ready
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_I2C_MemRxCpltCallback+0x28>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
	}
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000bc4 	.word	0x20000bc4
 8001950:	200006ad 	.word	0x200006ad

08001954 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <HAL_UART_RxCpltCallback+0x2c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d105      	bne.n	8001972 <HAL_UART_RxCpltCallback+0x1e>

			js_buffer[14] = '\0';     // chiudi stringa
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <HAL_UART_RxCpltCallback+0x30>)
 8001968:	2200      	movs	r2, #0
 800196a:	739a      	strb	r2, [r3, #14]
			js_msg_ready = 1;         // segnala che il messaggio è pronto
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_UART_RxCpltCallback+0x34>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
	}
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40011400 	.word	0x40011400
 8001984:	200006b0 	.word	0x200006b0
 8001988:	200006bf 	.word	0x200006bf

0800198c <__io_putchar>:

int __io_putchar(int ch){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fde4 	bl	8001564 <ITM_SendChar>
	return ch;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019aa:	b672      	cpsid	i
}
 80019ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ae:	bf00      	nop
 80019b0:	e7fd      	b.n	80019ae <Error_Handler+0x8>
	...

080019b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019ba:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <MX_SPI2_Init+0x6c>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_SPI2_Init+0x68>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_SPI2_Init+0x68>)
 8001a02:	220a      	movs	r2, #10
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_SPI2_Init+0x68>)
 8001a08:	f007 fb70 	bl	80090ec <HAL_SPI_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001a12:	f7ff ffc8 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200006e0 	.word	0x200006e0
 8001a20:	40003800 	.word	0x40003800

08001a24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <HAL_SPI_MspInit+0xc0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d14a      	bne.n	8001adc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a26      	ldr	r2, [pc, #152]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_SPI_MspInit+0xc4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001aaa:	2307      	movs	r3, #7
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <HAL_SPI_MspInit+0xc8>)
 8001ab6:	f005 f85b 	bl	8006b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001acc:	2305      	movs	r3, #5
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <HAL_SPI_MspInit+0xcc>)
 8001ad8:	f005 f84a 	bl	8006b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	@ 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40003800 	.word	0x40003800
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020400 	.word	0x40020400

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <HAL_MspInit+0x4c>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <HAL_MspInit+0x4c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b32:	2007      	movs	r0, #7
 8001b34:	f004 fbcc 	bl	80062d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <NMI_Handler+0x4>

08001b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9a:	f003 fe75 	bl	8005888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <DMA1_Stream0_IRQHandler+0x10>)
 8001baa:	f004 fd6b 	bl	8006684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000064c 	.word	0x2000064c

08001bb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001bbc:	2020      	movs	r0, #32
 8001bbe:	f005 f99d 	bl	8006efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001bce:	f008 fa3b 	bl	800a048 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001bd2:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001bd4:	f008 fa38 	bl	800a048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000073c 	.word	0x2000073c
 8001be0:	2000097c 	.word	0x2000097c

08001be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <TIM3_IRQHandler+0x10>)
 8001bea:	f008 fa2d 	bl	800a048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200007cc 	.word	0x200007cc

08001bf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <TIM4_IRQHandler+0x10>)
 8001bfe:	f008 fa23 	bl	800a048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000814 	.word	0x20000814

08001c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <TIM6_DAC_IRQHandler+0x10>)
 8001c12:	f008 fa19 	bl	800a048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200008a4 	.word	0x200008a4

08001c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <TIM7_IRQHandler+0x10>)
 8001c26:	f008 fa0f 	bl	800a048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200008ec 	.word	0x200008ec

08001c34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <DMA2_Stream1_IRQHandler+0x10>)
 8001c3a:	f004 fd23 	bl	8006684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000a54 	.word	0x20000a54

08001c48 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <USART6_IRQHandler+0x10>)
 8001c4e:	f009 f9dd 	bl	800b00c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000a0c 	.word	0x20000a0c

08001c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_kill>:

int _kill(int pid, int sig)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c76:	f00b fa8b 	bl	800d190 <__errno>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2216      	movs	r2, #22
 8001c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_exit>:

void _exit (int status)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffe7 	bl	8001c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <_exit+0x12>

08001ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e00a      	b.n	8001cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	4601      	mov	r1, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	b2ca      	uxtb	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf0      	blt.n	8001cb4 <_read+0x12>
  }

  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e009      	b.n	8001d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fe48 	bl	800198c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbf1      	blt.n	8001cee <_write+0x12>
  }
  return len;
 8001d0a:	687b      	ldr	r3, [r7, #4]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_close>:

int _close(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_isatty>:

int _isatty(int file)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d207      	bcs.n	8001dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dac:	f00b f9f0 	bl	800d190 <__errno>
 8001db0:	4603      	mov	r3, r0
 8001db2:	220c      	movs	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dba:	e009      	b.n	8001dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <_sbrk+0x64>)
 8001dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20020000 	.word	0x20020000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	20000738 	.word	0x20000738
 8001de4:	20000ed8 	.word	0x20000ed8

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	463b      	mov	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <MX_TIM1_Init+0x9c>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e30:	2253      	movs	r2, #83	@ 0x53
 8001e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e54:	4813      	ldr	r0, [pc, #76]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e56:	f007 fbf3 	bl	8009640 <HAL_TIM_Base_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e60:	f7ff fda1 	bl	80019a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e72:	f008 faf7 	bl	800a464 <HAL_TIM_ConfigClockSource>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e7c:	f7ff fd93 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e80:	2320      	movs	r3, #32
 8001e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_TIM1_Init+0x98>)
 8001e8e:	f008 ffb7 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e98:	f7ff fd85 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000073c 	.word	0x2000073c
 8001ea8:	40010000 	.word	0x40010000

08001eac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	f107 0320 	add.w	r3, r7, #32
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ece:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001ed0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ed4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ef6:	4818      	ldr	r0, [pc, #96]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001ef8:	f007 fe30 	bl	8009b5c <HAL_TIM_PWM_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f02:	f7ff fd50 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	4619      	mov	r1, r3
 8001f14:	4810      	ldr	r0, [pc, #64]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001f16:	f008 ff73 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f20:	f7ff fd41 	bl	80019a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f24:	2360      	movs	r3, #96	@ 0x60
 8001f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2204      	movs	r2, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001f3c:	f008 f9d0 	bl	800a2e0 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f46:	f7ff fd2e 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f4a:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <MX_TIM2_Init+0xac>)
 8001f4c:	f000 fb92 	bl	8002674 <HAL_TIM_MspPostInit>

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	@ 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000784 	.word	0x20000784

08001f5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b092      	sub	sp, #72	@ 0x48
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f66:	2224      	movs	r2, #36	@ 0x24
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00b f8bd 	bl	800d0ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800204c <MX_TIM3_Init+0xf0>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f92:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001fb0:	4825      	ldr	r0, [pc, #148]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fb2:	f007 fc6d 	bl	8009890 <HAL_TIM_OC_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001fbc:	f7ff fcf3 	bl	80019a6 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4817      	ldr	r0, [pc, #92]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fec:	f007 fece 	bl	8009d8c <HAL_TIM_Encoder_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ff6:	f7ff fcd6 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	480f      	ldr	r0, [pc, #60]	@ (8002048 <MX_TIM3_Init+0xec>)
 800200a:	f008 fef9 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8002014:	f7ff fcc7 	bl	80019a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002018:	2310      	movs	r3, #16
 800201a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	2208      	movs	r2, #8
 800202c:	4619      	mov	r1, r3
 800202e:	4806      	ldr	r0, [pc, #24]	@ (8002048 <MX_TIM3_Init+0xec>)
 8002030:	f008 f8fa 	bl	800a228 <HAL_TIM_OC_ConfigChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800203a:	f7ff fcb4 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	3748      	adds	r7, #72	@ 0x48
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200007cc 	.word	0x200007cc
 800204c:	40000400 	.word	0x40000400

08002050 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b092      	sub	sp, #72	@ 0x48
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f00b f843 	bl	800d0ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	463b      	mov	r3, r7
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002080:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <MX_TIM4_Init+0xec>)
 8002082:	4a2f      	ldr	r2, [pc, #188]	@ (8002140 <MX_TIM4_Init+0xf0>)
 8002084:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002086:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <MX_TIM4_Init+0xec>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b2b      	ldr	r3, [pc, #172]	@ (800213c <MX_TIM4_Init+0xec>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <MX_TIM4_Init+0xec>)
 8002094:	2201      	movs	r2, #1
 8002096:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b28      	ldr	r3, [pc, #160]	@ (800213c <MX_TIM4_Init+0xec>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209e:	4b27      	ldr	r3, [pc, #156]	@ (800213c <MX_TIM4_Init+0xec>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80020a4:	4825      	ldr	r0, [pc, #148]	@ (800213c <MX_TIM4_Init+0xec>)
 80020a6:	f007 fbf3 	bl	8009890 <HAL_TIM_OC_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80020b0:	f7ff fc79 	bl	80019a6 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020b4:	2303      	movs	r3, #3
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020bc:	2301      	movs	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020cc:	2301      	movs	r3, #1
 80020ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80020d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4817      	ldr	r0, [pc, #92]	@ (800213c <MX_TIM4_Init+0xec>)
 80020e0:	f007 fe54 	bl	8009d8c <HAL_TIM_Encoder_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80020ea:	f7ff fc5c 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	480f      	ldr	r0, [pc, #60]	@ (800213c <MX_TIM4_Init+0xec>)
 80020fe:	f008 fe7f 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 8002108:	f7ff fc4d 	bl	80019a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800210c:	2310      	movs	r3, #16
 800210e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	2208      	movs	r2, #8
 8002120:	4619      	mov	r1, r3
 8002122:	4806      	ldr	r0, [pc, #24]	@ (800213c <MX_TIM4_Init+0xec>)
 8002124:	f008 f880 	bl	800a228 <HAL_TIM_OC_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800212e:	f7ff fc3a 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	3748      	adds	r7, #72	@ 0x48
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000814 	.word	0x20000814
 8002140:	40000800 	.word	0x40000800

08002144 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	f107 0320 	add.w	r3, r7, #32
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	615a      	str	r2, [r3, #20]
 8002164:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002166:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <MX_TIM5_Init+0xac>)
 8002168:	4a22      	ldr	r2, [pc, #136]	@ (80021f4 <MX_TIM5_Init+0xb0>)
 800216a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800216c:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <MX_TIM5_Init+0xac>)
 800216e:	2200      	movs	r2, #0
 8002170:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <MX_TIM5_Init+0xac>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <MX_TIM5_Init+0xac>)
 800217a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800217e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <MX_TIM5_Init+0xac>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <MX_TIM5_Init+0xac>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800218c:	4818      	ldr	r0, [pc, #96]	@ (80021f0 <MX_TIM5_Init+0xac>)
 800218e:	f007 fce5 	bl	8009b5c <HAL_TIM_PWM_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002198:	f7ff fc05 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021a4:	f107 0320 	add.w	r3, r7, #32
 80021a8:	4619      	mov	r1, r3
 80021aa:	4811      	ldr	r0, [pc, #68]	@ (80021f0 <MX_TIM5_Init+0xac>)
 80021ac:	f008 fe28 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80021b6:	f7ff fbf6 	bl	80019a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ba:	2360      	movs	r3, #96	@ 0x60
 80021bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2200      	movs	r2, #0
 80021ce:	4619      	mov	r1, r3
 80021d0:	4807      	ldr	r0, [pc, #28]	@ (80021f0 <MX_TIM5_Init+0xac>)
 80021d2:	f008 f885 	bl	800a2e0 <HAL_TIM_PWM_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80021dc:	f7ff fbe3 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80021e0:	4803      	ldr	r0, [pc, #12]	@ (80021f0 <MX_TIM5_Init+0xac>)
 80021e2:	f000 fa47 	bl	8002674 <HAL_TIM_MspPostInit>

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	@ 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000085c 	.word	0x2000085c
 80021f4:	40000c00 	.word	0x40000c00

080021f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fe:	463b      	mov	r3, r7
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <MX_TIM6_Init+0x64>)
 8002208:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <MX_TIM6_Init+0x68>)
 800220a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <MX_TIM6_Init+0x64>)
 800220e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002212:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_TIM6_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <MX_TIM6_Init+0x64>)
 800221c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002220:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_TIM6_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002228:	480c      	ldr	r0, [pc, #48]	@ (800225c <MX_TIM6_Init+0x64>)
 800222a:	f007 fa09 	bl	8009640 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002234:	f7ff fbb7 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002240:	463b      	mov	r3, r7
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_TIM6_Init+0x64>)
 8002246:	f008 fddb 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002250:	f7ff fba9 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200008a4 	.word	0x200008a4
 8002260:	40001000 	.word	0x40001000

08002264 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226a:	463b      	mov	r3, r7
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <MX_TIM7_Init+0x64>)
 8002274:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <MX_TIM7_Init+0x68>)
 8002276:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <MX_TIM7_Init+0x64>)
 800227a:	2263      	movs	r2, #99	@ 0x63
 800227c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <MX_TIM7_Init+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <MX_TIM7_Init+0x64>)
 8002286:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800228a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <MX_TIM7_Init+0x64>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <MX_TIM7_Init+0x64>)
 8002294:	f007 f9d4 	bl	8009640 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800229e:	f7ff fb82 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022aa:	463b      	mov	r3, r7
 80022ac:	4619      	mov	r1, r3
 80022ae:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <MX_TIM7_Init+0x64>)
 80022b0:	f008 fda6 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80022ba:	f7ff fb74 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200008ec 	.word	0x200008ec
 80022cc:	40001400 	.word	0x40001400

080022d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <MX_TIM8_Init+0x9c>)
 80022f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002370 <MX_TIM8_Init+0xa0>)
 80022f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <MX_TIM8_Init+0x9c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <MX_TIM8_Init+0x9c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002300:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <MX_TIM8_Init+0x9c>)
 8002302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002306:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b18      	ldr	r3, [pc, #96]	@ (800236c <MX_TIM8_Init+0x9c>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <MX_TIM8_Init+0x9c>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b15      	ldr	r3, [pc, #84]	@ (800236c <MX_TIM8_Init+0x9c>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800231a:	4814      	ldr	r0, [pc, #80]	@ (800236c <MX_TIM8_Init+0x9c>)
 800231c:	f007 f990 	bl	8009640 <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002326:	f7ff fb3e 	bl	80019a6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800232a:	2307      	movs	r3, #7
 800232c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4619      	mov	r1, r3
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <MX_TIM8_Init+0x9c>)
 800233a:	f008 f95a 	bl	800a5f2 <HAL_TIM_SlaveConfigSynchro>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002344:	f7ff fb2f 	bl	80019a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <MX_TIM8_Init+0x9c>)
 8002356:	f008 fd53 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002360:	f7ff fb21 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000934 	.word	0x20000934
 8002370:	40010400 	.word	0x40010400

08002374 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002378:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <MX_TIM10_Init+0x40>)
 800237a:	4a0f      	ldr	r2, [pc, #60]	@ (80023b8 <MX_TIM10_Init+0x44>)
 800237c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 800237e:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <MX_TIM10_Init+0x40>)
 8002380:	2213      	movs	r2, #19
 8002382:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <MX_TIM10_Init+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <MX_TIM10_Init+0x40>)
 800238c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002390:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <MX_TIM10_Init+0x40>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <MX_TIM10_Init+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <MX_TIM10_Init+0x40>)
 80023a0:	f007 f94e 	bl	8009640 <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023aa:	f7ff fafc 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000097c 	.word	0x2000097c
 80023b8:	40014400 	.word	0x40014400

080023bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a42      	ldr	r2, [pc, #264]	@ (80024d4 <HAL_TIM_Base_MspInit+0x118>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d116      	bne.n	80023fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a40      	ldr	r2, [pc, #256]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2019      	movs	r0, #25
 80023f0:	f003 ff79 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023f4:	2019      	movs	r0, #25
 80023f6:	f003 ff92 	bl	800631e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80023fa:	e066      	b.n	80024ca <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM6)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a36      	ldr	r2, [pc, #216]	@ (80024dc <HAL_TIM_Base_MspInit+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d116      	bne.n	8002434 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	4b33      	ldr	r3, [pc, #204]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a32      	ldr	r2, [pc, #200]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b30      	ldr	r3, [pc, #192]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2036      	movs	r0, #54	@ 0x36
 8002428:	f003 ff5d 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800242c:	2036      	movs	r0, #54	@ 0x36
 800242e:	f003 ff76 	bl	800631e <HAL_NVIC_EnableIRQ>
}
 8002432:	e04a      	b.n	80024ca <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM7)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_TIM_Base_MspInit+0x124>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d116      	bne.n	800246c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	4b25      	ldr	r3, [pc, #148]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	6413      	str	r3, [r2, #64]	@ 0x40
 800244e:	4b22      	ldr	r3, [pc, #136]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2037      	movs	r0, #55	@ 0x37
 8002460:	f003 ff41 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002464:	2037      	movs	r0, #55	@ 0x37
 8002466:	f003 ff5a 	bl	800631e <HAL_NVIC_EnableIRQ>
}
 800246a:	e02e      	b.n	80024ca <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM8)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_TIM_Base_MspInit+0x128>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	4a16      	ldr	r2, [pc, #88]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6453      	str	r3, [r2, #68]	@ 0x44
 8002486:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
}
 8002492:	e01a      	b.n	80024ca <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM10)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <HAL_TIM_Base_MspInit+0x12c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d115      	bne.n	80024ca <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	4a0c      	ldr	r2, [pc, #48]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_TIM_Base_MspInit+0x11c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2019      	movs	r0, #25
 80024c0:	f003 ff11 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024c4:	2019      	movs	r0, #25
 80024c6:	f003 ff2a 	bl	800631e <HAL_NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40001000 	.word	0x40001000
 80024e0:	40001400 	.word	0x40001400
 80024e4:	40010400 	.word	0x40010400
 80024e8:	40014400 	.word	0x40014400

080024ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fc:	d10e      	bne.n	800251c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_TIM_PWM_MspInit+0x64>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <HAL_TIM_PWM_MspInit+0x64>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_TIM_PWM_MspInit+0x64>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800251a:	e012      	b.n	8002542 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0c      	ldr	r2, [pc, #48]	@ (8002554 <HAL_TIM_PWM_MspInit+0x68>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10d      	bne.n	8002542 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_TIM_PWM_MspInit+0x64>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_TIM_PWM_MspInit+0x64>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_TIM_PWM_MspInit+0x64>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40000c00 	.word	0x40000c00

08002558 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(tim_ocHandle->Instance==TIM3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a3a      	ldr	r2, [pc, #232]	@ (8002660 <HAL_TIM_OC_MspInit+0x108>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d134      	bne.n	80025e4 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	4b39      	ldr	r3, [pc, #228]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a38      	ldr	r2, [pc, #224]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a31      	ldr	r2, [pc, #196]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80025b2:	23c0      	movs	r3, #192	@ 0xc0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025c2:	2302      	movs	r3, #2
 80025c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	4826      	ldr	r0, [pc, #152]	@ (8002668 <HAL_TIM_OC_MspInit+0x110>)
 80025ce:	f004 facf 	bl	8006b70 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	201d      	movs	r0, #29
 80025d8:	f003 fe85 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025dc:	201d      	movs	r0, #29
 80025de:	f003 fe9e 	bl	800631e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025e2:	e038      	b.n	8002656 <HAL_TIM_OC_MspInit+0xfe>
  else if(tim_ocHandle->Instance==TIM4)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a20      	ldr	r2, [pc, #128]	@ (800266c <HAL_TIM_OC_MspInit+0x114>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d133      	bne.n	8002656 <HAL_TIM_OC_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_TIM_OC_MspInit+0x10c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 8002626:	23c0      	movs	r3, #192	@ 0xc0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002636:	2302      	movs	r3, #2
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	480b      	ldr	r0, [pc, #44]	@ (8002670 <HAL_TIM_OC_MspInit+0x118>)
 8002642:	f004 fa95 	bl	8006b70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	201e      	movs	r0, #30
 800264c:	f003 fe4b 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002650:	201e      	movs	r0, #30
 8002652:	f003 fe64 	bl	800631e <HAL_NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3730      	adds	r7, #48	@ 0x30
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40000400 	.word	0x40000400
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000
 800266c:	40000800 	.word	0x40000800
 8002670:	40020400 	.word	0x40020400

08002674 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002694:	d11e      	bne.n	80026d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <HAL_TIM_MspPostInit+0xb0>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <HAL_TIM_MspPostInit+0xb0>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <HAL_TIM_MspPostInit+0xb0>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 80026b2:	2302      	movs	r3, #2
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	4816      	ldr	r0, [pc, #88]	@ (8002728 <HAL_TIM_MspPostInit+0xb4>)
 80026ce:	f004 fa4f 	bl	8006b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80026d2:	e022      	b.n	800271a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a14      	ldr	r2, [pc, #80]	@ (800272c <HAL_TIM_MspPostInit+0xb8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d11d      	bne.n	800271a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_TIM_MspPostInit+0xb0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002724 <HAL_TIM_MspPostInit+0xb0>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_TIM_MspPostInit+0xb0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 80026fa:	2301      	movs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800270a:	2302      	movs	r3, #2
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4804      	ldr	r0, [pc, #16]	@ (8002728 <HAL_TIM_MspPostInit+0xb4>)
 8002716:	f004 fa2b 	bl	8006b70 <HAL_GPIO_Init>
}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40020000 	.word	0x40020000
 800272c:	40000c00 	.word	0x40000c00

08002730 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 8002736:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <MX_USART2_UART_Init+0x50>)
 8002738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 800273c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 8002756:	220c      	movs	r2, #12
 8002758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275a:	4b08      	ldr	r3, [pc, #32]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002766:	4805      	ldr	r0, [pc, #20]	@ (800277c <MX_USART2_UART_Init+0x4c>)
 8002768:	f008 fbda 	bl	800af20 <HAL_UART_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002772:	f7ff f918 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200009c4 	.word	0x200009c4
 8002780:	40004400 	.word	0x40004400

08002784 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_USART6_UART_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 8002790:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002794:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 80027aa:	2204      	movs	r2, #4
 80027ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <MX_USART6_UART_Init+0x4c>)
 80027bc:	f008 fbb0 	bl	800af20 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027c6:	f7ff f8ee 	bl	80019a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000a0c 	.word	0x20000a0c
 80027d4:	40011400 	.word	0x40011400

080027d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	@ 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	@ (800292c <HAL_UART_MspInit+0x154>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12c      	bne.n	8002854 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a4b      	ldr	r2, [pc, #300]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b49      	ldr	r3, [pc, #292]	@ (8002930 <HAL_UART_MspInit+0x158>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	4b45      	ldr	r3, [pc, #276]	@ (8002930 <HAL_UART_MspInit+0x158>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	4a44      	ldr	r2, [pc, #272]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	@ 0x30
 8002826:	4b42      	ldr	r3, [pc, #264]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002832:	230c      	movs	r3, #12
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002842:	2307      	movs	r3, #7
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4839      	ldr	r0, [pc, #228]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 800284e:	f004 f98f 	bl	8006b70 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002852:	e067      	b.n	8002924 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a37      	ldr	r2, [pc, #220]	@ (8002938 <HAL_UART_MspInit+0x160>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d162      	bne.n	8002924 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	4a32      	ldr	r2, [pc, #200]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002868:	f043 0320 	orr.w	r3, r3, #32
 800286c:	6453      	str	r3, [r2, #68]	@ 0x44
 800286e:	4b30      	ldr	r3, [pc, #192]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b2c      	ldr	r3, [pc, #176]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a2b      	ldr	r2, [pc, #172]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b29      	ldr	r3, [pc, #164]	@ (8002930 <HAL_UART_MspInit+0x158>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002896:	23c0      	movs	r3, #192	@ 0xc0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028a6:	2308      	movs	r3, #8
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4822      	ldr	r0, [pc, #136]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028b2:	f004 f95d 	bl	8006b70 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028b8:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_UART_MspInit+0x16c>)
 80028ba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028be:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80028c2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028da:	2200      	movs	r2, #0
 80028dc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028de:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80028e4:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028fa:	f003 fd2b 	bl	8006354 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002904:	f7ff f84f 	bl	80019a6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <HAL_UART_MspInit+0x168>)
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800290e:	4a0c      	ldr	r2, [pc, #48]	@ (8002940 <HAL_UART_MspInit+0x168>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2100      	movs	r1, #0
 8002918:	2047      	movs	r0, #71	@ 0x47
 800291a:	f003 fce4 	bl	80062e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800291e:	2047      	movs	r0, #71	@ 0x47
 8002920:	f003 fcfd 	bl	800631e <HAL_NVIC_EnableIRQ>
}
 8002924:	bf00      	nop
 8002926:	3730      	adds	r7, #48	@ 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40004400 	.word	0x40004400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000
 8002938:	40011400 	.word	0x40011400
 800293c:	40020800 	.word	0x40020800
 8002940:	20000a54 	.word	0x20000a54
 8002944:	40026428 	.word	0x40026428

08002948 <get_virtual_timer_32bit>:
#include <math.h>

float SAMPLING_PERIOD;
uint32_t HCLK;

static uint32_t get_virtual_timer_32bit(void){
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
    uint16_t high, low;

    high = __HAL_TIM_GET_COUNTER(&htim8);
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <get_virtual_timer_32bit+0x2c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	80fb      	strh	r3, [r7, #6]
    low  = __HAL_TIM_GET_COUNTER(&htim1);
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <get_virtual_timer_32bit+0x30>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	80bb      	strh	r3, [r7, #4]

    return ((uint32_t)high << 16) | low;
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	88bb      	ldrh	r3, [r7, #4]
 8002964:	4313      	orrs	r3, r2
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000934 	.word	0x20000934
 8002978:	2000073c 	.word	0x2000073c

0800297c <build_vandermonde_desc>:
// aggiunto per powf float SAMPLING_PERIOD;
// seconds uint32_t HCLK;
// Vandermonde matrix in descending order of powers

static void build_vandermonde_desc(float32_t *t, float32_t *A)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < N_SAMPLES; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e02a      	b.n	80029e2 <build_vandermonde_desc+0x66>
	{
		for (int j = POLY_ORDER; j >= 0; j--)
 800298c:	2302      	movs	r3, #2
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	e021      	b.n	80029d6 <build_vandermonde_desc+0x5a>
		{
			A[i * (POLY_ORDER + 1) + (POLY_ORDER - j)] = powf(t[i], j);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	ee07 3a10 	vmov	s14, r3
 80029a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	441a      	add	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	3302      	adds	r3, #2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	18d4      	adds	r4, r2, r3
 80029bc:	eef0 0a47 	vmov.f32	s1, s14
 80029c0:	eeb0 0a67 	vmov.f32	s0, s15
 80029c4:	f00d ff70 	bl	80108a8 <powf>
 80029c8:	eef0 7a40 	vmov.f32	s15, s0
 80029cc:	edc4 7a00 	vstr	s15, [r4]
		for (int j = POLY_ORDER; j >= 0; j--)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	dada      	bge.n	8002992 <build_vandermonde_desc+0x16>
	for (uint32_t i = 0; i < N_SAMPLES; i++)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d9d1      	bls.n	800298c <build_vandermonde_desc+0x10>
		}
	}
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
	...

080029f4 <compute_polynomial>:
static void compute_polynomial(encoder_t *encoder)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0ea      	sub	sp, #424	@ 0x1a8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80029fe:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a02:	6018      	str	r0, [r3, #0]
	float32_t ATA_inv_d[N_COEFF * N_COEFF];
	float32_t ATA_inv_AT_d[N_COEFF * N_SAMPLES];
	float32_t B_d[N_SAMPLES];
	float32_t P_d[N_COEFF]; // usa l'elemento più vecchio nel buffer come riferimento 

	uint8_t start_idx = encoder->vec_index; // 
 8002a04:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a08:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002a12:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
	encoder->t_ref = encoder->timestamps[start_idx]; // Reference time for normalization 
 8002a16:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8002a1a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a1e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3206      	adds	r2, #6
 8002a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a30:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	659a      	str	r2, [r3, #88]	@ 0x58

	// riempi T e B per TUTTI i N_SAMPLES campioni (coerente con A: N_SAMPLES x N_COEFF) 
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8002a3e:	e04c      	b.n	8002ada <compute_polynomial+0xe6>
		uint8_t idx = (start_idx + i) % N_SAMPLES; 
 8002a40:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8002a44:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002a48:	441a      	add	r2, r3
 8002a4a:	4b85      	ldr	r3, [pc, #532]	@ (8002c60 <compute_polynomial+0x26c>)
 8002a4c:	fb83 3102 	smull	r3, r1, r3, r2
 8002a50:	17d3      	asrs	r3, r2, #31
 8002a52:	1ac9      	subs	r1, r1, r3
 8002a54:	460b      	mov	r3, r1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	440b      	add	r3, r1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	1ad1      	subs	r1, r2, r3
 8002a5e:	460b      	mov	r3, r1
 8002a60:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
		t_normalized[i] = (encoder->timestamps[idx] - encoder->t_ref)/1000000.0f; // s
 8002a64:	f897 21a2 	ldrb.w	r2, [r7, #418]	@ 0x1a2
 8002a68:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a6c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3206      	adds	r2, #6
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8002a7c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a8e:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002a92:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002c64 <compute_polynomial+0x270>
 8002a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002aa0:	443b      	add	r3, r7
 8002aa2:	3b20      	subs	r3, #32
 8002aa4:	edc3 7a00 	vstr	s15, [r3]
		B_d[i] = encoder->positions[idx]; 
 8002aa8:	f897 21a2 	ldrb.w	r2, [r7, #418]	@ 0x1a2
 8002aac:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002ab0:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002ab4:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 8002ab8:	6809      	ldr	r1, [r1, #0]
 8002aba:	320c      	adds	r2, #12
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	440a      	add	r2, r1
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002ac6:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002ad0:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8002ada:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d9ae      	bls.n	8002a40 <compute_polynomial+0x4c>
	} 
	arm_matrix_instance_f32 A, AT, ATA, ATA_inv, ATA_inv_AT, P, B; 
	build_vandermonde_desc(t_normalized, A_d); 
 8002ae2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ae6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff45 	bl	800297c <build_vandermonde_desc>
	arm_mat_init_f32(&A, N_SAMPLES, N_COEFF, A_d); 
 8002af2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002af6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002afa:	2203      	movs	r2, #3
 8002afc:	2106      	movs	r1, #6
 8002afe:	f002 fbd4 	bl	80052aa <arm_mat_init_f32>
	arm_mat_init_f32(&ATA, N_COEFF, N_COEFF, ATA_d); 
 8002b02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b06:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	f002 fbcc 	bl	80052aa <arm_mat_init_f32>
	arm_mat_init_f32(&ATA_inv, N_COEFF, N_COEFF, ATA_inv_d); 
 8002b12:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002b16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	f002 fbc4 	bl	80052aa <arm_mat_init_f32>
	arm_mat_init_f32(&ATA_inv_AT, N_COEFF, N_SAMPLES, ATA_inv_AT_d); 
 8002b22:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b26:	f107 001c 	add.w	r0, r7, #28
 8002b2a:	2206      	movs	r2, #6
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	f002 fbbc 	bl	80052aa <arm_mat_init_f32>
	arm_mat_init_f32(&P, N_COEFF, 1, P_d); 
 8002b32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b36:	f107 0014 	add.w	r0, r7, #20
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	f002 fbb4 	bl	80052aa <arm_mat_init_f32>
	arm_mat_init_f32(&AT, N_COEFF, N_SAMPLES, AT_d); 
 8002b42:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002b46:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002b4a:	2206      	movs	r2, #6
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	f002 fbac 	bl	80052aa <arm_mat_init_f32>
	arm_mat_init_f32(&B, N_SAMPLES, 1, B_d); 
 8002b52:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b56:	f107 000c 	add.w	r0, r7, #12
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2106      	movs	r1, #6
 8002b5e:	f002 fba4 	bl	80052aa <arm_mat_init_f32>
	arm_mat_trans_f32(&A, &AT); // AT = A^T 
 8002b62:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002b66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 fdf7 	bl	8005760 <arm_mat_trans_f32>
	arm_mat_mult_f32(&AT, &A, &ATA); // ATA = AT * A 
 8002b72:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002b76:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002b7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fd74 	bl	800566c <arm_mat_mult_f32>
	arm_status status = arm_mat_inverse_f32(&ATA, &ATA_inv); 
 8002b84:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fba3 	bl	80052da <arm_mat_inverse_f32>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
	if(status == ARM_MATH_SUCCESS){ 
 8002b9a:	f997 31a3 	ldrsb.w	r3, [r7, #419]	@ 0x1a3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d134      	bne.n	8002c0c <compute_polynomial+0x218>
		arm_mat_mult_f32(&ATA_inv, &AT, &ATA_inv_AT); // ATA_inv_AT = ATA^-1 * AT 
 8002ba2:	f107 021c 	add.w	r2, r7, #28
 8002ba6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fd5c 	bl	800566c <arm_mat_mult_f32>
		arm_mat_mult_f32(&ATA_inv_AT, &B, &P); // P = ATA_inv_AT * B 
 8002bb4:	f107 0214 	add.w	r2, r7, #20
 8002bb8:	f107 010c 	add.w	r1, r7, #12
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fd53 	bl	800566c <arm_mat_mult_f32>
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8002bcc:	e019      	b.n	8002c02 <compute_polynomial+0x20e>
			encoder->polynomial[i] = P_d[i]; 
 8002bce:	f897 21a6 	ldrb.w	r2, [r7, #422]	@ 0x1a6
 8002bd2:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8002bd6:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002bda:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	440a      	add	r2, r1
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002be8:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 8002bec:	6809      	ldr	r1, [r1, #0]
 8002bee:	3312      	adds	r3, #18
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002bf8:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8002c02:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d9e1      	bls.n	8002bce <compute_polynomial+0x1da>
		for(uint8_t i=0;i<N_COEFF;i++){ 
			encoder->polynomial[i] = 0.0f; // Reset to zero on error 
		} 
		encoder->t_ref = get_virtual_timer_32bit(); // Reset reference time on error
	} 
} 
 8002c0a:	e024      	b.n	8002c56 <compute_polynomial+0x262>
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8002c12:	e012      	b.n	8002c3a <compute_polynomial+0x246>
			encoder->polynomial[i] = 0.0f; // Reset to zero on error 
 8002c14:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8002c18:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8002c1c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	3312      	adds	r3, #18
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002c30:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8002c34:	3301      	adds	r3, #1
 8002c36:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8002c3a:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d9e8      	bls.n	8002c14 <compute_polynomial+0x220>
		encoder->t_ref = get_virtual_timer_32bit(); // Reset reference time on error
 8002c42:	f7ff fe81 	bl	8002948 <get_virtual_timer_32bit>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002c4e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	659a      	str	r2, [r3, #88]	@ 0x58
} 
 8002c56:	bf00      	nop
 8002c58:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2aaaaaab 	.word	0x2aaaaaab
 8002c64:	49742400 	.word	0x49742400

08002c68 <compute_displacement>:

static void compute_displacement(encoder_t *encoder){ 
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	ed2d 8b02 	vpush	{d8}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
//	encoder->old_displacement = encoder->displacement; // Save old displacement for speed calculation
	encoder->displacement = 0.0f; 
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
	float current_time = (get_virtual_timer_32bit() - encoder->t_ref)/1000000.0f; // Time since reference
 8002c7c:	f7ff fe64 	bl	8002948 <get_virtual_timer_32bit>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c90:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002d00 <compute_displacement+0x98>
 8002c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c98:	edc7 7a02 	vstr	s15, [r7, #8]
	for(int i = 0; i < N_COEFF; i++){ 
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e023      	b.n	8002cea <compute_displacement+0x82>
		encoder->displacement += encoder->polynomial[i] * powf(current_time, POLY_ORDER - i); 
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3312      	adds	r3, #18
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	3304      	adds	r3, #4
 8002cae:	ed93 8a00 	vldr	s16, [r3]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1c3 0302 	rsb	r3, r3, #2
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc0:	eef0 0a67 	vmov.f32	s1, s15
 8002cc4:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cc8:	f00d fdee 	bl	80108a8 <powf>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	edc3 7a01 	vstr	s15, [r3, #4]
	for(int i = 0; i < N_COEFF; i++){ 
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	ddd8      	ble.n	8002ca2 <compute_displacement+0x3a>
	} 
} 
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	ecbd 8b02 	vpop	{d8}
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	49742400 	.word	0x49742400
 8002d04:	00000000 	.word	0x00000000

08002d08 <compute_speed>:

static void compute_speed(encoder_t *encoder){ 
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	encoder->speed = (encoder->position*RCF - encoder->old_displacement) / SAMPLING_PERIOD; // Speed in radians per second
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc47 	bl	80005a8 <__aeabi_f2d>
 8002d1a:	a321      	add	r3, pc, #132	@ (adr r3, 8002da0 <compute_speed+0x98>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f7fd fc9a 	bl	8000658 <__aeabi_dmul>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc39 	bl	80005a8 <__aeabi_f2d>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd fad3 	bl	80002e8 <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
 8002d4a:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <compute_speed+0xa0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fc2a 	bl	80005a8 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	f7fd fda6 	bl	80008ac <__aeabi_ddiv>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff6e 	bl	8000c48 <__aeabi_d2f>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]
	encoder->old_displacement = encoder->position * RCF;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fc16 	bl	80005a8 <__aeabi_f2d>
 8002d7c:	a308      	add	r3, pc, #32	@ (adr r3, 8002da0 <compute_speed+0x98>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc69 	bl	8000658 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd ff5b 	bl	8000c48 <__aeabi_d2f>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	@ 0x5c
//	 for(uint8_t i = 0; i < POLY_ORDER; i++){
//	 	encoder->speed += (POLY_ORDER - i) *encoder->polynomial[i] * powf(current_time, POLY_ORDER - i - 1);
//	 }
//	 // Low-pass filter
//	 encoder->speed = 0.05f * encoder->speed + 0.95f * old_speed;
} 
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002da0:	7bb1a72c 	.word	0x7bb1a72c
 8002da4:	3f4921fa 	.word	0x3f4921fa
 8002da8:	20000ab4 	.word	0x20000ab4

08002dac <Encoder_init>:

void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){ 
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	70fb      	strb	r3, [r7, #3]
	 - encoder: Pointer to the encoder structure 
	 - em_tim: Pointer to the encoder mode timer handle 
	 - s_tim: Pointer to the sampling timer handle 
	 - direction_invert: Direction inversion flag 
	*/ 
	encoder->tim = em_tim->Instance; 
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	60da      	str	r2, [r3, #12]
	encoder->tim->CCR3 = 1; 
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	encoder->direction_invert = (direction_invert == 0) ? 1 : (direction_invert > 0 ? 1 : -1); 
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <Encoder_init+0x38>
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	dd01      	ble.n	8002dde <Encoder_init+0x32>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e003      	b.n	8002de6 <Encoder_init+0x3a>
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de2:	e000      	b.n	8002de6 <Encoder_init+0x3a>
 8002de4:	2301      	movs	r3, #1
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	7413      	strb	r3, [r2, #16]
	encoder->speed = 0; 
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
	uint32_t current_time = get_virtual_timer_32bit();
 8002df2:	f7ff fda9 	bl	8002948 <get_virtual_timer_32bit>
 8002df6:	6138      	str	r0, [r7, #16]
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]
 8002dfc:	e012      	b.n	8002e24 <Encoder_init+0x78>
		encoder->timestamps[i] = current_time + i; 
 8002dfe:	7df9      	ldrb	r1, [r7, #23]
 8002e00:	7dfa      	ldrb	r2, [r7, #23]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4419      	add	r1, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3206      	adds	r2, #6
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		encoder->positions[i] = 0; 
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	330c      	adds	r3, #12
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	3301      	adds	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d9e9      	bls.n	8002dfe <Encoder_init+0x52>
	} 
	for (uint8_t i = 0; i < N_COEFF; i++) { 
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75bb      	strb	r3, [r7, #22]
 8002e2e:	e00b      	b.n	8002e48 <Encoder_init+0x9c>
		encoder->polynomial[i] = 0.0f; 
 8002e30:	7dbb      	ldrb	r3, [r7, #22]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	3312      	adds	r3, #18
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < N_COEFF; i++) { 
 8002e42:	7dbb      	ldrb	r3, [r7, #22]
 8002e44:	3301      	adds	r3, #1
 8002e46:	75bb      	strb	r3, [r7, #22]
 8002e48:	7dbb      	ldrb	r3, [r7, #22]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d9f0      	bls.n	8002e30 <Encoder_init+0x84>
	} 
	encoder->position = 0; 
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
	encoder->vec_index = 0; 
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	encoder->old_displacement=0.0f; 
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c
	HCLK = HAL_RCC_GetHCLKFreq(); 
 8002e66:	f005 fc3f 	bl	80086e8 <HAL_RCC_GetHCLKFreq>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a11      	ldr	r2, [pc, #68]	@ (8002eb4 <Encoder_init+0x108>)
 8002e6e:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD =(float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK; 
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	3301      	adds	r3, #1
 8002e78:	ee07 3a90 	vmov	s15, r3
 8002e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	3301      	adds	r3, #1
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e94:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <Encoder_init+0x108>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <Encoder_init+0x10c>)
 8002ea6:	edc3 7a00 	vstr	s15, [r3]
} 
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000ab8 	.word	0x20000ab8
 8002eb8:	20000ab4 	.word	0x20000ab4

08002ebc <Encoder_read>:

void Encoder_read(encoder_t *encoder){ 
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	compute_polynomial(encoder); 
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fd95 	bl	80029f4 <compute_polynomial>
	compute_displacement(encoder); 
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fecc 	bl	8002c68 <compute_displacement>
	compute_speed(encoder); 
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff19 	bl	8002d08 <compute_speed>
} 
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <Encoder_event>:

void Encoder_event(encoder_t *encoder){ 
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos; 
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	701a      	strb	r2, [r3, #0]
	encoder->position += (encoder->direction ? -1 : 1) * encoder->direction_invert; 
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <Encoder_event+0x30>
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f0e:	e000      	b.n	8002f12 <Encoder_event+0x32>
 8002f10:	2301      	movs	r3, #1
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	edc3 7a05 	vstr	s15, [r3, #20]
	uint32_t current_time = get_virtual_timer_32bit(); // Store current time
 8002f2e:	f7ff fd0b 	bl	8002948 <get_virtual_timer_32bit>
 8002f32:	60f8      	str	r0, [r7, #12]
	// calcolo robusto dell'indice precedente nel buffer circolare 
	uint8_t prev = (encoder->vec_index + N_SAMPLES - 1) % N_SAMPLES; 
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002f3a:	1d5a      	adds	r2, r3, #5
 8002f3c:	4b36      	ldr	r3, [pc, #216]	@ (8003018 <Encoder_event+0x138>)
 8002f3e:	fb83 3102 	smull	r3, r1, r3, r2
 8002f42:	17d3      	asrs	r3, r2, #31
 8002f44:	1ac9      	subs	r1, r1, r3
 8002f46:	460b      	mov	r3, r1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	440b      	add	r3, r1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	1ad1      	subs	r1, r2, r3
 8002f50:	460b      	mov	r3, r1
 8002f52:	72fb      	strb	r3, [r7, #11]
	if(encoder->timestamps[prev] == current_time){ 
 8002f54:	7afa      	ldrb	r2, [r7, #11]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3206      	adds	r2, #6
 8002f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d118      	bne.n	8002f96 <Encoder_event+0xb6>
		encoder->positions[prev] = encoder->position * RCF; // Convert to radians 
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fb1d 	bl	80005a8 <__aeabi_f2d>
 8002f6e:	a328      	add	r3, pc, #160	@ (adr r3, 8003010 <Encoder_event+0x130>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f7fd fb70 	bl	8000658 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	7afc      	ldrb	r4, [r7, #11]
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fe61 	bl	8000c48 <__aeabi_d2f>
 8002f86:	4601      	mov	r1, r0
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	f104 030c 	add.w	r3, r4, #12
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	6019      	str	r1, [r3, #0]
	} else { 
		encoder->timestamps[encoder->vec_index] = current_time; 
		encoder->positions[encoder->vec_index] = encoder->position * RCF; // Convert to radians 
		encoder->vec_index = (encoder->vec_index + 1) % N_SAMPLES; 
	} 
}
 8002f94:	e035      	b.n	8003002 <Encoder_event+0x122>
		encoder->timestamps[encoder->vec_index] = current_time; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3206      	adds	r2, #6
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		encoder->positions[encoder->vec_index] = encoder->position * RCF; // Convert to radians 
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fafb 	bl	80005a8 <__aeabi_f2d>
 8002fb2:	a317      	add	r3, pc, #92	@ (adr r3, 8003010 <Encoder_event+0x130>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f7fd fb4e 	bl	8000658 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002fca:	461c      	mov	r4, r3
 8002fcc:	f7fd fe3c 	bl	8000c48 <__aeabi_d2f>
 8002fd0:	4601      	mov	r1, r0
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	f104 030c 	add.w	r3, r4, #12
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	6019      	str	r1, [r3, #0]
		encoder->vec_index = (encoder->vec_index + 1) % N_SAMPLES; 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <Encoder_event+0x138>)
 8002fe8:	fb83 3102 	smull	r3, r1, r3, r2
 8002fec:	17d3      	asrs	r3, r2, #31
 8002fee:	1ac9      	subs	r1, r1, r3
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	440b      	add	r3, r1
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	1ad1      	subs	r1, r2, r3
 8002ffa:	b2ca      	uxtb	r2, r1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	f3af 8000 	nop.w
 8003010:	7bb1a72c 	.word	0x7bb1a72c
 8003014:	3f4921fa 	.word	0x3f4921fa
 8003018:	2aaaaaab 	.word	0x2aaaaaab

0800301c <IMU_Init>:
		imu->az_bias = imu->az_bias - 16384.0f; // Adjust az bias to remove the offset
		imu->az= (imu->az - imu->az_bias) / 16384.0f * 9.81f; // Remove the bias from the az value
	}
}

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d101      	bne.n	800303c <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 8003038:	2300      	movs	r3, #0
 800303a:	e066      	b.n	800310a <IMU_Init+0xee>
	}

	imu->hi2c = hi2c;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	601a      	str	r2, [r3, #0]
	imu->address = address;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	61da      	str	r2, [r3, #28]
	imu->vx = 0.0f;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	621a      	str	r2, [r3, #32]

	imu->wx = 0.0f;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wy = 0.0f;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->wz = 0.0f;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu->alpha_y = 0.0f; // Initialize alpha_y to 0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30

	imu->angle = 0.0f;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->last_computation_time = 0;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->az_bias = 0.0f; // Initialize az bias to 0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	63da      	str	r2, [r3, #60]	@ 0x3c
	imu->calibration_mode = 1; // Calibration mode enabled by default
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 80030a6:	88f9      	ldrh	r1, [r7, #6]
 80030a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	2301      	movs	r3, #1
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	f107 0317 	add.w	r3, r7, #23
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	2275      	movs	r2, #117	@ 0x75
 80030bc:	68b8      	ldr	r0, [r7, #8]
 80030be:	f004 f973 	bl	80073a8 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b68      	cmp	r3, #104	@ 0x68
 80030c6:	d11f      	bne.n	8003108 <IMU_Init+0xec>
		uint8_t data = 0x00;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80030cc:	88f9      	ldrh	r1, [r7, #6]
 80030ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	2301      	movs	r3, #1
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	f107 0316 	add.w	r3, r7, #22
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	226b      	movs	r2, #107	@ 0x6b
 80030e2:	68b8      	ldr	r0, [r7, #8]
 80030e4:	f004 f866 	bl	80071b4 <HAL_I2C_Mem_Write>

		data = 0x00;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80030ec:	88f9      	ldrh	r1, [r7, #6]
 80030ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	2301      	movs	r3, #1
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	f107 0316 	add.w	r3, r7, #22
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2301      	movs	r3, #1
 8003100:	221a      	movs	r2, #26
 8003102:	68b8      	ldr	r0, [r7, #8]
 8003104:	f004 f856 	bl	80071b4 <HAL_I2C_Mem_Write>
	}
	return 1;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af02      	add	r7, sp, #8
 8003118:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8899      	ldrh	r1, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3306      	adds	r3, #6
 8003126:	220e      	movs	r2, #14
 8003128:	9201      	str	r2, [sp, #4]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2301      	movs	r3, #1
 800312e:	223b      	movs	r2, #59	@ 0x3b
 8003130:	f004 fb6c 	bl	800780c <HAL_I2C_Mem_Read_DMA>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	0000      	movs	r0, r0
	...

08003140 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - imu->last_computation_time; // Calculate time since last angle update
 8003148:	f002 fbb2 	bl	80058b0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	60fb      	str	r3, [r7, #12]

	imu->ax = (1-IMU_EMA_ALPHA) * imu->ax + IMU_EMA_ALPHA * (((int16_t)(imu->pData[0] << 8) | imu->pData[1]) - 280.591f) / 16384.0f * 9.81f;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	edd3 7a05 	vldr	s15, [r3, #20]
 800315c:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8003498 <IMU_Compute_Data+0x358>
 8003160:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	799b      	ldrb	r3, [r3, #6]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	b21b      	sxth	r3, r3
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b21b      	sxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	79db      	ldrb	r3, [r3, #7]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4313      	orrs	r3, r2
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003182:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 800349c <IMU_Compute_Data+0x35c>
 8003186:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800318a:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80034a0 <IMU_Compute_Data+0x360>
 800318e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003192:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 80034a4 <IMU_Compute_Data+0x364>
 8003196:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800319a:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 80034a8 <IMU_Compute_Data+0x368>
 800319e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->ay = (1-IMU_EMA_ALPHA) * imu->ay + IMU_EMA_ALPHA * ((int16_t)(imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80031b2:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8003498 <IMU_Compute_Data+0x358>
 80031b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7a1b      	ldrb	r3, [r3, #8]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7a5b      	ldrb	r3, [r3, #9]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d8:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 80034a0 <IMU_Compute_Data+0x360>
 80031dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031e0:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 80034a4 <IMU_Compute_Data+0x364>
 80031e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031e8:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 80034a8 <IMU_Compute_Data+0x368>
 80031ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - 1117.735f) / 16384.0f * 9.81f;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8003200:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8003498 <IMU_Compute_Data+0x358>
 8003204:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7a9b      	ldrb	r3, [r3, #10]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	b21b      	sxth	r3, r3
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b21b      	sxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7adb      	ldrb	r3, [r3, #11]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003226:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80034ac <IMU_Compute_Data+0x36c>
 800322a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800322e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80034a0 <IMU_Compute_Data+0x360>
 8003232:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003236:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 80034a4 <IMU_Compute_Data+0x364>
 800323a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800323e:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 80034a8 <IMU_Compute_Data+0x368>
 8003242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edc3 7a07 	vstr	s15, [r3, #28]
//		IMU_Calibrate(imu); // Call calibration function if in calibration mode
//	} else {
//		// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
//		imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - imu->az_bias)/ 16384.0f * 9.81f;
//	}
	float old_wy = imu->wy;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	60bb      	str	r3, [r7, #8]
	imu->wx = (1-IMU_EMA_ALPHA) * imu->wx + IMU_EMA_ALPHA * ((int16_t)(imu->pData[8] << 8) | imu->pData[9]) / 131.0f;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800325c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8003498 <IMU_Compute_Data+0x358>
 8003260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7b9b      	ldrb	r3, [r3, #14]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	b21b      	sxth	r3, r3
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	b21b      	sxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7bdb      	ldrb	r3, [r3, #15]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4313      	orrs	r3, r2
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003282:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80034a0 <IMU_Compute_Data+0x360>
 8003286:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800328a:	ed9f 6a89 	vldr	s12, [pc, #548]	@ 80034b0 <IMU_Compute_Data+0x370>
 800328e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->wy = (1-IMU_EMA_ALPHA) * imu->wy + IMU_EMA_ALPHA * (((int16_t)(imu->pData[10] << 8) | imu->pData[11]) - 393.589f) / 131.0f;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80032a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8003498 <IMU_Compute_Data+0x358>
 80032a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c1b      	ldrb	r3, [r3, #16]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7c5b      	ldrb	r3, [r3, #17]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c8:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80034b4 <IMU_Compute_Data+0x374>
 80032cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032d0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80034a0 <IMU_Compute_Data+0x360>
 80032d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032d8:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 80034b0 <IMU_Compute_Data+0x370>
 80032dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->wz = (1-IMU_EMA_ALPHA) * imu->wz + IMU_EMA_ALPHA * ((int16_t)(imu->pData[12] << 8) | imu->pData[13]) / 131.0f;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80032f0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8003498 <IMU_Compute_Data+0x358>
 80032f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7c9b      	ldrb	r3, [r3, #18]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	b21b      	sxth	r3, r3
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	b21b      	sxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7cdb      	ldrb	r3, [r3, #19]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003316:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80034a0 <IMU_Compute_Data+0x360>
 800331a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800331e:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 80034b0 <IMU_Compute_Data+0x370>
 8003322:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->last_computation_time = HAL_GetTick(); // Update last computation time
 8003330:	f002 fabe 	bl	80058b0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->vx = imu->vx + imu->ax * (float)delta_time / 1000.0f; // Update velocity based on accelerometer data
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	edd3 6a05 	vldr	s13, [r3, #20]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003354:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 80034b8 <IMU_Compute_Data+0x378>
 8003358:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->alpha_y = (imu->wy - old_wy) / ((float)delta_time / 1000.0f); // Calculate angular acceleration around y-axis
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800336c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003370:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80034b8 <IMU_Compute_Data+0x378>
 8003382:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if(imu->calibration_mode) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02a      	beq.n	80033f0 <IMU_Compute_Data+0x2b0>
		imu->angle = -atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Use accelerometer data to compute angle in calibration mode
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	edd3 7a05 	vldr	s15, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	ed93 7a07 	vldr	s14, [r3, #28]
 80033a6:	eef0 0a47 	vmov.f32	s1, s14
 80033aa:	eeb0 0a67 	vmov.f32	s0, s15
 80033ae:	f00d fa79 	bl	80108a4 <atan2f>
 80033b2:	eef0 7a40 	vmov.f32	s15, s0
 80033b6:	eef1 7a67 	vneg.f32	s15, s15
 80033ba:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80034bc <IMU_Compute_Data+0x37c>
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	ee17 0a90 	vmov	r0, s15
 80033c6:	f7fd f8ef 	bl	80005a8 <__aeabi_f2d>
 80033ca:	a331      	add	r3, pc, #196	@ (adr r3, 8003490 <IMU_Compute_Data+0x350>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd fa6c 	bl	80008ac <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fd fc34 	bl	8000c48 <__aeabi_d2f>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	635a      	str	r2, [r3, #52]	@ 0x34
		imu->calibration_mode = 0; // Reset calibration mode after computing angle
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}else {
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
	}
}
 80033ee:	e04a      	b.n	8003486 <IMU_Compute_Data+0x346>
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800340a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 80034b8 <IMU_Compute_Data+0x378>
 800340e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003416:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80034c0 <IMU_Compute_Data+0x380>
 800341a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341e:	ee17 0a90 	vmov	r0, s15
 8003422:	f7fd f8c1 	bl	80005a8 <__aeabi_f2d>
 8003426:	4604      	mov	r4, r0
 8003428:	460d      	mov	r5, r1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	ed93 7a07 	vldr	s14, [r3, #28]
 8003436:	eef0 0a47 	vmov.f32	s1, s14
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	f00d fa31 	bl	80108a4 <atan2f>
 8003442:	eef0 7a40 	vmov.f32	s15, s0
 8003446:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80034c4 <IMU_Compute_Data+0x384>
 800344a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80034bc <IMU_Compute_Data+0x37c>
 8003452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003456:	ee17 0a90 	vmov	r0, s15
 800345a:	f7fd f8a5 	bl	80005a8 <__aeabi_f2d>
 800345e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003490 <IMU_Compute_Data+0x350>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd fa22 	bl	80008ac <__aeabi_ddiv>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f7fc ff3a 	bl	80002e8 <__aeabi_dsub>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fbe4 	bl	8000c48 <__aeabi_d2f>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bdb0      	pop	{r4, r5, r7, pc}
 800348e:	bf00      	nop
 8003490:	54442d18 	.word	0x54442d18
 8003494:	400921fb 	.word	0x400921fb
 8003498:	3f589d8a 	.word	0x3f589d8a
 800349c:	438c4ba6 	.word	0x438c4ba6
 80034a0:	3e1d89d9 	.word	0x3e1d89d9
 80034a4:	46800000 	.word	0x46800000
 80034a8:	411cf5c3 	.word	0x411cf5c3
 80034ac:	448bb785 	.word	0x448bb785
 80034b0:	43030000 	.word	0x43030000
 80034b4:	43c4cb64 	.word	0x43c4cb64
 80034b8:	447a0000 	.word	0x447a0000
 80034bc:	43340000 	.word	0x43340000
 80034c0:	3f7ef9db 	.word	0x3f7ef9db
 80034c4:	3b83126f 	.word	0x3b83126f

080034c8 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a34      	ldr	r2, [pc, #208]	@ (80035a8 <PowerModule_init+0xe0>)
 80034d6:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a34      	ldr	r2, [pc, #208]	@ (80035ac <PowerModule_init+0xe4>)
 80034dc:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	3364      	adds	r3, #100	@ 0x64
 80034f0:	4611      	mov	r1, r2
 80034f2:	2248      	movs	r2, #72	@ 0x48
 80034f4:	4618      	mov	r0, r3
 80034f6:	f009 fe78 	bl	800d1ea <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3364      	adds	r3, #100	@ 0x64
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 fa4a 	bl	8005998 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3364      	adds	r3, #100	@ 0x64
 8003508:	210a      	movs	r1, #10
 800350a:	4618      	mov	r0, r3
 800350c:	f002 fb49 	bl	8005ba2 <HAL_ADC_PollForConversion>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11f      	bne.n	8003556 <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3364      	adds	r3, #100	@ 0x64
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fbcc 	bl	8005cb8 <HAL_ADC_GetValue>
 8003520:	4603      	mov	r3, r0
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd f81e 	bl	8000564 <__aeabi_ui2d>
 8003528:	a31b      	add	r3, pc, #108	@ (adr r3, 8003598 <PowerModule_init+0xd0>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f9bd 	bl	80008ac <__aeabi_ddiv>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	a319      	add	r3, pc, #100	@ (adr r3, 80035a0 <PowerModule_init+0xd8>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fc fed2 	bl	80002e8 <__aeabi_dsub>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f7fd fb7c 	bl	8000c48 <__aeabi_d2f>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3364      	adds	r3, #100	@ 0x64
 800355a:	4618      	mov	r0, r3
 800355c:	f002 faee 	bl	8005b3c <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e00a      	b.n	800357c <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3304      	adds	r3, #4
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3301      	adds	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b13      	cmp	r3, #19
 8003580:	ddf1      	ble.n	8003566 <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	e147ae14 	.word	0xe147ae14
 800359c:	405c847a 	.word	0x405c847a
 80035a0:	c540196f 	.word	0xc540196f
 80035a4:	3fb12c42 	.word	0x3fb12c42
 80035a8:	41b00000 	.word	0x41b00000
 80035ac:	41a00000 	.word	0x41a00000

080035b0 <I2C1_BusRecovery>:
#define WHEEL_AXIS_MIDPOINT 132.5 // mm

// quando HAL_I2C_Master_Receive_DMA() fallisce per colpa del bus bloccato (es. I2C_FLAG_BUSY sempre attivo),
// l’unico rimedio affidabile è resettare completamente il periferico I²C
static void I2C1_BusRecovery(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b6:	463b      	mov	r3, r7
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <I2C1_BusRecovery+0x100>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b39      	ldr	r3, [pc, #228]	@ (80036b0 <I2C1_BusRecovery+0x100>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 80035d4:	4b37      	ldr	r3, [pc, #220]	@ (80036b4 <I2C1_BusRecovery+0x104>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a36      	ldr	r2, [pc, #216]	@ (80036b4 <I2C1_BusRecovery+0x104>)
 80035da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035de:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 80035e0:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <I2C1_BusRecovery+0x104>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4a33      	ldr	r2, [pc, #204]	@ (80036b4 <I2C1_BusRecovery+0x104>)
 80035e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035ea:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035ec:	2311      	movs	r3, #17
 80035ee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035f0:	2301      	movs	r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f4:	2302      	movs	r3, #2
 80035f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_SCL_Pin | I2C_SDA_Pin;
 80035f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035fc:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	463b      	mov	r3, r7
 8003600:	4619      	mov	r1, r3
 8003602:	482d      	ldr	r0, [pc, #180]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 8003604:	f003 fab4 	bl	8006b70 <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e014      	b.n	8003638 <I2C1_BusRecovery+0x88>
    {
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003614:	4828      	ldr	r0, [pc, #160]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 8003616:	f003 fc57 	bl	8006ec8 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800361a:	2001      	movs	r0, #1
 800361c:	f002 f954 	bl	80058c8 <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8003620:	2201      	movs	r2, #1
 8003622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003626:	4824      	ldr	r0, [pc, #144]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 8003628:	f003 fc4e 	bl	8006ec8 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800362c:	2001      	movs	r0, #1
 800362e:	f002 f94b 	bl	80058c8 <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b08      	cmp	r3, #8
 800363c:	dc07      	bgt.n	800364e <I2C1_BusRecovery+0x9e>
 800363e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003642:	481d      	ldr	r0, [pc, #116]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 8003644:	f003 fc28 	bl	8006e98 <HAL_GPIO_ReadPin>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0df      	beq.n	800360e <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 800364e:	2200      	movs	r2, #0
 8003650:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003654:	4818      	ldr	r0, [pc, #96]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 8003656:	f003 fc37 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800365a:	2001      	movs	r0, #1
 800365c:	f002 f934 	bl	80058c8 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8003660:	2201      	movs	r2, #1
 8003662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003666:	4814      	ldr	r0, [pc, #80]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 8003668:	f003 fc2e 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800366c:	2001      	movs	r0, #1
 800366e:	f002 f92b 	bl	80058c8 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8003672:	2201      	movs	r2, #1
 8003674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003678:	480f      	ldr	r0, [pc, #60]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 800367a:	f003 fc25 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800367e:	2001      	movs	r0, #1
 8003680:	f002 f922 	bl	80058c8 <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003684:	2312      	movs	r3, #18
 8003686:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // pull-up interne già attive
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800368c:	2302      	movs	r3, #2
 800368e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_SCL_Pin | I2C_SDA_Pin;
 8003690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003694:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003696:	2304      	movs	r3, #4
 8003698:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	463b      	mov	r3, r7
 800369c:	4619      	mov	r1, r3
 800369e:	4806      	ldr	r0, [pc, #24]	@ (80036b8 <I2C1_BusRecovery+0x108>)
 80036a0:	f003 fa66 	bl	8006b70 <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 80036a4:	f7fd feb6 	bl	8001414 <MX_I2C1_Init>
}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	200005f8 	.word	0x200005f8
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020400 	.word	0x40020400

080036bc <Robot_init>:

void Robot_init(robot_t *robot)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]

    HAL_TIM_Base_Start_IT(&htim6);                     // Display timer (0.1MHz)
 80036c4:	483f      	ldr	r0, [pc, #252]	@ (80037c4 <Robot_init+0x108>)
 80036c6:	f006 f873 	bl	80097b0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);                     // Timeline
 80036ca:	483f      	ldr	r0, [pc, #252]	@ (80037c8 <Robot_init+0x10c>)
 80036cc:	f006 f870 	bl	80097b0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);                    // Stepper timer
 80036d0:	483e      	ldr	r0, [pc, #248]	@ (80037cc <Robot_init+0x110>)
 80036d2:	f006 f86d 	bl	80097b0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL); // Encoder right
 80036d6:	213c      	movs	r1, #60	@ 0x3c
 80036d8:	483d      	ldr	r0, [pc, #244]	@ (80037d0 <Robot_init+0x114>)
 80036da:	f006 fc07 	bl	8009eec <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 80036de:	2108      	movs	r1, #8
 80036e0:	483b      	ldr	r0, [pc, #236]	@ (80037d0 <Robot_init+0x114>)
 80036e2:	f006 f925 	bl	8009930 <HAL_TIM_OC_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL); // Encoder left
 80036e6:	213c      	movs	r1, #60	@ 0x3c
 80036e8:	483a      	ldr	r0, [pc, #232]	@ (80037d4 <Robot_init+0x118>)
 80036ea:	f006 fbff 	bl	8009eec <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 80036ee:	2108      	movs	r1, #8
 80036f0:	4838      	ldr	r0, [pc, #224]	@ (80037d4 <Robot_init+0x118>)
 80036f2:	f006 f91d 	bl	8009930 <HAL_TIM_OC_Start_IT>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Stepper left
 80036f6:	2104      	movs	r1, #4
 80036f8:	4837      	ldr	r0, [pc, #220]	@ (80037d8 <Robot_init+0x11c>)
 80036fa:	f006 fa7f 	bl	8009bfc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // Stepper right
 80036fe:	2100      	movs	r1, #0
 8003700:	4836      	ldr	r0, [pc, #216]	@ (80037dc <Robot_init+0x120>)
 8003702:	f006 fa7b 	bl	8009bfc <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start(&htim8); // Virtual timer overflow timer
 8003706:	4836      	ldr	r0, [pc, #216]	@ (80037e0 <Robot_init+0x124>)
 8003708:	f005 ffea 	bl	80096e0 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim1); // Microsecond timer
 800370c:	4835      	ldr	r0, [pc, #212]	@ (80037e4 <Robot_init+0x128>)
 800370e:	f005 ffe7 	bl	80096e0 <HAL_TIM_Base_Start>

    MAX72_init(&display);
 8003712:	4835      	ldr	r0, [pc, #212]	@ (80037e8 <Robot_init+0x12c>)
 8003714:	f000 fd00 	bl	8004118 <MAX72_init>

    while (!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR))
 8003718:	e005      	b.n	8003726 <Robot_init+0x6a>
    {
        MAX72_Print_String("I2C", NO_SETTINGS);
 800371a:	2100      	movs	r1, #0
 800371c:	4833      	ldr	r0, [pc, #204]	@ (80037ec <Robot_init+0x130>)
 800371e:	f000 ff4b 	bl	80045b8 <MAX72_Print_String>
        I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8003722:	f7ff ff45 	bl	80035b0 <I2C1_BusRecovery>
    while (!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR))
 8003726:	22d0      	movs	r2, #208	@ 0xd0
 8003728:	4931      	ldr	r1, [pc, #196]	@ (80037f0 <Robot_init+0x134>)
 800372a:	4832      	ldr	r0, [pc, #200]	@ (80037f4 <Robot_init+0x138>)
 800372c:	f7ff fc76 	bl	800301c <IMU_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f1      	beq.n	800371a <Robot_init+0x5e>
    }
    MAX72_Clear();
 8003736:	f000 fd91 	bl	800425c <MAX72_Clear>
    robot->imu = &imu;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <Robot_init+0x138>)
 800373e:	601a      	str	r2, [r3, #0]

    Encoder_init(&encoder_l, &htim3, &htim7, -1);
 8003740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003744:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <Robot_init+0x10c>)
 8003746:	4922      	ldr	r1, [pc, #136]	@ (80037d0 <Robot_init+0x114>)
 8003748:	482b      	ldr	r0, [pc, #172]	@ (80037f8 <Robot_init+0x13c>)
 800374a:	f7ff fb2f 	bl	8002dac <Encoder_init>
    robot->encoder_l = &encoder_l;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a29      	ldr	r2, [pc, #164]	@ (80037f8 <Robot_init+0x13c>)
 8003752:	605a      	str	r2, [r3, #4]
    Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 8003754:	2310      	movs	r3, #16
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <Robot_init+0x140>)
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <Robot_init+0x13c>)
 800375e:	2200      	movs	r2, #0
 8003760:	491e      	ldr	r1, [pc, #120]	@ (80037dc <Robot_init+0x120>)
 8003762:	4827      	ldr	r0, [pc, #156]	@ (8003800 <Robot_init+0x144>)
 8003764:	f000 fc64 	bl	8004030 <Stepper_init>
    robot->stepper_l = &stepper_l;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a25      	ldr	r2, [pc, #148]	@ (8003800 <Robot_init+0x144>)
 800376c:	60da      	str	r2, [r3, #12]
    Encoder_init(&encoder_r, &htim4, &htim7, 1);
 800376e:	2301      	movs	r3, #1
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <Robot_init+0x10c>)
 8003772:	4918      	ldr	r1, [pc, #96]	@ (80037d4 <Robot_init+0x118>)
 8003774:	4823      	ldr	r0, [pc, #140]	@ (8003804 <Robot_init+0x148>)
 8003776:	f7ff fb19 	bl	8002dac <Encoder_init>
    robot->encoder_r = &encoder_r;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a21      	ldr	r2, [pc, #132]	@ (8003804 <Robot_init+0x148>)
 800377e:	609a      	str	r2, [r3, #8]
    Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 8003780:	2301      	movs	r3, #1
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <Robot_init+0x14c>)
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <Robot_init+0x148>)
 800378a:	2204      	movs	r2, #4
 800378c:	4912      	ldr	r1, [pc, #72]	@ (80037d8 <Robot_init+0x11c>)
 800378e:	481f      	ldr	r0, [pc, #124]	@ (800380c <Robot_init+0x150>)
 8003790:	f000 fc4e 	bl	8004030 <Stepper_init>
    robot->stepper_r = &stepper_r;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <Robot_init+0x150>)
 8003798:	611a      	str	r2, [r3, #16]

    PowerModule_init(&power_module, &hadc1);
 800379a:	491d      	ldr	r1, [pc, #116]	@ (8003810 <Robot_init+0x154>)
 800379c:	481d      	ldr	r0, [pc, #116]	@ (8003814 <Robot_init+0x158>)
 800379e:	f7ff fe93 	bl	80034c8 <PowerModule_init>
    robot->power_module = &power_module;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <Robot_init+0x158>)
 80037a6:	615a      	str	r2, [r3, #20]

    PID_Init(&pid);
 80037a8:	481b      	ldr	r0, [pc, #108]	@ (8003818 <Robot_init+0x15c>)
 80037aa:	f000 f837 	bl	800381c <PID_Init>
    robot->pid = &pid;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a19      	ldr	r2, [pc, #100]	@ (8003818 <Robot_init+0x15c>)
 80037b2:	619a      	str	r2, [r3, #24]

    robot->base_angle_config = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	771a      	strb	r2, [r3, #28]
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200008a4 	.word	0x200008a4
 80037c8:	200008ec 	.word	0x200008ec
 80037cc:	2000097c 	.word	0x2000097c
 80037d0:	200007cc 	.word	0x200007cc
 80037d4:	20000814 	.word	0x20000814
 80037d8:	20000784 	.word	0x20000784
 80037dc:	2000085c 	.word	0x2000085c
 80037e0:	20000934 	.word	0x20000934
 80037e4:	2000073c 	.word	0x2000073c
 80037e8:	20000d0c 	.word	0x20000d0c
 80037ec:	080113c8 	.word	0x080113c8
 80037f0:	200005f8 	.word	0x200005f8
 80037f4:	20000bc4 	.word	0x20000bc4
 80037f8:	20000b40 	.word	0x20000b40
 80037fc:	40020000 	.word	0x40020000
 8003800:	20000ba0 	.word	0x20000ba0
 8003804:	20000abc 	.word	0x20000abc
 8003808:	40020400 	.word	0x40020400
 800380c:	20000b1c 	.word	0x20000b1c
 8003810:	200005b0 	.word	0x200005b0
 8003814:	20000c08 	.word	0x20000c08
 8003818:	20000cb4 	.word	0x20000cb4

0800381c <PID_Init>:
        robot->pid->js_angle_offset_sp = js_y * max_angle_offset;          // Map joystick Y to speed setpoint
    }
}

void PID_Init(pid_t *pid)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    pid->Kp = -1.0f;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1f      	ldr	r2, [pc, #124]	@ (80038a4 <PID_Init+0x88>)
 8003828:	601a      	str	r2, [r3, #0]
    pid->Ki = -5.5f;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <PID_Init+0x8c>)
 800382e:	605a      	str	r2, [r3, #4]
    pid->Kd = -0.003f;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <PID_Init+0x90>)
 8003834:	609a      	str	r2, [r3, #8]

    pid->base_angle_sp = -0.5f;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800383c:	60da      	str	r2, [r3, #12]

    pid->js_angle_offset_sp = 0.0f;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
    pid->js_angle_offset = 0.0f;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	61da      	str	r2, [r3, #28]

    pid->js_multiplier = 1.0f;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003854:	621a      	str	r2, [r3, #32]
    pid->js_multiplier_sp = 1.0f;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->Kp_speed = 0.0f;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->Ki_speed = 0.0f;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->Kd_speed = 0.0f;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30

    pid->speed_sp = 0.0f; // Do not change, change via joystick
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34

    pid->max_angle_offset = 2.0f;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->angle_sp = 0.0f; // Do not change, it is only for CubeMonitor
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44


    pid->active = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    PID_Reset(pid);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa9c 	bl	8003dd4 <PID_Reset>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	bf800000 	.word	0xbf800000
 80038a8:	c0b00000 	.word	0xc0b00000
 80038ac:	bb449ba6 	.word	0xbb449ba6

080038b0 <PID_Angle_Update>:

static void PID_Angle_Update(pid_t *pid)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    float speed_err = pid->speed_sp - (encoder_r.speed + encoder_l.speed) / 2.0f;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80038be:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <PID_Angle_Update+0x144>)
 80038c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80038c4:	4b4c      	ldr	r3, [pc, #304]	@ (80039f8 <PID_Angle_Update+0x148>)
 80038c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80038ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038ce:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80038d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->integral_speed_err += speed_err * SAMPLING_PERIOD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <PID_Angle_Update+0x14c>)
 80038e6:	edd3 6a00 	vldr	s13, [r3]
 80038ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    float derivative_speed_err = (speed_err - pid->last_speed_err) / SAMPLING_PERIOD;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003902:	ed97 7a04 	vldr	s14, [r7, #16]
 8003906:	ee77 6a67 	vsub.f32	s13, s14, s15
 800390a:	4b3c      	ldr	r3, [pc, #240]	@ (80039fc <PID_Angle_Update+0x14c>)
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003914:	edc7 7a03 	vstr	s15, [r7, #12]

    float angle_offset = pid->Kp_speed * speed_err + pid->Ki_speed * pid->integral_speed_err + pid->Kd_speed * derivative_speed_err;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800391e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8003940:	edd7 7a03 	vldr	s15, [r7, #12]
 8003944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394c:	edc7 7a05 	vstr	s15, [r7, #20]

    if (angle_offset > pid->max_angle_offset)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003956:	ed97 7a05 	vldr	s14, [r7, #20]
 800395a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	dd03      	ble.n	800396c <PID_Angle_Update+0xbc>
        angle_offset = pid->max_angle_offset;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e012      	b.n	8003992 <PID_Angle_Update+0xe2>
    else if (angle_offset < -pid->max_angle_offset)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003972:	eef1 7a67 	vneg.f32	s15, s15
 8003976:	ed97 7a05 	vldr	s14, [r7, #20]
 800397a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003982:	d506      	bpl.n	8003992 <PID_Angle_Update+0xe2>
        angle_offset = -pid->max_angle_offset;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800398a:	eef1 7a67 	vneg.f32	s15, s15
 800398e:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->js_angle_offset = alpha * pid->js_angle_offset_sp + (1.0f - alpha) * pid->js_angle_offset;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	ed93 7a06 	vldr	s14, [r3, #24]
 8003998:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <PID_Angle_Update+0x150>)
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <PID_Angle_Update+0x150>)
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80039b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->angle_sp = pid->base_angle_sp + angle_offset + pid->js_angle_offset;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80039ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80039d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    pid->last_speed_err = speed_err;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20000abc 	.word	0x20000abc
 80039f8:	20000b40 	.word	0x20000b40
 80039fc:	20000ab4 	.word	0x20000ab4
 8003a00:	20000008 	.word	0x20000008

08003a04 <Differential_Drive_Kinematics>:
    }
    pid->last_error = error;
}

static void Differential_Drive_Kinematics(pid_t *pid)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b092      	sub	sp, #72	@ 0x48
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    - At the time t+dt the pose will be:
        [x', y', theta'] =
            [cos(omega*dt), -sin(omega*dt), 0; sin(omega*dt), cos(omega*dt), 0; 0, 0, 1] *
            [x - ICC_x, y - ICC_y, theta] + [ICC_x, ICC_y, omega*dt]
    */
	float error = pid->angle_sp - imu.angle;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003a12:	4b7a      	ldr	r3, [pc, #488]	@ (8003bfc <Differential_Drive_Kinematics+0x1f8>)
 8003a14:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a1c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if (fabs(error) > 30.0f)
 8003a20:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003a24:	eef0 7ae7 	vabs.f32	s15, s15
 8003a28:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	dd0d      	ble.n	8003a52 <Differential_Drive_Kinematics+0x4e>
	{
		set_speed(&stepper_l, 0.0f);
 8003a36:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8003c00 <Differential_Drive_Kinematics+0x1fc>
 8003a3a:	4872      	ldr	r0, [pc, #456]	@ (8003c04 <Differential_Drive_Kinematics+0x200>)
 8003a3c:	f000 fae8 	bl	8004010 <set_speed>
		set_speed(&stepper_r, 0.0f);
 8003a40:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8003c00 <Differential_Drive_Kinematics+0x1fc>
 8003a44:	4870      	ldr	r0, [pc, #448]	@ (8003c08 <Differential_Drive_Kinematics+0x204>)
 8003a46:	f000 fae3 	bl	8004010 <set_speed>
		PID_Reset(pid);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9c2 	bl	8003dd4 <PID_Reset>
		set_speed(&stepper_r, V_r_cmd);


	}

}
 8003a50:	e199      	b.n	8003d86 <Differential_Drive_Kinematics+0x382>
		pid->integral_error += error * SAMPLING_PERIOD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a58:	4b6c      	ldr	r3, [pc, #432]	@ (8003c0c <Differential_Drive_Kinematics+0x208>)
 8003a5a:	edd3 6a00 	vldr	s13, [r3]
 8003a5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	edc3 7a04 	vstr	s15, [r3, #16]
		float derivative_error = (error - pid->last_error) / SAMPLING_PERIOD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a76:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003a7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a7e:	4b63      	ldr	r3, [pc, #396]	@ (8003c0c <Differential_Drive_Kinematics+0x208>)
 8003a80:	ed93 7a00 	vldr	s14, [r3]
 8003a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a88:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		float speed_setpoint = pid->Kp * error +
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003a96:	ee27 7a27 	vmul.f32	s14, s14, s15
							   pid->Ki * pid->integral_error +
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		float speed_setpoint = pid->Kp * error +
 8003aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
							   pid->Kd * derivative_error;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ab4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		float speed_setpoint = pid->Kp * error +
 8003abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		pid->js_multiplier = alpha * pid->js_multiplier_sp + (1.0f - alpha) * pid->js_multiplier;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003aca:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <Differential_Drive_Kinematics+0x20c>)
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8003c10 <Differential_Drive_Kinematics+0x20c>)
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	edc3 7a08 	vstr	s15, [r3, #32]
		float l = WHEEL_AXIS_MIDPOINT;
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <Differential_Drive_Kinematics+0x210>)
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
		float dt = SAMPLING_PERIOD;
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <Differential_Drive_Kinematics+0x208>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
		float V = js_y * pid->js_multiplier;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b06:	4b44      	ldr	r3, [pc, #272]	@ (8003c18 <Differential_Drive_Kinematics+0x214>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b10:	edc7 7a08 	vstr	s15, [r7, #32]
		float omega = js_x * pid->max_angle_offset;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003b1a:	4b40      	ldr	r3, [pc, #256]	@ (8003c1c <Differential_Drive_Kinematics+0x218>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc7 7a07 	vstr	s15, [r7, #28]
		if (fabsf(omega) < 1e-6f) {
 8003b28:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b2c:	eef0 7ae7 	vabs.f32	s15, s15
 8003b30:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003c20 <Differential_Drive_Kinematics+0x21c>
 8003b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	d504      	bpl.n	8003b48 <Differential_Drive_Kinematics+0x144>
		    V_r = V;
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	647b      	str	r3, [r7, #68]	@ 0x44
		    V_l = V;
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b46:	e091      	b.n	8003c6c <Differential_Drive_Kinematics+0x268>
		else if (fabsf(V) < 1e-6f) {
 8003b48:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b4c:	eef0 7ae7 	vabs.f32	s15, s15
 8003b50:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003c20 <Differential_Drive_Kinematics+0x21c>
 8003b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	d51a      	bpl.n	8003b94 <Differential_Drive_Kinematics+0x190>
		    V_r =  omega * (l / 2.0f);
 8003b5e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003b62:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		    V_l = -omega * (l / 2.0f);
 8003b76:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b7a:	eeb1 7a67 	vneg.f32	s14, s15
 8003b7e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003b82:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003b86:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8003b92:	e06b      	b.n	8003c6c <Differential_Drive_Kinematics+0x268>
		    float R = V / omega;
 8003b94:	edd7 6a08 	vldr	s13, [r7, #32]
 8003b98:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba0:	edc7 7a06 	vstr	s15, [r7, #24]
		    if (fabsf(R) > 1e6f || isnan(R) || isinf(R)) {
 8003ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ba8:	eef0 7ae7 	vabs.f32	s15, s15
 8003bac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003c24 <Differential_Drive_Kinematics+0x220>
 8003bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	dc1b      	bgt.n	8003bf2 <Differential_Drive_Kinematics+0x1ee>
 8003bba:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	d612      	bvs.n	8003bf2 <Differential_Drive_Kinematics+0x1ee>
 8003bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bd0:	eef0 7ae7 	vabs.f32	s15, s15
 8003bd4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003c28 <Differential_Drive_Kinematics+0x224>
 8003bd8:	eef4 7a47 	vcmp.f32	s15, s14
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	bfd4      	ite	le
 8003be2:	2301      	movle	r3, #1
 8003be4:	2300      	movgt	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f083 0301 	eor.w	r3, r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01c      	beq.n	8003c2c <Differential_Drive_Kinematics+0x228>
		        V_r = V;
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
		        V_l = V;
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bfa:	e037      	b.n	8003c6c <Differential_Drive_Kinematics+0x268>
 8003bfc:	20000bc4 	.word	0x20000bc4
 8003c00:	00000000 	.word	0x00000000
 8003c04:	20000ba0 	.word	0x20000ba0
 8003c08:	20000b1c 	.word	0x20000b1c
 8003c0c:	20000ab4 	.word	0x20000ab4
 8003c10:	20000008 	.word	0x20000008
 8003c14:	43048000 	.word	0x43048000
 8003c18:	20000d04 	.word	0x20000d04
 8003c1c:	20000d00 	.word	0x20000d00
 8003c20:	358637bd 	.word	0x358637bd
 8003c24:	49742400 	.word	0x49742400
 8003c28:	7f7fffff 	.word	0x7f7fffff
		        V_r = omega * (R + l / 2.0f);
 8003c2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003c30:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003c34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c40:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c48:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		        V_l = omega * (R - l / 2.0f);
 8003c4c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003c50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c58:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c60:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		float x = encoder_r.displacement;
 8003c6c:	4b48      	ldr	r3, [pc, #288]	@ (8003d90 <Differential_Drive_Kinematics+0x38c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]
		float y = encoder_l.displacement;
 8003c72:	4b48      	ldr	r3, [pc, #288]	@ (8003d94 <Differential_Drive_Kinematics+0x390>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	613b      	str	r3, [r7, #16]
		float theta = imu.angle;
 8003c78:	4b47      	ldr	r3, [pc, #284]	@ (8003d98 <Differential_Drive_Kinematics+0x394>)
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	60fb      	str	r3, [r7, #12]
		float V_l_cmd = V_l + speed_setpoint;
 8003c7e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003c82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float V_r_cmd = V_r + speed_setpoint;
 8003c8e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003c92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		if (isnan(V_l_cmd) || isinf(V_l_cmd)) V_l_cmd = 0.0f;
 8003c9e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003ca2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003ca6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cae:	d612      	bvs.n	8003cd6 <Differential_Drive_Kinematics+0x2d2>
 8003cb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003cb4:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8003d9c <Differential_Drive_Kinematics+0x398>
 8003cbc:	eef4 7a47 	vcmp.f32	s15, s14
 8003cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc4:	bfd4      	ite	le
 8003cc6:	2301      	movle	r3, #1
 8003cc8:	2300      	movgt	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f083 0301 	eor.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <Differential_Drive_Kinematics+0x2d8>
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (isnan(V_r_cmd) || isinf(V_r_cmd)) V_r_cmd = 0.0f;
 8003cdc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003ce0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003ce4:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	d612      	bvs.n	8003d14 <Differential_Drive_Kinematics+0x310>
 8003cee:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003cf2:	eef0 7ae7 	vabs.f32	s15, s15
 8003cf6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003d9c <Differential_Drive_Kinematics+0x398>
 8003cfa:	eef4 7a47 	vcmp.f32	s15, s14
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	bfd4      	ite	le
 8003d04:	2301      	movle	r3, #1
 8003d06:	2300      	movgt	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f083 0301 	eor.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <Differential_Drive_Kinematics+0x316>
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (V_l_cmd >  MAX_CTRL_FREQUENCY) V_l_cmd =  MAX_CTRL_FREQUENCY;
 8003d1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003d1e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003da0 <Differential_Drive_Kinematics+0x39c>
 8003d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	dd01      	ble.n	8003d30 <Differential_Drive_Kinematics+0x32c>
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <Differential_Drive_Kinematics+0x3a0>)
 8003d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (V_l_cmd < -MAX_CTRL_FREQUENCY) V_l_cmd = -MAX_CTRL_FREQUENCY;
 8003d30:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003d34:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003da8 <Differential_Drive_Kinematics+0x3a4>
 8003d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d40:	d501      	bpl.n	8003d46 <Differential_Drive_Kinematics+0x342>
 8003d42:	4b1a      	ldr	r3, [pc, #104]	@ (8003dac <Differential_Drive_Kinematics+0x3a8>)
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (V_r_cmd >  MAX_CTRL_FREQUENCY) V_r_cmd =  MAX_CTRL_FREQUENCY;
 8003d46:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003d4a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003da0 <Differential_Drive_Kinematics+0x39c>
 8003d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d56:	dd01      	ble.n	8003d5c <Differential_Drive_Kinematics+0x358>
 8003d58:	4b12      	ldr	r3, [pc, #72]	@ (8003da4 <Differential_Drive_Kinematics+0x3a0>)
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (V_r_cmd < -MAX_CTRL_FREQUENCY) V_r_cmd = -MAX_CTRL_FREQUENCY;
 8003d5c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003d60:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003da8 <Differential_Drive_Kinematics+0x3a4>
 8003d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6c:	d501      	bpl.n	8003d72 <Differential_Drive_Kinematics+0x36e>
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <Differential_Drive_Kinematics+0x3a8>)
 8003d70:	63bb      	str	r3, [r7, #56]	@ 0x38
		set_speed(&stepper_l, V_l_cmd);
 8003d72:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8003d76:	480e      	ldr	r0, [pc, #56]	@ (8003db0 <Differential_Drive_Kinematics+0x3ac>)
 8003d78:	f000 f94a 	bl	8004010 <set_speed>
		set_speed(&stepper_r, V_r_cmd);
 8003d7c:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8003d80:	480c      	ldr	r0, [pc, #48]	@ (8003db4 <Differential_Drive_Kinematics+0x3b0>)
 8003d82:	f000 f945 	bl	8004010 <set_speed>
}
 8003d86:	bf00      	nop
 8003d88:	3748      	adds	r7, #72	@ 0x48
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000abc 	.word	0x20000abc
 8003d94:	20000b40 	.word	0x20000b40
 8003d98:	20000bc4 	.word	0x20000bc4
 8003d9c:	7f7fffff 	.word	0x7f7fffff
 8003da0:	460ca000 	.word	0x460ca000
 8003da4:	460ca000 	.word	0x460ca000
 8003da8:	c60ca000 	.word	0xc60ca000
 8003dac:	c60ca000 	.word	0xc60ca000
 8003db0:	20000ba0 	.word	0x20000ba0
 8003db4:	20000b1c 	.word	0x20000b1c

08003db8 <PID_Update>:

void PID_Update(pid_t *pid)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
    PID_Angle_Update(pid);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fd75 	bl	80038b0 <PID_Angle_Update>
//     PID_Speed_Update(pid);
    Differential_Drive_Kinematics(pid);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe1c 	bl	8003a04 <Differential_Drive_Kinematics>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <PID_Reset>:

void PID_Reset(pid_t *pid)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    pid->integral_error = 0.0f;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]
    pid->integral_speed_err = 0.0f;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38
    pid->last_error = 0.0f;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	615a      	str	r2, [r3, #20]
    pid->last_speed_err = 0.0f;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    pid->js_angle_offset_sp = 0.0f;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
    pid->js_angle_offset = 0.0f;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
    pid->js_multiplier_sp = 1.0f;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e12:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->js_multiplier = 1.0f;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <speed_control>:
#define AEP 30 // Actual Error Proportional gain
#define LEP 205 // Last Error Proportional gain

float freq = 0.0f; // Frequency in Hz

void speed_control(stepper_t *stepper){
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff f841 	bl	8002ebc <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e4c:	edc7 7a03 	vstr	s15, [r7, #12]

	// stepper->frequency += e / ANGLE_STEP; // Integral only controller

	stepper->frequency += e * AEP + stepper->last_error * LEP; // PI controller
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e5a:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8003e5e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8003ffc <speed_control+0x1d4>
 8003e6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	edc3 7a03 	vstr	s15, [r3, #12]
	stepper->last_error = e;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]



	uint8_t sign = stepper->frequency > 0;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e92:	bfcc      	ite	gt
 8003e94:	2301      	movgt	r3, #1
 8003e96:	2300      	movle	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency; // Store frequency for debugging
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a57      	ldr	r2, [pc, #348]	@ (8004000 <speed_control+0x1d8>)
 8003ea2:	6013      	str	r3, [r2, #0]
//	stepper->frequency = 255;

	if (fabs(stepper->frequency) > MAX_CTRL_FREQUENCY) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eaa:	eef0 7ae7 	vabs.f32	s15, s15
 8003eae:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004004 <speed_control+0x1dc>
 8003eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eba:	dd3c      	ble.n	8003f36 <speed_control+0x10e>
		stepper->frequency = MAX_CTRL_FREQUENCY * (sign?1:-1); // Limit frequency to 9000 Hz
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <speed_control+0xa0>
 8003ec2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003ec6:	e001      	b.n	8003ecc <speed_control+0xa4>
 8003ec8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003ecc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004004 <speed_control+0x1dc>
 8003ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	edc3 7a03 	vstr	s15, [r3, #12]
		stepper->last_error = (sign && stepper->last_error>0) || (!sign && stepper->last_error<0) ? 0 : stepper->last_error; // Reset last error if the direction has changed
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00f      	beq.n	8003f00 <speed_control+0xd8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	edd3 7a00 	vldr	s15, [r3]
 8003ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	bfcc      	ite	gt
 8003ef0:	2301      	movgt	r3, #1
 8003ef2:	2300      	movle	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <speed_control+0x104>
 8003f00:	7afb      	ldrb	r3, [r7, #11]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <speed_control+0xfe>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	bf4c      	ite	mi
 8003f16:	2301      	movmi	r3, #1
 8003f18:	2300      	movpl	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <speed_control+0x104>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	e001      	b.n	8003f30 <speed_control+0x108>
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	e00f      	b.n	8003f56 <speed_control+0x12e>
	} else if (fabs(stepper->frequency) < 20) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f3c:	eef0 7ae7 	vabs.f32	s15, s15
 8003f40:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4c:	d503      	bpl.n	8003f56 <speed_control+0x12e>
		stepper->frequency = 0; // Stop the motor if frequency is too low
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69d8      	ldr	r0, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8c19      	ldrh	r1, [r3, #32]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dc06      	bgt.n	8003f78 <speed_control+0x150>
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	e000      	b.n	8003f7a <speed_control+0x152>
 8003f78:	7afb      	ldrb	r3, [r7, #11]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f002 ffa4 	bl	8006ec8 <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8e:	eef0 7ae7 	vabs.f32	s15, s15
 8003f92:	ee17 0a90 	vmov	r0, s15
 8003f96:	f7fc fb07 	bl	80005a8 <__aeabi_f2d>
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <speed_control+0x1e0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc fade 	bl	8000564 <__aeabi_ui2d>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4620      	mov	r0, r4
 8003fae:	4629      	mov	r1, r5
 8003fb0:	f7fc fb52 	bl	8000658 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	4b12      	ldr	r3, [pc, #72]	@ (800400c <speed_control+0x1e4>)
 8003fc2:	f7fc f991 	bl	80002e8 <__aeabi_dsub>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695c      	ldr	r4, [r3, #20]
 8003fd2:	f7fc fe19 	bl	8000c08 <__aeabi_d2uiz>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	0852      	lsrs	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	434d0000 	.word	0x434d0000
 8004000:	20000d08 	.word	0x20000d08
 8004004:	460ca000 	.word	0x460ca000
 8004008:	20000ab8 	.word	0x20000ab8
 800400c:	3ff00000 	.word	0x3ff00000

08004010 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	609a      	str	r2, [r3, #8]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a34      	ldr	r2, [pc, #208]	@ (8004114 <Stepper_init+0xe4>)
 8004042:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8bba      	ldrh	r2, [r7, #28]
 8004056:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d838      	bhi.n	80040d0 <Stepper_init+0xa0>
 800405e:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <Stepper_init+0x34>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004099 	.word	0x08004099
 8004068:	080040d1 	.word	0x080040d1
 800406c:	080040d1 	.word	0x080040d1
 8004070:	080040d1 	.word	0x080040d1
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040d1 	.word	0x080040d1
 8004080:	080040d1 	.word	0x080040d1
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040d1 	.word	0x080040d1
 800408c:	080040d1 	.word	0x080040d1
 8004090:	080040d1 	.word	0x080040d1
 8004094:	080040c3 	.word	0x080040c3
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	619a      	str	r2, [r3, #24]
		break;
 80040a4:	e018      	b.n	80040d8 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]
		break;
 80040b2:	e011      	b.n	80040d8 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	619a      	str	r2, [r3, #24]
		break;
 80040c0:	e00a      	b.n	80040d8 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]
		break;
 80040ce:	e003      	b.n	80040d8 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	619a      	str	r2, [r3, #24]
		break;
 80040d6:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	3a80adff 	.word	0x3a80adff

08004118 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8004120:	2300      	movs	r3, #0
 8004122:	75fb      	strb	r3, [r7, #23]
 8004124:	e035      	b.n	8004192 <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8004126:	2300      	movs	r3, #0
 8004128:	75bb      	strb	r3, [r7, #22]
 800412a:	e01a      	b.n	8004162 <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 800412c:	7dfa      	ldrb	r2, [r7, #23]
 800412e:	7dbb      	ldrb	r3, [r7, #22]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4929      	ldr	r1, [pc, #164]	@ (80041d8 <MAX72_init+0xc0>)
 8004134:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8004138:	3318      	adds	r3, #24
 800413a:	443b      	add	r3, r7
 800413c:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	7dba      	ldrb	r2, [r7, #22]
 8004144:	0052      	lsls	r2, r2, #1
 8004146:	3201      	adds	r2, #1
 8004148:	4923      	ldr	r1, [pc, #140]	@ (80041d8 <MAX72_init+0xc0>)
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	440b      	add	r3, r1
 800414e:	7859      	ldrb	r1, [r3, #1]
 8004150:	f102 0318 	add.w	r3, r2, #24
 8004154:	443b      	add	r3, r7
 8004156:	460a      	mov	r2, r1
 8004158:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 800415c:	7dbb      	ldrb	r3, [r7, #22]
 800415e:	3301      	adds	r3, #1
 8004160:	75bb      	strb	r3, [r7, #22]
 8004162:	7dbb      	ldrb	r3, [r7, #22]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d9e1      	bls.n	800412c <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8004168:	2200      	movs	r2, #0
 800416a:	2110      	movs	r1, #16
 800416c:	481b      	ldr	r0, [pc, #108]	@ (80041dc <MAX72_init+0xc4>)
 800416e:	f002 feab 	bl	8006ec8 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8004172:	f107 010c 	add.w	r1, r7, #12
 8004176:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800417a:	2208      	movs	r2, #8
 800417c:	4818      	ldr	r0, [pc, #96]	@ (80041e0 <MAX72_init+0xc8>)
 800417e:	f005 f83e 	bl	80091fe <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8004182:	2201      	movs	r2, #1
 8004184:	2110      	movs	r1, #16
 8004186:	4815      	ldr	r0, [pc, #84]	@ (80041dc <MAX72_init+0xc4>)
 8004188:	f002 fe9e 	bl	8006ec8 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	3301      	adds	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d9c6      	bls.n	8004126 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2205      	movs	r2, #5
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 80041c0:	f001 fb76 	bl	80058b0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 80041ca:	f000 f847 	bl	800425c <MAX72_Clear>
}
 80041ce:	bf00      	nop
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	08011428 	.word	0x08011428
 80041dc:	40020400 	.word	0x40020400
 80041e0:	200006e0 	.word	0x200006e0

080041e4 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]
 80041f4:	e014      	b.n	8004220 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	3318      	adds	r3, #24
 80041fc:	443b      	add	r3, r7
 80041fe:	79fa      	ldrb	r2, [r7, #7]
 8004200:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	441a      	add	r2, r3
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	3301      	adds	r3, #1
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	3318      	adds	r3, #24
 8004214:	443b      	add	r3, r7
 8004216:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	3301      	adds	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d9e7      	bls.n	80041f6 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004226:	2200      	movs	r2, #0
 8004228:	2110      	movs	r1, #16
 800422a:	480a      	ldr	r0, [pc, #40]	@ (8004254 <MAX72_SendRow+0x70>)
 800422c:	f002 fe4c 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8004230:	f107 010c 	add.w	r1, r7, #12
 8004234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004238:	2208      	movs	r2, #8
 800423a:	4807      	ldr	r0, [pc, #28]	@ (8004258 <MAX72_SendRow+0x74>)
 800423c:	f004 ffdf 	bl	80091fe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004240:	2201      	movs	r2, #1
 8004242:	2110      	movs	r1, #16
 8004244:	4803      	ldr	r0, [pc, #12]	@ (8004254 <MAX72_SendRow+0x70>)
 8004246:	f002 fe3f 	bl	8006ec8 <HAL_GPIO_WritePin>
}
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40020400 	.word	0x40020400
 8004258:	200006e0 	.word	0x200006e0

0800425c <MAX72_Clear>:

void MAX72_Clear(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 8004262:	2300      	movs	r3, #0
 8004264:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 8004266:	2301      	movs	r3, #1
 8004268:	71fb      	strb	r3, [r7, #7]
 800426a:	e008      	b.n	800427e <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 800426c:	463a      	mov	r2, r7
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ffb6 	bl	80041e4 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	3301      	adds	r3, #1
 800427c:	71fb      	strb	r3, [r7, #7]
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d9f3      	bls.n	800426c <MAX72_Clear+0x10>
	    }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800429e:	2b07      	cmp	r3, #7
 80042a0:	d813      	bhi.n	80042ca <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	460a      	mov	r2, r1
 80042b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042b6:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042c0:	3301      	adds	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d103      	bne.n	80042dc <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 80042d4:	2101      	movs	r1, #1
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f904 	bl	80044e4 <MAX72_Change_Data>
	}
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <MAX72_Update_Data>:
			break; // Esci dal ciclo dopo aver rimosso il dato
		}
	}
}

void MAX72_Update_Data(display_t *display) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80e8 	beq.w	80044c8 <MAX72_Update_Data+0x1e4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80e2 	beq.w	80044c8 <MAX72_Update_Data+0x1e4>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	791b      	ldrb	r3, [r3, #4]
 8004316:	2b03      	cmp	r3, #3
 8004318:	f200 80df 	bhi.w	80044da <MAX72_Update_Data+0x1f6>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <MAX72_Update_Data+0x40>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004335 	.word	0x08004335
 8004328:	08004451 	.word	0x08004451
 800432c:	08004481 	.word	0x08004481
 8004330:	0800449b 	.word	0x0800449b
		case PRINT_INT:
			switch(current_data->type) {
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	799b      	ldrb	r3, [r3, #6]
 8004338:	2b09      	cmp	r3, #9
 800433a:	f200 80c7 	bhi.w	80044cc <MAX72_Update_Data+0x1e8>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <MAX72_Update_Data+0x60>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004381 	.word	0x08004381
 800434c:	08004397 	.word	0x08004397
 8004350:	080043ad 	.word	0x080043ad
 8004354:	080043c3 	.word	0x080043c3
 8004358:	080043d9 	.word	0x080043d9
 800435c:	080043f1 	.word	0x080043f1
 8004360:	08004409 	.word	0x08004409
 8004364:	0800441d 	.word	0x0800441d
 8004368:	08004433 	.word	0x08004433
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	795b      	ldrb	r3, [r3, #5]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 fb9d 	bl	8004ab8 <MAX72_Print_Int>
					break;
 800437e:	e066      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	795b      	ldrb	r3, [r3, #5]
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f000 fb92 	bl	8004ab8 <MAX72_Print_Int>
					break;
 8004394:	e05b      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	795b      	ldrb	r3, [r3, #5]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f000 fb87 	bl	8004ab8 <MAX72_Print_Int>
					break;
 80043aa:	e050      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	795b      	ldrb	r3, [r3, #5]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fb7c 	bl	8004ab8 <MAX72_Print_Int>
					break;
 80043c0:	e045      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	795b      	ldrb	r3, [r3, #5]
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 fb71 	bl	8004ab8 <MAX72_Print_Int>
					break;
 80043d6:	e03a      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f993 3000 	ldrsb.w	r3, [r3]
 80043e0:	461a      	mov	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	795b      	ldrb	r3, [r3, #5]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 fb65 	bl	8004ab8 <MAX72_Print_Int>
					break;
 80043ee:	e02e      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	795b      	ldrb	r3, [r3, #5]
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f000 fb59 	bl	8004ab8 <MAX72_Print_Int>
					break;
 8004406:	e022      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	795b      	ldrb	r3, [r3, #5]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 fb4f 	bl	8004ab8 <MAX72_Print_Int>
					break;
 800441a:	e018      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	795b      	ldrb	r3, [r3, #5]
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 fb44 	bl	8004ab8 <MAX72_Print_Int>
					break;
 8004430:	e00d      	b.n	800444e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	795b      	ldrb	r3, [r3, #5]
 8004442:	4619      	mov	r1, r3
 8004444:	ee17 0a90 	vmov	r0, s15
 8004448:	f000 fb36 	bl	8004ab8 <MAX72_Print_Int>
					break;
 800444c:	bf00      	nop
			}
			break;
 800444e:	e03d      	b.n	80044cc <MAX72_Update_Data+0x1e8>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	799b      	ldrb	r3, [r3, #6]
 8004454:	2b09      	cmp	r3, #9
 8004456:	d13b      	bne.n	80044d0 <MAX72_Update_Data+0x1ec>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings == 2);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	79da      	ldrb	r2, [r3, #7]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	795b      	ldrb	r3, [r3, #5]
 8004468:	2b02      	cmp	r3, #2
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	eeb0 0a67 	vmov.f32	s0, s15
 800447a:	f000 fb79 	bl	8004b70 <MAX72_Print_Float>
			}
			break;
 800447e:	e027      	b.n	80044d0 <MAX72_Update_Data+0x1ec>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	799b      	ldrb	r3, [r3, #6]
 8004484:	2b0a      	cmp	r3, #10
 8004486:	d125      	bne.n	80044d4 <MAX72_Update_Data+0x1f0>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	795b      	ldrb	r3, [r3, #5]
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 f890 	bl	80045b8 <MAX72_Print_String>
			}
			break;
 8004498:	e01c      	b.n	80044d4 <MAX72_Update_Data+0x1f0>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	799b      	ldrb	r3, [r3, #6]
 800449e:	2b0a      	cmp	r3, #10
 80044a0:	d11a      	bne.n	80044d8 <MAX72_Update_Data+0x1f4>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 80044a2:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <MAX72_Update_Data+0x1fc>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7fb feaf 	bl	8000210 <strcmp>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00f      	beq.n	80044d8 <MAX72_Update_Data+0x1f4>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <MAX72_Update_Data+0x1fc>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <MAX72_Update_Data+0x1fc>)
 80044c4:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 80044c6:	e007      	b.n	80044d8 <MAX72_Update_Data+0x1f4>
		return; // Non ci sono dati da visualizzare
 80044c8:	bf00      	nop
 80044ca:	e006      	b.n	80044da <MAX72_Update_Data+0x1f6>
			break;
 80044cc:	bf00      	nop
 80044ce:	e004      	b.n	80044da <MAX72_Update_Data+0x1f6>
			break;
 80044d0:	bf00      	nop
 80044d2:	e002      	b.n	80044da <MAX72_Update_Data+0x1f6>
			break;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <MAX72_Update_Data+0x1f6>
			break;
 80044d8:	bf00      	nop
	}
}
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000d78 	.word	0x20000d78

080044e4 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d055      	beq.n	80045a6 <MAX72_Change_Data+0xc2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <MAX72_Change_Data+0x26>
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04d      	beq.n	80045a6 <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 800450a:	f001 f9d1 	bl	80058b0 <HAL_GetTick>
 800450e:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <MAX72_Change_Data+0x4e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	1ad2      	subs	r2, r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004524:	4619      	mov	r1, r3
 8004526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	429a      	cmp	r2, r3
 8004530:	d33b      	bcc.n	80045aa <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004538:	3301      	adds	r3, #1
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004540:	fb93 f1f2 	sdiv	r1, r3, r2
 8004544:	fb01 f202 	mul.w	r2, r1, r2
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	b2da      	uxtb	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	791b      	ldrb	r3, [r3, #4]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d113      	bne.n	8004592 <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 800456a:	4b12      	ldr	r3, [pc, #72]	@ (80045b4 <MAX72_Change_Data+0xd0>)
 800456c:	7b5b      	ldrb	r3, [r3, #13]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <MAX72_Change_Data+0x98>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004578:	2b01      	cmp	r3, #1
 800457a:	d910      	bls.n	800459e <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fc5e 	bl	8004e4c <MAX72_Scroll_Start_IT>
 8004590:	e005      	b.n	800459e <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <MAX72_Change_Data+0xd0>)
 8004594:	7b5b      	ldrb	r3, [r3, #13]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 800459a:	f000 fcbd 	bl	8004f18 <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fea0 	bl	80042e4 <MAX72_Update_Data>
 80045a4:	e002      	b.n	80045ac <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <MAX72_Change_Data+0xc8>
		return;
 80045aa:	bf00      	nop
}
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000d78 	.word	0x20000d78

080045b8 <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b094      	sub	sp, #80	@ 0x50
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fb fe83 	bl	80002d0 <strlen>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	f040 8119 	bne.w	800480a <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 80045d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 80045e2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80045e6:	2b07      	cmp	r3, #7
 80045e8:	d805      	bhi.n	80045f6 <MAX72_Print_String+0x3e>
 80045ea:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80045ee:	f1c3 0308 	rsb	r3, r3, #8
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e000      	b.n	80045f8 <MAX72_Print_String+0x40>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004602:	e00b      	b.n	800461c <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8004604:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004608:	3350      	adds	r3, #80	@ 0x50
 800460a:	443b      	add	r3, r7
 800460c:	2220      	movs	r2, #32
 800460e:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8004612:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004616:	3301      	adds	r3, #1
 8004618:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800461c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004620:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004624:	429a      	cmp	r2, r3
 8004626:	d3ed      	bcc.n	8004604 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800462e:	e012      	b.n	8004656 <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8004630:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	441a      	add	r2, r3
 8004638:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 800463c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004640:	440b      	add	r3, r1
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	3350      	adds	r3, #80	@ 0x50
 8004646:	443b      	add	r3, r7
 8004648:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 800464c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004650:	3301      	adds	r3, #1
 8004652:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8004656:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800465a:	2b07      	cmp	r3, #7
 800465c:	d805      	bhi.n	800466a <MAX72_Print_String+0xb2>
 800465e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8004662:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004666:	429a      	cmp	r2, r3
 8004668:	d3e2      	bcc.n	8004630 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 800466a:	2300      	movs	r3, #0
 800466c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004670:	e012      	b.n	8004698 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8004672:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004676:	f1c3 0207 	rsb	r2, r3, #7
 800467a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800467e:	3250      	adds	r2, #80	@ 0x50
 8004680:	443a      	add	r2, r7
 8004682:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8004686:	3350      	adds	r3, #80	@ 0x50
 8004688:	443b      	add	r3, r7
 800468a:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 800468e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004692:	3301      	adds	r3, #1
 8004694:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004698:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800469c:	2b07      	cmp	r3, #7
 800469e:	d9e8      	bls.n	8004672 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80046a6:	e0aa      	b.n	80047fe <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80046b2:	e090      	b.n	80047d6 <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 80046b4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	3350      	adds	r3, #80	@ 0x50
 80046bc:	443b      	add	r3, r7
 80046be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 80046c6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	3301      	adds	r3, #1
 80046ce:	3350      	adds	r3, #80	@ 0x50
 80046d0:	443b      	add	r3, r7
 80046d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046d6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 80046e6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80046ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80046ec:	d913      	bls.n	8004716 <MAX72_Print_String+0x15e>
 80046ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80046f2:	2b39      	cmp	r3, #57	@ 0x39
 80046f4:	d80f      	bhi.n	8004716 <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 80046f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80046fa:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 80046fe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004702:	49cd      	ldr	r1, [pc, #820]	@ (8004a38 <MAX72_Print_String+0x480>)
 8004704:	00d2      	lsls	r2, r2, #3
 8004706:	440a      	add	r2, r1
 8004708:	4413      	add	r3, r2
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8004714:	e019      	b.n	800474a <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8004716:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800471a:	2b2d      	cmp	r3, #45	@ 0x2d
 800471c:	d109      	bne.n	8004732 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 800471e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004722:	4ac5      	ldr	r2, [pc, #788]	@ (8004a38 <MAX72_Print_String+0x480>)
 8004724:	4413      	add	r3, r2
 8004726:	7a1b      	ldrb	r3, [r3, #8]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8004730:	e00b      	b.n	800474a <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8004732:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004736:	2b2e      	cmp	r3, #46	@ 0x2e
 8004738:	d107      	bne.n	800474a <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 800473a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800473e:	4abe      	ldr	r2, [pc, #760]	@ (8004a38 <MAX72_Print_String+0x480>)
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 800474a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800474e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004750:	d913      	bls.n	800477a <MAX72_Print_String+0x1c2>
 8004752:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004756:	2b39      	cmp	r3, #57	@ 0x39
 8004758:	d80f      	bhi.n	800477a <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 800475a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800475e:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8004762:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004766:	49b4      	ldr	r1, [pc, #720]	@ (8004a38 <MAX72_Print_String+0x480>)
 8004768:	00d2      	lsls	r2, r2, #3
 800476a:	440a      	add	r2, r1
 800476c:	4413      	add	r3, r2
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8004778:	e019      	b.n	80047ae <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 800477a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800477e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004780:	d109      	bne.n	8004796 <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8004782:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004786:	4aac      	ldr	r2, [pc, #688]	@ (8004a38 <MAX72_Print_String+0x480>)
 8004788:	4413      	add	r3, r2
 800478a:	7a1b      	ldrb	r3, [r3, #8]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8004794:	e00b      	b.n	80047ae <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8004796:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800479a:	2b2e      	cmp	r3, #46	@ 0x2e
 800479c:	d107      	bne.n	80047ae <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 800479e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80047a2:	4aa5      	ldr	r2, [pc, #660]	@ (8004a38 <MAX72_Print_String+0x480>)
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 80047ae:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	b25a      	sxtb	r2, r3
 80047b6:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b25a      	sxtb	r2, r3
 80047be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	3350      	adds	r3, #80	@ 0x50
 80047c6:	443b      	add	r3, r7
 80047c8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 80047cc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80047d0:	3301      	adds	r3, #1
 80047d2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80047d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80047da:	2b03      	cmp	r3, #3
 80047dc:	f67f af6a 	bls.w	80046b4 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 80047e0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80047e4:	3301      	adds	r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80047ec:	4611      	mov	r1, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fcf8 	bl	80041e4 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80047f4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80047f8:	3301      	adds	r3, #1
 80047fa:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80047fe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004802:	2b07      	cmp	r3, #7
 8004804:	f67f af50 	bls.w	80046a8 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8004808:	e150      	b.n	8004aac <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 80d1 	bne.w	80049b4 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8004816:	23ff      	movs	r3, #255	@ 0xff
 8004818:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004822:	e010      	b.n	8004846 <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8004824:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004830:	d104      	bne.n	800483c <MAX72_Print_String+0x284>
 8004832:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004836:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800483a:	e00a      	b.n	8004852 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 800483c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004840:	3301      	adds	r3, #1
 8004842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004846:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800484a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800484e:	429a      	cmp	r2, r3
 8004850:	d3e8      	bcc.n	8004824 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8004852:	f107 0318 	add.w	r3, r7, #24
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8004862:	2300      	movs	r3, #0
 8004864:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8004868:	e019      	b.n	800489e <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 800486a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b2e      	cmp	r3, #46	@ 0x2e
 8004876:	d00d      	beq.n	8004894 <MAX72_Print_String+0x2dc>
 8004878:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	441a      	add	r2, r3
 8004880:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004884:	1c59      	adds	r1, r3, #1
 8004886:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	3350      	adds	r3, #80	@ 0x50
 800488e:	443b      	add	r3, r7
 8004890:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8004894:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004898:	3301      	adds	r3, #1
 800489a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800489e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80048a2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d203      	bcs.n	80048b2 <MAX72_Print_String+0x2fa>
 80048aa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d9db      	bls.n	800486a <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 80048b2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80048b6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80048cc:	e01c      	b.n	8004908 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 80048ce:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80048d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20a      	bcs.n	80048f0 <MAX72_Print_String+0x338>
 80048da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048de:	1e5a      	subs	r2, r3, #1
 80048e0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	3350      	adds	r3, #80	@ 0x50
 80048e8:	443b      	add	r3, r7
 80048ea:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80048ee:	e000      	b.n	80048f2 <MAX72_Print_String+0x33a>
 80048f0:	2220      	movs	r2, #32
 80048f2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80048f6:	3350      	adds	r3, #80	@ 0x50
 80048f8:	443b      	add	r3, r7
 80048fa:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 80048fe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8004902:	3301      	adds	r3, #1
 8004904:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8004908:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800490c:	2b03      	cmp	r3, #3
 800490e:	d9de      	bls.n	80048ce <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004916:	e048      	b.n	80049aa <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800491e:	e01e      	b.n	800495e <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8004920:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004924:	3350      	adds	r3, #80	@ 0x50
 8004926:	443b      	add	r3, r7
 8004928:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800492c:	f1a3 0220 	sub.w	r2, r3, #32
 8004930:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8004934:	4841      	ldr	r0, [pc, #260]	@ (8004a3c <MAX72_Print_String+0x484>)
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	4403      	add	r3, r0
 800493e:	440b      	add	r3, r1
 8004940:	3301      	adds	r3, #1
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004948:	00d2      	lsls	r2, r2, #3
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	3350      	adds	r3, #80	@ 0x50
 800494e:	443b      	add	r3, r7
 8004950:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8004954:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004958:	3301      	adds	r3, #1
 800495a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800495e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004962:	2b03      	cmp	r3, #3
 8004964:	d9dc      	bls.n	8004920 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8004966:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10e      	bne.n	800498c <MAX72_Print_String+0x3d4>
 800496e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8004972:	3350      	adds	r3, #80	@ 0x50
 8004974:	443b      	add	r3, r7
 8004976:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 800497a:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800497e:	f042 0202 	orr.w	r2, r2, #2
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	3350      	adds	r3, #80	@ 0x50
 8004986:	443b      	add	r3, r7
 8004988:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 800498c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004990:	3301      	adds	r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f107 0214 	add.w	r2, r7, #20
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fc22 	bl	80041e4 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80049a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049a4:	3301      	adds	r3, #1
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049ae:	2b07      	cmp	r3, #7
 80049b0:	d9b2      	bls.n	8004918 <MAX72_Print_String+0x360>
}
 80049b2:	e07b      	b.n	8004aac <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80049be:	e014      	b.n	80049ea <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 80049c0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80049c4:	1e5a      	subs	r2, r3, #1
 80049c6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	441a      	add	r2, r3
 80049d2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80049d6:	7812      	ldrb	r2, [r2, #0]
 80049d8:	3350      	adds	r3, #80	@ 0x50
 80049da:	443b      	add	r3, r7
 80049dc:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80049e0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80049e4:	3301      	adds	r3, #1
 80049e6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80049ea:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d805      	bhi.n	80049fe <MAX72_Print_String+0x446>
 80049f2:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 80049f6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3e0      	bcc.n	80049c0 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 80049fe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004a02:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8004a06:	e00b      	b.n	8004a20 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 8004a08:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004a0c:	3350      	adds	r3, #80	@ 0x50
 8004a0e:	443b      	add	r3, r7
 8004a10:	2220      	movs	r2, #32
 8004a12:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 8004a16:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8004a20:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d9ef      	bls.n	8004a08 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004a2e:	e039      	b.n	8004aa4 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004a36:	e022      	b.n	8004a7e <MAX72_Print_String+0x4c6>
 8004a38:	20000364 	.word	0x20000364
 8004a3c:	2000000c 	.word	0x2000000c
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8004a40:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004a44:	3350      	adds	r3, #80	@ 0x50
 8004a46:	443b      	add	r3, r7
 8004a48:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8004a4c:	f1a3 0220 	sub.w	r2, r3, #32
 8004a50:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004a54:	4817      	ldr	r0, [pc, #92]	@ (8004ab4 <MAX72_Print_String+0x4fc>)
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4403      	add	r3, r0
 8004a5e:	440b      	add	r3, r1
 8004a60:	3301      	adds	r3, #1
 8004a62:	781a      	ldrb	r2, [r3, #0]
 8004a64:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004a68:	00d2      	lsls	r2, r2, #3
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	3350      	adds	r3, #80	@ 0x50
 8004a6e:	443b      	add	r3, r7
 8004a70:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8004a74:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004a7e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d9dc      	bls.n	8004a40 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8004a86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f107 020c 	add.w	r2, r7, #12
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fba5 	bl	80041e4 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8004a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004aa4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004aa8:	2b07      	cmp	r3, #7
 8004aaa:	d9c1      	bls.n	8004a30 <MAX72_Print_String+0x478>
}
 8004aac:	bf00      	nop
 8004aae:	3750      	adds	r7, #80	@ 0x50
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	2000000c 	.word	0x2000000c

08004ab8 <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da01      	bge.n	8004ace <MAX72_Print_Int+0x16>
 8004aca:	232d      	movs	r3, #45	@ 0x2d
 8004acc:	e000      	b.n	8004ad0 <MAX72_Print_Int+0x18>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfb8      	it	lt
 8004ad8:	425b      	neglt	r3, r3
 8004ada:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	2b2d      	cmp	r3, #45	@ 0x2d
 8004ae6:	d101      	bne.n	8004aec <MAX72_Print_Int+0x34>
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b60 <MAX72_Print_Int+0xa8>)
 8004aea:	e000      	b.n	8004aee <MAX72_Print_Int+0x36>
 8004aec:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <MAX72_Print_Int+0xac>)
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e00e      	b.n	8004b1c <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	2b2d      	cmp	r3, #45	@ 0x2d
 8004b02:	d102      	bne.n	8004b0a <MAX72_Print_Int+0x52>
 8004b04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b08:	e001      	b.n	8004b0e <MAX72_Print_Int+0x56>
 8004b0a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004b20:	d107      	bne.n	8004b32 <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 8004b22:	f107 0008 	add.w	r0, r7, #8
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4a0f      	ldr	r2, [pc, #60]	@ (8004b68 <MAX72_Print_Int+0xb0>)
 8004b2a:	2109      	movs	r1, #9
 8004b2c:	f008 fa42 	bl	800cfb4 <sniprintf>
 8004b30:	e006      	b.n	8004b40 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 8004b32:	f107 0008 	add.w	r0, r7, #8
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	4a0c      	ldr	r2, [pc, #48]	@ (8004b6c <MAX72_Print_Int+0xb4>)
 8004b3a:	2109      	movs	r1, #9
 8004b3c:	f008 fa3a 	bl	800cfb4 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MAX72_Print_Int+0x92>
 8004b46:	2202      	movs	r2, #2
 8004b48:	e000      	b.n	8004b4c <MAX72_Print_Int+0x94>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fd30 	bl	80045b8 <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 8004b58:	bf00      	nop
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	00989680 	.word	0x00989680
 8004b64:	05f5e100 	.word	0x05f5e100
 8004b68:	080113d8 	.word	0x080113d8
 8004b6c:	080113dc 	.word	0x080113dc

08004b70 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 8004b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b74:	b095      	sub	sp, #84	@ 0x54
 8004b76:	af04      	add	r7, sp, #16
 8004b78:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	460a      	mov	r2, r1
 8004b80:	70fb      	strb	r3, [r7, #3]
 8004b82:	4613      	mov	r3, r2
 8004b84:	70bb      	strb	r3, [r7, #2]
 8004b86:	466b      	mov	r3, sp
 8004b88:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 8004b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b94:	1c59      	adds	r1, r3, #1
 8004b96:	1e4b      	subs	r3, r1, #1
 8004b98:	623b      	str	r3, [r7, #32]
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4690      	mov	r8, r2
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4614      	mov	r4, r2
 8004bbc:	461d      	mov	r5, r3
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	00eb      	lsls	r3, r5, #3
 8004bc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bcc:	00e2      	lsls	r2, r4, #3
 8004bce:	460b      	mov	r3, r1
 8004bd0:	3307      	adds	r3, #7
 8004bd2:	08db      	lsrs	r3, r3, #3
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	ebad 0d03 	sub.w	sp, sp, r3
 8004bda:	ab04      	add	r3, sp, #16
 8004bdc:	3300      	adds	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8004be0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004be4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	d501      	bpl.n	8004bf2 <MAX72_Print_Float+0x82>
 8004bee:	232d      	movs	r3, #45	@ 0x2d
 8004bf0:	e000      	b.n	8004bf4 <MAX72_Print_Float+0x84>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 8004bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	d504      	bpl.n	8004c0e <MAX72_Print_Float+0x9e>
 8004c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c08:	eef1 7a67 	vneg.f32	s15, s15
 8004c0c:	e001      	b.n	8004c12 <MAX72_Print_Float+0xa2>
 8004c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c12:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 8004c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1e:	ee17 3a90 	vmov	r3, s15
 8004c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 8004c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c36:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 8004c4e:	e00a      	b.n	8004c66 <MAX72_Print_Float+0xf6>
        temp /= 10;
 8004c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c52:	4a5d      	ldr	r2, [pc, #372]	@ (8004dc8 <MAX72_Print_Float+0x258>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8004c5c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004c60:	3301      	adds	r3, #1
 8004c62:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	2b09      	cmp	r3, #9
 8004c6a:	d8f1      	bhi.n	8004c50 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 8004c6c:	7efb      	ldrb	r3, [r7, #27]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	4293      	cmp	r3, r2
 8004c94:	bf28      	it	cs
 8004c96:	4613      	movcs	r3, r2
 8004c98:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11b      	bne.n	8004cd8 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 8004ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4a48      	ldr	r2, [pc, #288]	@ (8004dcc <MAX72_Print_Float+0x25c>)
 8004caa:	4619      	mov	r1, r3
 8004cac:	69f8      	ldr	r0, [r7, #28]
 8004cae:	f008 f981 	bl	800cfb4 <sniprintf>
 8004cb2:	e079      	b.n	8004da8 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8004cb4:	7efb      	ldrb	r3, [r7, #27]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 8004cba:	7efa      	ldrb	r2, [r7, #27]
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	4a43      	ldr	r2, [pc, #268]	@ (8004dd0 <MAX72_Print_Float+0x260>)
 8004cc4:	69f8      	ldr	r0, [r7, #28]
 8004cc6:	f008 f975 	bl	800cfb4 <sniprintf>
 8004cca:	e06d      	b.n	8004da8 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	4a41      	ldr	r2, [pc, #260]	@ (8004dd4 <MAX72_Print_Float+0x264>)
 8004cd0:	69f8      	ldr	r0, [r7, #28]
 8004cd2:	f008 f96f 	bl	800cfb4 <sniprintf>
 8004cd6:	e067      	b.n	8004da8 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004ce2:	e00a      	b.n	8004cfa <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 8004ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8004cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004cfa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004cfe:	7bbb      	ldrb	r3, [r7, #14]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3ef      	bcc.n	8004ce4 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d22:	ee17 3a90 	vmov	r3, s15
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 8004d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d304      	bcc.n	8004d3a <MAX72_Print_Float+0x1ca>
            int_part++;
 8004d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d32:	3301      	adds	r3, #1
 8004d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d118      	bne.n	8004d72 <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8004d40:	7efb      	ldrb	r3, [r7, #27]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 8004d46:	4608      	mov	r0, r1
 8004d48:	7ef9      	ldrb	r1, [r7, #27]
 8004d4a:	7bbb      	ldrb	r3, [r7, #14]
 8004d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d4e:	9201      	str	r2, [sp, #4]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	460b      	mov	r3, r1
 8004d54:	4a20      	ldr	r2, [pc, #128]	@ (8004dd8 <MAX72_Print_Float+0x268>)
 8004d56:	4601      	mov	r1, r0
 8004d58:	69f8      	ldr	r0, [r7, #28]
 8004d5a:	f008 f92b 	bl	800cfb4 <sniprintf>
 8004d5e:	e023      	b.n	8004da8 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8004d60:	7bba      	ldrb	r2, [r7, #14]
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	4a1c      	ldr	r2, [pc, #112]	@ (8004ddc <MAX72_Print_Float+0x26c>)
 8004d6a:	69f8      	ldr	r0, [r7, #28]
 8004d6c:	f008 f922 	bl	800cfb4 <sniprintf>
 8004d70:	e01a      	b.n	8004da8 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 8004d72:	7efb      	ldrb	r3, [r7, #27]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00e      	beq.n	8004d96 <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8004d78:	4608      	mov	r0, r1
 8004d7a:	7ef9      	ldrb	r1, [r7, #27]
 8004d7c:	7bbb      	ldrb	r3, [r7, #14]
 8004d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d80:	9202      	str	r2, [sp, #8]
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <MAX72_Print_Float+0x270>)
 8004d8c:	4601      	mov	r1, r0
 8004d8e:	69f8      	ldr	r0, [r7, #28]
 8004d90:	f008 f910 	bl	800cfb4 <sniprintf>
 8004d94:	e008      	b.n	8004da8 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d9a:	9201      	str	r2, [sp, #4]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	4a10      	ldr	r2, [pc, #64]	@ (8004de4 <MAX72_Print_Float+0x274>)
 8004da2:	69f8      	ldr	r0, [r7, #28]
 8004da4:	f008 f906 	bl	800cfb4 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MAX72_Print_Float+0x242>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e000      	b.n	8004db4 <MAX72_Print_Float+0x244>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4619      	mov	r1, r3
 8004db6:	69f8      	ldr	r0, [r7, #28]
 8004db8:	f7ff fbfe 	bl	80045b8 <MAX72_Print_String>
 8004dbc:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8004dbe:	bf00      	nop
 8004dc0:	3744      	adds	r7, #68	@ 0x44
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dc8:	cccccccd 	.word	0xcccccccd
 8004dcc:	080113e0 	.word	0x080113e0
 8004dd0:	080113e4 	.word	0x080113e4
 8004dd4:	080113dc 	.word	0x080113dc
 8004dd8:	080113ec 	.word	0x080113ec
 8004ddc:	080113f4 	.word	0x080113f4
 8004de0:	080113fc 	.word	0x080113fc
 8004de4:	08011408 	.word	0x08011408

08004de8 <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 8004dee:	2301      	movs	r3, #1
 8004df0:	71fb      	strb	r3, [r7, #7]
 8004df2:	e020      	b.n	8004e36 <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8004df4:	2300      	movs	r3, #0
 8004df6:	71bb      	strb	r3, [r7, #6]
 8004df8:	e011      	b.n	8004e1e <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	1e59      	subs	r1, r3, #1
 8004dfe:	79bb      	ldrb	r3, [r7, #6]
 8004e00:	f1c3 0203 	rsb	r2, r3, #3
 8004e04:	79bb      	ldrb	r3, [r7, #6]
 8004e06:	4810      	ldr	r0, [pc, #64]	@ (8004e48 <MAX72_SendFrame+0x60>)
 8004e08:	0089      	lsls	r1, r1, #2
 8004e0a:	4401      	add	r1, r0
 8004e0c:	440a      	add	r2, r1
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	443b      	add	r3, r7
 8004e14:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8004e18:	79bb      	ldrb	r3, [r7, #6]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	71bb      	strb	r3, [r7, #6]
 8004e1e:	79bb      	ldrb	r3, [r7, #6]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d9ea      	bls.n	8004dfa <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 8004e24:	463a      	mov	r2, r7
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff f9da 	bl	80041e4 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	3301      	adds	r3, #1
 8004e34:	71fb      	strb	r3, [r7, #7]
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d9db      	bls.n	8004df4 <MAX72_SendFrame+0xc>
    }
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000d58 	.word	0x20000d58

08004e4c <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 8004e54:	2220      	movs	r2, #32
 8004e56:	2100      	movs	r1, #0
 8004e58:	482d      	ldr	r0, [pc, #180]	@ (8004f10 <MAX72_Scroll_Start_IT+0xc4>)
 8004e5a:	f008 f946 	bl	800d0ea <memset>
    MAX72_SendFrame();
 8004e5e:	f7ff ffc3 	bl	8004de8 <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 8004e62:	4a2c      	ldr	r2, [pc, #176]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 8004e68:	4b2a      	ldr	r3, [pc, #168]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004e6e:	4b29      	ldr	r3, [pc, #164]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a28      	ldr	r2, [pc, #160]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e74:	6852      	ldr	r2, [r2, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b1f      	cmp	r3, #31
 8004e7c:	d90e      	bls.n	8004e9c <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8004e7e:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a24      	ldr	r2, [pc, #144]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e84:	6852      	ldr	r2, [r2, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004e8a:	2b7e      	cmp	r3, #126	@ 0x7e
 8004e8c:	d806      	bhi.n	8004e9c <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 8004e8e:	4b21      	ldr	r3, [pc, #132]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004e94:	6852      	ldr	r2, [r2, #4]
 8004e96:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	e000      	b.n	8004e9e <MAX72_Scroll_Start_IT+0x52>
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004ea0:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8004eae:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8004eb4:	4b17      	ldr	r3, [pc, #92]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 8004eba:	4b16      	ldr	r3, [pc, #88]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8004ec0:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <MAX72_Scroll_Start_IT+0xc8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fa02 	bl	80002d0 <strlen>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8004ed0:	7bbb      	ldrb	r3, [r7, #14]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	0052      	lsls	r2, r2, #1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 8004ee0:	7b7b      	ldrb	r3, [r7, #13]
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	bf28      	it	cs
 8004ee6:	2320      	movcs	r3, #32
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	3b08      	subs	r3, #8
 8004eec:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e004      	b.n	8004efe <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 8004ef4:	f000 f81c 	bl	8004f30 <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	3301      	adds	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	7b3b      	ldrb	r3, [r7, #12]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3f6      	bcc.n	8004ef4 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000d58 	.word	0x20000d58
 8004f14:	20000d78 	.word	0x20000d78

08004f18 <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 8004f1c:	4b03      	ldr	r3, [pc, #12]	@ (8004f2c <MAX72_Scroll_Stop+0x14>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	735a      	strb	r2, [r3, #13]
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000d78 	.word	0x20000d78

08004f30 <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b08b      	sub	sp, #44	@ 0x2c
 8004f34:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 8004f36:	4b8a      	ldr	r3, [pc, #552]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004f38:	7b5b      	ldrb	r3, [r3, #13]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8183 	beq.w	8005246 <MAX72_Scroll_Process+0x316>
 8004f40:	4b87      	ldr	r3, [pc, #540]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 817e 	beq.w	8005246 <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 8004f4a:	4b85      	ldr	r3, [pc, #532]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004f4c:	7b9b      	ldrb	r3, [r3, #14]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 8004f52:	4b83      	ldr	r3, [pc, #524]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 8004f58:	4b81      	ldr	r3, [pc, #516]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004f5a:	7b1b      	ldrb	r3, [r3, #12]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	f000 80f6 	beq.w	800514e <MAX72_Scroll_Process+0x21e>
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	f300 816c 	bgt.w	8005240 <MAX72_Scroll_Process+0x310>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <MAX72_Scroll_Process+0x42>
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d072      	beq.n	8005056 <MAX72_Scroll_Process+0x126>
 8004f70:	e166      	b.n	8005240 <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 8004f72:	4b7b      	ldr	r3, [pc, #492]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004f74:	7a1b      	ldrb	r3, [r3, #8]
 8004f76:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 8004f78:	7b7b      	ldrb	r3, [r7, #13]
 8004f7a:	f1a3 0220 	sub.w	r2, r3, #32
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	4a77      	ldr	r2, [pc, #476]	@ (8005164 <MAX72_Scroll_Process+0x234>)
 8004f86:	4413      	add	r3, r2
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004f92:	e047      	b.n	8005024 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8004f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8004fa2:	7a5b      	ldrb	r3, [r3, #9]
 8004fa4:	fa42 f303 	asr.w	r3, r2, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	e02b      	b.n	8005014 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fc0:	4a69      	ldr	r2, [pc, #420]	@ (8005168 <MAX72_Scroll_Process+0x238>)
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	4413      	add	r3, r2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fd6:	4a64      	ldr	r2, [pc, #400]	@ (8005168 <MAX72_Scroll_Process+0x238>)
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	b25a      	sxtb	r2, r3
 8004fe8:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8004fec:	01db      	lsls	r3, r3, #7
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b25a      	sxtb	r2, r3
 8004ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ff8:	b2d1      	uxtb	r1, r2
 8004ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8005168 <MAX72_Scroll_Process+0x238>)
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	4413      	add	r3, r2
 8005004:	460a      	mov	r2, r1
 8005006:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8005008:	79bb      	ldrb	r3, [r7, #6]
 800500a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	3b01      	subs	r3, #1
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	dad0      	bge.n	8004fbc <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 800501a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800501e:	3301      	adds	r3, #1
 8005020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005028:	2b07      	cmp	r3, #7
 800502a:	d9b3      	bls.n	8004f94 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 800502c:	4b4c      	ldr	r3, [pc, #304]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 800502e:	7a5b      	ldrb	r3, [r3, #9]
 8005030:	3301      	adds	r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	4b4a      	ldr	r3, [pc, #296]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005036:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 8005038:	4b49      	ldr	r3, [pc, #292]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 800503a:	7a5b      	ldrb	r3, [r3, #9]
 800503c:	2b04      	cmp	r3, #4
 800503e:	f240 80fa 	bls.w	8005236 <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 8005042:	4b47      	ldr	r3, [pc, #284]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005044:	2200      	movs	r2, #0
 8005046:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8005048:	4b45      	ldr	r3, [pc, #276]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 800504a:	2200      	movs	r2, #0
 800504c:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 800504e:	4b44      	ldr	r3, [pc, #272]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005050:	2201      	movs	r2, #1
 8005052:	731a      	strb	r2, [r3, #12]
            }
            break;
 8005054:	e0ef      	b.n	8005236 <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8005056:	2300      	movs	r3, #0
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e032      	b.n	80050c2 <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8005060:	2303      	movs	r3, #3
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e027      	b.n	80050b6 <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8005066:	7ffb      	ldrb	r3, [r7, #31]
 8005068:	4a3f      	ldr	r2, [pc, #252]	@ (8005168 <MAX72_Scroll_Process+0x238>)
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4413      	add	r3, r2
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 800507a:	7ffb      	ldrb	r3, [r7, #31]
 800507c:	4a3a      	ldr	r2, [pc, #232]	@ (8005168 <MAX72_Scroll_Process+0x238>)
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	b25a      	sxtb	r2, r3
 800508e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005092:	01db      	lsls	r3, r3, #7
 8005094:	b25b      	sxtb	r3, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	b25a      	sxtb	r2, r3
 800509a:	7ffb      	ldrb	r3, [r7, #31]
 800509c:	b2d1      	uxtb	r1, r2
 800509e:	4a32      	ldr	r2, [pc, #200]	@ (8005168 <MAX72_Scroll_Process+0x238>)
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	4413      	add	r3, r2
 80050a8:	460a      	mov	r2, r1
 80050aa:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dad4      	bge.n	8005066 <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 80050bc:	7ffb      	ldrb	r3, [r7, #31]
 80050be:	3301      	adds	r3, #1
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	7ffb      	ldrb	r3, [r7, #31]
 80050c4:	2b07      	cmp	r3, #7
 80050c6:	d9c9      	bls.n	800505c <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 80050c8:	4b25      	ldr	r3, [pc, #148]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050ca:	7a9b      	ldrb	r3, [r3, #10]
 80050cc:	3301      	adds	r3, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	4b23      	ldr	r3, [pc, #140]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050d2:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 80050d4:	4b22      	ldr	r3, [pc, #136]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050d6:	7a9b      	ldrb	r3, [r3, #10]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80ae 	beq.w	800523a <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 80050de:	4b20      	ldr	r3, [pc, #128]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 80050e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	3301      	adds	r3, #1
 80050ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050ec:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 80050ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	461c      	mov	r4, r3
 80050f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb f8e9 	bl	80002d0 <strlen>
 80050fe:	4603      	mov	r3, r0
 8005100:	429c      	cmp	r4, r3
 8005102:	d306      	bcc.n	8005112 <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 8005104:	4b16      	ldr	r3, [pc, #88]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005106:	2202      	movs	r2, #2
 8005108:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 800510a:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 800510c:	2200      	movs	r2, #0
 800510e:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 8005110:	e093      	b.n	800523a <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8005112:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005118:	6852      	ldr	r2, [r2, #4]
 800511a:	4413      	add	r3, r2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b1f      	cmp	r3, #31
 8005120:	d90e      	bls.n	8005140 <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8005122:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0e      	ldr	r2, [pc, #56]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005128:	6852      	ldr	r2, [r2, #4]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800512e:	2b7e      	cmp	r3, #126	@ 0x7e
 8005130:	d806      	bhi.n	8005140 <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 8005132:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a0a      	ldr	r2, [pc, #40]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005138:	6852      	ldr	r2, [r2, #4]
 800513a:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	e000      	b.n	8005142 <MAX72_Scroll_Process+0x212>
 8005140:	2320      	movs	r3, #32
 8005142:	4a07      	ldr	r2, [pc, #28]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005144:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 8005146:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <MAX72_Scroll_Process+0x230>)
 8005148:	2200      	movs	r2, #0
 800514a:	731a      	strb	r2, [r3, #12]
            break;
 800514c:	e075      	b.n	800523a <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
 8005152:	e039      	b.n	80051c8 <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8005158:	2303      	movs	r3, #3
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	e02e      	b.n	80051bc <MAX72_Scroll_Process+0x28c>
 800515e:	bf00      	nop
 8005160:	20000d78 	.word	0x20000d78
 8005164:	2000000c 	.word	0x2000000c
 8005168:	20000d58 	.word	0x20000d58
                    uint8_t next_carry = frame[row][d] & 0x01;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	4a38      	ldr	r2, [pc, #224]	@ (8005250 <MAX72_Scroll_Process+0x320>)
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	4a33      	ldr	r2, [pc, #204]	@ (8005250 <MAX72_Scroll_Process+0x320>)
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	b25a      	sxtb	r2, r3
 8005194:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005198:	01db      	lsls	r3, r3, #7
 800519a:	b25b      	sxtb	r3, r3
 800519c:	4313      	orrs	r3, r2
 800519e:	b25a      	sxtb	r2, r3
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	b2d1      	uxtb	r1, r2
 80051a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005250 <MAX72_Scroll_Process+0x320>)
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	460a      	mov	r2, r1
 80051b0:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dad4      	bge.n	800516c <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	3301      	adds	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b07      	cmp	r3, #7
 80051cc:	d9c2      	bls.n	8005154 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 80051ce:	4b21      	ldr	r3, [pc, #132]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051d0:	7adb      	ldrb	r3, [r3, #11]
 80051d2:	3301      	adds	r3, #1
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051d8:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 80051da:	4b1e      	ldr	r3, [pc, #120]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051dc:	7adb      	ldrb	r3, [r3, #11]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d92d      	bls.n	800523e <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80051e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051ee:	6852      	ldr	r2, [r2, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b1f      	cmp	r3, #31
 80051f6:	d90e      	bls.n	8005216 <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80051f8:	4b16      	ldr	r3, [pc, #88]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 80051fe:	6852      	ldr	r2, [r2, #4]
 8005200:	4413      	add	r3, r2
 8005202:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8005204:	2b7e      	cmp	r3, #126	@ 0x7e
 8005206:	d806      	bhi.n	8005216 <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 8005208:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a11      	ldr	r2, [pc, #68]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 800520e:	6852      	ldr	r2, [r2, #4]
 8005210:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	e000      	b.n	8005218 <MAX72_Scroll_Process+0x2e8>
 8005216:	2320      	movs	r3, #32
 8005218:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 800521a:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 800521c:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 800521e:	2200      	movs	r2, #0
 8005220:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 8005224:	2200      	movs	r2, #0
 8005226:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 8005228:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 800522a:	2200      	movs	r2, #0
 800522c:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <MAX72_Scroll_Process+0x324>)
 8005230:	2200      	movs	r2, #0
 8005232:	731a      	strb	r2, [r3, #12]
            }
            break;
 8005234:	e003      	b.n	800523e <MAX72_Scroll_Process+0x30e>
            break;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <MAX72_Scroll_Process+0x310>
            break;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <MAX72_Scroll_Process+0x310>
            break;
 800523e:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 8005240:	f7ff fdd2 	bl	8004de8 <MAX72_SendFrame>
 8005244:	e000      	b.n	8005248 <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 8005246:	bf00      	nop
}
 8005248:	372c      	adds	r7, #44	@ 0x2c
 800524a:	46bd      	mov	sp, r7
 800524c:	bd90      	pop	{r4, r7, pc}
 800524e:	bf00      	nop
 8005250:	20000d58 	.word	0x20000d58
 8005254:	20000d78 	.word	0x20000d78

08005258 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8005258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800525c:	f7fc fdc4 	bl	8001de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005260:	480c      	ldr	r0, [pc, #48]	@ (8005294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005262:	490d      	ldr	r1, [pc, #52]	@ (8005298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005264:	4a0d      	ldr	r2, [pc, #52]	@ (800529c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005268:	e002      	b.n	8005270 <LoopCopyDataInit>

0800526a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800526a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800526c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800526e:	3304      	adds	r3, #4

08005270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005274:	d3f9      	bcc.n	800526a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005276:	4a0a      	ldr	r2, [pc, #40]	@ (80052a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005278:	4c0a      	ldr	r4, [pc, #40]	@ (80052a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800527a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800527c:	e001      	b.n	8005282 <LoopFillZerobss>

0800527e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800527e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005280:	3204      	adds	r2, #4

08005282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005284:	d3fb      	bcc.n	800527e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005286:	f007 ff89 	bl	800d19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800528a:	f7fc f993 	bl	80015b4 <main>
  bx  lr    
 800528e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8005290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005298:	20000594 	.word	0x20000594
  ldr r2, =_sidata
 800529c:	080118c4 	.word	0x080118c4
  ldr r2, =_sbss
 80052a0:	20000594 	.word	0x20000594
  ldr r4, =_ebss
 80052a4:	20000ed8 	.word	0x20000ed8

080052a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052a8:	e7fe      	b.n	80052a8 <ADC_IRQHandler>

080052aa <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	817b      	strh	r3, [r7, #10]
 80052b8:	4613      	mov	r3, r2
 80052ba:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	897a      	ldrh	r2, [r7, #10]
 80052c0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	893a      	ldrh	r2, [r7, #8]
 80052c6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	605a      	str	r2, [r3, #4]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80052da:	b480      	push	{r7}
 80052dc:	b09b      	sub	sp, #108	@ 0x6c
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	623b      	str	r3, [r7, #32]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	885b      	ldrh	r3, [r3, #2]
 80052fa:	61fb      	str	r3, [r7, #28]

#if defined (ARM_MATH_DSP)

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k,l;      /* loop counters */
 8005302:	2300      	movs	r3, #0
 8005304:	63fb      	str	r3, [r7, #60]	@ 0x3c
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800530e:	e029      	b.n	8005364 <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8005318:	e008      	b.n	800532c <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 800531a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
        j--;
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	3b01      	subs	r3, #1
 800532a:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f3      	bne.n	800531a <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8005332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005334:	1d1a      	adds	r2, r3, #4
 8005336:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005338:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800533c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800533e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005340:	3b01      	subs	r3, #1
 8005342:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8005344:	e008      	b.n	8005358 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 8005346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
        j--;
 8005352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005354:	3b01      	subs	r3, #1
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f3      	bne.n	8005346 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement loop counter */
      rowCnt--;
 800535e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005360:	3b01      	subs	r3, #1
 8005362:	643b      	str	r3, [r7, #64]	@ 0x40
    while (rowCnt > 0U)
 8005364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1d2      	bne.n	8005310 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Index modifier to navigate through the columns */
    l = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (loopCnt > 0U)
 8005372:	e13b      	b.n	80055ec <arm_mat_inverse_f32+0x312>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005380:	4413      	add	r3, r2
 8005382:	663b      	str	r3, [r7, #96]	@ 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	fb02 f303 	mul.w	r3, r2, r3
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005390:	4413      	add	r3, r2
 8005392:	65bb      	str	r3, [r7, #88]	@ 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 8005394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48

    

      /* Check if the pivot element is zero */
      if (*pInT1 == 0.0f)
 800539a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800539c:	edd3 7a00 	vldr	s15, [r3]
 80053a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	d156      	bne.n	8005458 <arm_mat_inverse_f32+0x17e>
      {
        /* Loop over the number rows present below */

        for (i = 1U; i < numRows - l; i++)
 80053aa:	2301      	movs	r3, #1
 80053ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ae:	e04d      	b.n	800544c <arm_mat_inverse_f32+0x172>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * i);
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b4:	fb02 f303 	mul.w	r3, r2, r3
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053bc:	4413      	add	r3, r2
 80053be:	65fb      	str	r3, [r7, #92]	@ 0x5c
          pOutT2 = pOutT1 + (numCols * i);
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053cc:	4413      	add	r3, r2
 80053ce:	657b      	str	r3, [r7, #84]	@ 0x54

          /* Check if there is a non zero pivot element to
           * replace in the rows below */
          if (*pInT2 != 0.0f)
 80053d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053d2:	edd3 7a00 	vldr	s15, [r3]
 80053d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d032      	beq.n	8005446 <arm_mat_inverse_f32+0x16c>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	63bb      	str	r3, [r7, #56]	@ 0x38

            while (j > 0U)
 80053e8:	e010      	b.n	800540c <arm_mat_inverse_f32+0x132>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 80053ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	61bb      	str	r3, [r7, #24]
              *pInT2++ = *pInT1;
 80053f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80053f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 80053fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053fe:	1d1a      	adds	r2, r3, #4
 8005400:	663a      	str	r2, [r7, #96]	@ 0x60
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	3b01      	subs	r3, #1
 800540a:	63bb      	str	r3, [r7, #56]	@ 0x38
            while (j > 0U)
 800540c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1eb      	bne.n	80053ea <arm_mat_inverse_f32+0x110>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	63bb      	str	r3, [r7, #56]	@ 0x38

            while (j > 0U)
 8005416:	e010      	b.n	800543a <arm_mat_inverse_f32+0x160>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8005418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	61bb      	str	r3, [r7, #24]
              *pOutT2++ = *pOutT1;
 800541e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005420:	1d1a      	adds	r2, r3, #4
 8005422:	657a      	str	r2, [r7, #84]	@ 0x54
 8005424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800542a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	601a      	str	r2, [r3, #0]

              /* Decrement loop counter */
              j--;
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	3b01      	subs	r3, #1
 8005438:	63bb      	str	r3, [r7, #56]	@ 0x38
            while (j > 0U)
 800543a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1eb      	bne.n	8005418 <arm_mat_inverse_f32+0x13e>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8005440:	2301      	movs	r3, #1
 8005442:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Break after exchange is done */
            break;
 8005444:	e008      	b.n	8005458 <arm_mat_inverse_f32+0x17e>
        for (i = 1U; i < numRows - l; i++)
 8005446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005448:	3301      	adds	r3, #1
 800544a:	647b      	str	r3, [r7, #68]	@ 0x44
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005454:	429a      	cmp	r2, r3
 8005456:	d3ab      	bcc.n	80053b0 <arm_mat_inverse_f32+0xd6>
          /* Decrement loop counter */
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 8005458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d009      	beq.n	8005472 <arm_mat_inverse_f32+0x198>
 800545e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005462:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	d102      	bne.n	8005472 <arm_mat_inverse_f32+0x198>
      {
        return ARM_MATH_SINGULAR;
 800546c:	f06f 0304 	mvn.w	r3, #4
 8005470:	e0f6      	b.n	8005660 <arm_mat_inverse_f32+0x386>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800547e:	4413      	add	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
      pPivotRowDst = pOut + (l * numCols);
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800548e:	4413      	add	r3, r2
 8005490:	613b      	str	r3, [r7, #16]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	663b      	str	r3, [r7, #96]	@ 0x60
      pInT2 = pPivotRowDst;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	65fb      	str	r3, [r7, #92]	@ 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	63bb      	str	r3, [r7, #56]	@ 0x38

      while (j > 0U)
 80054a8:	e010      	b.n	80054cc <arm_mat_inverse_f32+0x1f2>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80054aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
        *pInT1++ = in1 / in;
 80054b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	663a      	str	r2, [r7, #96]	@ 0x60
 80054b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80054ba:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80054be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c2:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	3b01      	subs	r3, #1
 80054ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 80054cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1eb      	bne.n	80054aa <arm_mat_inverse_f32+0x1d0>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	63bb      	str	r3, [r7, #56]	@ 0x38

      while (j > 0U)
 80054d6:	e010      	b.n	80054fa <arm_mat_inverse_f32+0x220>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 80054d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
        *pInT2++ = in1 / in;
 80054de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80054e4:	edd7 6a03 	vldr	s13, [r7, #12]
 80054e8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80054ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f0:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 80054f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f6:	3b01      	subs	r3, #1
 80054f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1eb      	bne.n	80054d8 <arm_mat_inverse_f32+0x1fe>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8005500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005502:	663b      	str	r3, [r7, #96]	@ 0x60
      pInT2 = pOut;
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	65fb      	str	r3, [r7, #92]	@ 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30

      while (k > 0U)
 8005510:	e060      	b.n	80055d4 <arm_mat_inverse_f32+0x2fa>
      {
        /* Check for the pivot element */
        if (i == l)
 8005512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	429a      	cmp	r2, r3
 8005518:	d10c      	bne.n	8005534 <arm_mat_inverse_f32+0x25a>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005524:	4413      	add	r3, r2
 8005526:	663b      	str	r3, [r7, #96]	@ 0x60

          pInT2 += numCols;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800552e:	4413      	add	r3, r2
 8005530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005532:	e044      	b.n	80055be <arm_mat_inverse_f32+0x2e4>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8005534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	64bb      	str	r3, [r7, #72]	@ 0x48

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	653b      	str	r3, [r7, #80]	@ 0x50
          pPRT_pDst = pPivotRowDst;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	64fb      	str	r3, [r7, #76]	@ 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	63bb      	str	r3, [r7, #56]	@ 0x38

          while (j > 0U)
 800554a:	e017      	b.n	800557c <arm_mat_inverse_f32+0x2a2>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 800554c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8005552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005554:	1d1a      	adds	r2, r3, #4
 8005556:	653a      	str	r2, [r7, #80]	@ 0x50
 8005558:	ed93 7a00 	vldr	s14, [r3]
 800555c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	663a      	str	r2, [r7, #96]	@ 0x60
 800556a:	ed97 7a03 	vldr	s14, [r7, #12]
 800556e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005572:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	3b01      	subs	r3, #1
 800557a:	63bb      	str	r3, [r7, #56]	@ 0x38
          while (j > 0U)
 800557c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e4      	bne.n	800554c <arm_mat_inverse_f32+0x272>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	63bb      	str	r3, [r7, #56]	@ 0x38

          while (j > 0U)
 8005586:	e017      	b.n	80055b8 <arm_mat_inverse_f32+0x2de>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8005588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 800558e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005590:	1d1a      	adds	r2, r3, #4
 8005592:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005594:	ed93 7a00 	vldr	s14, [r3]
 8005598:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a2:	1d1a      	adds	r2, r3, #4
 80055a4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80055a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80055aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ae:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement loop counter */
            j--;
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	3b01      	subs	r3, #1
 80055b6:	63bb      	str	r3, [r7, #56]	@ 0x38
          while (j > 0U)
 80055b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e4      	bne.n	8005588 <arm_mat_inverse_f32+0x2ae>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055c4:	4413      	add	r3, r2
 80055c6:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Decrement loop counter */
        k--;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	3b01      	subs	r3, #1
 80055cc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment pivot index */
        i++;
 80055ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d0:	3301      	adds	r3, #1
 80055d2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (k > 0U)
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d19b      	bne.n	8005512 <arm_mat_inverse_f32+0x238>
      }

      /* Increment the input pointer */
      pIn++;
 80055da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055dc:	3304      	adds	r3, #4
 80055de:	667b      	str	r3, [r7, #100]	@ 0x64

      /* Decrement the loop counter */
      loopCnt--;
 80055e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e2:	3b01      	subs	r3, #1
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Increment the index modifier */
      l++;
 80055e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e8:	3301      	adds	r3, #1
 80055ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (loopCnt > 0U)
 80055ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f47f aec0 	bne.w	8005374 <arm_mat_inverse_f32+0x9a>
    }

#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if ((flag != 1U) && (in == 0.0f))
 80055fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d02d      	beq.n	800565c <arm_mat_inverse_f32+0x382>
 8005600:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005604:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	d126      	bne.n	800565c <arm_mat_inverse_f32+0x382>
    {
      pIn = pSrc->pData;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	647b      	str	r3, [r7, #68]	@ 0x44
 8005618:	e00d      	b.n	8005636 <arm_mat_inverse_f32+0x35c>
      {
        if (pIn[i] != 0.0f)
 800561a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005620:	4413      	add	r3, r2
 8005622:	edd3 7a00 	vldr	s15, [r3]
 8005626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562e:	d10a      	bne.n	8005646 <arm_mat_inverse_f32+0x36c>
      for (i = 0; i < numRows * numCols; i++)
 8005630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005632:	3301      	adds	r3, #1
 8005634:	647b      	str	r3, [r7, #68]	@ 0x44
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005640:	429a      	cmp	r2, r3
 8005642:	d3ea      	bcc.n	800561a <arm_mat_inverse_f32+0x340>
 8005644:	e000      	b.n	8005648 <arm_mat_inverse_f32+0x36e>
            break;
 8005646:	bf00      	nop
      }

      if (i == numRows * numCols)
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005652:	429a      	cmp	r2, r3
 8005654:	d102      	bne.n	800565c <arm_mat_inverse_f32+0x382>
        status = ARM_MATH_SINGULAR;
 8005656:	23fb      	movs	r3, #251	@ 0xfb
 8005658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
  }

  /* Return to application */
  return (status);
 800565c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
}
 8005660:	4618      	mov	r0, r3
 8005662:	376c      	adds	r7, #108	@ 0x6c
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800566c:	b480      	push	{r7}
 800566e:	b093      	sub	sp, #76	@ 0x4c
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	885b      	ldrh	r3, [r3, #2]
 80056a0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	885b      	ldrh	r3, [r3, #2]
 80056a6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80056a8:	2300      	movs	r3, #0
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ac:	8b7b      	ldrh	r3, [r7, #26]
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80056b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80056ba:	8b3b      	ldrh	r3, [r7, #24]
 80056bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80056ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056cc:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80056d2:	e017      	b.n	8005704 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80056d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	647a      	str	r2, [r7, #68]	@ 0x44
 80056da:	ed93 7a00 	vldr	s14, [r3]
 80056de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e0:	edd3 7a00 	vldr	s15, [r3]
 80056e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80056ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056f0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 80056f4:	8b3b      	ldrh	r3, [r7, #24]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056fa:	4413      	add	r3, r2
 80056fc:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	3b01      	subs	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e4      	bne.n	80056d4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	1d1a      	adds	r2, r3, #4
 800570e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005712:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	3b01      	subs	r3, #1
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800571a:	8b3a      	ldrh	r2, [r7, #24]
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	4413      	add	r3, r2
 8005726:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ca      	bne.n	80056c4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800572e:	8b3b      	ldrh	r3, [r7, #24]
 8005730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005732:	4413      	add	r3, r2
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8005736:	8afb      	ldrh	r3, [r7, #22]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800573c:	4413      	add	r3, r2
 800573e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8005740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005742:	3b01      	subs	r3, #1
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8005746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1b1      	bne.n	80056b0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800574c:	2300      	movs	r3, #0
 800574e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8005750:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8005754:	4618      	mov	r0, r3
 8005756:	374c      	adds	r7, #76	@ 0x4c
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005760:	b480      	push	{r7}
 8005762:	b08b      	sub	sp, #44	@ 0x2c
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	885b      	ldrh	r3, [r3, #2]
 8005780:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8005782:	89fb      	ldrh	r3, [r7, #14]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8005794:	89bb      	ldrh	r3, [r7, #12]
 8005796:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8005798:	e00d      	b.n	80057b6 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	1d1a      	adds	r2, r3, #4
 800579e:	627a      	str	r2, [r7, #36]	@ 0x24
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	4413      	add	r3, r2
 80057ae:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ee      	bne.n	800579a <arm_mat_trans_f32+0x3a>
      }

      i++;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3301      	adds	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1dd      	bne.n	800578a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80057ce:	2300      	movs	r3, #0
 80057d0:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80057d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	372c      	adds	r7, #44	@ 0x2c
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <HAL_Init+0x40>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005824 <HAL_Init+0x40>)
 80057ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_Init+0x40>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005824 <HAL_Init+0x40>)
 80057fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <HAL_Init+0x40>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a07      	ldr	r2, [pc, #28]	@ (8005824 <HAL_Init+0x40>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800580c:	2003      	movs	r0, #3
 800580e:	f000 fd5f 	bl	80062d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005812:	2000      	movs	r0, #0
 8005814:	f000 f808 	bl	8005828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005818:	f7fc f96c 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40023c00 	.word	0x40023c00

08005828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005830:	4b12      	ldr	r3, [pc, #72]	@ (800587c <HAL_InitTick+0x54>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_InitTick+0x58>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800583e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fd77 	bl	800633a <HAL_SYSTICK_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e00e      	b.n	8005874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b0f      	cmp	r3, #15
 800585a:	d80a      	bhi.n	8005872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800585c:	2200      	movs	r2, #0
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005864:	f000 fd3f 	bl	80062e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005868:	4a06      	ldr	r2, [pc, #24]	@ (8005884 <HAL_InitTick+0x5c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000004 	.word	0x20000004
 8005880:	200003c8 	.word	0x200003c8
 8005884:	200003c4 	.word	0x200003c4

08005888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_IncTick+0x20>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <HAL_IncTick+0x24>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4413      	add	r3, r2
 8005898:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <HAL_IncTick+0x24>)
 800589a:	6013      	str	r3, [r2, #0]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	200003c8 	.word	0x200003c8
 80058ac:	20000d88 	.word	0x20000d88

080058b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return uwTick;
 80058b4:	4b03      	ldr	r3, [pc, #12]	@ (80058c4 <HAL_GetTick+0x14>)
 80058b6:	681b      	ldr	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000d88 	.word	0x20000d88

080058c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058d0:	f7ff ffee 	bl	80058b0 <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e0:	d005      	beq.n	80058ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <HAL_Delay+0x44>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058ee:	bf00      	nop
 80058f0:	f7ff ffde 	bl	80058b0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d8f7      	bhi.n	80058f0 <HAL_Delay+0x28>
  {
  }
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	200003c8 	.word	0x200003c8

08005910 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e033      	b.n	800598e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb fbf8 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d118      	bne.n	8005980 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005956:	f023 0302 	bic.w	r3, r3, #2
 800595a:	f043 0202 	orr.w	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fae8 	bl	8005f38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	@ 0x40
 800597e:	e001      	b.n	8005984 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_ADC_Start+0x1a>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e0b2      	b.n	8005b18 <HAL_ADC_Start+0x180>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d018      	beq.n	80059fa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059d8:	4b52      	ldr	r3, [pc, #328]	@ (8005b24 <HAL_ADC_Start+0x18c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a52      	ldr	r2, [pc, #328]	@ (8005b28 <HAL_ADC_Start+0x190>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	0c9a      	lsrs	r2, r3, #18
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80059ec:	e002      	b.n	80059f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f9      	bne.n	80059ee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d17a      	bne.n	8005afe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005a32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a46:	d106      	bne.n	8005a56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4c:	f023 0206 	bic.w	r2, r3, #6
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a54:	e002      	b.n	8005a5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a64:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <HAL_ADC_Start+0x194>)
 8005a66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005a70:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d12a      	bne.n	8005ad4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2b      	ldr	r2, [pc, #172]	@ (8005b30 <HAL_ADC_Start+0x198>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d015      	beq.n	8005ab4 <HAL_ADC_Start+0x11c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a29      	ldr	r2, [pc, #164]	@ (8005b34 <HAL_ADC_Start+0x19c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d105      	bne.n	8005a9e <HAL_ADC_Start+0x106>
 8005a92:	4b26      	ldr	r3, [pc, #152]	@ (8005b2c <HAL_ADC_Start+0x194>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a25      	ldr	r2, [pc, #148]	@ (8005b38 <HAL_ADC_Start+0x1a0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d136      	bne.n	8005b16 <HAL_ADC_Start+0x17e>
 8005aa8:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <HAL_ADC_Start+0x194>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d130      	bne.n	8005b16 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d129      	bne.n	8005b16 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ad0:	609a      	str	r2, [r3, #8]
 8005ad2:	e020      	b.n	8005b16 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <HAL_ADC_Start+0x198>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d11b      	bne.n	8005b16 <HAL_ADC_Start+0x17e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d114      	bne.n	8005b16 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	e00b      	b.n	8005b16 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	f043 0210 	orr.w	r2, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f043 0201 	orr.w	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20000004 	.word	0x20000004
 8005b28:	431bde83 	.word	0x431bde83
 8005b2c:	40012300 	.word	0x40012300
 8005b30:	40012000 	.word	0x40012000
 8005b34:	40012100 	.word	0x40012100
 8005b38:	40012200 	.word	0x40012200

08005b3c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_ADC_Stop+0x16>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e021      	b.n	8005b96 <HAL_ADC_Stop+0x5a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	f043 0201 	orr.w	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bbe:	d113      	bne.n	8005be8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bce:	d10b      	bne.n	8005be8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e063      	b.n	8005cb0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005be8:	f7ff fe62 	bl	80058b0 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bee:	e021      	b.n	8005c34 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bf6:	d01d      	beq.n	8005c34 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_ADC_PollForConversion+0x6c>
 8005bfe:	f7ff fe57 	bl	80058b0 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d212      	bcs.n	8005c34 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d00b      	beq.n	8005c34 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	f043 0204 	orr.w	r2, r3, #4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e03d      	b.n	8005cb0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d1d6      	bne.n	8005bf0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0212 	mvn.w	r2, #18
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d123      	bne.n	8005cae <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11f      	bne.n	8005cae <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d111      	bne.n	8005cae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_ADC_ConfigChannel+0x1c>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e113      	b.n	8005f18 <HAL_ADC_ConfigChannel+0x244>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	d925      	bls.n	8005d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68d9      	ldr	r1, [r3, #12]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	3b1e      	subs	r3, #30
 8005d16:	2207      	movs	r2, #7
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43da      	mvns	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	400a      	ands	r2, r1
 8005d24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68d9      	ldr	r1, [r3, #12]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4618      	mov	r0, r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4403      	add	r3, r0
 8005d3e:	3b1e      	subs	r3, #30
 8005d40:	409a      	lsls	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e022      	b.n	8005d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	2207      	movs	r2, #7
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43da      	mvns	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6919      	ldr	r1, [r3, #16]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	4618      	mov	r0, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4403      	add	r3, r0
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d824      	bhi.n	8005de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	3b05      	subs	r3, #5
 8005dac:	221f      	movs	r2, #31
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	400a      	ands	r2, r1
 8005dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	4618      	mov	r0, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3b05      	subs	r3, #5
 8005dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005de2:	e04c      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b0c      	cmp	r3, #12
 8005dea:	d824      	bhi.n	8005e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3b23      	subs	r3, #35	@ 0x23
 8005dfe:	221f      	movs	r2, #31
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	43da      	mvns	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	400a      	ands	r2, r1
 8005e0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	3b23      	subs	r3, #35	@ 0x23
 8005e28:	fa00 f203 	lsl.w	r2, r0, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e34:	e023      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	3b41      	subs	r3, #65	@ 0x41
 8005e48:	221f      	movs	r2, #31
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	400a      	ands	r2, r1
 8005e56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4618      	mov	r0, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	3b41      	subs	r3, #65	@ 0x41
 8005e72:	fa00 f203 	lsl.w	r2, r0, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e7e:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <HAL_ADC_ConfigChannel+0x250>)
 8005e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a28      	ldr	r2, [pc, #160]	@ (8005f28 <HAL_ADC_ConfigChannel+0x254>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10f      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d8>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b12      	cmp	r3, #18
 8005e92:	d10b      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <HAL_ADC_ConfigChannel+0x254>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d12b      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1c      	ldr	r2, [pc, #112]	@ (8005f2c <HAL_ADC_ConfigChannel+0x258>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <HAL_ADC_ConfigChannel+0x1f4>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b11      	cmp	r3, #17
 8005ec6:	d122      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a11      	ldr	r2, [pc, #68]	@ (8005f2c <HAL_ADC_ConfigChannel+0x258>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d111      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005eea:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <HAL_ADC_ConfigChannel+0x25c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <HAL_ADC_ConfigChannel+0x260>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	0c9a      	lsrs	r2, r3, #18
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f00:	e002      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f9      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40012300 	.word	0x40012300
 8005f28:	40012000 	.word	0x40012000
 8005f2c:	10000012 	.word	0x10000012
 8005f30:	20000004 	.word	0x20000004
 8005f34:	431bde83 	.word	0x431bde83

08005f38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f40:	4b79      	ldr	r3, [pc, #484]	@ (8006128 <ADC_Init+0x1f0>)
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6859      	ldr	r1, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	4a58      	ldr	r2, [pc, #352]	@ (800612c <ADC_Init+0x1f4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6899      	ldr	r1, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	e00f      	b.n	8006036 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006034:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0202 	bic.w	r2, r2, #2
 8006044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	7e1b      	ldrb	r3, [r3, #24]
 8006050:	005a      	lsls	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006072:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	3b01      	subs	r3, #1
 8006090:	035a      	lsls	r2, r3, #13
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	e007      	b.n	80060ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	051a      	lsls	r2, r3, #20
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80060e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060ee:	025a      	lsls	r2, r3, #9
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	029a      	lsls	r2, r3, #10
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40012300 	.word	0x40012300
 800612c:	0f000001 	.word	0x0f000001

08006130 <__NVIC_SetPriorityGrouping>:
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006140:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <__NVIC_SetPriorityGrouping+0x44>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800614c:	4013      	ands	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800615c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006162:	4a04      	ldr	r2, [pc, #16]	@ (8006174 <__NVIC_SetPriorityGrouping+0x44>)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	60d3      	str	r3, [r2, #12]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <__NVIC_GetPriorityGrouping>:
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <__NVIC_GetPriorityGrouping+0x18>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 0307 	and.w	r3, r3, #7
}
 8006186:	4618      	mov	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <__NVIC_EnableIRQ>:
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800619e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	db0b      	blt.n	80061be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	f003 021f 	and.w	r2, r3, #31
 80061ac:	4907      	ldr	r1, [pc, #28]	@ (80061cc <__NVIC_EnableIRQ+0x38>)
 80061ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	2001      	movs	r0, #1
 80061b6:	fa00 f202 	lsl.w	r2, r0, r2
 80061ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	e000e100 	.word	0xe000e100

080061d0 <__NVIC_SetPriority>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db0a      	blt.n	80061fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	490c      	ldr	r1, [pc, #48]	@ (800621c <__NVIC_SetPriority+0x4c>)
 80061ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	440b      	add	r3, r1
 80061f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80061f8:	e00a      	b.n	8006210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4908      	ldr	r1, [pc, #32]	@ (8006220 <__NVIC_SetPriority+0x50>)
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	3b04      	subs	r3, #4
 8006208:	0112      	lsls	r2, r2, #4
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	440b      	add	r3, r1
 800620e:	761a      	strb	r2, [r3, #24]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000e100 	.word	0xe000e100
 8006220:	e000ed00 	.word	0xe000ed00

08006224 <NVIC_EncodePriority>:
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	@ 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f1c3 0307 	rsb	r3, r3, #7
 800623e:	2b04      	cmp	r3, #4
 8006240:	bf28      	it	cs
 8006242:	2304      	movcs	r3, #4
 8006244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3304      	adds	r3, #4
 800624a:	2b06      	cmp	r3, #6
 800624c:	d902      	bls.n	8006254 <NVIC_EncodePriority+0x30>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3b03      	subs	r3, #3
 8006252:	e000      	b.n	8006256 <NVIC_EncodePriority+0x32>
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	401a      	ands	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800626c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	fa01 f303 	lsl.w	r3, r1, r3
 8006276:	43d9      	mvns	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800627c:	4313      	orrs	r3, r2
}
 800627e:	4618      	mov	r0, r3
 8006280:	3724      	adds	r7, #36	@ 0x24
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <SysTick_Config>:
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3b01      	subs	r3, #1
 8006298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800629c:	d301      	bcc.n	80062a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800629e:	2301      	movs	r3, #1
 80062a0:	e00f      	b.n	80062c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062a2:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <SysTick_Config+0x40>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062aa:	210f      	movs	r1, #15
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062b0:	f7ff ff8e 	bl	80061d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062b4:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <SysTick_Config+0x40>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ba:	4b04      	ldr	r3, [pc, #16]	@ (80062cc <SysTick_Config+0x40>)
 80062bc:	2207      	movs	r2, #7
 80062be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	e000e010 	.word	0xe000e010

080062d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff29 	bl	8006130 <__NVIC_SetPriorityGrouping>
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	4603      	mov	r3, r0
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062f8:	f7ff ff3e 	bl	8006178 <__NVIC_GetPriorityGrouping>
 80062fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f7ff ff8e 	bl	8006224 <NVIC_EncodePriority>
 8006308:	4602      	mov	r2, r0
 800630a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ff5d 	bl	80061d0 <__NVIC_SetPriority>
}
 8006316:	bf00      	nop
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	4603      	mov	r3, r0
 8006326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff31 	bl	8006194 <__NVIC_EnableIRQ>
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff ffa2 	bl	800628c <SysTick_Config>
 8006348:	4603      	mov	r3, r0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006360:	f7ff faa6 	bl	80058b0 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e099      	b.n	80064a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006390:	e00f      	b.n	80063b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006392:	f7ff fa8d 	bl	80058b0 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b05      	cmp	r3, #5
 800639e:	d908      	bls.n	80063b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2203      	movs	r2, #3
 80063aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e078      	b.n	80064a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e8      	bne.n	8006392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4b38      	ldr	r3, [pc, #224]	@ (80064ac <HAL_DMA_Init+0x158>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	2b04      	cmp	r3, #4
 800640a:	d107      	bne.n	800641c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006414:	4313      	orrs	r3, r2
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0307 	bic.w	r3, r3, #7
 8006432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	2b04      	cmp	r3, #4
 8006444:	d117      	bne.n	8006476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb0d 	bl	8006a78 <DMA_CheckFifoParam>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2240      	movs	r2, #64	@ 0x40
 8006468:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006472:	2301      	movs	r3, #1
 8006474:	e016      	b.n	80064a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fac4 	bl	8006a0c <DMA_CalcBaseAndBitshift>
 8006484:	4603      	mov	r3, r0
 8006486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800648c:	223f      	movs	r2, #63	@ 0x3f
 800648e:	409a      	lsls	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	f010803f 	.word	0xf010803f

080064b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_DMA_Start_IT+0x26>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e040      	b.n	8006558 <HAL_DMA_Start_IT+0xa8>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d12f      	bne.n	800654a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2202      	movs	r2, #2
 80064ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fa56 	bl	80069b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006508:	223f      	movs	r2, #63	@ 0x3f
 800650a:	409a      	lsls	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0216 	orr.w	r2, r2, #22
 800651e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0208 	orr.w	r2, r2, #8
 8006536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e005      	b.n	8006556 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006552:	2302      	movs	r3, #2
 8006554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800656e:	f7ff f99f 	bl	80058b0 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d008      	beq.n	8006592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2280      	movs	r2, #128	@ 0x80
 8006584:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e052      	b.n	8006638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0216 	bic.w	r2, r2, #22
 80065a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <HAL_DMA_Abort+0x62>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0208 	bic.w	r2, r2, #8
 80065d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065e2:	e013      	b.n	800660c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065e4:	f7ff f964 	bl	80058b0 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b05      	cmp	r3, #5
 80065f0:	d90c      	bls.n	800660c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2203      	movs	r2, #3
 80065fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e015      	b.n	8006638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e4      	bne.n	80065e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661e:	223f      	movs	r2, #63	@ 0x3f
 8006620:	409a      	lsls	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d004      	beq.n	800665e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2280      	movs	r2, #128	@ 0x80
 8006658:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e00c      	b.n	8006678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2205      	movs	r2, #5
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006690:	4b8e      	ldr	r3, [pc, #568]	@ (80068cc <HAL_DMA_IRQHandler+0x248>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a8e      	ldr	r2, [pc, #568]	@ (80068d0 <HAL_DMA_IRQHandler+0x24c>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	0a9b      	lsrs	r3, r3, #10
 800669c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ae:	2208      	movs	r2, #8
 80066b0:	409a      	lsls	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01a      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d013      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0204 	bic.w	r2, r2, #4
 80066d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066dc:	2208      	movs	r2, #8
 80066de:	409a      	lsls	r2, r3
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e8:	f043 0201 	orr.w	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006712:	2201      	movs	r2, #1
 8006714:	409a      	lsls	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	f043 0202 	orr.w	r2, r3, #2
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672a:	2204      	movs	r2, #4
 800672c:	409a      	lsls	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d012      	beq.n	800675c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006748:	2204      	movs	r2, #4
 800674a:	409a      	lsls	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006754:	f043 0204 	orr.w	r2, r3, #4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006760:	2210      	movs	r2, #16
 8006762:	409a      	lsls	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d043      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d03c      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677e:	2210      	movs	r2, #16
 8006780:	409a      	lsls	r2, r3
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d018      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d108      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d024      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
 80067b2:	e01f      	b.n	80067f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01b      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
 80067c4:	e016      	b.n	80067f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d107      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0208 	bic.w	r2, r2, #8
 80067e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f8:	2220      	movs	r2, #32
 80067fa:	409a      	lsls	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 808f 	beq.w	8006924 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8087 	beq.w	8006924 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681a:	2220      	movs	r2, #32
 800681c:	409a      	lsls	r2, r3
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b05      	cmp	r3, #5
 800682c:	d136      	bne.n	800689c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0216 	bic.w	r2, r2, #22
 800683c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800684c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <HAL_DMA_IRQHandler+0x1da>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0208 	bic.w	r2, r2, #8
 800686c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006872:	223f      	movs	r2, #63	@ 0x3f
 8006874:	409a      	lsls	r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800688e:	2b00      	cmp	r3, #0
 8006890:	d07e      	beq.n	8006990 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
        }
        return;
 800689a:	e079      	b.n	8006990 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01d      	beq.n	80068e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d031      	beq.n	8006924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	e02c      	b.n	8006924 <HAL_DMA_IRQHandler+0x2a0>
 80068ca:	bf00      	nop
 80068cc:	20000004 	.word	0x20000004
 80068d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d023      	beq.n	8006924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	e01e      	b.n	8006924 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10f      	bne.n	8006914 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0210 	bic.w	r2, r2, #16
 8006902:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	2b00      	cmp	r3, #0
 800692a:	d032      	beq.n	8006992 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d022      	beq.n	800697e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2205      	movs	r2, #5
 800693c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	3301      	adds	r3, #1
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	429a      	cmp	r2, r3
 800695a:	d307      	bcc.n	800696c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f2      	bne.n	8006950 <HAL_DMA_IRQHandler+0x2cc>
 800696a:	e000      	b.n	800696e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800696c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
 800698e:	e000      	b.n	8006992 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006990:	bf00      	nop
    }
  }
}
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80069cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b40      	cmp	r3, #64	@ 0x40
 80069dc:	d108      	bne.n	80069f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80069ee:	e007      	b.n	8006a00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	3b10      	subs	r3, #16
 8006a1c:	4a14      	ldr	r2, [pc, #80]	@ (8006a70 <DMA_CalcBaseAndBitshift+0x64>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a26:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <DMA_CalcBaseAndBitshift+0x68>)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d909      	bls.n	8006a4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a4c:	e007      	b.n	8006a5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	aaaaaaab 	.word	0xaaaaaaab
 8006a74:	08011434 	.word	0x08011434

08006a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11f      	bne.n	8006ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d856      	bhi.n	8006b46 <DMA_CheckFifoParam+0xce>
 8006a98:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <DMA_CheckFifoParam+0x28>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006ab1 	.word	0x08006ab1
 8006aa4:	08006ac3 	.word	0x08006ac3
 8006aa8:	08006ab1 	.word	0x08006ab1
 8006aac:	08006b47 	.word	0x08006b47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d046      	beq.n	8006b4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ac0:	e043      	b.n	8006b4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006aca:	d140      	bne.n	8006b4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ad0:	e03d      	b.n	8006b4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ada:	d121      	bne.n	8006b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d837      	bhi.n	8006b52 <DMA_CheckFifoParam+0xda>
 8006ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <DMA_CheckFifoParam+0x70>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006aff 	.word	0x08006aff
 8006af0:	08006af9 	.word	0x08006af9
 8006af4:	08006b11 	.word	0x08006b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
      break;
 8006afc:	e030      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d025      	beq.n	8006b56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b0e:	e022      	b.n	8006b56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b18:	d11f      	bne.n	8006b5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b1e:	e01c      	b.n	8006b5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d903      	bls.n	8006b2e <DMA_CheckFifoParam+0xb6>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d003      	beq.n	8006b34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006b2c:	e018      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
      break;
 8006b32:	e015      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00e      	beq.n	8006b5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
      break;
 8006b44:	e00b      	b.n	8006b5e <DMA_CheckFifoParam+0xe6>
      break;
 8006b46:	bf00      	nop
 8006b48:	e00a      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e008      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      break;
 8006b4e:	bf00      	nop
 8006b50:	e006      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      break;
 8006b52:	bf00      	nop
 8006b54:	e004      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      break;
 8006b56:	bf00      	nop
 8006b58:	e002      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      break;   
 8006b5a:	bf00      	nop
 8006b5c:	e000      	b.n	8006b60 <DMA_CheckFifoParam+0xe8>
      break;
 8006b5e:	bf00      	nop
    }
  } 
  
  return status; 
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop

08006b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b089      	sub	sp, #36	@ 0x24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	e165      	b.n	8006e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	f040 8154 	bne.w	8006e52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d005      	beq.n	8006bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d130      	bne.n	8006c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	2203      	movs	r2, #3
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	43db      	mvns	r3, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4013      	ands	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 0201 	and.w	r2, r3, #1
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d017      	beq.n	8006c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	43db      	mvns	r3, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4013      	ands	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d123      	bne.n	8006cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	08da      	lsrs	r2, r3, #3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3208      	adds	r2, #8
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	220f      	movs	r2, #15
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	08da      	lsrs	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3208      	adds	r2, #8
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 0203 	and.w	r2, r3, #3
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80ae 	beq.w	8006e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8006e70 <HAL_GPIO_Init+0x300>)
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8006e70 <HAL_GPIO_Init+0x300>)
 8006d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d06:	4b5a      	ldr	r3, [pc, #360]	@ (8006e70 <HAL_GPIO_Init+0x300>)
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d12:	4a58      	ldr	r2, [pc, #352]	@ (8006e74 <HAL_GPIO_Init+0x304>)
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	089b      	lsrs	r3, r3, #2
 8006d18:	3302      	adds	r3, #2
 8006d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	220f      	movs	r2, #15
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4013      	ands	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a4f      	ldr	r2, [pc, #316]	@ (8006e78 <HAL_GPIO_Init+0x308>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d025      	beq.n	8006d8a <HAL_GPIO_Init+0x21a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a4e      	ldr	r2, [pc, #312]	@ (8006e7c <HAL_GPIO_Init+0x30c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <HAL_GPIO_Init+0x216>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a4d      	ldr	r2, [pc, #308]	@ (8006e80 <HAL_GPIO_Init+0x310>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d019      	beq.n	8006d82 <HAL_GPIO_Init+0x212>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a4c      	ldr	r2, [pc, #304]	@ (8006e84 <HAL_GPIO_Init+0x314>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_GPIO_Init+0x20e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a4b      	ldr	r2, [pc, #300]	@ (8006e88 <HAL_GPIO_Init+0x318>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00d      	beq.n	8006d7a <HAL_GPIO_Init+0x20a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a4a      	ldr	r2, [pc, #296]	@ (8006e8c <HAL_GPIO_Init+0x31c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <HAL_GPIO_Init+0x206>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a49      	ldr	r2, [pc, #292]	@ (8006e90 <HAL_GPIO_Init+0x320>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <HAL_GPIO_Init+0x202>
 8006d6e:	2306      	movs	r3, #6
 8006d70:	e00c      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d72:	2307      	movs	r3, #7
 8006d74:	e00a      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d76:	2305      	movs	r3, #5
 8006d78:	e008      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d7a:	2304      	movs	r3, #4
 8006d7c:	e006      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e004      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e002      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_GPIO_Init+0x21c>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	f002 0203 	and.w	r2, r2, #3
 8006d92:	0092      	lsls	r2, r2, #2
 8006d94:	4093      	lsls	r3, r2
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d9c:	4935      	ldr	r1, [pc, #212]	@ (8006e74 <HAL_GPIO_Init+0x304>)
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	089b      	lsrs	r3, r3, #2
 8006da2:	3302      	adds	r3, #2
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006daa:	4b3a      	ldr	r3, [pc, #232]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	43db      	mvns	r3, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	4013      	ands	r3, r2
 8006db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006dce:	4a31      	ldr	r2, [pc, #196]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4013      	ands	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006df8:	4a26      	ldr	r2, [pc, #152]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dfe:	4b25      	ldr	r3, [pc, #148]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	43db      	mvns	r3, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e22:	4a1c      	ldr	r2, [pc, #112]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e28:	4b1a      	ldr	r3, [pc, #104]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4013      	ands	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e4c:	4a11      	ldr	r2, [pc, #68]	@ (8006e94 <HAL_GPIO_Init+0x324>)
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	f67f ae96 	bls.w	8006b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	3724      	adds	r7, #36	@ 0x24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40013800 	.word	0x40013800
 8006e78:	40020000 	.word	0x40020000
 8006e7c:	40020400 	.word	0x40020400
 8006e80:	40020800 	.word	0x40020800
 8006e84:	40020c00 	.word	0x40020c00
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	40021400 	.word	0x40021400
 8006e90:	40021800 	.word	0x40021800
 8006e94:	40013c00 	.word	0x40013c00

08006e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	887b      	ldrh	r3, [r7, #2]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	e001      	b.n	8006eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	807b      	strh	r3, [r7, #2]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ed8:	787b      	ldrb	r3, [r7, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ede:	887a      	ldrh	r2, [r7, #2]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ee4:	e003      	b.n	8006eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	041a      	lsls	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	619a      	str	r2, [r3, #24]
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d006      	beq.n	8006f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f12:	4a05      	ldr	r2, [pc, #20]	@ (8006f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fa fcf8 	bl	8001910 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40013c00 	.word	0x40013c00

08006f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e12b      	b.n	8007196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fa fa8c 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2224      	movs	r2, #36	@ 0x24
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f90:	f001 fbb6 	bl	8008700 <HAL_RCC_GetPCLK1Freq>
 8006f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4a81      	ldr	r2, [pc, #516]	@ (80071a0 <HAL_I2C_Init+0x274>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d807      	bhi.n	8006fb0 <HAL_I2C_Init+0x84>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a80      	ldr	r2, [pc, #512]	@ (80071a4 <HAL_I2C_Init+0x278>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	bf94      	ite	ls
 8006fa8:	2301      	movls	r3, #1
 8006faa:	2300      	movhi	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	e006      	b.n	8006fbe <HAL_I2C_Init+0x92>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80071a8 <HAL_I2C_Init+0x27c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bf94      	ite	ls
 8006fb8:	2301      	movls	r3, #1
 8006fba:	2300      	movhi	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e0e7      	b.n	8007196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a78      	ldr	r2, [pc, #480]	@ (80071ac <HAL_I2C_Init+0x280>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	0c9b      	lsrs	r3, r3, #18
 8006fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80071a0 <HAL_I2C_Init+0x274>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d802      	bhi.n	8007000 <HAL_I2C_Init+0xd4>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	e009      	b.n	8007014 <HAL_I2C_Init+0xe8>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	4a69      	ldr	r2, [pc, #420]	@ (80071b0 <HAL_I2C_Init+0x284>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	3301      	adds	r3, #1
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	430b      	orrs	r3, r1
 800701a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007026:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	495c      	ldr	r1, [pc, #368]	@ (80071a0 <HAL_I2C_Init+0x274>)
 8007030:	428b      	cmp	r3, r1
 8007032:	d819      	bhi.n	8007068 <HAL_I2C_Init+0x13c>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	1e59      	subs	r1, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007048:	400b      	ands	r3, r1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <HAL_I2C_Init+0x138>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1e59      	subs	r1, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	fbb1 f3f3 	udiv	r3, r1, r3
 800705c:	3301      	adds	r3, #1
 800705e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007062:	e051      	b.n	8007108 <HAL_I2C_Init+0x1dc>
 8007064:	2304      	movs	r3, #4
 8007066:	e04f      	b.n	8007108 <HAL_I2C_Init+0x1dc>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d111      	bne.n	8007094 <HAL_I2C_Init+0x168>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	1e58      	subs	r0, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6859      	ldr	r1, [r3, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	440b      	add	r3, r1
 800707e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007082:	3301      	adds	r3, #1
 8007084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	e012      	b.n	80070ba <HAL_I2C_Init+0x18e>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	1e58      	subs	r0, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6859      	ldr	r1, [r3, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	0099      	lsls	r1, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070aa:	3301      	adds	r3, #1
 80070ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Init+0x196>
 80070be:	2301      	movs	r3, #1
 80070c0:	e022      	b.n	8007108 <HAL_I2C_Init+0x1dc>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10e      	bne.n	80070e8 <HAL_I2C_Init+0x1bc>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1e58      	subs	r0, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	440b      	add	r3, r1
 80070d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070dc:	3301      	adds	r3, #1
 80070de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070e6:	e00f      	b.n	8007108 <HAL_I2C_Init+0x1dc>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	1e58      	subs	r0, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	0099      	lsls	r1, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80070fe:	3301      	adds	r3, #1
 8007100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	6809      	ldr	r1, [r1, #0]
 800710c:	4313      	orrs	r3, r2
 800710e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69da      	ldr	r2, [r3, #28]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6911      	ldr	r1, [r2, #16]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	68d2      	ldr	r2, [r2, #12]
 8007142:	4311      	orrs	r1, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	430b      	orrs	r3, r1
 800714a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695a      	ldr	r2, [r3, #20]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	000186a0 	.word	0x000186a0
 80071a4:	001e847f 	.word	0x001e847f
 80071a8:	003d08ff 	.word	0x003d08ff
 80071ac:	431bde83 	.word	0x431bde83
 80071b0:	10624dd3 	.word	0x10624dd3

080071b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	817b      	strh	r3, [r7, #10]
 80071c6:	460b      	mov	r3, r1
 80071c8:	813b      	strh	r3, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ce:	f7fe fb6f 	bl	80058b0 <HAL_GetTick>
 80071d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b20      	cmp	r3, #32
 80071de:	f040 80d9 	bne.w	8007394 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	2319      	movs	r3, #25
 80071e8:	2201      	movs	r2, #1
 80071ea:	496d      	ldr	r1, [pc, #436]	@ (80073a0 <HAL_I2C_Mem_Write+0x1ec>)
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 ff5f 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e0cc      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_I2C_Mem_Write+0x56>
 8007206:	2302      	movs	r3, #2
 8007208:	e0c5      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b01      	cmp	r3, #1
 800721e:	d007      	beq.n	8007230 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800723e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2221      	movs	r2, #33	@ 0x21
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2240      	movs	r2, #64	@ 0x40
 800724c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007260:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a4d      	ldr	r2, [pc, #308]	@ (80073a4 <HAL_I2C_Mem_Write+0x1f0>)
 8007270:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007272:	88f8      	ldrh	r0, [r7, #6]
 8007274:	893a      	ldrh	r2, [r7, #8]
 8007276:	8979      	ldrh	r1, [r7, #10]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4603      	mov	r3, r0
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fc7a 	bl	8007b7c <I2C_RequestMemoryWrite>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d052      	beq.n	8007334 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e081      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f001 f824 	bl	80082e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d107      	bne.n	80072ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e06b      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d11b      	bne.n	8007334 <HAL_I2C_Mem_Write+0x180>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1aa      	bne.n	8007292 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 f817 	bl	8008374 <I2C_WaitOnBTFFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00d      	beq.n	8007368 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007350:	2b04      	cmp	r3, #4
 8007352:	d107      	bne.n	8007364 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e016      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	e000      	b.n	8007396 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007394:	2302      	movs	r3, #2
  }
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	00100002 	.word	0x00100002
 80073a4:	ffff0000 	.word	0xffff0000

080073a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	@ 0x30
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	4608      	mov	r0, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	817b      	strh	r3, [r7, #10]
 80073ba:	460b      	mov	r3, r1
 80073bc:	813b      	strh	r3, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073c2:	f7fe fa75 	bl	80058b0 <HAL_GetTick>
 80073c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	f040 8214 	bne.w	80077fe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	2319      	movs	r3, #25
 80073dc:	2201      	movs	r2, #1
 80073de:	497b      	ldr	r1, [pc, #492]	@ (80075cc <HAL_I2C_Mem_Read+0x224>)
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fe65 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
 80073ee:	e207      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_I2C_Mem_Read+0x56>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e200      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d007      	beq.n	8007424 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2222      	movs	r2, #34	@ 0x22
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2240      	movs	r2, #64	@ 0x40
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800744e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a5b      	ldr	r2, [pc, #364]	@ (80075d0 <HAL_I2C_Mem_Read+0x228>)
 8007464:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007466:	88f8      	ldrh	r0, [r7, #6]
 8007468:	893a      	ldrh	r2, [r7, #8]
 800746a:	8979      	ldrh	r1, [r7, #10]
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	4603      	mov	r3, r0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fc16 	bl	8007ca8 <I2C_RequestMemoryRead>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e1bc      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d113      	bne.n	80074b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800748e:	2300      	movs	r3, #0
 8007490:	623b      	str	r3, [r7, #32]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	623b      	str	r3, [r7, #32]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	623b      	str	r3, [r7, #32]
 80074a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	e190      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d11b      	bne.n	80074f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e170      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d11b      	bne.n	8007536 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800750c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800751c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	e150      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800754c:	e144      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007552:	2b03      	cmp	r3, #3
 8007554:	f200 80f1 	bhi.w	800773a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755c:	2b01      	cmp	r3, #1
 800755e:	d123      	bne.n	80075a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007562:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 ff4d 	bl	8008404 <I2C_WaitOnRXNEFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e145      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075a6:	e117      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d14e      	bne.n	800764e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	2200      	movs	r2, #0
 80075b8:	4906      	ldr	r1, [pc, #24]	@ (80075d4 <HAL_I2C_Mem_Read+0x22c>)
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fd78 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e11a      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
 80075ca:	bf00      	nop
 80075cc:	00100002 	.word	0x00100002
 80075d0:	ffff0000 	.word	0xffff0000
 80075d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800764c:	e0c4      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007654:	2200      	movs	r2, #0
 8007656:	496c      	ldr	r1, [pc, #432]	@ (8007808 <HAL_I2C_Mem_Read+0x460>)
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fd29 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0cb      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	2200      	movs	r2, #0
 80076b2:	4955      	ldr	r1, [pc, #340]	@ (8007808 <HAL_I2C_Mem_Read+0x460>)
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fcfb 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e09d      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007738:	e04e      	b.n	80077d8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800773a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800773c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fe60 	bl	8008404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e058      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b04      	cmp	r3, #4
 800778c:	d124      	bne.n	80077d8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007792:	2b03      	cmp	r3, #3
 8007794:	d107      	bne.n	80077a6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f47f aeb6 	bne.w	800754e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e000      	b.n	8007800 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	@ 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	00010004 	.word	0x00010004

0800780c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	@ 0x30
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	4603      	mov	r3, r0
 800781c:	817b      	strh	r3, [r7, #10]
 800781e:	460b      	mov	r3, r1
 8007820:	813b      	strh	r3, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007826:	f7fe f843 	bl	80058b0 <HAL_GetTick>
 800782a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b20      	cmp	r3, #32
 800783a:	f040 8172 	bne.w	8007b22 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800783e:	4b93      	ldr	r3, [pc, #588]	@ (8007a8c <HAL_I2C_Mem_Read_DMA+0x280>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	08db      	lsrs	r3, r3, #3
 8007844:	4a92      	ldr	r2, [pc, #584]	@ (8007a90 <HAL_I2C_Mem_Read_DMA+0x284>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	0a1a      	lsrs	r2, r3, #8
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009a      	lsls	r2, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	3b01      	subs	r3, #1
 800785c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d112      	bne.n	800788a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787e:	f043 0220 	orr.w	r2, r3, #32
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8007886:	2302      	movs	r3, #2
 8007888:	e14c      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b02      	cmp	r3, #2
 8007896:	d0df      	beq.n	8007858 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <HAL_I2C_Mem_Read_DMA+0x9a>
 80078a2:	2302      	movs	r3, #2
 80078a4:	e13e      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d007      	beq.n	80078cc <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2222      	movs	r2, #34	@ 0x22
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2240      	movs	r2, #64	@ 0x40
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80078fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a62      	ldr	r2, [pc, #392]	@ (8007a94 <HAL_I2C_Mem_Read_DMA+0x288>)
 800790c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800790e:	897a      	ldrh	r2, [r7, #10]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007914:	893a      	ldrh	r2, [r7, #8]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 80cc 	beq.w	8007ac8 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d02d      	beq.n	8007994 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793c:	4a56      	ldr	r2, [pc, #344]	@ (8007a98 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800793e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	4a55      	ldr	r2, [pc, #340]	@ (8007a9c <HAL_I2C_Mem_Read_DMA+0x290>)
 8007946:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794c:	2200      	movs	r2, #0
 800794e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007954:	2200      	movs	r2, #0
 8007956:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795c:	2200      	movs	r2, #0
 800795e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007964:	2200      	movs	r2, #0
 8007966:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3310      	adds	r3, #16
 8007972:	4619      	mov	r1, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007978:	461a      	mov	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797e:	f7fe fd97 	bl	80064b0 <HAL_DMA_Start_IT>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007988:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 8087 	bne.w	8007aa0 <HAL_I2C_Mem_Read_DMA+0x294>
 8007992:	e013      	b.n	80079bc <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0b3      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80079bc:	88f8      	ldrh	r0, [r7, #6]
 80079be:	893a      	ldrh	r2, [r7, #8]
 80079c0:	8979      	ldrh	r1, [r7, #10]
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	2323      	movs	r3, #35	@ 0x23
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4603      	mov	r3, r0
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f96b 	bl	8007ca8 <I2C_RequestMemoryRead>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d023      	beq.n	8007a20 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fe2f 	bl	8006640 <HAL_DMA_Abort_IT>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	2200      	movs	r2, #0
 80079ee:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079fe:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0201 	bic.w	r2, r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e081      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d108      	bne.n	8007a3a <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	e007      	b.n	8007a4a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a76:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	e049      	b.n	8007b1e <HAL_I2C_Mem_Read_DMA+0x312>
 8007a8a:	bf00      	nop
 8007a8c:	20000004 	.word	0x20000004
 8007a90:	14f8b589 	.word	0x14f8b589
 8007a94:	ffff0000 	.word	0xffff0000
 8007a98:	08007e79 	.word	0x08007e79
 8007a9c:	08008037 	.word	0x08008037
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	f043 0210 	orr.w	r2, r3, #16
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e02d      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007ac8:	88f8      	ldrh	r0, [r7, #6]
 8007aca:	893a      	ldrh	r2, [r7, #8]
 8007acc:	8979      	ldrh	r1, [r7, #10]
 8007ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	2323      	movs	r3, #35	@ 0x23
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f8e5 	bl	8007ca8 <I2C_RequestMemoryRead>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e01d      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b0c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e000      	b.n	8007b24 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3728      	adds	r7, #40	@ 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	817b      	strh	r3, [r7, #10]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	813b      	strh	r3, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fa7c 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00d      	beq.n	8007bda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bcc:	d103      	bne.n	8007bd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e05f      	b.n	8007c9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bda:	897b      	ldrh	r3, [r7, #10]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	6a3a      	ldr	r2, [r7, #32]
 8007bee:	492d      	ldr	r1, [pc, #180]	@ (8007ca4 <I2C_RequestMemoryWrite+0x128>)
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fad7 	bl	80081a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e04c      	b.n	8007c9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	6a39      	ldr	r1, [r7, #32]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fb62 	bl	80082e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d107      	bne.n	8007c3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e02b      	b.n	8007c9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d105      	bne.n	8007c54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c48:	893b      	ldrh	r3, [r7, #8]
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	611a      	str	r2, [r3, #16]
 8007c52:	e021      	b.n	8007c98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c54:	893b      	ldrh	r3, [r7, #8]
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c64:	6a39      	ldr	r1, [r7, #32]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fb3c 	bl	80082e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d107      	bne.n	8007c8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e005      	b.n	8007c9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c8e:	893b      	ldrh	r3, [r7, #8]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	00010002 	.word	0x00010002

08007ca8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	817b      	strh	r3, [r7, #10]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	813b      	strh	r3, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007cd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f9de 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d08:	d103      	bne.n	8007d12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e0aa      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d16:	897b      	ldrh	r3, [r7, #10]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	6a3a      	ldr	r2, [r7, #32]
 8007d2a:	4952      	ldr	r1, [pc, #328]	@ (8007e74 <I2C_RequestMemoryRead+0x1cc>)
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fa39 	bl	80081a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e097      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d54:	6a39      	ldr	r1, [r7, #32]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fac4 	bl	80082e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d107      	bne.n	8007d7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e076      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d105      	bne.n	8007d90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d84:	893b      	ldrh	r3, [r7, #8]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	611a      	str	r2, [r3, #16]
 8007d8e:	e021      	b.n	8007dd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d90:	893b      	ldrh	r3, [r7, #8]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da0:	6a39      	ldr	r1, [r7, #32]
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fa9e 	bl	80082e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d107      	bne.n	8007dc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e050      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd6:	6a39      	ldr	r1, [r7, #32]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fa83 	bl	80082e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d107      	bne.n	8007dfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e035      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f947 	bl	80080b0 <I2C_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00d      	beq.n	8007e44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e36:	d103      	bne.n	8007e40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e013      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e44:	897b      	ldrh	r3, [r7, #10]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f043 0301 	orr.w	r3, r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	6a3a      	ldr	r2, [r7, #32]
 8007e58:	4906      	ldr	r1, [pc, #24]	@ (8007e74 <I2C_RequestMemoryRead+0x1cc>)
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f9a2 	bl	80081a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	00010002 	.word	0x00010002

08007e78 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e8c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e94:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb8:	2200      	movs	r2, #0
 8007eba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec8:	2200      	movs	r2, #0
 8007eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007ed2:	2b21      	cmp	r3, #33	@ 0x21
 8007ed4:	d007      	beq.n	8007ee6 <I2C_DMAXferCplt+0x6e>
 8007ed6:	7cfb      	ldrb	r3, [r7, #19]
 8007ed8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007edc:	2b22      	cmp	r3, #34	@ 0x22
 8007ede:	d131      	bne.n	8007f44 <I2C_DMAXferCplt+0xcc>
 8007ee0:	7cbb      	ldrb	r3, [r7, #18]
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d12e      	bne.n	8007f44 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ef4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007efc:	7cfb      	ldrb	r3, [r7, #19]
 8007efe:	2b29      	cmp	r3, #41	@ 0x29
 8007f00:	d10a      	bne.n	8007f18 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2221      	movs	r2, #33	@ 0x21
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2228      	movs	r2, #40	@ 0x28
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f10:	6978      	ldr	r0, [r7, #20]
 8007f12:	f7ff fe15 	bl	8007b40 <HAL_I2C_SlaveTxCpltCallback>
 8007f16:	e00c      	b.n	8007f32 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f18:	7cfb      	ldrb	r3, [r7, #19]
 8007f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f1c:	d109      	bne.n	8007f32 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2222      	movs	r2, #34	@ 0x22
 8007f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2228      	movs	r2, #40	@ 0x28
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f2c:	6978      	ldr	r0, [r7, #20]
 8007f2e:	f7ff fe11 	bl	8007b54 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007f40:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007f42:	e074      	b.n	800802e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d06e      	beq.n	800802e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d107      	bne.n	8007f6a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f68:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007f78:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f80:	d009      	beq.n	8007f96 <I2C_DMAXferCplt+0x11e>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d006      	beq.n	8007f96 <I2C_DMAXferCplt+0x11e>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007f8e:	d002      	beq.n	8007f96 <I2C_DMAXferCplt+0x11e>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d107      	bne.n	8007fa6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fa4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fb4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fc4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007fd4:	6978      	ldr	r0, [r7, #20]
 8007fd6:	f7ff fdc7 	bl	8007b68 <HAL_I2C_ErrorCallback>
}
 8007fda:	e028      	b.n	800802e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b40      	cmp	r3, #64	@ 0x40
 8007fee:	d10a      	bne.n	8008006 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007ffe:	6978      	ldr	r0, [r7, #20]
 8008000:	f7f9 fc92 	bl	8001928 <HAL_I2C_MemRxCpltCallback>
}
 8008004:	e013      	b.n	800802e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d002      	beq.n	800801a <I2C_DMAXferCplt+0x1a2>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b20      	cmp	r3, #32
 8008018:	d103      	bne.n	8008022 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008020:	e002      	b.n	8008028 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2212      	movs	r2, #18
 8008026:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008028:	6978      	ldr	r0, [r7, #20]
 800802a:	f7ff fd7f 	bl	8007b2c <HAL_I2C_MasterRxCpltCallback>
}
 800802e:	bf00      	nop
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008042:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008050:	2200      	movs	r2, #0
 8008052:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008060:	2200      	movs	r2, #0
 8008062:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fe fc97 	bl	8006998 <HAL_DMA_GetError>
 800806a:	4603      	mov	r3, r0
 800806c:	2b02      	cmp	r3, #2
 800806e:	d01b      	beq.n	80080a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800807e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2220      	movs	r2, #32
 800808a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809a:	f043 0210 	orr.w	r2, r3, #16
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fd60 	bl	8007b68 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080a8:	bf00      	nop
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080c0:	e048      	b.n	8008154 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080c8:	d044      	beq.n	8008154 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ca:	f7fd fbf1 	bl	80058b0 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d302      	bcc.n	80080e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d139      	bne.n	8008154 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	0c1b      	lsrs	r3, r3, #16
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d10d      	bne.n	8008106 <I2C_WaitOnFlagUntilTimeout+0x56>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	43da      	mvns	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	4013      	ands	r3, r2
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bf0c      	ite	eq
 80080fc:	2301      	moveq	r3, #1
 80080fe:	2300      	movne	r3, #0
 8008100:	b2db      	uxtb	r3, r3
 8008102:	461a      	mov	r2, r3
 8008104:	e00c      	b.n	8008120 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	43da      	mvns	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4013      	ands	r3, r2
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	bf0c      	ite	eq
 8008118:	2301      	moveq	r3, #1
 800811a:	2300      	movne	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	429a      	cmp	r2, r3
 8008124:	d116      	bne.n	8008154 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008140:	f043 0220 	orr.w	r2, r3, #32
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e023      	b.n	800819c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	0c1b      	lsrs	r3, r3, #16
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b01      	cmp	r3, #1
 800815c:	d10d      	bne.n	800817a <I2C_WaitOnFlagUntilTimeout+0xca>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	43da      	mvns	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4013      	ands	r3, r2
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	bf0c      	ite	eq
 8008170:	2301      	moveq	r3, #1
 8008172:	2300      	movne	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	e00c      	b.n	8008194 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	43da      	mvns	r2, r3
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4013      	ands	r3, r2
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	461a      	mov	r2, r3
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	429a      	cmp	r2, r3
 8008198:	d093      	beq.n	80080c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081b2:	e071      	b.n	8008298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c2:	d123      	bne.n	800820c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f8:	f043 0204 	orr.w	r2, r3, #4
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e067      	b.n	80082dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008212:	d041      	beq.n	8008298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008214:	f7fd fb4c 	bl	80058b0 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d136      	bne.n	8008298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	0c1b      	lsrs	r3, r3, #16
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	d10c      	bne.n	800824e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	43da      	mvns	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4013      	ands	r3, r2
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e00b      	b.n	8008266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	43da      	mvns	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4013      	ands	r3, r2
 800825a:	b29b      	uxth	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e021      	b.n	80082dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10c      	bne.n	80082bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	43da      	mvns	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4013      	ands	r3, r2
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf14      	ite	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2300      	moveq	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	e00b      	b.n	80082d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	43da      	mvns	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4013      	ands	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bf14      	ite	ne
 80082ce:	2301      	movne	r3, #1
 80082d0:	2300      	moveq	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af6d 	bne.w	80081b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082f0:	e034      	b.n	800835c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f8e3 	bl	80084be <I2C_IsAcknowledgeFailed>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e034      	b.n	800836c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008308:	d028      	beq.n	800835c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fd fad1 	bl	80058b0 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d11d      	bne.n	800835c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832a:	2b80      	cmp	r3, #128	@ 0x80
 800832c:	d016      	beq.n	800835c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	f043 0220 	orr.w	r2, r3, #32
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e007      	b.n	800836c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008366:	2b80      	cmp	r3, #128	@ 0x80
 8008368:	d1c3      	bne.n	80082f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008380:	e034      	b.n	80083ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 f89b 	bl	80084be <I2C_IsAcknowledgeFailed>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e034      	b.n	80083fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008398:	d028      	beq.n	80083ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839a:	f7fd fa89 	bl	80058b0 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d302      	bcc.n	80083b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11d      	bne.n	80083ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d016      	beq.n	80083ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d8:	f043 0220 	orr.w	r2, r3, #32
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e007      	b.n	80083fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d1c3      	bne.n	8008382 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008410:	e049      	b.n	80084a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b10      	cmp	r3, #16
 800841e:	d119      	bne.n	8008454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0210 	mvn.w	r2, #16
 8008428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e030      	b.n	80084b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008454:	f7fd fa2c 	bl	80058b0 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11d      	bne.n	80084a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008474:	2b40      	cmp	r3, #64	@ 0x40
 8008476:	d016      	beq.n	80084a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008492:	f043 0220 	orr.w	r2, r3, #32
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e007      	b.n	80084b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b0:	2b40      	cmp	r3, #64	@ 0x40
 80084b2:	d1ae      	bne.n	8008412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d4:	d11b      	bne.n	800850e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fa:	f043 0204 	orr.w	r2, r3, #4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e0cc      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008530:	4b68      	ldr	r3, [pc, #416]	@ (80086d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 030f 	and.w	r3, r3, #15
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	429a      	cmp	r2, r3
 800853c:	d90c      	bls.n	8008558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800853e:	4b65      	ldr	r3, [pc, #404]	@ (80086d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008546:	4b63      	ldr	r3, [pc, #396]	@ (80086d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d001      	beq.n	8008558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e0b8      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b00      	cmp	r3, #0
 8008562:	d020      	beq.n	80085a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008570:	4b59      	ldr	r3, [pc, #356]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4a58      	ldr	r2, [pc, #352]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800857a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008588:	4b53      	ldr	r3, [pc, #332]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	4a52      	ldr	r2, [pc, #328]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008594:	4b50      	ldr	r3, [pc, #320]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	494d      	ldr	r1, [pc, #308]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d044      	beq.n	800863c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d107      	bne.n	80085ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ba:	4b47      	ldr	r3, [pc, #284]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d119      	bne.n	80085fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e07f      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d003      	beq.n	80085da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d107      	bne.n	80085ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085da:	4b3f      	ldr	r3, [pc, #252]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e06f      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ea:	4b3b      	ldr	r3, [pc, #236]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e067      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085fa:	4b37      	ldr	r3, [pc, #220]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f023 0203 	bic.w	r2, r3, #3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	4934      	ldr	r1, [pc, #208]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	4313      	orrs	r3, r2
 800860a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800860c:	f7fd f950 	bl	80058b0 <HAL_GetTick>
 8008610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008612:	e00a      	b.n	800862a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008614:	f7fd f94c 	bl	80058b0 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008622:	4293      	cmp	r3, r2
 8008624:	d901      	bls.n	800862a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e04f      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862a:	4b2b      	ldr	r3, [pc, #172]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 020c 	and.w	r2, r3, #12
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	429a      	cmp	r2, r3
 800863a:	d1eb      	bne.n	8008614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800863c:	4b25      	ldr	r3, [pc, #148]	@ (80086d4 <HAL_RCC_ClockConfig+0x1b8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d20c      	bcs.n	8008664 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800864a:	4b22      	ldr	r3, [pc, #136]	@ (80086d4 <HAL_RCC_ClockConfig+0x1b8>)
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	b2d2      	uxtb	r2, r2
 8008650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008652:	4b20      	ldr	r3, [pc, #128]	@ (80086d4 <HAL_RCC_ClockConfig+0x1b8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d001      	beq.n	8008664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e032      	b.n	80086ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008670:	4b19      	ldr	r3, [pc, #100]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	4916      	ldr	r1, [pc, #88]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 800867e:	4313      	orrs	r3, r2
 8008680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0308 	and.w	r3, r3, #8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800868e:	4b12      	ldr	r3, [pc, #72]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	490e      	ldr	r1, [pc, #56]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086a2:	f000 f855 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 80086a6:	4602      	mov	r2, r0
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <HAL_RCC_ClockConfig+0x1bc>)
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	091b      	lsrs	r3, r3, #4
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	490a      	ldr	r1, [pc, #40]	@ (80086dc <HAL_RCC_ClockConfig+0x1c0>)
 80086b4:	5ccb      	ldrb	r3, [r1, r3]
 80086b6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ba:	4a09      	ldr	r2, [pc, #36]	@ (80086e0 <HAL_RCC_ClockConfig+0x1c4>)
 80086bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80086be:	4b09      	ldr	r3, [pc, #36]	@ (80086e4 <HAL_RCC_ClockConfig+0x1c8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fd f8b0 	bl	8005828 <HAL_InitTick>

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	40023c00 	.word	0x40023c00
 80086d8:	40023800 	.word	0x40023800
 80086dc:	08011410 	.word	0x08011410
 80086e0:	20000004 	.word	0x20000004
 80086e4:	200003c4 	.word	0x200003c4

080086e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086ec:	4b03      	ldr	r3, [pc, #12]	@ (80086fc <HAL_RCC_GetHCLKFreq+0x14>)
 80086ee:	681b      	ldr	r3, [r3, #0]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	20000004 	.word	0x20000004

08008700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008704:	f7ff fff0 	bl	80086e8 <HAL_RCC_GetHCLKFreq>
 8008708:	4602      	mov	r2, r0
 800870a:	4b05      	ldr	r3, [pc, #20]	@ (8008720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	0a9b      	lsrs	r3, r3, #10
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	4903      	ldr	r1, [pc, #12]	@ (8008724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008716:	5ccb      	ldrb	r3, [r1, r3]
 8008718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800871c:	4618      	mov	r0, r3
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40023800 	.word	0x40023800
 8008724:	08011420 	.word	0x08011420

08008728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800872c:	f7ff ffdc 	bl	80086e8 <HAL_RCC_GetHCLKFreq>
 8008730:	4602      	mov	r2, r0
 8008732:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	0b5b      	lsrs	r3, r3, #13
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	4903      	ldr	r1, [pc, #12]	@ (800874c <HAL_RCC_GetPCLK2Freq+0x24>)
 800873e:	5ccb      	ldrb	r3, [r1, r3]
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008744:	4618      	mov	r0, r3
 8008746:	bd80      	pop	{r7, pc}
 8008748:	40023800 	.word	0x40023800
 800874c:	08011420 	.word	0x08011420

08008750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008754:	b0ae      	sub	sp, #184	@ 0xb8
 8008756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008776:	4bcb      	ldr	r3, [pc, #812]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 030c 	and.w	r3, r3, #12
 800877e:	2b0c      	cmp	r3, #12
 8008780:	f200 8206 	bhi.w	8008b90 <HAL_RCC_GetSysClockFreq+0x440>
 8008784:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <HAL_RCC_GetSysClockFreq+0x3c>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087c1 	.word	0x080087c1
 8008790:	08008b91 	.word	0x08008b91
 8008794:	08008b91 	.word	0x08008b91
 8008798:	08008b91 	.word	0x08008b91
 800879c:	080087c9 	.word	0x080087c9
 80087a0:	08008b91 	.word	0x08008b91
 80087a4:	08008b91 	.word	0x08008b91
 80087a8:	08008b91 	.word	0x08008b91
 80087ac:	080087d1 	.word	0x080087d1
 80087b0:	08008b91 	.word	0x08008b91
 80087b4:	08008b91 	.word	0x08008b91
 80087b8:	08008b91 	.word	0x08008b91
 80087bc:	080089c1 	.word	0x080089c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087c0:	4bb9      	ldr	r3, [pc, #740]	@ (8008aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 80087c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80087c6:	e1e7      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087c8:	4bb8      	ldr	r3, [pc, #736]	@ (8008aac <HAL_RCC_GetSysClockFreq+0x35c>)
 80087ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80087ce:	e1e3      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087d0:	4bb4      	ldr	r3, [pc, #720]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087dc:	4bb1      	ldr	r3, [pc, #708]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d071      	beq.n	80088cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087e8:	4bae      	ldr	r3, [pc, #696]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	099b      	lsrs	r3, r3, #6
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80087f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008804:	2300      	movs	r3, #0
 8008806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800880a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800880e:	4622      	mov	r2, r4
 8008810:	462b      	mov	r3, r5
 8008812:	f04f 0000 	mov.w	r0, #0
 8008816:	f04f 0100 	mov.w	r1, #0
 800881a:	0159      	lsls	r1, r3, #5
 800881c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008820:	0150      	lsls	r0, r2, #5
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4621      	mov	r1, r4
 8008828:	1a51      	subs	r1, r2, r1
 800882a:	6439      	str	r1, [r7, #64]	@ 0x40
 800882c:	4629      	mov	r1, r5
 800882e:	eb63 0301 	sbc.w	r3, r3, r1
 8008832:	647b      	str	r3, [r7, #68]	@ 0x44
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008840:	4649      	mov	r1, r9
 8008842:	018b      	lsls	r3, r1, #6
 8008844:	4641      	mov	r1, r8
 8008846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800884a:	4641      	mov	r1, r8
 800884c:	018a      	lsls	r2, r1, #6
 800884e:	4641      	mov	r1, r8
 8008850:	1a51      	subs	r1, r2, r1
 8008852:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008854:	4649      	mov	r1, r9
 8008856:	eb63 0301 	sbc.w	r3, r3, r1
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008868:	4649      	mov	r1, r9
 800886a:	00cb      	lsls	r3, r1, #3
 800886c:	4641      	mov	r1, r8
 800886e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008872:	4641      	mov	r1, r8
 8008874:	00ca      	lsls	r2, r1, #3
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	4603      	mov	r3, r0
 800887c:	4622      	mov	r2, r4
 800887e:	189b      	adds	r3, r3, r2
 8008880:	633b      	str	r3, [r7, #48]	@ 0x30
 8008882:	462b      	mov	r3, r5
 8008884:	460a      	mov	r2, r1
 8008886:	eb42 0303 	adc.w	r3, r2, r3
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008898:	4629      	mov	r1, r5
 800889a:	024b      	lsls	r3, r1, #9
 800889c:	4621      	mov	r1, r4
 800889e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088a2:	4621      	mov	r1, r4
 80088a4:	024a      	lsls	r2, r1, #9
 80088a6:	4610      	mov	r0, r2
 80088a8:	4619      	mov	r1, r3
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80088b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80088bc:	f7f8 fa14 	bl	8000ce8 <__aeabi_uldivmod>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4613      	mov	r3, r2
 80088c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088ca:	e067      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088cc:	4b75      	ldr	r3, [pc, #468]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	099b      	lsrs	r3, r3, #6
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80088dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088e6:	2300      	movs	r3, #0
 80088e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80088ee:	4622      	mov	r2, r4
 80088f0:	462b      	mov	r3, r5
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f04f 0100 	mov.w	r1, #0
 80088fa:	0159      	lsls	r1, r3, #5
 80088fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008900:	0150      	lsls	r0, r2, #5
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4621      	mov	r1, r4
 8008908:	1a51      	subs	r1, r2, r1
 800890a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800890c:	4629      	mov	r1, r5
 800890e:	eb63 0301 	sbc.w	r3, r3, r1
 8008912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008920:	4649      	mov	r1, r9
 8008922:	018b      	lsls	r3, r1, #6
 8008924:	4641      	mov	r1, r8
 8008926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800892a:	4641      	mov	r1, r8
 800892c:	018a      	lsls	r2, r1, #6
 800892e:	4641      	mov	r1, r8
 8008930:	ebb2 0a01 	subs.w	sl, r2, r1
 8008934:	4649      	mov	r1, r9
 8008936:	eb63 0b01 	sbc.w	fp, r3, r1
 800893a:	f04f 0200 	mov.w	r2, #0
 800893e:	f04f 0300 	mov.w	r3, #0
 8008942:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008946:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800894a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800894e:	4692      	mov	sl, r2
 8008950:	469b      	mov	fp, r3
 8008952:	4623      	mov	r3, r4
 8008954:	eb1a 0303 	adds.w	r3, sl, r3
 8008958:	623b      	str	r3, [r7, #32]
 800895a:	462b      	mov	r3, r5
 800895c:	eb4b 0303 	adc.w	r3, fp, r3
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800896e:	4629      	mov	r1, r5
 8008970:	028b      	lsls	r3, r1, #10
 8008972:	4621      	mov	r1, r4
 8008974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008978:	4621      	mov	r1, r4
 800897a:	028a      	lsls	r2, r1, #10
 800897c:	4610      	mov	r0, r2
 800897e:	4619      	mov	r1, r3
 8008980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008984:	2200      	movs	r2, #0
 8008986:	673b      	str	r3, [r7, #112]	@ 0x70
 8008988:	677a      	str	r2, [r7, #116]	@ 0x74
 800898a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800898e:	f7f8 f9ab 	bl	8000ce8 <__aeabi_uldivmod>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4613      	mov	r3, r2
 8008998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800899c:	4b41      	ldr	r3, [pc, #260]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	3301      	adds	r3, #1
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80089ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80089be:	e0eb      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089c0:	4b38      	ldr	r3, [pc, #224]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089cc:	4b35      	ldr	r3, [pc, #212]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d06b      	beq.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089d8:	4b32      	ldr	r3, [pc, #200]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	099b      	lsrs	r3, r3, #6
 80089de:	2200      	movs	r2, #0
 80089e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ec:	2300      	movs	r3, #0
 80089ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80089f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80089f4:	4622      	mov	r2, r4
 80089f6:	462b      	mov	r3, r5
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	f04f 0100 	mov.w	r1, #0
 8008a00:	0159      	lsls	r1, r3, #5
 8008a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a06:	0150      	lsls	r0, r2, #5
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	1a51      	subs	r1, r2, r1
 8008a10:	61b9      	str	r1, [r7, #24]
 8008a12:	4629      	mov	r1, r5
 8008a14:	eb63 0301 	sbc.w	r3, r3, r1
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008a26:	4659      	mov	r1, fp
 8008a28:	018b      	lsls	r3, r1, #6
 8008a2a:	4651      	mov	r1, sl
 8008a2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a30:	4651      	mov	r1, sl
 8008a32:	018a      	lsls	r2, r1, #6
 8008a34:	4651      	mov	r1, sl
 8008a36:	ebb2 0801 	subs.w	r8, r2, r1
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	eb63 0901 	sbc.w	r9, r3, r1
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	f04f 0300 	mov.w	r3, #0
 8008a48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a54:	4690      	mov	r8, r2
 8008a56:	4699      	mov	r9, r3
 8008a58:	4623      	mov	r3, r4
 8008a5a:	eb18 0303 	adds.w	r3, r8, r3
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	462b      	mov	r3, r5
 8008a62:	eb49 0303 	adc.w	r3, r9, r3
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	f04f 0200 	mov.w	r2, #0
 8008a6c:	f04f 0300 	mov.w	r3, #0
 8008a70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008a74:	4629      	mov	r1, r5
 8008a76:	024b      	lsls	r3, r1, #9
 8008a78:	4621      	mov	r1, r4
 8008a7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a7e:	4621      	mov	r1, r4
 8008a80:	024a      	lsls	r2, r1, #9
 8008a82:	4610      	mov	r0, r2
 8008a84:	4619      	mov	r1, r3
 8008a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008a90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008a94:	f7f8 f928 	bl	8000ce8 <__aeabi_uldivmod>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008aa2:	e065      	b.n	8008b70 <HAL_RCC_GetSysClockFreq+0x420>
 8008aa4:	40023800 	.word	0x40023800
 8008aa8:	00f42400 	.word	0x00f42400
 8008aac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8008ba8 <HAL_RCC_GetSysClockFreq+0x458>)
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	099b      	lsrs	r3, r3, #6
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	4611      	mov	r1, r2
 8008abc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ac6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008aca:	4642      	mov	r2, r8
 8008acc:	464b      	mov	r3, r9
 8008ace:	f04f 0000 	mov.w	r0, #0
 8008ad2:	f04f 0100 	mov.w	r1, #0
 8008ad6:	0159      	lsls	r1, r3, #5
 8008ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008adc:	0150      	lsls	r0, r2, #5
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	1a51      	subs	r1, r2, r1
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	4649      	mov	r1, r9
 8008aea:	eb63 0301 	sbc.w	r3, r3, r1
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008afc:	4659      	mov	r1, fp
 8008afe:	018b      	lsls	r3, r1, #6
 8008b00:	4651      	mov	r1, sl
 8008b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b06:	4651      	mov	r1, sl
 8008b08:	018a      	lsls	r2, r1, #6
 8008b0a:	4651      	mov	r1, sl
 8008b0c:	1a54      	subs	r4, r2, r1
 8008b0e:	4659      	mov	r1, fp
 8008b10:	eb63 0501 	sbc.w	r5, r3, r1
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	00eb      	lsls	r3, r5, #3
 8008b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b22:	00e2      	lsls	r2, r4, #3
 8008b24:	4614      	mov	r4, r2
 8008b26:	461d      	mov	r5, r3
 8008b28:	4643      	mov	r3, r8
 8008b2a:	18e3      	adds	r3, r4, r3
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	464b      	mov	r3, r9
 8008b30:	eb45 0303 	adc.w	r3, r5, r3
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b42:	4629      	mov	r1, r5
 8008b44:	028b      	lsls	r3, r1, #10
 8008b46:	4621      	mov	r1, r4
 8008b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	028a      	lsls	r2, r1, #10
 8008b50:	4610      	mov	r0, r2
 8008b52:	4619      	mov	r1, r3
 8008b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b58:	2200      	movs	r2, #0
 8008b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008b5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b62:	f7f8 f8c1 	bl	8000ce8 <__aeabi_uldivmod>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008b70:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <HAL_RCC_GetSysClockFreq+0x458>)
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	0f1b      	lsrs	r3, r3, #28
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008b8e:	e003      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b90:	4b06      	ldr	r3, [pc, #24]	@ (8008bac <HAL_RCC_GetSysClockFreq+0x45c>)
 8008b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	37b8      	adds	r7, #184	@ 0xb8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	00f42400 	.word	0x00f42400

08008bb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e28d      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 8083 	beq.w	8008cd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008bd0:	4b94      	ldr	r3, [pc, #592]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f003 030c 	and.w	r3, r3, #12
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d019      	beq.n	8008c10 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008bdc:	4b91      	ldr	r3, [pc, #580]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 030c 	and.w	r3, r3, #12
        || \
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d106      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008be8:	4b8e      	ldr	r3, [pc, #568]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bf4:	d00c      	beq.n	8008c10 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008bfe:	2b0c      	cmp	r3, #12
 8008c00:	d112      	bne.n	8008c28 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c02:	4b88      	ldr	r3, [pc, #544]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c0e:	d10b      	bne.n	8008c28 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c10:	4b84      	ldr	r3, [pc, #528]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d05b      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x124>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d157      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e25a      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c30:	d106      	bne.n	8008c40 <HAL_RCC_OscConfig+0x90>
 8008c32:	4b7c      	ldr	r3, [pc, #496]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a7b      	ldr	r2, [pc, #492]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e01d      	b.n	8008c7c <HAL_RCC_OscConfig+0xcc>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c48:	d10c      	bne.n	8008c64 <HAL_RCC_OscConfig+0xb4>
 8008c4a:	4b76      	ldr	r3, [pc, #472]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a75      	ldr	r2, [pc, #468]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	4b73      	ldr	r3, [pc, #460]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a72      	ldr	r2, [pc, #456]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	e00b      	b.n	8008c7c <HAL_RCC_OscConfig+0xcc>
 8008c64:	4b6f      	ldr	r3, [pc, #444]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a6e      	ldr	r2, [pc, #440]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	4b6c      	ldr	r3, [pc, #432]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a6b      	ldr	r2, [pc, #428]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d013      	beq.n	8008cac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fc fe14 	bl	80058b0 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c8c:	f7fc fe10 	bl	80058b0 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b64      	cmp	r3, #100	@ 0x64
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e21f      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c9e:	4b61      	ldr	r3, [pc, #388]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0f0      	beq.n	8008c8c <HAL_RCC_OscConfig+0xdc>
 8008caa:	e014      	b.n	8008cd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cac:	f7fc fe00 	bl	80058b0 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cb4:	f7fc fdfc 	bl	80058b0 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b64      	cmp	r3, #100	@ 0x64
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e20b      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cc6:	4b57      	ldr	r3, [pc, #348]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x104>
 8008cd2:	e000      	b.n	8008cd6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d06f      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008ce2:	4b50      	ldr	r3, [pc, #320]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d017      	beq.n	8008d1e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008cee:	4b4d      	ldr	r3, [pc, #308]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 030c 	and.w	r3, r3, #12
        || \
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d105      	bne.n	8008d06 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00b      	beq.n	8008d1e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d06:	4b47      	ldr	r3, [pc, #284]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008d0e:	2b0c      	cmp	r3, #12
 8008d10:	d11c      	bne.n	8008d4c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d12:	4b44      	ldr	r3, [pc, #272]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d116      	bne.n	8008d4c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d1e:	4b41      	ldr	r3, [pc, #260]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <HAL_RCC_OscConfig+0x186>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d001      	beq.n	8008d36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e1d3      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d36:	4b3b      	ldr	r3, [pc, #236]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	4937      	ldr	r1, [pc, #220]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d4a:	e03a      	b.n	8008dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d020      	beq.n	8008d96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d54:	4b34      	ldr	r3, [pc, #208]	@ (8008e28 <HAL_RCC_OscConfig+0x278>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5a:	f7fc fda9 	bl	80058b0 <HAL_GetTick>
 8008d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d60:	e008      	b.n	8008d74 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d62:	f7fc fda5 	bl	80058b0 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e1b4      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d74:	4b2b      	ldr	r3, [pc, #172]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0f0      	beq.n	8008d62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d80:	4b28      	ldr	r3, [pc, #160]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4925      	ldr	r1, [pc, #148]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	600b      	str	r3, [r1, #0]
 8008d94:	e015      	b.n	8008dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d96:	4b24      	ldr	r3, [pc, #144]	@ (8008e28 <HAL_RCC_OscConfig+0x278>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7fc fd88 	bl	80058b0 <HAL_GetTick>
 8008da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008da4:	f7fc fd84 	bl	80058b0 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e193      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008db6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f0      	bne.n	8008da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0308 	and.w	r3, r3, #8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d036      	beq.n	8008e3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d016      	beq.n	8008e04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dd6:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ddc:	f7fc fd68 	bl	80058b0 <HAL_GetTick>
 8008de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008de2:	e008      	b.n	8008df6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008de4:	f7fc fd64 	bl	80058b0 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e173      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008df6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e24 <HAL_RCC_OscConfig+0x274>)
 8008df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0f0      	beq.n	8008de4 <HAL_RCC_OscConfig+0x234>
 8008e02:	e01b      	b.n	8008e3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e04:	4b09      	ldr	r3, [pc, #36]	@ (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0a:	f7fc fd51 	bl	80058b0 <HAL_GetTick>
 8008e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e10:	e00e      	b.n	8008e30 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e12:	f7fc fd4d 	bl	80058b0 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d907      	bls.n	8008e30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e15c      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
 8008e24:	40023800 	.word	0x40023800
 8008e28:	42470000 	.word	0x42470000
 8008e2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e30:	4b8a      	ldr	r3, [pc, #552]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1ea      	bne.n	8008e12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8097 	beq.w	8008f78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e4e:	4b83      	ldr	r3, [pc, #524]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10f      	bne.n	8008e7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]
 8008e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	4a7e      	ldr	r2, [pc, #504]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e72:	60bb      	str	r3, [r7, #8]
 8008e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e76:	2301      	movs	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e7a:	4b79      	ldr	r3, [pc, #484]	@ (8009060 <HAL_RCC_OscConfig+0x4b0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d118      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e86:	4b76      	ldr	r3, [pc, #472]	@ (8009060 <HAL_RCC_OscConfig+0x4b0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a75      	ldr	r2, [pc, #468]	@ (8009060 <HAL_RCC_OscConfig+0x4b0>)
 8008e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e92:	f7fc fd0d 	bl	80058b0 <HAL_GetTick>
 8008e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e98:	e008      	b.n	8008eac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e9a:	f7fc fd09 	bl	80058b0 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d901      	bls.n	8008eac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e118      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eac:	4b6c      	ldr	r3, [pc, #432]	@ (8009060 <HAL_RCC_OscConfig+0x4b0>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0f0      	beq.n	8008e9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d106      	bne.n	8008ece <HAL_RCC_OscConfig+0x31e>
 8008ec0:	4b66      	ldr	r3, [pc, #408]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ec4:	4a65      	ldr	r2, [pc, #404]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ecc:	e01c      	b.n	8008f08 <HAL_RCC_OscConfig+0x358>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d10c      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x340>
 8008ed6:	4b61      	ldr	r3, [pc, #388]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eda:	4a60      	ldr	r2, [pc, #384]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008edc:	f043 0304 	orr.w	r3, r3, #4
 8008ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ee6:	4a5d      	ldr	r2, [pc, #372]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8008eee:	e00b      	b.n	8008f08 <HAL_RCC_OscConfig+0x358>
 8008ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef4:	4a59      	ldr	r2, [pc, #356]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ef6:	f023 0301 	bic.w	r3, r3, #1
 8008efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8008efc:	4b57      	ldr	r3, [pc, #348]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f00:	4a56      	ldr	r2, [pc, #344]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008f02:	f023 0304 	bic.w	r3, r3, #4
 8008f06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d015      	beq.n	8008f3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f10:	f7fc fcce 	bl	80058b0 <HAL_GetTick>
 8008f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f16:	e00a      	b.n	8008f2e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f18:	f7fc fcca 	bl	80058b0 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d901      	bls.n	8008f2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e0d7      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0ee      	beq.n	8008f18 <HAL_RCC_OscConfig+0x368>
 8008f3a:	e014      	b.n	8008f66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f3c:	f7fc fcb8 	bl	80058b0 <HAL_GetTick>
 8008f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f42:	e00a      	b.n	8008f5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f44:	f7fc fcb4 	bl	80058b0 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e0c1      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f5a:	4b40      	ldr	r3, [pc, #256]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1ee      	bne.n	8008f44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d105      	bne.n	8008f78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f70:	4a3a      	ldr	r2, [pc, #232]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 80ad 	beq.w	80090dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f82:	4b36      	ldr	r3, [pc, #216]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 030c 	and.w	r3, r3, #12
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d060      	beq.n	8009050 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d145      	bne.n	8009022 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f96:	4b33      	ldr	r3, [pc, #204]	@ (8009064 <HAL_RCC_OscConfig+0x4b4>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9c:	f7fc fc88 	bl	80058b0 <HAL_GetTick>
 8008fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa4:	f7fc fc84 	bl	80058b0 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e093      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb6:	4b29      	ldr	r3, [pc, #164]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f0      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd0:	019b      	lsls	r3, r3, #6
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	041b      	lsls	r3, r3, #16
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	061b      	lsls	r3, r3, #24
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fec:	071b      	lsls	r3, r3, #28
 8008fee:	491b      	ldr	r1, [pc, #108]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8009064 <HAL_RCC_OscConfig+0x4b4>)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ffa:	f7fc fc59 	bl	80058b0 <HAL_GetTick>
 8008ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009000:	e008      	b.n	8009014 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009002:	f7fc fc55 	bl	80058b0 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e064      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009014:	4b11      	ldr	r3, [pc, #68]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f0      	beq.n	8009002 <HAL_RCC_OscConfig+0x452>
 8009020:	e05c      	b.n	80090dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009022:	4b10      	ldr	r3, [pc, #64]	@ (8009064 <HAL_RCC_OscConfig+0x4b4>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009028:	f7fc fc42 	bl	80058b0 <HAL_GetTick>
 800902c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800902e:	e008      	b.n	8009042 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009030:	f7fc fc3e 	bl	80058b0 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e04d      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009042:	4b06      	ldr	r3, [pc, #24]	@ (800905c <HAL_RCC_OscConfig+0x4ac>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f0      	bne.n	8009030 <HAL_RCC_OscConfig+0x480>
 800904e:	e045      	b.n	80090dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d107      	bne.n	8009068 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e040      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
 800905c:	40023800 	.word	0x40023800
 8009060:	40007000 	.word	0x40007000
 8009064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009068:	4b1f      	ldr	r3, [pc, #124]	@ (80090e8 <HAL_RCC_OscConfig+0x538>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d030      	beq.n	80090d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009080:	429a      	cmp	r2, r3
 8009082:	d129      	bne.n	80090d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908e:	429a      	cmp	r2, r3
 8009090:	d122      	bne.n	80090d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009098:	4013      	ands	r3, r2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800909e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d119      	bne.n	80090d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	3b01      	subs	r3, #1
 80090b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d10f      	bne.n	80090d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d107      	bne.n	80090d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d001      	beq.n	80090dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40023800 	.word	0x40023800

080090ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e07b      	b.n	80091f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d108      	bne.n	8009118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800910e:	d009      	beq.n	8009124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	61da      	str	r2, [r3, #28]
 8009116:	e005      	b.n	8009124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7f8 fc70 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800915a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
 80091a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a8:	ea42 0103 	orr.w	r1, r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	0c1b      	lsrs	r3, r3, #16
 80091c2:	f003 0104 	and.w	r1, r3, #4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	f003 0210 	and.w	r2, r3, #16
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69da      	ldr	r2, [r3, #28]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b088      	sub	sp, #32
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800920e:	f7fc fb4f 	bl	80058b0 <HAL_GetTick>
 8009212:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b01      	cmp	r3, #1
 8009222:	d001      	beq.n	8009228 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009224:	2302      	movs	r3, #2
 8009226:	e12a      	b.n	800947e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <HAL_SPI_Transmit+0x36>
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e122      	b.n	800947e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_SPI_Transmit+0x48>
 8009242:	2302      	movs	r3, #2
 8009244:	e11b      	b.n	800947e <HAL_SPI_Transmit+0x280>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2203      	movs	r2, #3
 8009252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	88fa      	ldrh	r2, [r7, #6]
 800926c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009294:	d10f      	bne.n	80092b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c0:	2b40      	cmp	r3, #64	@ 0x40
 80092c2:	d007      	beq.n	80092d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092dc:	d152      	bne.n	8009384 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <HAL_SPI_Transmit+0xee>
 80092e6:	8b7b      	ldrh	r3, [r7, #26]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d145      	bne.n	8009378 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b01      	subs	r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009310:	e032      	b.n	8009378 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d112      	bne.n	8009346 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009324:	881a      	ldrh	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009330:	1c9a      	adds	r2, r3, #2
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800933a:	b29b      	uxth	r3, r3
 800933c:	3b01      	subs	r3, #1
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009344:	e018      	b.n	8009378 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009346:	f7fc fab3 	bl	80058b0 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d803      	bhi.n	800935e <HAL_SPI_Transmit+0x160>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800935c:	d102      	bne.n	8009364 <HAL_SPI_Transmit+0x166>
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d109      	bne.n	8009378 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e082      	b.n	800947e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1c7      	bne.n	8009312 <HAL_SPI_Transmit+0x114>
 8009382:	e053      	b.n	800942c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <HAL_SPI_Transmit+0x194>
 800938c:	8b7b      	ldrh	r3, [r7, #26]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d147      	bne.n	8009422 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	330c      	adds	r3, #12
 800939c:	7812      	ldrb	r2, [r2, #0]
 800939e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80093b8:	e033      	b.n	8009422 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d113      	bne.n	80093f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	330c      	adds	r3, #12
 80093d2:	7812      	ldrb	r2, [r2, #0]
 80093d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80093ee:	e018      	b.n	8009422 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093f0:	f7fc fa5e 	bl	80058b0 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d803      	bhi.n	8009408 <HAL_SPI_Transmit+0x20a>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009406:	d102      	bne.n	800940e <HAL_SPI_Transmit+0x210>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e02d      	b.n	800947e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1c6      	bne.n	80093ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f8b1 	bl	8009598 <SPI_EndRxTxTransaction>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2220      	movs	r2, #32
 8009440:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800947c:	2300      	movs	r3, #0
  }
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	4613      	mov	r3, r2
 8009496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009498:	f7fc fa0a 	bl	80058b0 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a0:	1a9b      	subs	r3, r3, r2
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4413      	add	r3, r2
 80094a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094a8:	f7fc fa02 	bl	80058b0 <HAL_GetTick>
 80094ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094ae:	4b39      	ldr	r3, [pc, #228]	@ (8009594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	015b      	lsls	r3, r3, #5
 80094b4:	0d1b      	lsrs	r3, r3, #20
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	fb02 f303 	mul.w	r3, r2, r3
 80094bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094be:	e055      	b.n	800956c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094c6:	d051      	beq.n	800956c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094c8:	f7fc f9f2 	bl	80058b0 <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d902      	bls.n	80094de <SPI_WaitFlagStateUntilTimeout+0x56>
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d13d      	bne.n	800955a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094f6:	d111      	bne.n	800951c <SPI_WaitFlagStateUntilTimeout+0x94>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009500:	d004      	beq.n	800950c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800950a:	d107      	bne.n	800951c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800951a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009524:	d10f      	bne.n	8009546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e018      	b.n	800958c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	e002      	b.n	800956c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	3b01      	subs	r3, #1
 800956a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	4013      	ands	r3, r2
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	429a      	cmp	r2, r3
 800957a:	bf0c      	ite	eq
 800957c:	2301      	moveq	r3, #1
 800957e:	2300      	movne	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	429a      	cmp	r2, r3
 8009588:	d19a      	bne.n	80094c0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000004 	.word	0x20000004

08009598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2201      	movs	r2, #1
 80095ac:	2102      	movs	r1, #2
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff ff6a 	bl	8009488 <SPI_WaitFlagStateUntilTimeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f043 0220 	orr.w	r2, r3, #32
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e032      	b.n	8009630 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80095ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009638 <SPI_EndRxTxTransaction+0xa0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1b      	ldr	r2, [pc, #108]	@ (800963c <SPI_EndRxTxTransaction+0xa4>)
 80095d0:	fba2 2303 	umull	r2, r3, r2, r3
 80095d4:	0d5b      	lsrs	r3, r3, #21
 80095d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095da:	fb02 f303 	mul.w	r3, r2, r3
 80095de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095e8:	d112      	bne.n	8009610 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2200      	movs	r2, #0
 80095f2:	2180      	movs	r1, #128	@ 0x80
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f7ff ff47 	bl	8009488 <SPI_WaitFlagStateUntilTimeout>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d016      	beq.n	800962e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009604:	f043 0220 	orr.w	r2, r3, #32
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e00f      	b.n	8009630 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	3b01      	subs	r3, #1
 800961a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009626:	2b80      	cmp	r3, #128	@ 0x80
 8009628:	d0f2      	beq.n	8009610 <SPI_EndRxTxTransaction+0x78>
 800962a:	e000      	b.n	800962e <SPI_EndRxTxTransaction+0x96>
        break;
 800962c:	bf00      	nop
  }

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000004 	.word	0x20000004
 800963c:	165e9f81 	.word	0x165e9f81

08009640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e041      	b.n	80096d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7f8 fea8 	bl	80023bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f001 f818 	bl	800a6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d001      	beq.n	80096f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e046      	b.n	8009786 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a23      	ldr	r2, [pc, #140]	@ (8009794 <HAL_TIM_Base_Start+0xb4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d022      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009712:	d01d      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1f      	ldr	r2, [pc, #124]	@ (8009798 <HAL_TIM_Base_Start+0xb8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d018      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a1e      	ldr	r2, [pc, #120]	@ (800979c <HAL_TIM_Base_Start+0xbc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d013      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a1c      	ldr	r2, [pc, #112]	@ (80097a0 <HAL_TIM_Base_Start+0xc0>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00e      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a1b      	ldr	r2, [pc, #108]	@ (80097a4 <HAL_TIM_Base_Start+0xc4>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d009      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a19      	ldr	r2, [pc, #100]	@ (80097a8 <HAL_TIM_Base_Start+0xc8>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d004      	beq.n	8009750 <HAL_TIM_Base_Start+0x70>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a18      	ldr	r2, [pc, #96]	@ (80097ac <HAL_TIM_Base_Start+0xcc>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d111      	bne.n	8009774 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b06      	cmp	r3, #6
 8009760:	d010      	beq.n	8009784 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f042 0201 	orr.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009772:	e007      	b.n	8009784 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40010000 	.word	0x40010000
 8009798:	40000400 	.word	0x40000400
 800979c:	40000800 	.word	0x40000800
 80097a0:	40000c00 	.word	0x40000c00
 80097a4:	40010400 	.word	0x40010400
 80097a8:	40014000 	.word	0x40014000
 80097ac:	40001800 	.word	0x40001800

080097b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d001      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e04e      	b.n	8009866 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0201 	orr.w	r2, r2, #1
 80097de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a23      	ldr	r2, [pc, #140]	@ (8009874 <HAL_TIM_Base_Start_IT+0xc4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d022      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f2:	d01d      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009878 <HAL_TIM_Base_Start_IT+0xc8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d018      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a1e      	ldr	r2, [pc, #120]	@ (800987c <HAL_TIM_Base_Start_IT+0xcc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d013      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a1c      	ldr	r2, [pc, #112]	@ (8009880 <HAL_TIM_Base_Start_IT+0xd0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00e      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a1b      	ldr	r2, [pc, #108]	@ (8009884 <HAL_TIM_Base_Start_IT+0xd4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d009      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a19      	ldr	r2, [pc, #100]	@ (8009888 <HAL_TIM_Base_Start_IT+0xd8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d004      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x80>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a18      	ldr	r2, [pc, #96]	@ (800988c <HAL_TIM_Base_Start_IT+0xdc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d111      	bne.n	8009854 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b06      	cmp	r3, #6
 8009840:	d010      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0201 	orr.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009852:	e007      	b.n	8009864 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0201 	orr.w	r2, r2, #1
 8009862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	40010000 	.word	0x40010000
 8009878:	40000400 	.word	0x40000400
 800987c:	40000800 	.word	0x40000800
 8009880:	40000c00 	.word	0x40000c00
 8009884:	40010400 	.word	0x40010400
 8009888:	40014000 	.word	0x40014000
 800988c:	40001800 	.word	0x40001800

08009890 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e041      	b.n	8009926 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f8 fe4e 	bl	8002558 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	f000 fef0 	bl	800a6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d109      	bne.n	8009958 <HAL_TIM_OC_Start_IT+0x28>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b01      	cmp	r3, #1
 800994e:	bf14      	ite	ne
 8009950:	2301      	movne	r3, #1
 8009952:	2300      	moveq	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	e022      	b.n	800999e <HAL_TIM_OC_Start_IT+0x6e>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2b04      	cmp	r3, #4
 800995c:	d109      	bne.n	8009972 <HAL_TIM_OC_Start_IT+0x42>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b01      	cmp	r3, #1
 8009968:	bf14      	ite	ne
 800996a:	2301      	movne	r3, #1
 800996c:	2300      	moveq	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	e015      	b.n	800999e <HAL_TIM_OC_Start_IT+0x6e>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b08      	cmp	r3, #8
 8009976:	d109      	bne.n	800998c <HAL_TIM_OC_Start_IT+0x5c>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b01      	cmp	r3, #1
 8009982:	bf14      	ite	ne
 8009984:	2301      	movne	r3, #1
 8009986:	2300      	moveq	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	e008      	b.n	800999e <HAL_TIM_OC_Start_IT+0x6e>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b01      	cmp	r3, #1
 8009996:	bf14      	ite	ne
 8009998:	2301      	movne	r3, #1
 800999a:	2300      	moveq	r3, #0
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e0c7      	b.n	8009b36 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <HAL_TIM_OC_Start_IT+0x86>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099b4:	e013      	b.n	80099de <HAL_TIM_OC_Start_IT+0xae>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b04      	cmp	r3, #4
 80099ba:	d104      	bne.n	80099c6 <HAL_TIM_OC_Start_IT+0x96>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099c4:	e00b      	b.n	80099de <HAL_TIM_OC_Start_IT+0xae>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d104      	bne.n	80099d6 <HAL_TIM_OC_Start_IT+0xa6>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d4:	e003      	b.n	80099de <HAL_TIM_OC_Start_IT+0xae>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2202      	movs	r2, #2
 80099da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	d841      	bhi.n	8009a68 <HAL_TIM_OC_Start_IT+0x138>
 80099e4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <HAL_TIM_OC_Start_IT+0xbc>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a21 	.word	0x08009a21
 80099f0:	08009a69 	.word	0x08009a69
 80099f4:	08009a69 	.word	0x08009a69
 80099f8:	08009a69 	.word	0x08009a69
 80099fc:	08009a33 	.word	0x08009a33
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	08009a69 	.word	0x08009a69
 8009a08:	08009a69 	.word	0x08009a69
 8009a0c:	08009a45 	.word	0x08009a45
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a69 	.word	0x08009a69
 8009a18:	08009a69 	.word	0x08009a69
 8009a1c:	08009a57 	.word	0x08009a57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f042 0202 	orr.w	r2, r2, #2
 8009a2e:	60da      	str	r2, [r3, #12]
      break;
 8009a30:	e01d      	b.n	8009a6e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0204 	orr.w	r2, r2, #4
 8009a40:	60da      	str	r2, [r3, #12]
      break;
 8009a42:	e014      	b.n	8009a6e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0208 	orr.w	r2, r2, #8
 8009a52:	60da      	str	r2, [r3, #12]
      break;
 8009a54:	e00b      	b.n	8009a6e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f042 0210 	orr.w	r2, r2, #16
 8009a64:	60da      	str	r2, [r3, #12]
      break;
 8009a66:	e002      	b.n	8009a6e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d15f      	bne.n	8009b34 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 f99a 	bl	800adb6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a2e      	ldr	r2, [pc, #184]	@ (8009b40 <HAL_TIM_OC_Start_IT+0x210>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_TIM_OC_Start_IT+0x166>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a2c      	ldr	r2, [pc, #176]	@ (8009b44 <HAL_TIM_OC_Start_IT+0x214>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d101      	bne.n	8009a9a <HAL_TIM_OC_Start_IT+0x16a>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e000      	b.n	8009a9c <HAL_TIM_OC_Start_IT+0x16c>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d007      	beq.n	8009ab0 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009aae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a22      	ldr	r2, [pc, #136]	@ (8009b40 <HAL_TIM_OC_Start_IT+0x210>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d022      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac2:	d01d      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8009b48 <HAL_TIM_OC_Start_IT+0x218>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d018      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b4c <HAL_TIM_OC_Start_IT+0x21c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d013      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a1c      	ldr	r2, [pc, #112]	@ (8009b50 <HAL_TIM_OC_Start_IT+0x220>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00e      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a17      	ldr	r2, [pc, #92]	@ (8009b44 <HAL_TIM_OC_Start_IT+0x214>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d009      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a18      	ldr	r2, [pc, #96]	@ (8009b54 <HAL_TIM_OC_Start_IT+0x224>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d004      	beq.n	8009b00 <HAL_TIM_OC_Start_IT+0x1d0>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a17      	ldr	r2, [pc, #92]	@ (8009b58 <HAL_TIM_OC_Start_IT+0x228>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d111      	bne.n	8009b24 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b06      	cmp	r3, #6
 8009b10:	d010      	beq.n	8009b34 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0201 	orr.w	r2, r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b22:	e007      	b.n	8009b34 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0201 	orr.w	r2, r2, #1
 8009b32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	40010000 	.word	0x40010000
 8009b44:	40010400 	.word	0x40010400
 8009b48:	40000400 	.word	0x40000400
 8009b4c:	40000800 	.word	0x40000800
 8009b50:	40000c00 	.word	0x40000c00
 8009b54:	40014000 	.word	0x40014000
 8009b58:	40001800 	.word	0x40001800

08009b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e041      	b.n	8009bf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7f8 fcb2 	bl	80024ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f000 fd8a 	bl	800a6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <HAL_TIM_PWM_Start+0x24>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	bf14      	ite	ne
 8009c18:	2301      	movne	r3, #1
 8009c1a:	2300      	moveq	r3, #0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	e022      	b.n	8009c66 <HAL_TIM_PWM_Start+0x6a>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d109      	bne.n	8009c3a <HAL_TIM_PWM_Start+0x3e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	bf14      	ite	ne
 8009c32:	2301      	movne	r3, #1
 8009c34:	2300      	moveq	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	e015      	b.n	8009c66 <HAL_TIM_PWM_Start+0x6a>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d109      	bne.n	8009c54 <HAL_TIM_PWM_Start+0x58>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	bf14      	ite	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	2300      	moveq	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	e008      	b.n	8009c66 <HAL_TIM_PWM_Start+0x6a>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	bf14      	ite	ne
 8009c60:	2301      	movne	r3, #1
 8009c62:	2300      	moveq	r3, #0
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e07c      	b.n	8009d68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <HAL_TIM_PWM_Start+0x82>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c7c:	e013      	b.n	8009ca6 <HAL_TIM_PWM_Start+0xaa>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d104      	bne.n	8009c8e <HAL_TIM_PWM_Start+0x92>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c8c:	e00b      	b.n	8009ca6 <HAL_TIM_PWM_Start+0xaa>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d104      	bne.n	8009c9e <HAL_TIM_PWM_Start+0xa2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2202      	movs	r2, #2
 8009c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c9c:	e003      	b.n	8009ca6 <HAL_TIM_PWM_Start+0xaa>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2201      	movs	r2, #1
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 f881 	bl	800adb6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8009d70 <HAL_TIM_PWM_Start+0x174>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_TIM_PWM_Start+0xcc>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009d74 <HAL_TIM_PWM_Start+0x178>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d101      	bne.n	8009ccc <HAL_TIM_PWM_Start+0xd0>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e000      	b.n	8009cce <HAL_TIM_PWM_Start+0xd2>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a22      	ldr	r2, [pc, #136]	@ (8009d70 <HAL_TIM_PWM_Start+0x174>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d022      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf4:	d01d      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8009d78 <HAL_TIM_PWM_Start+0x17c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d018      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	@ (8009d7c <HAL_TIM_PWM_Start+0x180>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d013      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009d80 <HAL_TIM_PWM_Start+0x184>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00e      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a16      	ldr	r2, [pc, #88]	@ (8009d74 <HAL_TIM_PWM_Start+0x178>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d009      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a18      	ldr	r2, [pc, #96]	@ (8009d84 <HAL_TIM_PWM_Start+0x188>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d004      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x136>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a16      	ldr	r2, [pc, #88]	@ (8009d88 <HAL_TIM_PWM_Start+0x18c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d111      	bne.n	8009d56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b06      	cmp	r3, #6
 8009d42:	d010      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0201 	orr.w	r2, r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d54:	e007      	b.n	8009d66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f042 0201 	orr.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40010000 	.word	0x40010000
 8009d74:	40010400 	.word	0x40010400
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	40014000 	.word	0x40014000
 8009d88:	40001800 	.word	0x40001800

08009d8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e097      	b.n	8009ed0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f88f 	bl	8009ed8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6812      	ldr	r2, [r2, #0]
 8009dcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dd0:	f023 0307 	bic.w	r3, r3, #7
 8009dd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f000 fc67 	bl	800a6b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009e2c:	f023 030c 	bic.w	r3, r3, #12
 8009e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	021b      	lsls	r3, r3, #8
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	011a      	lsls	r2, r3, #4
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	031b      	lsls	r3, r3, #12
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009e6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009e72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009efc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009f04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d110      	bne.n	8009f3e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d102      	bne.n	8009f28 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f22:	7b7b      	ldrb	r3, [r7, #13]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d001      	beq.n	8009f2c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e089      	b.n	800a040 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f3c:	e031      	b.n	8009fa2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d110      	bne.n	8009f66 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d102      	bne.n	8009f50 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f4a:	7b3b      	ldrb	r3, [r7, #12]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d001      	beq.n	8009f54 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e075      	b.n	800a040 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f64:	e01d      	b.n	8009fa2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d108      	bne.n	8009f7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d105      	bne.n	8009f7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f72:	7b7b      	ldrb	r3, [r7, #13]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d102      	bne.n	8009f7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f78:	7b3b      	ldrb	r3, [r7, #12]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d001      	beq.n	8009f82 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e05e      	b.n	800a040 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d010      	beq.n	8009fd0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009fae:	e01f      	b.n	8009ff0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 fefc 	bl	800adb6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 0202 	orr.w	r2, r2, #2
 8009fcc:	60da      	str	r2, [r3, #12]
      break;
 8009fce:	e02e      	b.n	800a02e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 feec 	bl	800adb6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0204 	orr.w	r2, r2, #4
 8009fec:	60da      	str	r2, [r3, #12]
      break;
 8009fee:	e01e      	b.n	800a02e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fedc 	bl	800adb6 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2201      	movs	r2, #1
 800a004:	2104      	movs	r1, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fed5 	bl	800adb6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0202 	orr.w	r2, r2, #2
 800a01a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0204 	orr.w	r2, r2, #4
 800a02a:	60da      	str	r2, [r3, #12]
      break;
 800a02c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0201 	orr.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d020      	beq.n	800a0ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01b      	beq.n	800a0ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f06f 0202 	mvn.w	r2, #2
 800a07c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	f003 0303 	and.w	r3, r3, #3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 faef 	bl	800a676 <HAL_TIM_IC_CaptureCallback>
 800a098:	e005      	b.n	800a0a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f7 fbf8 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 faf2 	bl	800a68a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d020      	beq.n	800a0f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01b      	beq.n	800a0f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f06f 0204 	mvn.w	r2, #4
 800a0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fac9 	bl	800a676 <HAL_TIM_IC_CaptureCallback>
 800a0e4:	e005      	b.n	800a0f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7f7 fbd2 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 facc 	bl	800a68a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f003 0308 	and.w	r3, r3, #8
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d020      	beq.n	800a144 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f003 0308 	and.w	r3, r3, #8
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01b      	beq.n	800a144 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f06f 0208 	mvn.w	r2, #8
 800a114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2204      	movs	r2, #4
 800a11a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 faa3 	bl	800a676 <HAL_TIM_IC_CaptureCallback>
 800a130:	e005      	b.n	800a13e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7f7 fbac 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 faa6 	bl	800a68a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f003 0310 	and.w	r3, r3, #16
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d020      	beq.n	800a190 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f003 0310 	and.w	r3, r3, #16
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01b      	beq.n	800a190 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f06f 0210 	mvn.w	r2, #16
 800a160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2208      	movs	r2, #8
 800a166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa7d 	bl	800a676 <HAL_TIM_IC_CaptureCallback>
 800a17c:	e005      	b.n	800a18a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7f7 fb86 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fa80 	bl	800a68a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00c      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d007      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f06f 0201 	mvn.w	r2, #1
 800a1ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7f7 fb26 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00c      	beq.n	800a1d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d007      	beq.n	800a1d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fe9a 	bl	800af0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00c      	beq.n	800a1fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d007      	beq.n	800a1fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa51 	bl	800a69e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f003 0320 	and.w	r3, r3, #32
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00c      	beq.n	800a220 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d007      	beq.n	800a220 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f06f 0220 	mvn.w	r2, #32
 800a218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fe6c 	bl	800aef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a242:	2302      	movs	r3, #2
 800a244:	e048      	b.n	800a2d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b0c      	cmp	r3, #12
 800a252:	d839      	bhi.n	800a2c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a254:	a201      	add	r2, pc, #4	@ (adr r2, 800a25c <HAL_TIM_OC_ConfigChannel+0x34>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a291 	.word	0x0800a291
 800a260:	0800a2c9 	.word	0x0800a2c9
 800a264:	0800a2c9 	.word	0x0800a2c9
 800a268:	0800a2c9 	.word	0x0800a2c9
 800a26c:	0800a29f 	.word	0x0800a29f
 800a270:	0800a2c9 	.word	0x0800a2c9
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a2c9 	.word	0x0800a2c9
 800a27c:	0800a2ad 	.word	0x0800a2ad
 800a280:	0800a2c9 	.word	0x0800a2c9
 800a284:	0800a2c9 	.word	0x0800a2c9
 800a288:	0800a2c9 	.word	0x0800a2c9
 800a28c:	0800a2bb 	.word	0x0800a2bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68b9      	ldr	r1, [r7, #8]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fab2 	bl	800a800 <TIM_OC1_SetConfig>
      break;
 800a29c:	e017      	b.n	800a2ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 fb1b 	bl	800a8e0 <TIM_OC2_SetConfig>
      break;
 800a2aa:	e010      	b.n	800a2ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fb8a 	bl	800a9cc <TIM_OC3_SetConfig>
      break;
 800a2b8:	e009      	b.n	800a2ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fbf7 	bl	800aab4 <TIM_OC4_SetConfig>
      break;
 800a2c6:	e002      	b.n	800a2ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a2cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e0ae      	b.n	800a45c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b0c      	cmp	r3, #12
 800a30a:	f200 809f 	bhi.w	800a44c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a30e:	a201      	add	r2, pc, #4	@ (adr r2, 800a314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a44d 	.word	0x0800a44d
 800a31c:	0800a44d 	.word	0x0800a44d
 800a320:	0800a44d 	.word	0x0800a44d
 800a324:	0800a389 	.word	0x0800a389
 800a328:	0800a44d 	.word	0x0800a44d
 800a32c:	0800a44d 	.word	0x0800a44d
 800a330:	0800a44d 	.word	0x0800a44d
 800a334:	0800a3cb 	.word	0x0800a3cb
 800a338:	0800a44d 	.word	0x0800a44d
 800a33c:	0800a44d 	.word	0x0800a44d
 800a340:	0800a44d 	.word	0x0800a44d
 800a344:	0800a40b 	.word	0x0800a40b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fa56 	bl	800a800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	699a      	ldr	r2, [r3, #24]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0208 	orr.w	r2, r2, #8
 800a362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699a      	ldr	r2, [r3, #24]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0204 	bic.w	r2, r2, #4
 800a372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6999      	ldr	r1, [r3, #24]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	430a      	orrs	r2, r1
 800a384:	619a      	str	r2, [r3, #24]
      break;
 800a386:	e064      	b.n	800a452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68b9      	ldr	r1, [r7, #8]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 faa6 	bl	800a8e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	699a      	ldr	r2, [r3, #24]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6999      	ldr	r1, [r3, #24]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	021a      	lsls	r2, r3, #8
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	619a      	str	r2, [r3, #24]
      break;
 800a3c8:	e043      	b.n	800a452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68b9      	ldr	r1, [r7, #8]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 fafb 	bl	800a9cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	69da      	ldr	r2, [r3, #28]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f042 0208 	orr.w	r2, r2, #8
 800a3e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	69da      	ldr	r2, [r3, #28]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0204 	bic.w	r2, r2, #4
 800a3f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	69d9      	ldr	r1, [r3, #28]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	61da      	str	r2, [r3, #28]
      break;
 800a408:	e023      	b.n	800a452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fb4f 	bl	800aab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69da      	ldr	r2, [r3, #28]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69da      	ldr	r2, [r3, #28]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69d9      	ldr	r1, [r3, #28]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	021a      	lsls	r2, r3, #8
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	61da      	str	r2, [r3, #28]
      break;
 800a44a:	e002      	b.n	800a452 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
      break;
 800a450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_TIM_ConfigClockSource+0x1c>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e0b4      	b.n	800a5ea <HAL_TIM_ConfigClockSource+0x186>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a49e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4b8:	d03e      	beq.n	800a538 <HAL_TIM_ConfigClockSource+0xd4>
 800a4ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4be:	f200 8087 	bhi.w	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4c6:	f000 8086 	beq.w	800a5d6 <HAL_TIM_ConfigClockSource+0x172>
 800a4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ce:	d87f      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4d0:	2b70      	cmp	r3, #112	@ 0x70
 800a4d2:	d01a      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0xa6>
 800a4d4:	2b70      	cmp	r3, #112	@ 0x70
 800a4d6:	d87b      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4d8:	2b60      	cmp	r3, #96	@ 0x60
 800a4da:	d050      	beq.n	800a57e <HAL_TIM_ConfigClockSource+0x11a>
 800a4dc:	2b60      	cmp	r3, #96	@ 0x60
 800a4de:	d877      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4e0:	2b50      	cmp	r3, #80	@ 0x50
 800a4e2:	d03c      	beq.n	800a55e <HAL_TIM_ConfigClockSource+0xfa>
 800a4e4:	2b50      	cmp	r3, #80	@ 0x50
 800a4e6:	d873      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4e8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ea:	d058      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x13a>
 800a4ec:	2b40      	cmp	r3, #64	@ 0x40
 800a4ee:	d86f      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4f0:	2b30      	cmp	r3, #48	@ 0x30
 800a4f2:	d064      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x15a>
 800a4f4:	2b30      	cmp	r3, #48	@ 0x30
 800a4f6:	d86b      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a4f8:	2b20      	cmp	r3, #32
 800a4fa:	d060      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x15a>
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d867      	bhi.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d05c      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x15a>
 800a504:	2b10      	cmp	r3, #16
 800a506:	d05a      	beq.n	800a5be <HAL_TIM_ConfigClockSource+0x15a>
 800a508:	e062      	b.n	800a5d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a51a:	f000 fc2c 	bl	800ad76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a52c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	609a      	str	r2, [r3, #8]
      break;
 800a536:	e04f      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a548:	f000 fc15 	bl	800ad76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a55a:	609a      	str	r2, [r3, #8]
      break;
 800a55c:	e03c      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a56a:	461a      	mov	r2, r3
 800a56c:	f000 fb89 	bl	800ac82 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2150      	movs	r1, #80	@ 0x50
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fbe2 	bl	800ad40 <TIM_ITRx_SetConfig>
      break;
 800a57c:	e02c      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a58a:	461a      	mov	r2, r3
 800a58c:	f000 fba8 	bl	800ace0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2160      	movs	r1, #96	@ 0x60
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fbd2 	bl	800ad40 <TIM_ITRx_SetConfig>
      break;
 800a59c:	e01c      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f000 fb69 	bl	800ac82 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2140      	movs	r1, #64	@ 0x40
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fbc2 	bl	800ad40 <TIM_ITRx_SetConfig>
      break;
 800a5bc:	e00c      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f000 fbb9 	bl	800ad40 <TIM_ITRx_SetConfig>
      break;
 800a5ce:	e003      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d4:	e000      	b.n	800a5d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a5d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a602:	2b01      	cmp	r3, #1
 800a604:	d101      	bne.n	800a60a <HAL_TIM_SlaveConfigSynchro+0x18>
 800a606:	2302      	movs	r3, #2
 800a608:	e031      	b.n	800a66e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2202      	movs	r2, #2
 800a616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fa9f 	bl	800ab60 <TIM_SlaveTimer_SetConfig>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d009      	beq.n	800a63c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e018      	b.n	800a66e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a64a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a65a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a43      	ldr	r2, [pc, #268]	@ (800a7d4 <TIM_Base_SetConfig+0x120>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d013      	beq.n	800a6f4 <TIM_Base_SetConfig+0x40>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d2:	d00f      	beq.n	800a6f4 <TIM_Base_SetConfig+0x40>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a40      	ldr	r2, [pc, #256]	@ (800a7d8 <TIM_Base_SetConfig+0x124>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d00b      	beq.n	800a6f4 <TIM_Base_SetConfig+0x40>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a3f      	ldr	r2, [pc, #252]	@ (800a7dc <TIM_Base_SetConfig+0x128>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d007      	beq.n	800a6f4 <TIM_Base_SetConfig+0x40>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a3e      	ldr	r2, [pc, #248]	@ (800a7e0 <TIM_Base_SetConfig+0x12c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d003      	beq.n	800a6f4 <TIM_Base_SetConfig+0x40>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a3d      	ldr	r2, [pc, #244]	@ (800a7e4 <TIM_Base_SetConfig+0x130>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d108      	bne.n	800a706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a32      	ldr	r2, [pc, #200]	@ (800a7d4 <TIM_Base_SetConfig+0x120>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d02b      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a714:	d027      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a2f      	ldr	r2, [pc, #188]	@ (800a7d8 <TIM_Base_SetConfig+0x124>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d023      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a2e      	ldr	r2, [pc, #184]	@ (800a7dc <TIM_Base_SetConfig+0x128>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d01f      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a2d      	ldr	r2, [pc, #180]	@ (800a7e0 <TIM_Base_SetConfig+0x12c>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d01b      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e4 <TIM_Base_SetConfig+0x130>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d017      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a2b      	ldr	r2, [pc, #172]	@ (800a7e8 <TIM_Base_SetConfig+0x134>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d013      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a2a      	ldr	r2, [pc, #168]	@ (800a7ec <TIM_Base_SetConfig+0x138>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d00f      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a29      	ldr	r2, [pc, #164]	@ (800a7f0 <TIM_Base_SetConfig+0x13c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00b      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a28      	ldr	r2, [pc, #160]	@ (800a7f4 <TIM_Base_SetConfig+0x140>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d007      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a27      	ldr	r2, [pc, #156]	@ (800a7f8 <TIM_Base_SetConfig+0x144>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d003      	beq.n	800a766 <TIM_Base_SetConfig+0xb2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a26      	ldr	r2, [pc, #152]	@ (800a7fc <TIM_Base_SetConfig+0x148>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d108      	bne.n	800a778 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a76c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a0e      	ldr	r2, [pc, #56]	@ (800a7d4 <TIM_Base_SetConfig+0x120>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d003      	beq.n	800a7a6 <TIM_Base_SetConfig+0xf2>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a10      	ldr	r2, [pc, #64]	@ (800a7e4 <TIM_Base_SetConfig+0x130>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d103      	bne.n	800a7ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	691a      	ldr	r2, [r3, #16]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f043 0204 	orr.w	r2, r3, #4
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	601a      	str	r2, [r3, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	40010000 	.word	0x40010000
 800a7d8:	40000400 	.word	0x40000400
 800a7dc:	40000800 	.word	0x40000800
 800a7e0:	40000c00 	.word	0x40000c00
 800a7e4:	40010400 	.word	0x40010400
 800a7e8:	40014000 	.word	0x40014000
 800a7ec:	40014400 	.word	0x40014400
 800a7f0:	40014800 	.word	0x40014800
 800a7f4:	40001800 	.word	0x40001800
 800a7f8:	40001c00 	.word	0x40001c00
 800a7fc:	40002000 	.word	0x40002000

0800a800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a1b      	ldr	r3, [r3, #32]
 800a814:	f023 0201 	bic.w	r2, r3, #1
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f023 0302 	bic.w	r3, r3, #2
 800a848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a20      	ldr	r2, [pc, #128]	@ (800a8d8 <TIM_OC1_SetConfig+0xd8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC1_SetConfig+0x64>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8dc <TIM_OC1_SetConfig+0xdc>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d10c      	bne.n	800a87e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0308 	bic.w	r3, r3, #8
 800a86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f023 0304 	bic.w	r3, r3, #4
 800a87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a15      	ldr	r2, [pc, #84]	@ (800a8d8 <TIM_OC1_SetConfig+0xd8>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d003      	beq.n	800a88e <TIM_OC1_SetConfig+0x8e>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a14      	ldr	r2, [pc, #80]	@ (800a8dc <TIM_OC1_SetConfig+0xdc>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d111      	bne.n	800a8b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a89c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	621a      	str	r2, [r3, #32]
}
 800a8cc:	bf00      	nop
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	40010000 	.word	0x40010000
 800a8dc:	40010400 	.word	0x40010400

0800a8e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	f023 0210 	bic.w	r2, r3, #16
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f023 0320 	bic.w	r3, r3, #32
 800a92a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	011b      	lsls	r3, r3, #4
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4313      	orrs	r3, r2
 800a936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a22      	ldr	r2, [pc, #136]	@ (800a9c4 <TIM_OC2_SetConfig+0xe4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC2_SetConfig+0x68>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a21      	ldr	r2, [pc, #132]	@ (800a9c8 <TIM_OC2_SetConfig+0xe8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d10d      	bne.n	800a964 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	4313      	orrs	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a17      	ldr	r2, [pc, #92]	@ (800a9c4 <TIM_OC2_SetConfig+0xe4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d003      	beq.n	800a974 <TIM_OC2_SetConfig+0x94>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a16      	ldr	r2, [pc, #88]	@ (800a9c8 <TIM_OC2_SetConfig+0xe8>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d113      	bne.n	800a99c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a97a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	4313      	orrs	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	621a      	str	r2, [r3, #32]
}
 800a9b6:	bf00      	nop
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40010400 	.word	0x40010400

0800a9cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b087      	sub	sp, #28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f023 0303 	bic.w	r3, r3, #3
 800aa02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	021b      	lsls	r3, r3, #8
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a21      	ldr	r2, [pc, #132]	@ (800aaac <TIM_OC3_SetConfig+0xe0>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d003      	beq.n	800aa32 <TIM_OC3_SetConfig+0x66>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a20      	ldr	r2, [pc, #128]	@ (800aab0 <TIM_OC3_SetConfig+0xe4>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d10d      	bne.n	800aa4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	021b      	lsls	r3, r3, #8
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a16      	ldr	r2, [pc, #88]	@ (800aaac <TIM_OC3_SetConfig+0xe0>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d003      	beq.n	800aa5e <TIM_OC3_SetConfig+0x92>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a15      	ldr	r2, [pc, #84]	@ (800aab0 <TIM_OC3_SetConfig+0xe4>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d113      	bne.n	800aa86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	011b      	lsls	r3, r3, #4
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	621a      	str	r2, [r3, #32]
}
 800aaa0:	bf00      	nop
 800aaa2:	371c      	adds	r7, #28
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40010000 	.word	0x40010000
 800aab0:	40010400 	.word	0x40010400

0800aab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aafe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	031b      	lsls	r3, r3, #12
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a12      	ldr	r2, [pc, #72]	@ (800ab58 <TIM_OC4_SetConfig+0xa4>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d003      	beq.n	800ab1c <TIM_OC4_SetConfig+0x68>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a11      	ldr	r2, [pc, #68]	@ (800ab5c <TIM_OC4_SetConfig+0xa8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d109      	bne.n	800ab30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	019b      	lsls	r3, r3, #6
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	40010000 	.word	0x40010000
 800ab5c:	40010400 	.word	0x40010400

0800ab60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f023 0307 	bic.w	r3, r3, #7
 800ab8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2b70      	cmp	r3, #112	@ 0x70
 800aba8:	d01a      	beq.n	800abe0 <TIM_SlaveTimer_SetConfig+0x80>
 800abaa:	2b70      	cmp	r3, #112	@ 0x70
 800abac:	d860      	bhi.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
 800abae:	2b60      	cmp	r3, #96	@ 0x60
 800abb0:	d054      	beq.n	800ac5c <TIM_SlaveTimer_SetConfig+0xfc>
 800abb2:	2b60      	cmp	r3, #96	@ 0x60
 800abb4:	d85c      	bhi.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
 800abb6:	2b50      	cmp	r3, #80	@ 0x50
 800abb8:	d046      	beq.n	800ac48 <TIM_SlaveTimer_SetConfig+0xe8>
 800abba:	2b50      	cmp	r3, #80	@ 0x50
 800abbc:	d858      	bhi.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
 800abbe:	2b40      	cmp	r3, #64	@ 0x40
 800abc0:	d019      	beq.n	800abf6 <TIM_SlaveTimer_SetConfig+0x96>
 800abc2:	2b40      	cmp	r3, #64	@ 0x40
 800abc4:	d854      	bhi.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
 800abc6:	2b30      	cmp	r3, #48	@ 0x30
 800abc8:	d055      	beq.n	800ac76 <TIM_SlaveTimer_SetConfig+0x116>
 800abca:	2b30      	cmp	r3, #48	@ 0x30
 800abcc:	d850      	bhi.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
 800abce:	2b20      	cmp	r3, #32
 800abd0:	d051      	beq.n	800ac76 <TIM_SlaveTimer_SetConfig+0x116>
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d84c      	bhi.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d04d      	beq.n	800ac76 <TIM_SlaveTimer_SetConfig+0x116>
 800abda:	2b10      	cmp	r3, #16
 800abdc:	d04b      	beq.n	800ac76 <TIM_SlaveTimer_SetConfig+0x116>
 800abde:	e047      	b.n	800ac70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800abf0:	f000 f8c1 	bl	800ad76 <TIM_ETR_SetConfig>
      break;
 800abf4:	e040      	b.n	800ac78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d101      	bne.n	800ac02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e03b      	b.n	800ac7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6a1a      	ldr	r2, [r3, #32]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0201 	bic.w	r2, r2, #1
 800ac18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	621a      	str	r2, [r3, #32]
      break;
 800ac46:	e017      	b.n	800ac78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac54:	461a      	mov	r2, r3
 800ac56:	f000 f814 	bl	800ac82 <TIM_TI1_ConfigInputStage>
      break;
 800ac5a:	e00d      	b.n	800ac78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac68:	461a      	mov	r2, r3
 800ac6a:	f000 f839 	bl	800ace0 <TIM_TI2_ConfigInputStage>
      break;
 800ac6e:	e003      	b.n	800ac78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	75fb      	strb	r3, [r7, #23]
      break;
 800ac74:	e000      	b.n	800ac78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800ac76:	bf00      	nop
  }

  return status;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b087      	sub	sp, #28
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	f023 0201 	bic.w	r2, r3, #1
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f023 030a 	bic.w	r3, r3, #10
 800acbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	621a      	str	r2, [r3, #32]
}
 800acd4:	bf00      	nop
 800acd6:	371c      	adds	r7, #28
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	f023 0210 	bic.w	r2, r3, #16
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	031b      	lsls	r3, r3, #12
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	011b      	lsls	r3, r3, #4
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	693a      	ldr	r2, [r7, #16]
 800ad2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	621a      	str	r2, [r3, #32]
}
 800ad34:	bf00      	nop
 800ad36:	371c      	adds	r7, #28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f043 0307 	orr.w	r3, r3, #7
 800ad62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	609a      	str	r2, [r3, #8]
}
 800ad6a:	bf00      	nop
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b087      	sub	sp, #28
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	60b9      	str	r1, [r7, #8]
 800ad80:	607a      	str	r2, [r7, #4]
 800ad82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	021a      	lsls	r2, r3, #8
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	431a      	orrs	r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	609a      	str	r2, [r3, #8]
}
 800adaa:	bf00      	nop
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b087      	sub	sp, #28
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f003 031f 	and.w	r3, r3, #31
 800adc8:	2201      	movs	r2, #1
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a1a      	ldr	r2, [r3, #32]
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	43db      	mvns	r3, r3
 800add8:	401a      	ands	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6a1a      	ldr	r2, [r3, #32]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f003 031f 	and.w	r3, r3, #31
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	fa01 f303 	lsl.w	r3, r1, r3
 800adee:	431a      	orrs	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	621a      	str	r2, [r3, #32]
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae14:	2302      	movs	r3, #2
 800ae16:	e05a      	b.n	800aece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a21      	ldr	r2, [pc, #132]	@ (800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d022      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae64:	d01d      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a1d      	ldr	r2, [pc, #116]	@ (800aee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d018      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a1b      	ldr	r2, [pc, #108]	@ (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d013      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a1a      	ldr	r2, [pc, #104]	@ (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d00e      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a18      	ldr	r2, [pc, #96]	@ (800aeec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d009      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a17      	ldr	r2, [pc, #92]	@ (800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d004      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a15      	ldr	r2, [pc, #84]	@ (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d10c      	bne.n	800aebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40010400 	.word	0x40010400
 800aef0:	40014000 	.word	0x40014000
 800aef4:	40001800 	.word	0x40001800

0800aef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d101      	bne.n	800af32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e042      	b.n	800afb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d106      	bne.n	800af4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7f7 fc46 	bl	80027d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2224      	movs	r2, #36	@ 0x24
 800af50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fe8b 	bl	800bc80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691a      	ldr	r2, [r3, #16]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695a      	ldr	r2, [r3, #20]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	d112      	bne.n	800b000 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <HAL_UART_Receive_DMA+0x26>
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e00b      	b.n	800b002 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aff0:	88fb      	ldrh	r3, [r7, #6]
 800aff2:	461a      	mov	r2, r3
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 fbda 	bl	800b7b0 <UART_Start_Receive_DMA>
 800affc:	4603      	mov	r3, r0
 800affe:	e000      	b.n	800b002 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b000:	2302      	movs	r3, #2
  }
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b0ba      	sub	sp, #232	@ 0xe8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b032:	2300      	movs	r3, #0
 800b034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b038:	2300      	movs	r3, #0
 800b03a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b042:	f003 030f 	and.w	r3, r3, #15
 800b046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b04a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10f      	bne.n	800b072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b056:	f003 0320 	and.w	r3, r3, #32
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d009      	beq.n	800b072 <HAL_UART_IRQHandler+0x66>
 800b05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fd4a 	bl	800bb04 <UART_Receive_IT>
      return;
 800b070:	e273      	b.n	800b55a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 80de 	beq.w	800b238 <HAL_UART_IRQHandler+0x22c>
 800b07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d106      	bne.n	800b096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b08c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 80d1 	beq.w	800b238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <HAL_UART_IRQHandler+0xae>
 800b0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0b2:	f043 0201 	orr.w	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00b      	beq.n	800b0de <HAL_UART_IRQHandler+0xd2>
 800b0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d005      	beq.n	800b0de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d6:	f043 0202 	orr.w	r2, r3, #2
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <HAL_UART_IRQHandler+0xf6>
 800b0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d005      	beq.n	800b102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0fa:	f043 0204 	orr.w	r2, r3, #4
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b106:	f003 0308 	and.w	r3, r3, #8
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d011      	beq.n	800b132 <HAL_UART_IRQHandler+0x126>
 800b10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d105      	bne.n	800b126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b12a:	f043 0208 	orr.w	r2, r3, #8
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 820a 	beq.w	800b550 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b140:	f003 0320 	and.w	r3, r3, #32
 800b144:	2b00      	cmp	r3, #0
 800b146:	d008      	beq.n	800b15a <HAL_UART_IRQHandler+0x14e>
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fcd5 	bl	800bb04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b164:	2b40      	cmp	r3, #64	@ 0x40
 800b166:	bf0c      	ite	eq
 800b168:	2301      	moveq	r3, #1
 800b16a:	2300      	movne	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d103      	bne.n	800b186 <HAL_UART_IRQHandler+0x17a>
 800b17e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b182:	2b00      	cmp	r3, #0
 800b184:	d04f      	beq.n	800b226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fbe0 	bl	800b94c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b196:	2b40      	cmp	r3, #64	@ 0x40
 800b198:	d141      	bne.n	800b21e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3314      	adds	r3, #20
 800b1c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1d9      	bne.n	800b19a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d013      	beq.n	800b216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f2:	4a8a      	ldr	r2, [pc, #552]	@ (800b41c <HAL_UART_IRQHandler+0x410>)
 800b1f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fb fa20 	bl	8006640 <HAL_DMA_Abort_IT>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d016      	beq.n	800b234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b214:	e00e      	b.n	800b234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f9b6 	bl	800b588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b21c:	e00a      	b.n	800b234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f9b2 	bl	800b588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b224:	e006      	b.n	800b234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f9ae 	bl	800b588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b232:	e18d      	b.n	800b550 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b234:	bf00      	nop
    return;
 800b236:	e18b      	b.n	800b550 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	f040 8167 	bne.w	800b510 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b246:	f003 0310 	and.w	r3, r3, #16
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8160 	beq.w	800b510 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b254:	f003 0310 	and.w	r3, r3, #16
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8159 	beq.w	800b510 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b25e:	2300      	movs	r3, #0
 800b260:	60bb      	str	r3, [r7, #8]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60bb      	str	r3, [r7, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	60bb      	str	r3, [r7, #8]
 800b272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b27e:	2b40      	cmp	r3, #64	@ 0x40
 800b280:	f040 80ce 	bne.w	800b420 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 80a9 	beq.w	800b3ec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b29e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	f080 80a2 	bcs.w	800b3ec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ba:	f000 8088 	beq.w	800b3ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b2ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b2ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b2f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b2fa:	e841 2300 	strex	r3, r2, [r1]
 800b2fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1d9      	bne.n	800b2be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3314      	adds	r3, #20
 800b310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b314:	e853 3f00 	ldrex	r3, [r3]
 800b318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b31a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b31c:	f023 0301 	bic.w	r3, r3, #1
 800b320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3314      	adds	r3, #20
 800b32a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b32e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e1      	bne.n	800b30a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3314      	adds	r3, #20
 800b34c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b35c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3314      	adds	r3, #20
 800b366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b36a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b36c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e3      	bne.n	800b346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	330c      	adds	r3, #12
 800b392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b39c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b39e:	f023 0310 	bic.w	r3, r3, #16
 800b3a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b3b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b3b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e3      	bne.n	800b38c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fb f8c9 	bl	8006560 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f8d9 	bl	800b59c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b3ea:	e0b3      	b.n	800b554 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b3f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	f040 80ad 	bne.w	800b554 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b404:	f040 80a6 	bne.w	800b554 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f8c1 	bl	800b59c <HAL_UARTEx_RxEventCallback>
      return;
 800b41a:	e09b      	b.n	800b554 <HAL_UART_IRQHandler+0x548>
 800b41c:	0800ba13 	.word	0x0800ba13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b428:	b29b      	uxth	r3, r3
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b434:	b29b      	uxth	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 808e 	beq.w	800b558 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b43c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 8089 	beq.w	800b558 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	330c      	adds	r3, #12
 800b44c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b45c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	330c      	adds	r3, #12
 800b466:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b46a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b46c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e3      	bne.n	800b446 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3314      	adds	r3, #20
 800b484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	623b      	str	r3, [r7, #32]
   return(result);
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	f023 0301 	bic.w	r3, r3, #1
 800b494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3314      	adds	r3, #20
 800b49e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b4a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e3      	bne.n	800b47e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	330c      	adds	r3, #12
 800b4ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	e853 3f00 	ldrex	r3, [r3]
 800b4d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0310 	bic.w	r3, r3, #16
 800b4da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b4e8:	61fa      	str	r2, [r7, #28]
 800b4ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	69b9      	ldr	r1, [r7, #24]
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	e841 2300 	strex	r3, r2, [r1]
 800b4f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e3      	bne.n	800b4c4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b502:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f847 	bl	800b59c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b50e:	e023      	b.n	800b558 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d009      	beq.n	800b530 <HAL_UART_IRQHandler+0x524>
 800b51c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fa83 	bl	800ba34 <UART_Transmit_IT>
    return;
 800b52e:	e014      	b.n	800b55a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <HAL_UART_IRQHandler+0x54e>
 800b53c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	d008      	beq.n	800b55a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fac3 	bl	800bad4 <UART_EndTransmit_IT>
    return;
 800b54e:	e004      	b.n	800b55a <HAL_UART_IRQHandler+0x54e>
    return;
 800b550:	bf00      	nop
 800b552:	e002      	b.n	800b55a <HAL_UART_IRQHandler+0x54e>
      return;
 800b554:	bf00      	nop
 800b556:	e000      	b.n	800b55a <HAL_UART_IRQHandler+0x54e>
      return;
 800b558:	bf00      	nop
  }
}
 800b55a:	37e8      	adds	r7, #232	@ 0xe8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b09c      	sub	sp, #112	@ 0x70
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d172      	bne.n	800b6b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b5d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	330c      	adds	r3, #12
 800b5dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5e0:	e853 3f00 	ldrex	r3, [r3]
 800b5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	330c      	adds	r3, #12
 800b5f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b5f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b5f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5fe:	e841 2300 	strex	r3, r2, [r1]
 800b602:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1e5      	bne.n	800b5d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3314      	adds	r3, #20
 800b610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	e853 3f00 	ldrex	r3, [r3]
 800b618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61c:	f023 0301 	bic.w	r3, r3, #1
 800b620:	667b      	str	r3, [r7, #100]	@ 0x64
 800b622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3314      	adds	r3, #20
 800b628:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b62a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b62c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b632:	e841 2300 	strex	r3, r2, [r1]
 800b636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1e5      	bne.n	800b60a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3314      	adds	r3, #20
 800b644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	623b      	str	r3, [r7, #32]
   return(result);
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b654:	663b      	str	r3, [r7, #96]	@ 0x60
 800b656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3314      	adds	r3, #20
 800b65c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b65e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b666:	e841 2300 	strex	r3, r2, [r1]
 800b66a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e5      	bne.n	800b63e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b674:	2220      	movs	r2, #32
 800b676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b67a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d119      	bne.n	800b6b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	330c      	adds	r3, #12
 800b688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	e853 3f00 	ldrex	r3, [r3]
 800b690:	60fb      	str	r3, [r7, #12]
   return(result);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f023 0310 	bic.w	r3, r3, #16
 800b698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	330c      	adds	r3, #12
 800b6a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b6a2:	61fa      	str	r2, [r7, #28]
 800b6a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a6:	69b9      	ldr	r1, [r7, #24]
 800b6a8:	69fa      	ldr	r2, [r7, #28]
 800b6aa:	e841 2300 	strex	r3, r2, [r1]
 800b6ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1e5      	bne.n	800b682 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d106      	bne.n	800b6d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6cc:	f7ff ff66 	bl	800b59c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6d0:	e002      	b.n	800b6d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b6d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6d4:	f7f6 f93e 	bl	8001954 <HAL_UART_RxCpltCallback>
}
 800b6d8:	bf00      	nop
 800b6da:	3770      	adds	r7, #112	@ 0x70
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d108      	bne.n	800b70e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b700:	085b      	lsrs	r3, r3, #1
 800b702:	b29b      	uxth	r3, r3
 800b704:	4619      	mov	r1, r3
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7ff ff48 	bl	800b59c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b70c:	e002      	b.n	800b714 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff ff30 	bl	800b574 <HAL_UART_RxHalfCpltCallback>
}
 800b714:	bf00      	nop
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b724:	2300      	movs	r3, #0
 800b726:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b738:	2b80      	cmp	r3, #128	@ 0x80
 800b73a:	bf0c      	ite	eq
 800b73c:	2301      	moveq	r3, #1
 800b73e:	2300      	movne	r3, #0
 800b740:	b2db      	uxtb	r3, r3
 800b742:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b21      	cmp	r3, #33	@ 0x21
 800b74e:	d108      	bne.n	800b762 <UART_DMAError+0x46>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2200      	movs	r2, #0
 800b75a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b75c:	68b8      	ldr	r0, [r7, #8]
 800b75e:	f000 f8cd 	bl	800b8fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76c:	2b40      	cmp	r3, #64	@ 0x40
 800b76e:	bf0c      	ite	eq
 800b770:	2301      	moveq	r3, #1
 800b772:	2300      	movne	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b22      	cmp	r3, #34	@ 0x22
 800b782:	d108      	bne.n	800b796 <UART_DMAError+0x7a>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d005      	beq.n	800b796 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2200      	movs	r2, #0
 800b78e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b790:	68b8      	ldr	r0, [r7, #8]
 800b792:	f000 f8db 	bl	800b94c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b79a:	f043 0210 	orr.w	r2, r3, #16
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7a2:	68b8      	ldr	r0, [r7, #8]
 800b7a4:	f7ff fef0 	bl	800b588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b098      	sub	sp, #96	@ 0x60
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	88fa      	ldrh	r2, [r7, #6]
 800b7c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2222      	movs	r2, #34	@ 0x22
 800b7d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7dc:	4a44      	ldr	r2, [pc, #272]	@ (800b8f0 <UART_Start_Receive_DMA+0x140>)
 800b7de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e4:	4a43      	ldr	r2, [pc, #268]	@ (800b8f4 <UART_Start_Receive_DMA+0x144>)
 800b7e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ec:	4a42      	ldr	r2, [pc, #264]	@ (800b8f8 <UART_Start_Receive_DMA+0x148>)
 800b7ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3304      	adds	r3, #4
 800b808:	4619      	mov	r1, r3
 800b80a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	f7fa fe4e 	bl	80064b0 <HAL_DMA_Start_IT>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d008      	beq.n	800b82c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2210      	movs	r2, #16
 800b81e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2220      	movs	r2, #32
 800b824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e05d      	b.n	800b8e8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b82c:	2300      	movs	r3, #0
 800b82e:	613b      	str	r3, [r7, #16]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	613b      	str	r3, [r7, #16]
 800b840:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d019      	beq.n	800b87e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	330c      	adds	r3, #12
 800b850:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b85c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b860:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	330c      	adds	r3, #12
 800b868:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b86a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b86c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e5      	bne.n	800b84a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3314      	adds	r3, #20
 800b884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b888:	e853 3f00 	ldrex	r3, [r3]
 800b88c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b890:	f043 0301 	orr.w	r3, r3, #1
 800b894:	657b      	str	r3, [r7, #84]	@ 0x54
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3314      	adds	r3, #20
 800b89c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b89e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b8a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b8a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8a6:	e841 2300 	strex	r3, r2, [r1]
 800b8aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1e5      	bne.n	800b87e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3314      	adds	r3, #20
 800b8b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	e853 3f00 	ldrex	r3, [r3]
 800b8c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3314      	adds	r3, #20
 800b8d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b8d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d6:	6a39      	ldr	r1, [r7, #32]
 800b8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e5      	bne.n	800b8b2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3760      	adds	r7, #96	@ 0x60
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	0800b5b5 	.word	0x0800b5b5
 800b8f4:	0800b6e1 	.word	0x0800b6e1
 800b8f8:	0800b71d 	.word	0x0800b71d

0800b8fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b089      	sub	sp, #36	@ 0x24
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	330c      	adds	r3, #12
 800b90a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	e853 3f00 	ldrex	r3, [r3]
 800b912:	60bb      	str	r3, [r7, #8]
   return(result);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	330c      	adds	r3, #12
 800b922:	69fa      	ldr	r2, [r7, #28]
 800b924:	61ba      	str	r2, [r7, #24]
 800b926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b928:	6979      	ldr	r1, [r7, #20]
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	e841 2300 	strex	r3, r2, [r1]
 800b930:	613b      	str	r3, [r7, #16]
   return(result);
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e5      	bne.n	800b904 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b940:	bf00      	nop
 800b942:	3724      	adds	r7, #36	@ 0x24
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b095      	sub	sp, #84	@ 0x54
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95e:	e853 3f00 	ldrex	r3, [r3]
 800b962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	330c      	adds	r3, #12
 800b972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b974:	643a      	str	r2, [r7, #64]	@ 0x40
 800b976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b97a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b97c:	e841 2300 	strex	r3, r2, [r1]
 800b980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1e5      	bne.n	800b954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3314      	adds	r3, #20
 800b98e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	e853 3f00 	ldrex	r3, [r3]
 800b996:	61fb      	str	r3, [r7, #28]
   return(result);
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	f023 0301 	bic.w	r3, r3, #1
 800b99e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3314      	adds	r3, #20
 800b9a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e5      	bne.n	800b988 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d119      	bne.n	800b9f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	f023 0310 	bic.w	r3, r3, #16
 800b9da:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9e4:	61ba      	str	r2, [r7, #24]
 800b9e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	6979      	ldr	r1, [r7, #20]
 800b9ea:	69ba      	ldr	r2, [r7, #24]
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e5      	bne.n	800b9c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ba06:	bf00      	nop
 800ba08:	3754      	adds	r7, #84	@ 0x54
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff fdae 	bl	800b588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba2c:	bf00      	nop
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b21      	cmp	r3, #33	@ 0x21
 800ba46:	d13e      	bne.n	800bac6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba50:	d114      	bne.n	800ba7c <UART_Transmit_IT+0x48>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d110      	bne.n	800ba7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	461a      	mov	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	1c9a      	adds	r2, r3, #2
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	621a      	str	r2, [r3, #32]
 800ba7a:	e008      	b.n	800ba8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	1c59      	adds	r1, r3, #1
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6211      	str	r1, [r2, #32]
 800ba86:	781a      	ldrb	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	3b01      	subs	r3, #1
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10f      	bne.n	800bac2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68da      	ldr	r2, [r3, #12]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bab0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68da      	ldr	r2, [r3, #12]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bac0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e000      	b.n	800bac8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bac6:	2302      	movs	r3, #2
  }
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800baea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff fd33 	bl	800b560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08c      	sub	sp, #48	@ 0x30
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bb10:	2300      	movs	r3, #0
 800bb12:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b22      	cmp	r3, #34	@ 0x22
 800bb1e:	f040 80aa 	bne.w	800bc76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb2a:	d115      	bne.n	800bb58 <UART_Receive_IT+0x54>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d111      	bne.n	800bb58 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb50:	1c9a      	adds	r2, r3, #2
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb56:	e024      	b.n	800bba2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb66:	d007      	beq.n	800bb78 <UART_Receive_IT+0x74>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10a      	bne.n	800bb86 <UART_Receive_IT+0x82>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d106      	bne.n	800bb86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	e008      	b.n	800bb98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d15d      	bne.n	800bc72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68da      	ldr	r2, [r3, #12]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 0220 	bic.w	r2, r2, #32
 800bbc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	695a      	ldr	r2, [r3, #20]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 0201 	bic.w	r2, r2, #1
 800bbe4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d135      	bne.n	800bc68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	330c      	adds	r3, #12
 800bc08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	613b      	str	r3, [r7, #16]
   return(result);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f023 0310 	bic.w	r3, r3, #16
 800bc18:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	330c      	adds	r3, #12
 800bc20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc22:	623a      	str	r2, [r7, #32]
 800bc24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	69f9      	ldr	r1, [r7, #28]
 800bc28:	6a3a      	ldr	r2, [r7, #32]
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e5      	bne.n	800bc02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0310 	and.w	r3, r3, #16
 800bc40:	2b10      	cmp	r3, #16
 800bc42:	d10a      	bne.n	800bc5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff fc9b 	bl	800b59c <HAL_UARTEx_RxEventCallback>
 800bc66:	e002      	b.n	800bc6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7f5 fe73 	bl	8001954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e002      	b.n	800bc78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e000      	b.n	800bc78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bc76:	2302      	movs	r3, #2
  }
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3730      	adds	r7, #48	@ 0x30
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc84:	b0c0      	sub	sp, #256	@ 0x100
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bc98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc9c:	68d9      	ldr	r1, [r3, #12]
 800bc9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	ea40 0301 	orr.w	r3, r0, r1
 800bca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcae:	689a      	ldr	r2, [r3, #8]
 800bcb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	431a      	orrs	r2, r3
 800bcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bcd8:	f021 010c 	bic.w	r1, r1, #12
 800bcdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bce6:	430b      	orrs	r3, r1
 800bce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcfa:	6999      	ldr	r1, [r3, #24]
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	ea40 0301 	orr.w	r3, r0, r1
 800bd06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b8f      	ldr	r3, [pc, #572]	@ (800bf4c <UART_SetConfig+0x2cc>)
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d005      	beq.n	800bd20 <UART_SetConfig+0xa0>
 800bd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	4b8d      	ldr	r3, [pc, #564]	@ (800bf50 <UART_SetConfig+0x2d0>)
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d104      	bne.n	800bd2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd20:	f7fc fd02 	bl	8008728 <HAL_RCC_GetPCLK2Freq>
 800bd24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bd28:	e003      	b.n	800bd32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd2a:	f7fc fce9 	bl	8008700 <HAL_RCC_GetPCLK1Freq>
 800bd2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd36:	69db      	ldr	r3, [r3, #28]
 800bd38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd3c:	f040 810c 	bne.w	800bf58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bd4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bd4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bd52:	4622      	mov	r2, r4
 800bd54:	462b      	mov	r3, r5
 800bd56:	1891      	adds	r1, r2, r2
 800bd58:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bd5a:	415b      	adcs	r3, r3
 800bd5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bd62:	4621      	mov	r1, r4
 800bd64:	eb12 0801 	adds.w	r8, r2, r1
 800bd68:	4629      	mov	r1, r5
 800bd6a:	eb43 0901 	adc.w	r9, r3, r1
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	f04f 0300 	mov.w	r3, #0
 800bd76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd82:	4690      	mov	r8, r2
 800bd84:	4699      	mov	r9, r3
 800bd86:	4623      	mov	r3, r4
 800bd88:	eb18 0303 	adds.w	r3, r8, r3
 800bd8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd90:	462b      	mov	r3, r5
 800bd92:	eb49 0303 	adc.w	r3, r9, r3
 800bd96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bda6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bdaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bdae:	460b      	mov	r3, r1
 800bdb0:	18db      	adds	r3, r3, r3
 800bdb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	eb42 0303 	adc.w	r3, r2, r3
 800bdba:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bdc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bdc4:	f7f4 ff90 	bl	8000ce8 <__aeabi_uldivmod>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4b61      	ldr	r3, [pc, #388]	@ (800bf54 <UART_SetConfig+0x2d4>)
 800bdce:	fba3 2302 	umull	r2, r3, r3, r2
 800bdd2:	095b      	lsrs	r3, r3, #5
 800bdd4:	011c      	lsls	r4, r3, #4
 800bdd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bde0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bde4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bde8:	4642      	mov	r2, r8
 800bdea:	464b      	mov	r3, r9
 800bdec:	1891      	adds	r1, r2, r2
 800bdee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bdf0:	415b      	adcs	r3, r3
 800bdf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bdf8:	4641      	mov	r1, r8
 800bdfa:	eb12 0a01 	adds.w	sl, r2, r1
 800bdfe:	4649      	mov	r1, r9
 800be00:	eb43 0b01 	adc.w	fp, r3, r1
 800be04:	f04f 0200 	mov.w	r2, #0
 800be08:	f04f 0300 	mov.w	r3, #0
 800be0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be18:	4692      	mov	sl, r2
 800be1a:	469b      	mov	fp, r3
 800be1c:	4643      	mov	r3, r8
 800be1e:	eb1a 0303 	adds.w	r3, sl, r3
 800be22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be26:	464b      	mov	r3, r9
 800be28:	eb4b 0303 	adc.w	r3, fp, r3
 800be2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800be40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800be44:	460b      	mov	r3, r1
 800be46:	18db      	adds	r3, r3, r3
 800be48:	643b      	str	r3, [r7, #64]	@ 0x40
 800be4a:	4613      	mov	r3, r2
 800be4c:	eb42 0303 	adc.w	r3, r2, r3
 800be50:	647b      	str	r3, [r7, #68]	@ 0x44
 800be52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800be56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800be5a:	f7f4 ff45 	bl	8000ce8 <__aeabi_uldivmod>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4611      	mov	r1, r2
 800be64:	4b3b      	ldr	r3, [pc, #236]	@ (800bf54 <UART_SetConfig+0x2d4>)
 800be66:	fba3 2301 	umull	r2, r3, r3, r1
 800be6a:	095b      	lsrs	r3, r3, #5
 800be6c:	2264      	movs	r2, #100	@ 0x64
 800be6e:	fb02 f303 	mul.w	r3, r2, r3
 800be72:	1acb      	subs	r3, r1, r3
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800be7a:	4b36      	ldr	r3, [pc, #216]	@ (800bf54 <UART_SetConfig+0x2d4>)
 800be7c:	fba3 2302 	umull	r2, r3, r3, r2
 800be80:	095b      	lsrs	r3, r3, #5
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800be88:	441c      	add	r4, r3
 800be8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be8e:	2200      	movs	r2, #0
 800be90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800be98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800be9c:	4642      	mov	r2, r8
 800be9e:	464b      	mov	r3, r9
 800bea0:	1891      	adds	r1, r2, r2
 800bea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bea4:	415b      	adcs	r3, r3
 800bea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800beac:	4641      	mov	r1, r8
 800beae:	1851      	adds	r1, r2, r1
 800beb0:	6339      	str	r1, [r7, #48]	@ 0x30
 800beb2:	4649      	mov	r1, r9
 800beb4:	414b      	adcs	r3, r1
 800beb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bec4:	4659      	mov	r1, fp
 800bec6:	00cb      	lsls	r3, r1, #3
 800bec8:	4651      	mov	r1, sl
 800beca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bece:	4651      	mov	r1, sl
 800bed0:	00ca      	lsls	r2, r1, #3
 800bed2:	4610      	mov	r0, r2
 800bed4:	4619      	mov	r1, r3
 800bed6:	4603      	mov	r3, r0
 800bed8:	4642      	mov	r2, r8
 800beda:	189b      	adds	r3, r3, r2
 800bedc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bee0:	464b      	mov	r3, r9
 800bee2:	460a      	mov	r2, r1
 800bee4:	eb42 0303 	adc.w	r3, r2, r3
 800bee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800beec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bef8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800befc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bf00:	460b      	mov	r3, r1
 800bf02:	18db      	adds	r3, r3, r3
 800bf04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf06:	4613      	mov	r3, r2
 800bf08:	eb42 0303 	adc.w	r3, r2, r3
 800bf0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bf12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bf16:	f7f4 fee7 	bl	8000ce8 <__aeabi_uldivmod>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf54 <UART_SetConfig+0x2d4>)
 800bf20:	fba3 1302 	umull	r1, r3, r3, r2
 800bf24:	095b      	lsrs	r3, r3, #5
 800bf26:	2164      	movs	r1, #100	@ 0x64
 800bf28:	fb01 f303 	mul.w	r3, r1, r3
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	3332      	adds	r3, #50	@ 0x32
 800bf32:	4a08      	ldr	r2, [pc, #32]	@ (800bf54 <UART_SetConfig+0x2d4>)
 800bf34:	fba2 2303 	umull	r2, r3, r2, r3
 800bf38:	095b      	lsrs	r3, r3, #5
 800bf3a:	f003 0207 	and.w	r2, r3, #7
 800bf3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4422      	add	r2, r4
 800bf46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf48:	e106      	b.n	800c158 <UART_SetConfig+0x4d8>
 800bf4a:	bf00      	nop
 800bf4c:	40011000 	.word	0x40011000
 800bf50:	40011400 	.word	0x40011400
 800bf54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bf66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bf6a:	4642      	mov	r2, r8
 800bf6c:	464b      	mov	r3, r9
 800bf6e:	1891      	adds	r1, r2, r2
 800bf70:	6239      	str	r1, [r7, #32]
 800bf72:	415b      	adcs	r3, r3
 800bf74:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf7a:	4641      	mov	r1, r8
 800bf7c:	1854      	adds	r4, r2, r1
 800bf7e:	4649      	mov	r1, r9
 800bf80:	eb43 0501 	adc.w	r5, r3, r1
 800bf84:	f04f 0200 	mov.w	r2, #0
 800bf88:	f04f 0300 	mov.w	r3, #0
 800bf8c:	00eb      	lsls	r3, r5, #3
 800bf8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf92:	00e2      	lsls	r2, r4, #3
 800bf94:	4614      	mov	r4, r2
 800bf96:	461d      	mov	r5, r3
 800bf98:	4643      	mov	r3, r8
 800bf9a:	18e3      	adds	r3, r4, r3
 800bf9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	eb45 0303 	adc.w	r3, r5, r3
 800bfa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bfaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bfba:	f04f 0200 	mov.w	r2, #0
 800bfbe:	f04f 0300 	mov.w	r3, #0
 800bfc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	008b      	lsls	r3, r1, #2
 800bfca:	4621      	mov	r1, r4
 800bfcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	008a      	lsls	r2, r1, #2
 800bfd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bfd8:	f7f4 fe86 	bl	8000ce8 <__aeabi_uldivmod>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4b60      	ldr	r3, [pc, #384]	@ (800c164 <UART_SetConfig+0x4e4>)
 800bfe2:	fba3 2302 	umull	r2, r3, r3, r2
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	011c      	lsls	r4, r3, #4
 800bfea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bffc:	4642      	mov	r2, r8
 800bffe:	464b      	mov	r3, r9
 800c000:	1891      	adds	r1, r2, r2
 800c002:	61b9      	str	r1, [r7, #24]
 800c004:	415b      	adcs	r3, r3
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c00c:	4641      	mov	r1, r8
 800c00e:	1851      	adds	r1, r2, r1
 800c010:	6139      	str	r1, [r7, #16]
 800c012:	4649      	mov	r1, r9
 800c014:	414b      	adcs	r3, r1
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c024:	4659      	mov	r1, fp
 800c026:	00cb      	lsls	r3, r1, #3
 800c028:	4651      	mov	r1, sl
 800c02a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c02e:	4651      	mov	r1, sl
 800c030:	00ca      	lsls	r2, r1, #3
 800c032:	4610      	mov	r0, r2
 800c034:	4619      	mov	r1, r3
 800c036:	4603      	mov	r3, r0
 800c038:	4642      	mov	r2, r8
 800c03a:	189b      	adds	r3, r3, r2
 800c03c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c040:	464b      	mov	r3, r9
 800c042:	460a      	mov	r2, r1
 800c044:	eb42 0303 	adc.w	r3, r2, r3
 800c048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c058:	f04f 0200 	mov.w	r2, #0
 800c05c:	f04f 0300 	mov.w	r3, #0
 800c060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c064:	4649      	mov	r1, r9
 800c066:	008b      	lsls	r3, r1, #2
 800c068:	4641      	mov	r1, r8
 800c06a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c06e:	4641      	mov	r1, r8
 800c070:	008a      	lsls	r2, r1, #2
 800c072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c076:	f7f4 fe37 	bl	8000ce8 <__aeabi_uldivmod>
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	4b38      	ldr	r3, [pc, #224]	@ (800c164 <UART_SetConfig+0x4e4>)
 800c082:	fba3 2301 	umull	r2, r3, r3, r1
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	2264      	movs	r2, #100	@ 0x64
 800c08a:	fb02 f303 	mul.w	r3, r2, r3
 800c08e:	1acb      	subs	r3, r1, r3
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	3332      	adds	r3, #50	@ 0x32
 800c094:	4a33      	ldr	r2, [pc, #204]	@ (800c164 <UART_SetConfig+0x4e4>)
 800c096:	fba2 2303 	umull	r2, r3, r2, r3
 800c09a:	095b      	lsrs	r3, r3, #5
 800c09c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0a0:	441c      	add	r4, r3
 800c0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800c0ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	464b      	mov	r3, r9
 800c0b4:	1891      	adds	r1, r2, r2
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	415b      	adcs	r3, r3
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	1851      	adds	r1, r2, r1
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	414b      	adcs	r3, r1
 800c0ca:	607b      	str	r3, [r7, #4]
 800c0cc:	f04f 0200 	mov.w	r2, #0
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0d8:	4659      	mov	r1, fp
 800c0da:	00cb      	lsls	r3, r1, #3
 800c0dc:	4651      	mov	r1, sl
 800c0de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0e2:	4651      	mov	r1, sl
 800c0e4:	00ca      	lsls	r2, r1, #3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	189b      	adds	r3, r3, r2
 800c0f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0f2:	464b      	mov	r3, r9
 800c0f4:	460a      	mov	r2, r1
 800c0f6:	eb42 0303 	adc.w	r3, r2, r3
 800c0fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	663b      	str	r3, [r7, #96]	@ 0x60
 800c106:	667a      	str	r2, [r7, #100]	@ 0x64
 800c108:	f04f 0200 	mov.w	r2, #0
 800c10c:	f04f 0300 	mov.w	r3, #0
 800c110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c114:	4649      	mov	r1, r9
 800c116:	008b      	lsls	r3, r1, #2
 800c118:	4641      	mov	r1, r8
 800c11a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c11e:	4641      	mov	r1, r8
 800c120:	008a      	lsls	r2, r1, #2
 800c122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c126:	f7f4 fddf 	bl	8000ce8 <__aeabi_uldivmod>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <UART_SetConfig+0x4e4>)
 800c130:	fba3 1302 	umull	r1, r3, r3, r2
 800c134:	095b      	lsrs	r3, r3, #5
 800c136:	2164      	movs	r1, #100	@ 0x64
 800c138:	fb01 f303 	mul.w	r3, r1, r3
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	3332      	adds	r3, #50	@ 0x32
 800c142:	4a08      	ldr	r2, [pc, #32]	@ (800c164 <UART_SetConfig+0x4e4>)
 800c144:	fba2 2303 	umull	r2, r3, r2, r3
 800c148:	095b      	lsrs	r3, r3, #5
 800c14a:	f003 020f 	and.w	r2, r3, #15
 800c14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4422      	add	r2, r4
 800c156:	609a      	str	r2, [r3, #8]
}
 800c158:	bf00      	nop
 800c15a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c15e:	46bd      	mov	sp, r7
 800c160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c164:	51eb851f 	.word	0x51eb851f

0800c168 <__cvt>:
 800c168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c16c:	ec57 6b10 	vmov	r6, r7, d0
 800c170:	2f00      	cmp	r7, #0
 800c172:	460c      	mov	r4, r1
 800c174:	4619      	mov	r1, r3
 800c176:	463b      	mov	r3, r7
 800c178:	bfbb      	ittet	lt
 800c17a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c17e:	461f      	movlt	r7, r3
 800c180:	2300      	movge	r3, #0
 800c182:	232d      	movlt	r3, #45	@ 0x2d
 800c184:	700b      	strb	r3, [r1, #0]
 800c186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c188:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c18c:	4691      	mov	r9, r2
 800c18e:	f023 0820 	bic.w	r8, r3, #32
 800c192:	bfbc      	itt	lt
 800c194:	4632      	movlt	r2, r6
 800c196:	4616      	movlt	r6, r2
 800c198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c19c:	d005      	beq.n	800c1aa <__cvt+0x42>
 800c19e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c1a2:	d100      	bne.n	800c1a6 <__cvt+0x3e>
 800c1a4:	3401      	adds	r4, #1
 800c1a6:	2102      	movs	r1, #2
 800c1a8:	e000      	b.n	800c1ac <__cvt+0x44>
 800c1aa:	2103      	movs	r1, #3
 800c1ac:	ab03      	add	r3, sp, #12
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	ab02      	add	r3, sp, #8
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	ec47 6b10 	vmov	d0, r6, r7
 800c1b8:	4653      	mov	r3, sl
 800c1ba:	4622      	mov	r2, r4
 800c1bc:	f001 f8b4 	bl	800d328 <_dtoa_r>
 800c1c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	d119      	bne.n	800c1fc <__cvt+0x94>
 800c1c8:	f019 0f01 	tst.w	r9, #1
 800c1cc:	d00e      	beq.n	800c1ec <__cvt+0x84>
 800c1ce:	eb00 0904 	add.w	r9, r0, r4
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 fca5 	bl	8000b28 <__aeabi_dcmpeq>
 800c1de:	b108      	cbz	r0, 800c1e4 <__cvt+0x7c>
 800c1e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1e4:	2230      	movs	r2, #48	@ 0x30
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	454b      	cmp	r3, r9
 800c1ea:	d31e      	bcc.n	800c22a <__cvt+0xc2>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1f0:	1b5b      	subs	r3, r3, r5
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	b004      	add	sp, #16
 800c1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c200:	eb00 0904 	add.w	r9, r0, r4
 800c204:	d1e5      	bne.n	800c1d2 <__cvt+0x6a>
 800c206:	7803      	ldrb	r3, [r0, #0]
 800c208:	2b30      	cmp	r3, #48	@ 0x30
 800c20a:	d10a      	bne.n	800c222 <__cvt+0xba>
 800c20c:	2200      	movs	r2, #0
 800c20e:	2300      	movs	r3, #0
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f4 fc88 	bl	8000b28 <__aeabi_dcmpeq>
 800c218:	b918      	cbnz	r0, 800c222 <__cvt+0xba>
 800c21a:	f1c4 0401 	rsb	r4, r4, #1
 800c21e:	f8ca 4000 	str.w	r4, [sl]
 800c222:	f8da 3000 	ldr.w	r3, [sl]
 800c226:	4499      	add	r9, r3
 800c228:	e7d3      	b.n	800c1d2 <__cvt+0x6a>
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	9103      	str	r1, [sp, #12]
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	e7d9      	b.n	800c1e6 <__cvt+0x7e>

0800c232 <__exponent>:
 800c232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c234:	2900      	cmp	r1, #0
 800c236:	bfba      	itte	lt
 800c238:	4249      	neglt	r1, r1
 800c23a:	232d      	movlt	r3, #45	@ 0x2d
 800c23c:	232b      	movge	r3, #43	@ 0x2b
 800c23e:	2909      	cmp	r1, #9
 800c240:	7002      	strb	r2, [r0, #0]
 800c242:	7043      	strb	r3, [r0, #1]
 800c244:	dd29      	ble.n	800c29a <__exponent+0x68>
 800c246:	f10d 0307 	add.w	r3, sp, #7
 800c24a:	461d      	mov	r5, r3
 800c24c:	270a      	movs	r7, #10
 800c24e:	461a      	mov	r2, r3
 800c250:	fbb1 f6f7 	udiv	r6, r1, r7
 800c254:	fb07 1416 	mls	r4, r7, r6, r1
 800c258:	3430      	adds	r4, #48	@ 0x30
 800c25a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c25e:	460c      	mov	r4, r1
 800c260:	2c63      	cmp	r4, #99	@ 0x63
 800c262:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c266:	4631      	mov	r1, r6
 800c268:	dcf1      	bgt.n	800c24e <__exponent+0x1c>
 800c26a:	3130      	adds	r1, #48	@ 0x30
 800c26c:	1e94      	subs	r4, r2, #2
 800c26e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c272:	1c41      	adds	r1, r0, #1
 800c274:	4623      	mov	r3, r4
 800c276:	42ab      	cmp	r3, r5
 800c278:	d30a      	bcc.n	800c290 <__exponent+0x5e>
 800c27a:	f10d 0309 	add.w	r3, sp, #9
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	42ac      	cmp	r4, r5
 800c282:	bf88      	it	hi
 800c284:	2300      	movhi	r3, #0
 800c286:	3302      	adds	r3, #2
 800c288:	4403      	add	r3, r0
 800c28a:	1a18      	subs	r0, r3, r0
 800c28c:	b003      	add	sp, #12
 800c28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c290:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c294:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c298:	e7ed      	b.n	800c276 <__exponent+0x44>
 800c29a:	2330      	movs	r3, #48	@ 0x30
 800c29c:	3130      	adds	r1, #48	@ 0x30
 800c29e:	7083      	strb	r3, [r0, #2]
 800c2a0:	70c1      	strb	r1, [r0, #3]
 800c2a2:	1d03      	adds	r3, r0, #4
 800c2a4:	e7f1      	b.n	800c28a <__exponent+0x58>
	...

0800c2a8 <_printf_float>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	b08d      	sub	sp, #52	@ 0x34
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	461f      	mov	r7, r3
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	f000 ff1f 	bl	800d0fc <_localeconv_r>
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f4 f804 	bl	80002d0 <strlen>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d0:	9005      	str	r0, [sp, #20]
 800c2d2:	3307      	adds	r3, #7
 800c2d4:	f023 0307 	bic.w	r3, r3, #7
 800c2d8:	f103 0208 	add.w	r2, r3, #8
 800c2dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2e0:	f8d4 b000 	ldr.w	fp, [r4]
 800c2e4:	f8c8 2000 	str.w	r2, [r8]
 800c2e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2f0:	9307      	str	r3, [sp, #28]
 800c2f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2fe:	4b9c      	ldr	r3, [pc, #624]	@ (800c570 <_printf_float+0x2c8>)
 800c300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c304:	f7f4 fc42 	bl	8000b8c <__aeabi_dcmpun>
 800c308:	bb70      	cbnz	r0, 800c368 <_printf_float+0xc0>
 800c30a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c30e:	4b98      	ldr	r3, [pc, #608]	@ (800c570 <_printf_float+0x2c8>)
 800c310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c314:	f7f4 fc1c 	bl	8000b50 <__aeabi_dcmple>
 800c318:	bb30      	cbnz	r0, 800c368 <_printf_float+0xc0>
 800c31a:	2200      	movs	r2, #0
 800c31c:	2300      	movs	r3, #0
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f4 fc0b 	bl	8000b3c <__aeabi_dcmplt>
 800c326:	b110      	cbz	r0, 800c32e <_printf_float+0x86>
 800c328:	232d      	movs	r3, #45	@ 0x2d
 800c32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c32e:	4a91      	ldr	r2, [pc, #580]	@ (800c574 <_printf_float+0x2cc>)
 800c330:	4b91      	ldr	r3, [pc, #580]	@ (800c578 <_printf_float+0x2d0>)
 800c332:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c336:	bf8c      	ite	hi
 800c338:	4690      	movhi	r8, r2
 800c33a:	4698      	movls	r8, r3
 800c33c:	2303      	movs	r3, #3
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	f02b 0304 	bic.w	r3, fp, #4
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	f04f 0900 	mov.w	r9, #0
 800c34a:	9700      	str	r7, [sp, #0]
 800c34c:	4633      	mov	r3, r6
 800c34e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c350:	4621      	mov	r1, r4
 800c352:	4628      	mov	r0, r5
 800c354:	f000 f9d2 	bl	800c6fc <_printf_common>
 800c358:	3001      	adds	r0, #1
 800c35a:	f040 808d 	bne.w	800c478 <_printf_float+0x1d0>
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c362:	b00d      	add	sp, #52	@ 0x34
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	4642      	mov	r2, r8
 800c36a:	464b      	mov	r3, r9
 800c36c:	4640      	mov	r0, r8
 800c36e:	4649      	mov	r1, r9
 800c370:	f7f4 fc0c 	bl	8000b8c <__aeabi_dcmpun>
 800c374:	b140      	cbz	r0, 800c388 <_printf_float+0xe0>
 800c376:	464b      	mov	r3, r9
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfbc      	itt	lt
 800c37c:	232d      	movlt	r3, #45	@ 0x2d
 800c37e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c382:	4a7e      	ldr	r2, [pc, #504]	@ (800c57c <_printf_float+0x2d4>)
 800c384:	4b7e      	ldr	r3, [pc, #504]	@ (800c580 <_printf_float+0x2d8>)
 800c386:	e7d4      	b.n	800c332 <_printf_float+0x8a>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c38e:	9206      	str	r2, [sp, #24]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	d13b      	bne.n	800c40c <_printf_float+0x164>
 800c394:	2306      	movs	r3, #6
 800c396:	6063      	str	r3, [r4, #4]
 800c398:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c39c:	2300      	movs	r3, #0
 800c39e:	6022      	str	r2, [r4, #0]
 800c3a0:	9303      	str	r3, [sp, #12]
 800c3a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c3a8:	ab09      	add	r3, sp, #36	@ 0x24
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	6861      	ldr	r1, [r4, #4]
 800c3ae:	ec49 8b10 	vmov	d0, r8, r9
 800c3b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7ff fed6 	bl	800c168 <__cvt>
 800c3bc:	9b06      	ldr	r3, [sp, #24]
 800c3be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3c0:	2b47      	cmp	r3, #71	@ 0x47
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	d129      	bne.n	800c41a <_printf_float+0x172>
 800c3c6:	1cc8      	adds	r0, r1, #3
 800c3c8:	db02      	blt.n	800c3d0 <_printf_float+0x128>
 800c3ca:	6863      	ldr	r3, [r4, #4]
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	dd41      	ble.n	800c454 <_printf_float+0x1ac>
 800c3d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c3d4:	fa5f fa8a 	uxtb.w	sl, sl
 800c3d8:	3901      	subs	r1, #1
 800c3da:	4652      	mov	r2, sl
 800c3dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3e2:	f7ff ff26 	bl	800c232 <__exponent>
 800c3e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3e8:	1813      	adds	r3, r2, r0
 800c3ea:	2a01      	cmp	r2, #1
 800c3ec:	4681      	mov	r9, r0
 800c3ee:	6123      	str	r3, [r4, #16]
 800c3f0:	dc02      	bgt.n	800c3f8 <_printf_float+0x150>
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	07d2      	lsls	r2, r2, #31
 800c3f6:	d501      	bpl.n	800c3fc <_printf_float+0x154>
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0a2      	beq.n	800c34a <_printf_float+0xa2>
 800c404:	232d      	movs	r3, #45	@ 0x2d
 800c406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c40a:	e79e      	b.n	800c34a <_printf_float+0xa2>
 800c40c:	9a06      	ldr	r2, [sp, #24]
 800c40e:	2a47      	cmp	r2, #71	@ 0x47
 800c410:	d1c2      	bne.n	800c398 <_printf_float+0xf0>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1c0      	bne.n	800c398 <_printf_float+0xf0>
 800c416:	2301      	movs	r3, #1
 800c418:	e7bd      	b.n	800c396 <_printf_float+0xee>
 800c41a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c41e:	d9db      	bls.n	800c3d8 <_printf_float+0x130>
 800c420:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c424:	d118      	bne.n	800c458 <_printf_float+0x1b0>
 800c426:	2900      	cmp	r1, #0
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	dd0b      	ble.n	800c444 <_printf_float+0x19c>
 800c42c:	6121      	str	r1, [r4, #16]
 800c42e:	b913      	cbnz	r3, 800c436 <_printf_float+0x18e>
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	07d0      	lsls	r0, r2, #31
 800c434:	d502      	bpl.n	800c43c <_printf_float+0x194>
 800c436:	3301      	adds	r3, #1
 800c438:	440b      	add	r3, r1
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c43e:	f04f 0900 	mov.w	r9, #0
 800c442:	e7db      	b.n	800c3fc <_printf_float+0x154>
 800c444:	b913      	cbnz	r3, 800c44c <_printf_float+0x1a4>
 800c446:	6822      	ldr	r2, [r4, #0]
 800c448:	07d2      	lsls	r2, r2, #31
 800c44a:	d501      	bpl.n	800c450 <_printf_float+0x1a8>
 800c44c:	3302      	adds	r3, #2
 800c44e:	e7f4      	b.n	800c43a <_printf_float+0x192>
 800c450:	2301      	movs	r3, #1
 800c452:	e7f2      	b.n	800c43a <_printf_float+0x192>
 800c454:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c45a:	4299      	cmp	r1, r3
 800c45c:	db05      	blt.n	800c46a <_printf_float+0x1c2>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	6121      	str	r1, [r4, #16]
 800c462:	07d8      	lsls	r0, r3, #31
 800c464:	d5ea      	bpl.n	800c43c <_printf_float+0x194>
 800c466:	1c4b      	adds	r3, r1, #1
 800c468:	e7e7      	b.n	800c43a <_printf_float+0x192>
 800c46a:	2900      	cmp	r1, #0
 800c46c:	bfd4      	ite	le
 800c46e:	f1c1 0202 	rsble	r2, r1, #2
 800c472:	2201      	movgt	r2, #1
 800c474:	4413      	add	r3, r2
 800c476:	e7e0      	b.n	800c43a <_printf_float+0x192>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	055a      	lsls	r2, r3, #21
 800c47c:	d407      	bmi.n	800c48e <_printf_float+0x1e6>
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	4642      	mov	r2, r8
 800c482:	4631      	mov	r1, r6
 800c484:	4628      	mov	r0, r5
 800c486:	47b8      	blx	r7
 800c488:	3001      	adds	r0, #1
 800c48a:	d12b      	bne.n	800c4e4 <_printf_float+0x23c>
 800c48c:	e767      	b.n	800c35e <_printf_float+0xb6>
 800c48e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c492:	f240 80dd 	bls.w	800c650 <_printf_float+0x3a8>
 800c496:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c49a:	2200      	movs	r2, #0
 800c49c:	2300      	movs	r3, #0
 800c49e:	f7f4 fb43 	bl	8000b28 <__aeabi_dcmpeq>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d033      	beq.n	800c50e <_printf_float+0x266>
 800c4a6:	4a37      	ldr	r2, [pc, #220]	@ (800c584 <_printf_float+0x2dc>)
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f af54 	beq.w	800c35e <_printf_float+0xb6>
 800c4b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c4ba:	4543      	cmp	r3, r8
 800c4bc:	db02      	blt.n	800c4c4 <_printf_float+0x21c>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	07d8      	lsls	r0, r3, #31
 800c4c2:	d50f      	bpl.n	800c4e4 <_printf_float+0x23c>
 800c4c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c8:	4631      	mov	r1, r6
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	47b8      	blx	r7
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	f43f af45 	beq.w	800c35e <_printf_float+0xb6>
 800c4d4:	f04f 0900 	mov.w	r9, #0
 800c4d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c4dc:	f104 0a1a 	add.w	sl, r4, #26
 800c4e0:	45c8      	cmp	r8, r9
 800c4e2:	dc09      	bgt.n	800c4f8 <_printf_float+0x250>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	079b      	lsls	r3, r3, #30
 800c4e8:	f100 8103 	bmi.w	800c6f2 <_printf_float+0x44a>
 800c4ec:	68e0      	ldr	r0, [r4, #12]
 800c4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f0:	4298      	cmp	r0, r3
 800c4f2:	bfb8      	it	lt
 800c4f4:	4618      	movlt	r0, r3
 800c4f6:	e734      	b.n	800c362 <_printf_float+0xba>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	4652      	mov	r2, sl
 800c4fc:	4631      	mov	r1, r6
 800c4fe:	4628      	mov	r0, r5
 800c500:	47b8      	blx	r7
 800c502:	3001      	adds	r0, #1
 800c504:	f43f af2b 	beq.w	800c35e <_printf_float+0xb6>
 800c508:	f109 0901 	add.w	r9, r9, #1
 800c50c:	e7e8      	b.n	800c4e0 <_printf_float+0x238>
 800c50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c510:	2b00      	cmp	r3, #0
 800c512:	dc39      	bgt.n	800c588 <_printf_float+0x2e0>
 800c514:	4a1b      	ldr	r2, [pc, #108]	@ (800c584 <_printf_float+0x2dc>)
 800c516:	2301      	movs	r3, #1
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	f43f af1d 	beq.w	800c35e <_printf_float+0xb6>
 800c524:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c528:	ea59 0303 	orrs.w	r3, r9, r3
 800c52c:	d102      	bne.n	800c534 <_printf_float+0x28c>
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	07d9      	lsls	r1, r3, #31
 800c532:	d5d7      	bpl.n	800c4e4 <_printf_float+0x23c>
 800c534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c538:	4631      	mov	r1, r6
 800c53a:	4628      	mov	r0, r5
 800c53c:	47b8      	blx	r7
 800c53e:	3001      	adds	r0, #1
 800c540:	f43f af0d 	beq.w	800c35e <_printf_float+0xb6>
 800c544:	f04f 0a00 	mov.w	sl, #0
 800c548:	f104 0b1a 	add.w	fp, r4, #26
 800c54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c54e:	425b      	negs	r3, r3
 800c550:	4553      	cmp	r3, sl
 800c552:	dc01      	bgt.n	800c558 <_printf_float+0x2b0>
 800c554:	464b      	mov	r3, r9
 800c556:	e793      	b.n	800c480 <_printf_float+0x1d8>
 800c558:	2301      	movs	r3, #1
 800c55a:	465a      	mov	r2, fp
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	f43f aefb 	beq.w	800c35e <_printf_float+0xb6>
 800c568:	f10a 0a01 	add.w	sl, sl, #1
 800c56c:	e7ee      	b.n	800c54c <_printf_float+0x2a4>
 800c56e:	bf00      	nop
 800c570:	7fefffff 	.word	0x7fefffff
 800c574:	08011440 	.word	0x08011440
 800c578:	0801143c 	.word	0x0801143c
 800c57c:	08011448 	.word	0x08011448
 800c580:	08011444 	.word	0x08011444
 800c584:	0801144c 	.word	0x0801144c
 800c588:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c58a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c58e:	4553      	cmp	r3, sl
 800c590:	bfa8      	it	ge
 800c592:	4653      	movge	r3, sl
 800c594:	2b00      	cmp	r3, #0
 800c596:	4699      	mov	r9, r3
 800c598:	dc36      	bgt.n	800c608 <_printf_float+0x360>
 800c59a:	f04f 0b00 	mov.w	fp, #0
 800c59e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5a2:	f104 021a 	add.w	r2, r4, #26
 800c5a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5a8:	9306      	str	r3, [sp, #24]
 800c5aa:	eba3 0309 	sub.w	r3, r3, r9
 800c5ae:	455b      	cmp	r3, fp
 800c5b0:	dc31      	bgt.n	800c616 <_printf_float+0x36e>
 800c5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b4:	459a      	cmp	sl, r3
 800c5b6:	dc3a      	bgt.n	800c62e <_printf_float+0x386>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	07da      	lsls	r2, r3, #31
 800c5bc:	d437      	bmi.n	800c62e <_printf_float+0x386>
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	ebaa 0903 	sub.w	r9, sl, r3
 800c5c4:	9b06      	ldr	r3, [sp, #24]
 800c5c6:	ebaa 0303 	sub.w	r3, sl, r3
 800c5ca:	4599      	cmp	r9, r3
 800c5cc:	bfa8      	it	ge
 800c5ce:	4699      	movge	r9, r3
 800c5d0:	f1b9 0f00 	cmp.w	r9, #0
 800c5d4:	dc33      	bgt.n	800c63e <_printf_float+0x396>
 800c5d6:	f04f 0800 	mov.w	r8, #0
 800c5da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5de:	f104 0b1a 	add.w	fp, r4, #26
 800c5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e8:	eba3 0309 	sub.w	r3, r3, r9
 800c5ec:	4543      	cmp	r3, r8
 800c5ee:	f77f af79 	ble.w	800c4e4 <_printf_float+0x23c>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	465a      	mov	r2, fp
 800c5f6:	4631      	mov	r1, r6
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	47b8      	blx	r7
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	f43f aeae 	beq.w	800c35e <_printf_float+0xb6>
 800c602:	f108 0801 	add.w	r8, r8, #1
 800c606:	e7ec      	b.n	800c5e2 <_printf_float+0x33a>
 800c608:	4642      	mov	r2, r8
 800c60a:	4631      	mov	r1, r6
 800c60c:	4628      	mov	r0, r5
 800c60e:	47b8      	blx	r7
 800c610:	3001      	adds	r0, #1
 800c612:	d1c2      	bne.n	800c59a <_printf_float+0x2f2>
 800c614:	e6a3      	b.n	800c35e <_printf_float+0xb6>
 800c616:	2301      	movs	r3, #1
 800c618:	4631      	mov	r1, r6
 800c61a:	4628      	mov	r0, r5
 800c61c:	9206      	str	r2, [sp, #24]
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	f43f ae9c 	beq.w	800c35e <_printf_float+0xb6>
 800c626:	9a06      	ldr	r2, [sp, #24]
 800c628:	f10b 0b01 	add.w	fp, fp, #1
 800c62c:	e7bb      	b.n	800c5a6 <_printf_float+0x2fe>
 800c62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	d1c0      	bne.n	800c5be <_printf_float+0x316>
 800c63c:	e68f      	b.n	800c35e <_printf_float+0xb6>
 800c63e:	9a06      	ldr	r2, [sp, #24]
 800c640:	464b      	mov	r3, r9
 800c642:	4442      	add	r2, r8
 800c644:	4631      	mov	r1, r6
 800c646:	4628      	mov	r0, r5
 800c648:	47b8      	blx	r7
 800c64a:	3001      	adds	r0, #1
 800c64c:	d1c3      	bne.n	800c5d6 <_printf_float+0x32e>
 800c64e:	e686      	b.n	800c35e <_printf_float+0xb6>
 800c650:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c654:	f1ba 0f01 	cmp.w	sl, #1
 800c658:	dc01      	bgt.n	800c65e <_printf_float+0x3b6>
 800c65a:	07db      	lsls	r3, r3, #31
 800c65c:	d536      	bpl.n	800c6cc <_printf_float+0x424>
 800c65e:	2301      	movs	r3, #1
 800c660:	4642      	mov	r2, r8
 800c662:	4631      	mov	r1, r6
 800c664:	4628      	mov	r0, r5
 800c666:	47b8      	blx	r7
 800c668:	3001      	adds	r0, #1
 800c66a:	f43f ae78 	beq.w	800c35e <_printf_float+0xb6>
 800c66e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f ae70 	beq.w	800c35e <_printf_float+0xb6>
 800c67e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c682:	2200      	movs	r2, #0
 800c684:	2300      	movs	r3, #0
 800c686:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c68a:	f7f4 fa4d 	bl	8000b28 <__aeabi_dcmpeq>
 800c68e:	b9c0      	cbnz	r0, 800c6c2 <_printf_float+0x41a>
 800c690:	4653      	mov	r3, sl
 800c692:	f108 0201 	add.w	r2, r8, #1
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	d10c      	bne.n	800c6ba <_printf_float+0x412>
 800c6a0:	e65d      	b.n	800c35e <_printf_float+0xb6>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	465a      	mov	r2, fp
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae56 	beq.w	800c35e <_printf_float+0xb6>
 800c6b2:	f108 0801 	add.w	r8, r8, #1
 800c6b6:	45d0      	cmp	r8, sl
 800c6b8:	dbf3      	blt.n	800c6a2 <_printf_float+0x3fa>
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c6c0:	e6df      	b.n	800c482 <_printf_float+0x1da>
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	f104 0b1a 	add.w	fp, r4, #26
 800c6ca:	e7f4      	b.n	800c6b6 <_printf_float+0x40e>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	e7e1      	b.n	800c696 <_printf_float+0x3ee>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	464a      	mov	r2, r9
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	f43f ae3e 	beq.w	800c35e <_printf_float+0xb6>
 800c6e2:	f108 0801 	add.w	r8, r8, #1
 800c6e6:	68e3      	ldr	r3, [r4, #12]
 800c6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6ea:	1a5b      	subs	r3, r3, r1
 800c6ec:	4543      	cmp	r3, r8
 800c6ee:	dcf0      	bgt.n	800c6d2 <_printf_float+0x42a>
 800c6f0:	e6fc      	b.n	800c4ec <_printf_float+0x244>
 800c6f2:	f04f 0800 	mov.w	r8, #0
 800c6f6:	f104 0919 	add.w	r9, r4, #25
 800c6fa:	e7f4      	b.n	800c6e6 <_printf_float+0x43e>

0800c6fc <_printf_common>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	4616      	mov	r6, r2
 800c702:	4698      	mov	r8, r3
 800c704:	688a      	ldr	r2, [r1, #8]
 800c706:	690b      	ldr	r3, [r1, #16]
 800c708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c70c:	4293      	cmp	r3, r2
 800c70e:	bfb8      	it	lt
 800c710:	4613      	movlt	r3, r2
 800c712:	6033      	str	r3, [r6, #0]
 800c714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c718:	4607      	mov	r7, r0
 800c71a:	460c      	mov	r4, r1
 800c71c:	b10a      	cbz	r2, 800c722 <_printf_common+0x26>
 800c71e:	3301      	adds	r3, #1
 800c720:	6033      	str	r3, [r6, #0]
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	0699      	lsls	r1, r3, #26
 800c726:	bf42      	ittt	mi
 800c728:	6833      	ldrmi	r3, [r6, #0]
 800c72a:	3302      	addmi	r3, #2
 800c72c:	6033      	strmi	r3, [r6, #0]
 800c72e:	6825      	ldr	r5, [r4, #0]
 800c730:	f015 0506 	ands.w	r5, r5, #6
 800c734:	d106      	bne.n	800c744 <_printf_common+0x48>
 800c736:	f104 0a19 	add.w	sl, r4, #25
 800c73a:	68e3      	ldr	r3, [r4, #12]
 800c73c:	6832      	ldr	r2, [r6, #0]
 800c73e:	1a9b      	subs	r3, r3, r2
 800c740:	42ab      	cmp	r3, r5
 800c742:	dc26      	bgt.n	800c792 <_printf_common+0x96>
 800c744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c748:	6822      	ldr	r2, [r4, #0]
 800c74a:	3b00      	subs	r3, #0
 800c74c:	bf18      	it	ne
 800c74e:	2301      	movne	r3, #1
 800c750:	0692      	lsls	r2, r2, #26
 800c752:	d42b      	bmi.n	800c7ac <_printf_common+0xb0>
 800c754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c758:	4641      	mov	r1, r8
 800c75a:	4638      	mov	r0, r7
 800c75c:	47c8      	blx	r9
 800c75e:	3001      	adds	r0, #1
 800c760:	d01e      	beq.n	800c7a0 <_printf_common+0xa4>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	f003 0306 	and.w	r3, r3, #6
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	bf02      	ittt	eq
 800c76e:	68e5      	ldreq	r5, [r4, #12]
 800c770:	6833      	ldreq	r3, [r6, #0]
 800c772:	1aed      	subeq	r5, r5, r3
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	bf0c      	ite	eq
 800c778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c77c:	2500      	movne	r5, #0
 800c77e:	4293      	cmp	r3, r2
 800c780:	bfc4      	itt	gt
 800c782:	1a9b      	subgt	r3, r3, r2
 800c784:	18ed      	addgt	r5, r5, r3
 800c786:	2600      	movs	r6, #0
 800c788:	341a      	adds	r4, #26
 800c78a:	42b5      	cmp	r5, r6
 800c78c:	d11a      	bne.n	800c7c4 <_printf_common+0xc8>
 800c78e:	2000      	movs	r0, #0
 800c790:	e008      	b.n	800c7a4 <_printf_common+0xa8>
 800c792:	2301      	movs	r3, #1
 800c794:	4652      	mov	r2, sl
 800c796:	4641      	mov	r1, r8
 800c798:	4638      	mov	r0, r7
 800c79a:	47c8      	blx	r9
 800c79c:	3001      	adds	r0, #1
 800c79e:	d103      	bne.n	800c7a8 <_printf_common+0xac>
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	e7c6      	b.n	800c73a <_printf_common+0x3e>
 800c7ac:	18e1      	adds	r1, r4, r3
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	2030      	movs	r0, #48	@ 0x30
 800c7b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7b6:	4422      	add	r2, r4
 800c7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7c0:	3302      	adds	r3, #2
 800c7c2:	e7c7      	b.n	800c754 <_printf_common+0x58>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	4622      	mov	r2, r4
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	47c8      	blx	r9
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d0e6      	beq.n	800c7a0 <_printf_common+0xa4>
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	e7d9      	b.n	800c78a <_printf_common+0x8e>
	...

0800c7d8 <_printf_i>:
 800c7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	7e0f      	ldrb	r7, [r1, #24]
 800c7de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7e0:	2f78      	cmp	r7, #120	@ 0x78
 800c7e2:	4691      	mov	r9, r2
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7ee:	d807      	bhi.n	800c800 <_printf_i+0x28>
 800c7f0:	2f62      	cmp	r7, #98	@ 0x62
 800c7f2:	d80a      	bhi.n	800c80a <_printf_i+0x32>
 800c7f4:	2f00      	cmp	r7, #0
 800c7f6:	f000 80d1 	beq.w	800c99c <_printf_i+0x1c4>
 800c7fa:	2f58      	cmp	r7, #88	@ 0x58
 800c7fc:	f000 80b8 	beq.w	800c970 <_printf_i+0x198>
 800c800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c808:	e03a      	b.n	800c880 <_printf_i+0xa8>
 800c80a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c80e:	2b15      	cmp	r3, #21
 800c810:	d8f6      	bhi.n	800c800 <_printf_i+0x28>
 800c812:	a101      	add	r1, pc, #4	@ (adr r1, 800c818 <_printf_i+0x40>)
 800c814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c818:	0800c871 	.word	0x0800c871
 800c81c:	0800c885 	.word	0x0800c885
 800c820:	0800c801 	.word	0x0800c801
 800c824:	0800c801 	.word	0x0800c801
 800c828:	0800c801 	.word	0x0800c801
 800c82c:	0800c801 	.word	0x0800c801
 800c830:	0800c885 	.word	0x0800c885
 800c834:	0800c801 	.word	0x0800c801
 800c838:	0800c801 	.word	0x0800c801
 800c83c:	0800c801 	.word	0x0800c801
 800c840:	0800c801 	.word	0x0800c801
 800c844:	0800c983 	.word	0x0800c983
 800c848:	0800c8af 	.word	0x0800c8af
 800c84c:	0800c93d 	.word	0x0800c93d
 800c850:	0800c801 	.word	0x0800c801
 800c854:	0800c801 	.word	0x0800c801
 800c858:	0800c9a5 	.word	0x0800c9a5
 800c85c:	0800c801 	.word	0x0800c801
 800c860:	0800c8af 	.word	0x0800c8af
 800c864:	0800c801 	.word	0x0800c801
 800c868:	0800c801 	.word	0x0800c801
 800c86c:	0800c945 	.word	0x0800c945
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	1d1a      	adds	r2, r3, #4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6032      	str	r2, [r6, #0]
 800c878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c87c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c880:	2301      	movs	r3, #1
 800c882:	e09c      	b.n	800c9be <_printf_i+0x1e6>
 800c884:	6833      	ldr	r3, [r6, #0]
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	1d19      	adds	r1, r3, #4
 800c88a:	6031      	str	r1, [r6, #0]
 800c88c:	0606      	lsls	r6, r0, #24
 800c88e:	d501      	bpl.n	800c894 <_printf_i+0xbc>
 800c890:	681d      	ldr	r5, [r3, #0]
 800c892:	e003      	b.n	800c89c <_printf_i+0xc4>
 800c894:	0645      	lsls	r5, r0, #25
 800c896:	d5fb      	bpl.n	800c890 <_printf_i+0xb8>
 800c898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	da03      	bge.n	800c8a8 <_printf_i+0xd0>
 800c8a0:	232d      	movs	r3, #45	@ 0x2d
 800c8a2:	426d      	negs	r5, r5
 800c8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8a8:	4858      	ldr	r0, [pc, #352]	@ (800ca0c <_printf_i+0x234>)
 800c8aa:	230a      	movs	r3, #10
 800c8ac:	e011      	b.n	800c8d2 <_printf_i+0xfa>
 800c8ae:	6821      	ldr	r1, [r4, #0]
 800c8b0:	6833      	ldr	r3, [r6, #0]
 800c8b2:	0608      	lsls	r0, r1, #24
 800c8b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8b8:	d402      	bmi.n	800c8c0 <_printf_i+0xe8>
 800c8ba:	0649      	lsls	r1, r1, #25
 800c8bc:	bf48      	it	mi
 800c8be:	b2ad      	uxthmi	r5, r5
 800c8c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8c2:	4852      	ldr	r0, [pc, #328]	@ (800ca0c <_printf_i+0x234>)
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	bf14      	ite	ne
 800c8c8:	230a      	movne	r3, #10
 800c8ca:	2308      	moveq	r3, #8
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8d2:	6866      	ldr	r6, [r4, #4]
 800c8d4:	60a6      	str	r6, [r4, #8]
 800c8d6:	2e00      	cmp	r6, #0
 800c8d8:	db05      	blt.n	800c8e6 <_printf_i+0x10e>
 800c8da:	6821      	ldr	r1, [r4, #0]
 800c8dc:	432e      	orrs	r6, r5
 800c8de:	f021 0104 	bic.w	r1, r1, #4
 800c8e2:	6021      	str	r1, [r4, #0]
 800c8e4:	d04b      	beq.n	800c97e <_printf_i+0x1a6>
 800c8e6:	4616      	mov	r6, r2
 800c8e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8ec:	fb03 5711 	mls	r7, r3, r1, r5
 800c8f0:	5dc7      	ldrb	r7, [r0, r7]
 800c8f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8f6:	462f      	mov	r7, r5
 800c8f8:	42bb      	cmp	r3, r7
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	d9f4      	bls.n	800c8e8 <_printf_i+0x110>
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	d10b      	bne.n	800c91a <_printf_i+0x142>
 800c902:	6823      	ldr	r3, [r4, #0]
 800c904:	07df      	lsls	r7, r3, #31
 800c906:	d508      	bpl.n	800c91a <_printf_i+0x142>
 800c908:	6923      	ldr	r3, [r4, #16]
 800c90a:	6861      	ldr	r1, [r4, #4]
 800c90c:	4299      	cmp	r1, r3
 800c90e:	bfde      	ittt	le
 800c910:	2330      	movle	r3, #48	@ 0x30
 800c912:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c916:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c91a:	1b92      	subs	r2, r2, r6
 800c91c:	6122      	str	r2, [r4, #16]
 800c91e:	f8cd a000 	str.w	sl, [sp]
 800c922:	464b      	mov	r3, r9
 800c924:	aa03      	add	r2, sp, #12
 800c926:	4621      	mov	r1, r4
 800c928:	4640      	mov	r0, r8
 800c92a:	f7ff fee7 	bl	800c6fc <_printf_common>
 800c92e:	3001      	adds	r0, #1
 800c930:	d14a      	bne.n	800c9c8 <_printf_i+0x1f0>
 800c932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c936:	b004      	add	sp, #16
 800c938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	f043 0320 	orr.w	r3, r3, #32
 800c942:	6023      	str	r3, [r4, #0]
 800c944:	4832      	ldr	r0, [pc, #200]	@ (800ca10 <_printf_i+0x238>)
 800c946:	2778      	movs	r7, #120	@ 0x78
 800c948:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	6831      	ldr	r1, [r6, #0]
 800c950:	061f      	lsls	r7, r3, #24
 800c952:	f851 5b04 	ldr.w	r5, [r1], #4
 800c956:	d402      	bmi.n	800c95e <_printf_i+0x186>
 800c958:	065f      	lsls	r7, r3, #25
 800c95a:	bf48      	it	mi
 800c95c:	b2ad      	uxthmi	r5, r5
 800c95e:	6031      	str	r1, [r6, #0]
 800c960:	07d9      	lsls	r1, r3, #31
 800c962:	bf44      	itt	mi
 800c964:	f043 0320 	orrmi.w	r3, r3, #32
 800c968:	6023      	strmi	r3, [r4, #0]
 800c96a:	b11d      	cbz	r5, 800c974 <_printf_i+0x19c>
 800c96c:	2310      	movs	r3, #16
 800c96e:	e7ad      	b.n	800c8cc <_printf_i+0xf4>
 800c970:	4826      	ldr	r0, [pc, #152]	@ (800ca0c <_printf_i+0x234>)
 800c972:	e7e9      	b.n	800c948 <_printf_i+0x170>
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	f023 0320 	bic.w	r3, r3, #32
 800c97a:	6023      	str	r3, [r4, #0]
 800c97c:	e7f6      	b.n	800c96c <_printf_i+0x194>
 800c97e:	4616      	mov	r6, r2
 800c980:	e7bd      	b.n	800c8fe <_printf_i+0x126>
 800c982:	6833      	ldr	r3, [r6, #0]
 800c984:	6825      	ldr	r5, [r4, #0]
 800c986:	6961      	ldr	r1, [r4, #20]
 800c988:	1d18      	adds	r0, r3, #4
 800c98a:	6030      	str	r0, [r6, #0]
 800c98c:	062e      	lsls	r6, r5, #24
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	d501      	bpl.n	800c996 <_printf_i+0x1be>
 800c992:	6019      	str	r1, [r3, #0]
 800c994:	e002      	b.n	800c99c <_printf_i+0x1c4>
 800c996:	0668      	lsls	r0, r5, #25
 800c998:	d5fb      	bpl.n	800c992 <_printf_i+0x1ba>
 800c99a:	8019      	strh	r1, [r3, #0]
 800c99c:	2300      	movs	r3, #0
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	4616      	mov	r6, r2
 800c9a2:	e7bc      	b.n	800c91e <_printf_i+0x146>
 800c9a4:	6833      	ldr	r3, [r6, #0]
 800c9a6:	1d1a      	adds	r2, r3, #4
 800c9a8:	6032      	str	r2, [r6, #0]
 800c9aa:	681e      	ldr	r6, [r3, #0]
 800c9ac:	6862      	ldr	r2, [r4, #4]
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	f7f3 fc3d 	bl	8000230 <memchr>
 800c9b6:	b108      	cbz	r0, 800c9bc <_printf_i+0x1e4>
 800c9b8:	1b80      	subs	r0, r0, r6
 800c9ba:	6060      	str	r0, [r4, #4]
 800c9bc:	6863      	ldr	r3, [r4, #4]
 800c9be:	6123      	str	r3, [r4, #16]
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9c6:	e7aa      	b.n	800c91e <_printf_i+0x146>
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	4632      	mov	r2, r6
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	47d0      	blx	sl
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	d0ad      	beq.n	800c932 <_printf_i+0x15a>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	079b      	lsls	r3, r3, #30
 800c9da:	d413      	bmi.n	800ca04 <_printf_i+0x22c>
 800c9dc:	68e0      	ldr	r0, [r4, #12]
 800c9de:	9b03      	ldr	r3, [sp, #12]
 800c9e0:	4298      	cmp	r0, r3
 800c9e2:	bfb8      	it	lt
 800c9e4:	4618      	movlt	r0, r3
 800c9e6:	e7a6      	b.n	800c936 <_printf_i+0x15e>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4632      	mov	r2, r6
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	47d0      	blx	sl
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	d09d      	beq.n	800c932 <_printf_i+0x15a>
 800c9f6:	3501      	adds	r5, #1
 800c9f8:	68e3      	ldr	r3, [r4, #12]
 800c9fa:	9903      	ldr	r1, [sp, #12]
 800c9fc:	1a5b      	subs	r3, r3, r1
 800c9fe:	42ab      	cmp	r3, r5
 800ca00:	dcf2      	bgt.n	800c9e8 <_printf_i+0x210>
 800ca02:	e7eb      	b.n	800c9dc <_printf_i+0x204>
 800ca04:	2500      	movs	r5, #0
 800ca06:	f104 0619 	add.w	r6, r4, #25
 800ca0a:	e7f5      	b.n	800c9f8 <_printf_i+0x220>
 800ca0c:	0801144e 	.word	0x0801144e
 800ca10:	0801145f 	.word	0x0801145f

0800ca14 <_scanf_float>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	b087      	sub	sp, #28
 800ca1a:	4691      	mov	r9, r2
 800ca1c:	9303      	str	r3, [sp, #12]
 800ca1e:	688b      	ldr	r3, [r1, #8]
 800ca20:	1e5a      	subs	r2, r3, #1
 800ca22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca26:	bf81      	itttt	hi
 800ca28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca2c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ca30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ca34:	608b      	strhi	r3, [r1, #8]
 800ca36:	680b      	ldr	r3, [r1, #0]
 800ca38:	460a      	mov	r2, r1
 800ca3a:	f04f 0500 	mov.w	r5, #0
 800ca3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ca42:	f842 3b1c 	str.w	r3, [r2], #28
 800ca46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	bf98      	it	ls
 800ca50:	f04f 0b00 	movls.w	fp, #0
 800ca54:	9201      	str	r2, [sp, #4]
 800ca56:	4616      	mov	r6, r2
 800ca58:	46aa      	mov	sl, r5
 800ca5a:	462f      	mov	r7, r5
 800ca5c:	9502      	str	r5, [sp, #8]
 800ca5e:	68a2      	ldr	r2, [r4, #8]
 800ca60:	b15a      	cbz	r2, 800ca7a <_scanf_float+0x66>
 800ca62:	f8d9 3000 	ldr.w	r3, [r9]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b4e      	cmp	r3, #78	@ 0x4e
 800ca6a:	d863      	bhi.n	800cb34 <_scanf_float+0x120>
 800ca6c:	2b40      	cmp	r3, #64	@ 0x40
 800ca6e:	d83b      	bhi.n	800cae8 <_scanf_float+0xd4>
 800ca70:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ca74:	b2c8      	uxtb	r0, r1
 800ca76:	280e      	cmp	r0, #14
 800ca78:	d939      	bls.n	800caee <_scanf_float+0xda>
 800ca7a:	b11f      	cbz	r7, 800ca84 <_scanf_float+0x70>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca82:	6023      	str	r3, [r4, #0]
 800ca84:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ca88:	f1ba 0f01 	cmp.w	sl, #1
 800ca8c:	f200 8114 	bhi.w	800ccb8 <_scanf_float+0x2a4>
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	429e      	cmp	r6, r3
 800ca94:	f200 8105 	bhi.w	800cca2 <_scanf_float+0x28e>
 800ca98:	2001      	movs	r0, #1
 800ca9a:	b007      	add	sp, #28
 800ca9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800caa4:	2a0d      	cmp	r2, #13
 800caa6:	d8e8      	bhi.n	800ca7a <_scanf_float+0x66>
 800caa8:	a101      	add	r1, pc, #4	@ (adr r1, 800cab0 <_scanf_float+0x9c>)
 800caaa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800caae:	bf00      	nop
 800cab0:	0800cbf9 	.word	0x0800cbf9
 800cab4:	0800ca7b 	.word	0x0800ca7b
 800cab8:	0800ca7b 	.word	0x0800ca7b
 800cabc:	0800ca7b 	.word	0x0800ca7b
 800cac0:	0800cc55 	.word	0x0800cc55
 800cac4:	0800cc2f 	.word	0x0800cc2f
 800cac8:	0800ca7b 	.word	0x0800ca7b
 800cacc:	0800ca7b 	.word	0x0800ca7b
 800cad0:	0800cc07 	.word	0x0800cc07
 800cad4:	0800ca7b 	.word	0x0800ca7b
 800cad8:	0800ca7b 	.word	0x0800ca7b
 800cadc:	0800ca7b 	.word	0x0800ca7b
 800cae0:	0800ca7b 	.word	0x0800ca7b
 800cae4:	0800cbc3 	.word	0x0800cbc3
 800cae8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800caec:	e7da      	b.n	800caa4 <_scanf_float+0x90>
 800caee:	290e      	cmp	r1, #14
 800caf0:	d8c3      	bhi.n	800ca7a <_scanf_float+0x66>
 800caf2:	a001      	add	r0, pc, #4	@ (adr r0, 800caf8 <_scanf_float+0xe4>)
 800caf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800caf8:	0800cbb3 	.word	0x0800cbb3
 800cafc:	0800ca7b 	.word	0x0800ca7b
 800cb00:	0800cbb3 	.word	0x0800cbb3
 800cb04:	0800cc43 	.word	0x0800cc43
 800cb08:	0800ca7b 	.word	0x0800ca7b
 800cb0c:	0800cb55 	.word	0x0800cb55
 800cb10:	0800cb99 	.word	0x0800cb99
 800cb14:	0800cb99 	.word	0x0800cb99
 800cb18:	0800cb99 	.word	0x0800cb99
 800cb1c:	0800cb99 	.word	0x0800cb99
 800cb20:	0800cb99 	.word	0x0800cb99
 800cb24:	0800cb99 	.word	0x0800cb99
 800cb28:	0800cb99 	.word	0x0800cb99
 800cb2c:	0800cb99 	.word	0x0800cb99
 800cb30:	0800cb99 	.word	0x0800cb99
 800cb34:	2b6e      	cmp	r3, #110	@ 0x6e
 800cb36:	d809      	bhi.n	800cb4c <_scanf_float+0x138>
 800cb38:	2b60      	cmp	r3, #96	@ 0x60
 800cb3a:	d8b1      	bhi.n	800caa0 <_scanf_float+0x8c>
 800cb3c:	2b54      	cmp	r3, #84	@ 0x54
 800cb3e:	d07b      	beq.n	800cc38 <_scanf_float+0x224>
 800cb40:	2b59      	cmp	r3, #89	@ 0x59
 800cb42:	d19a      	bne.n	800ca7a <_scanf_float+0x66>
 800cb44:	2d07      	cmp	r5, #7
 800cb46:	d198      	bne.n	800ca7a <_scanf_float+0x66>
 800cb48:	2508      	movs	r5, #8
 800cb4a:	e02f      	b.n	800cbac <_scanf_float+0x198>
 800cb4c:	2b74      	cmp	r3, #116	@ 0x74
 800cb4e:	d073      	beq.n	800cc38 <_scanf_float+0x224>
 800cb50:	2b79      	cmp	r3, #121	@ 0x79
 800cb52:	e7f6      	b.n	800cb42 <_scanf_float+0x12e>
 800cb54:	6821      	ldr	r1, [r4, #0]
 800cb56:	05c8      	lsls	r0, r1, #23
 800cb58:	d51e      	bpl.n	800cb98 <_scanf_float+0x184>
 800cb5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cb5e:	6021      	str	r1, [r4, #0]
 800cb60:	3701      	adds	r7, #1
 800cb62:	f1bb 0f00 	cmp.w	fp, #0
 800cb66:	d003      	beq.n	800cb70 <_scanf_float+0x15c>
 800cb68:	3201      	adds	r2, #1
 800cb6a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cb6e:	60a2      	str	r2, [r4, #8]
 800cb70:	68a3      	ldr	r3, [r4, #8]
 800cb72:	3b01      	subs	r3, #1
 800cb74:	60a3      	str	r3, [r4, #8]
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f8c9 3004 	str.w	r3, [r9, #4]
 800cb88:	f340 8082 	ble.w	800cc90 <_scanf_float+0x27c>
 800cb8c:	f8d9 3000 	ldr.w	r3, [r9]
 800cb90:	3301      	adds	r3, #1
 800cb92:	f8c9 3000 	str.w	r3, [r9]
 800cb96:	e762      	b.n	800ca5e <_scanf_float+0x4a>
 800cb98:	eb1a 0105 	adds.w	r1, sl, r5
 800cb9c:	f47f af6d 	bne.w	800ca7a <_scanf_float+0x66>
 800cba0:	6822      	ldr	r2, [r4, #0]
 800cba2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cba6:	6022      	str	r2, [r4, #0]
 800cba8:	460d      	mov	r5, r1
 800cbaa:	468a      	mov	sl, r1
 800cbac:	f806 3b01 	strb.w	r3, [r6], #1
 800cbb0:	e7de      	b.n	800cb70 <_scanf_float+0x15c>
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	0610      	lsls	r0, r2, #24
 800cbb6:	f57f af60 	bpl.w	800ca7a <_scanf_float+0x66>
 800cbba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cbbe:	6022      	str	r2, [r4, #0]
 800cbc0:	e7f4      	b.n	800cbac <_scanf_float+0x198>
 800cbc2:	f1ba 0f00 	cmp.w	sl, #0
 800cbc6:	d10c      	bne.n	800cbe2 <_scanf_float+0x1ce>
 800cbc8:	b977      	cbnz	r7, 800cbe8 <_scanf_float+0x1d4>
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cbd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cbd4:	d108      	bne.n	800cbe8 <_scanf_float+0x1d4>
 800cbd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbda:	6022      	str	r2, [r4, #0]
 800cbdc:	f04f 0a01 	mov.w	sl, #1
 800cbe0:	e7e4      	b.n	800cbac <_scanf_float+0x198>
 800cbe2:	f1ba 0f02 	cmp.w	sl, #2
 800cbe6:	d050      	beq.n	800cc8a <_scanf_float+0x276>
 800cbe8:	2d01      	cmp	r5, #1
 800cbea:	d002      	beq.n	800cbf2 <_scanf_float+0x1de>
 800cbec:	2d04      	cmp	r5, #4
 800cbee:	f47f af44 	bne.w	800ca7a <_scanf_float+0x66>
 800cbf2:	3501      	adds	r5, #1
 800cbf4:	b2ed      	uxtb	r5, r5
 800cbf6:	e7d9      	b.n	800cbac <_scanf_float+0x198>
 800cbf8:	f1ba 0f01 	cmp.w	sl, #1
 800cbfc:	f47f af3d 	bne.w	800ca7a <_scanf_float+0x66>
 800cc00:	f04f 0a02 	mov.w	sl, #2
 800cc04:	e7d2      	b.n	800cbac <_scanf_float+0x198>
 800cc06:	b975      	cbnz	r5, 800cc26 <_scanf_float+0x212>
 800cc08:	2f00      	cmp	r7, #0
 800cc0a:	f47f af37 	bne.w	800ca7c <_scanf_float+0x68>
 800cc0e:	6822      	ldr	r2, [r4, #0]
 800cc10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc18:	f040 8103 	bne.w	800ce22 <_scanf_float+0x40e>
 800cc1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	2501      	movs	r5, #1
 800cc24:	e7c2      	b.n	800cbac <_scanf_float+0x198>
 800cc26:	2d03      	cmp	r5, #3
 800cc28:	d0e3      	beq.n	800cbf2 <_scanf_float+0x1de>
 800cc2a:	2d05      	cmp	r5, #5
 800cc2c:	e7df      	b.n	800cbee <_scanf_float+0x1da>
 800cc2e:	2d02      	cmp	r5, #2
 800cc30:	f47f af23 	bne.w	800ca7a <_scanf_float+0x66>
 800cc34:	2503      	movs	r5, #3
 800cc36:	e7b9      	b.n	800cbac <_scanf_float+0x198>
 800cc38:	2d06      	cmp	r5, #6
 800cc3a:	f47f af1e 	bne.w	800ca7a <_scanf_float+0x66>
 800cc3e:	2507      	movs	r5, #7
 800cc40:	e7b4      	b.n	800cbac <_scanf_float+0x198>
 800cc42:	6822      	ldr	r2, [r4, #0]
 800cc44:	0591      	lsls	r1, r2, #22
 800cc46:	f57f af18 	bpl.w	800ca7a <_scanf_float+0x66>
 800cc4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	9702      	str	r7, [sp, #8]
 800cc52:	e7ab      	b.n	800cbac <_scanf_float+0x198>
 800cc54:	6822      	ldr	r2, [r4, #0]
 800cc56:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cc5a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cc5e:	d005      	beq.n	800cc6c <_scanf_float+0x258>
 800cc60:	0550      	lsls	r0, r2, #21
 800cc62:	f57f af0a 	bpl.w	800ca7a <_scanf_float+0x66>
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	f000 80db 	beq.w	800ce22 <_scanf_float+0x40e>
 800cc6c:	0591      	lsls	r1, r2, #22
 800cc6e:	bf58      	it	pl
 800cc70:	9902      	ldrpl	r1, [sp, #8]
 800cc72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc76:	bf58      	it	pl
 800cc78:	1a79      	subpl	r1, r7, r1
 800cc7a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cc7e:	bf58      	it	pl
 800cc80:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc84:	6022      	str	r2, [r4, #0]
 800cc86:	2700      	movs	r7, #0
 800cc88:	e790      	b.n	800cbac <_scanf_float+0x198>
 800cc8a:	f04f 0a03 	mov.w	sl, #3
 800cc8e:	e78d      	b.n	800cbac <_scanf_float+0x198>
 800cc90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc94:	4649      	mov	r1, r9
 800cc96:	4640      	mov	r0, r8
 800cc98:	4798      	blx	r3
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f43f aedf 	beq.w	800ca5e <_scanf_float+0x4a>
 800cca0:	e6eb      	b.n	800ca7a <_scanf_float+0x66>
 800cca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cca6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccaa:	464a      	mov	r2, r9
 800ccac:	4640      	mov	r0, r8
 800ccae:	4798      	blx	r3
 800ccb0:	6923      	ldr	r3, [r4, #16]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	6123      	str	r3, [r4, #16]
 800ccb6:	e6eb      	b.n	800ca90 <_scanf_float+0x7c>
 800ccb8:	1e6b      	subs	r3, r5, #1
 800ccba:	2b06      	cmp	r3, #6
 800ccbc:	d824      	bhi.n	800cd08 <_scanf_float+0x2f4>
 800ccbe:	2d02      	cmp	r5, #2
 800ccc0:	d836      	bhi.n	800cd30 <_scanf_float+0x31c>
 800ccc2:	9b01      	ldr	r3, [sp, #4]
 800ccc4:	429e      	cmp	r6, r3
 800ccc6:	f67f aee7 	bls.w	800ca98 <_scanf_float+0x84>
 800ccca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccd2:	464a      	mov	r2, r9
 800ccd4:	4640      	mov	r0, r8
 800ccd6:	4798      	blx	r3
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	6123      	str	r3, [r4, #16]
 800ccde:	e7f0      	b.n	800ccc2 <_scanf_float+0x2ae>
 800cce0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cce4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cce8:	464a      	mov	r2, r9
 800ccea:	4640      	mov	r0, r8
 800ccec:	4798      	blx	r3
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	6123      	str	r3, [r4, #16]
 800ccf4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ccf8:	fa5f fa8a 	uxtb.w	sl, sl
 800ccfc:	f1ba 0f02 	cmp.w	sl, #2
 800cd00:	d1ee      	bne.n	800cce0 <_scanf_float+0x2cc>
 800cd02:	3d03      	subs	r5, #3
 800cd04:	b2ed      	uxtb	r5, r5
 800cd06:	1b76      	subs	r6, r6, r5
 800cd08:	6823      	ldr	r3, [r4, #0]
 800cd0a:	05da      	lsls	r2, r3, #23
 800cd0c:	d530      	bpl.n	800cd70 <_scanf_float+0x35c>
 800cd0e:	055b      	lsls	r3, r3, #21
 800cd10:	d511      	bpl.n	800cd36 <_scanf_float+0x322>
 800cd12:	9b01      	ldr	r3, [sp, #4]
 800cd14:	429e      	cmp	r6, r3
 800cd16:	f67f aebf 	bls.w	800ca98 <_scanf_float+0x84>
 800cd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd22:	464a      	mov	r2, r9
 800cd24:	4640      	mov	r0, r8
 800cd26:	4798      	blx	r3
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	6123      	str	r3, [r4, #16]
 800cd2e:	e7f0      	b.n	800cd12 <_scanf_float+0x2fe>
 800cd30:	46aa      	mov	sl, r5
 800cd32:	46b3      	mov	fp, r6
 800cd34:	e7de      	b.n	800ccf4 <_scanf_float+0x2e0>
 800cd36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd3a:	6923      	ldr	r3, [r4, #16]
 800cd3c:	2965      	cmp	r1, #101	@ 0x65
 800cd3e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cd42:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cd46:	6123      	str	r3, [r4, #16]
 800cd48:	d00c      	beq.n	800cd64 <_scanf_float+0x350>
 800cd4a:	2945      	cmp	r1, #69	@ 0x45
 800cd4c:	d00a      	beq.n	800cd64 <_scanf_float+0x350>
 800cd4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd52:	464a      	mov	r2, r9
 800cd54:	4640      	mov	r0, r8
 800cd56:	4798      	blx	r3
 800cd58:	6923      	ldr	r3, [r4, #16]
 800cd5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	1eb5      	subs	r5, r6, #2
 800cd62:	6123      	str	r3, [r4, #16]
 800cd64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd68:	464a      	mov	r2, r9
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4798      	blx	r3
 800cd6e:	462e      	mov	r6, r5
 800cd70:	6822      	ldr	r2, [r4, #0]
 800cd72:	f012 0210 	ands.w	r2, r2, #16
 800cd76:	d001      	beq.n	800cd7c <_scanf_float+0x368>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e68e      	b.n	800ca9a <_scanf_float+0x86>
 800cd7c:	7032      	strb	r2, [r6, #0]
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd88:	d125      	bne.n	800cdd6 <_scanf_float+0x3c2>
 800cd8a:	9b02      	ldr	r3, [sp, #8]
 800cd8c:	429f      	cmp	r7, r3
 800cd8e:	d00a      	beq.n	800cda6 <_scanf_float+0x392>
 800cd90:	1bda      	subs	r2, r3, r7
 800cd92:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cd96:	429e      	cmp	r6, r3
 800cd98:	bf28      	it	cs
 800cd9a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cd9e:	4922      	ldr	r1, [pc, #136]	@ (800ce28 <_scanf_float+0x414>)
 800cda0:	4630      	mov	r0, r6
 800cda2:	f000 f93d 	bl	800d020 <siprintf>
 800cda6:	9901      	ldr	r1, [sp, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	4640      	mov	r0, r8
 800cdac:	f002 fc38 	bl	800f620 <_strtod_r>
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	6821      	ldr	r1, [r4, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f011 0f02 	tst.w	r1, #2
 800cdba:	ec57 6b10 	vmov	r6, r7, d0
 800cdbe:	f103 0204 	add.w	r2, r3, #4
 800cdc2:	d015      	beq.n	800cdf0 <_scanf_float+0x3dc>
 800cdc4:	9903      	ldr	r1, [sp, #12]
 800cdc6:	600a      	str	r2, [r1, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	e9c3 6700 	strd	r6, r7, [r3]
 800cdce:	68e3      	ldr	r3, [r4, #12]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	60e3      	str	r3, [r4, #12]
 800cdd4:	e7d0      	b.n	800cd78 <_scanf_float+0x364>
 800cdd6:	9b04      	ldr	r3, [sp, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d0e4      	beq.n	800cda6 <_scanf_float+0x392>
 800cddc:	9905      	ldr	r1, [sp, #20]
 800cdde:	230a      	movs	r3, #10
 800cde0:	3101      	adds	r1, #1
 800cde2:	4640      	mov	r0, r8
 800cde4:	f002 fc9c 	bl	800f720 <_strtol_r>
 800cde8:	9b04      	ldr	r3, [sp, #16]
 800cdea:	9e05      	ldr	r6, [sp, #20]
 800cdec:	1ac2      	subs	r2, r0, r3
 800cdee:	e7d0      	b.n	800cd92 <_scanf_float+0x37e>
 800cdf0:	f011 0f04 	tst.w	r1, #4
 800cdf4:	9903      	ldr	r1, [sp, #12]
 800cdf6:	600a      	str	r2, [r1, #0]
 800cdf8:	d1e6      	bne.n	800cdc8 <_scanf_float+0x3b4>
 800cdfa:	681d      	ldr	r5, [r3, #0]
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	463b      	mov	r3, r7
 800ce00:	4630      	mov	r0, r6
 800ce02:	4639      	mov	r1, r7
 800ce04:	f7f3 fec2 	bl	8000b8c <__aeabi_dcmpun>
 800ce08:	b128      	cbz	r0, 800ce16 <_scanf_float+0x402>
 800ce0a:	4808      	ldr	r0, [pc, #32]	@ (800ce2c <_scanf_float+0x418>)
 800ce0c:	f000 f9fc 	bl	800d208 <nanf>
 800ce10:	ed85 0a00 	vstr	s0, [r5]
 800ce14:	e7db      	b.n	800cdce <_scanf_float+0x3ba>
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 ff15 	bl	8000c48 <__aeabi_d2f>
 800ce1e:	6028      	str	r0, [r5, #0]
 800ce20:	e7d5      	b.n	800cdce <_scanf_float+0x3ba>
 800ce22:	2700      	movs	r7, #0
 800ce24:	e62e      	b.n	800ca84 <_scanf_float+0x70>
 800ce26:	bf00      	nop
 800ce28:	08011470 	.word	0x08011470
 800ce2c:	080115b1 	.word	0x080115b1

0800ce30 <std>:
 800ce30:	2300      	movs	r3, #0
 800ce32:	b510      	push	{r4, lr}
 800ce34:	4604      	mov	r4, r0
 800ce36:	e9c0 3300 	strd	r3, r3, [r0]
 800ce3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce3e:	6083      	str	r3, [r0, #8]
 800ce40:	8181      	strh	r1, [r0, #12]
 800ce42:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce44:	81c2      	strh	r2, [r0, #14]
 800ce46:	6183      	str	r3, [r0, #24]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	305c      	adds	r0, #92	@ 0x5c
 800ce4e:	f000 f94c 	bl	800d0ea <memset>
 800ce52:	4b0d      	ldr	r3, [pc, #52]	@ (800ce88 <std+0x58>)
 800ce54:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce56:	4b0d      	ldr	r3, [pc, #52]	@ (800ce8c <std+0x5c>)
 800ce58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce90 <std+0x60>)
 800ce5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <std+0x64>)
 800ce60:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <std+0x68>)
 800ce64:	6224      	str	r4, [r4, #32]
 800ce66:	429c      	cmp	r4, r3
 800ce68:	d006      	beq.n	800ce78 <std+0x48>
 800ce6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce6e:	4294      	cmp	r4, r2
 800ce70:	d002      	beq.n	800ce78 <std+0x48>
 800ce72:	33d0      	adds	r3, #208	@ 0xd0
 800ce74:	429c      	cmp	r4, r3
 800ce76:	d105      	bne.n	800ce84 <std+0x54>
 800ce78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce80:	f000 b9b0 	b.w	800d1e4 <__retarget_lock_init_recursive>
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	bf00      	nop
 800ce88:	0800d065 	.word	0x0800d065
 800ce8c:	0800d087 	.word	0x0800d087
 800ce90:	0800d0bf 	.word	0x0800d0bf
 800ce94:	0800d0e3 	.word	0x0800d0e3
 800ce98:	20000d8c 	.word	0x20000d8c

0800ce9c <stdio_exit_handler>:
 800ce9c:	4a02      	ldr	r2, [pc, #8]	@ (800cea8 <stdio_exit_handler+0xc>)
 800ce9e:	4903      	ldr	r1, [pc, #12]	@ (800ceac <stdio_exit_handler+0x10>)
 800cea0:	4803      	ldr	r0, [pc, #12]	@ (800ceb0 <stdio_exit_handler+0x14>)
 800cea2:	f000 b869 	b.w	800cf78 <_fwalk_sglue>
 800cea6:	bf00      	nop
 800cea8:	200003cc 	.word	0x200003cc
 800ceac:	0800fadd 	.word	0x0800fadd
 800ceb0:	200003dc 	.word	0x200003dc

0800ceb4 <cleanup_stdio>:
 800ceb4:	6841      	ldr	r1, [r0, #4]
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <cleanup_stdio+0x34>)
 800ceb8:	4299      	cmp	r1, r3
 800ceba:	b510      	push	{r4, lr}
 800cebc:	4604      	mov	r4, r0
 800cebe:	d001      	beq.n	800cec4 <cleanup_stdio+0x10>
 800cec0:	f002 fe0c 	bl	800fadc <_fflush_r>
 800cec4:	68a1      	ldr	r1, [r4, #8]
 800cec6:	4b09      	ldr	r3, [pc, #36]	@ (800ceec <cleanup_stdio+0x38>)
 800cec8:	4299      	cmp	r1, r3
 800ceca:	d002      	beq.n	800ced2 <cleanup_stdio+0x1e>
 800cecc:	4620      	mov	r0, r4
 800cece:	f002 fe05 	bl	800fadc <_fflush_r>
 800ced2:	68e1      	ldr	r1, [r4, #12]
 800ced4:	4b06      	ldr	r3, [pc, #24]	@ (800cef0 <cleanup_stdio+0x3c>)
 800ced6:	4299      	cmp	r1, r3
 800ced8:	d004      	beq.n	800cee4 <cleanup_stdio+0x30>
 800ceda:	4620      	mov	r0, r4
 800cedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee0:	f002 bdfc 	b.w	800fadc <_fflush_r>
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	bf00      	nop
 800cee8:	20000d8c 	.word	0x20000d8c
 800ceec:	20000df4 	.word	0x20000df4
 800cef0:	20000e5c 	.word	0x20000e5c

0800cef4 <global_stdio_init.part.0>:
 800cef4:	b510      	push	{r4, lr}
 800cef6:	4b0b      	ldr	r3, [pc, #44]	@ (800cf24 <global_stdio_init.part.0+0x30>)
 800cef8:	4c0b      	ldr	r4, [pc, #44]	@ (800cf28 <global_stdio_init.part.0+0x34>)
 800cefa:	4a0c      	ldr	r2, [pc, #48]	@ (800cf2c <global_stdio_init.part.0+0x38>)
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	4620      	mov	r0, r4
 800cf00:	2200      	movs	r2, #0
 800cf02:	2104      	movs	r1, #4
 800cf04:	f7ff ff94 	bl	800ce30 <std>
 800cf08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	2109      	movs	r1, #9
 800cf10:	f7ff ff8e 	bl	800ce30 <std>
 800cf14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf18:	2202      	movs	r2, #2
 800cf1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf1e:	2112      	movs	r1, #18
 800cf20:	f7ff bf86 	b.w	800ce30 <std>
 800cf24:	20000ec4 	.word	0x20000ec4
 800cf28:	20000d8c 	.word	0x20000d8c
 800cf2c:	0800ce9d 	.word	0x0800ce9d

0800cf30 <__sfp_lock_acquire>:
 800cf30:	4801      	ldr	r0, [pc, #4]	@ (800cf38 <__sfp_lock_acquire+0x8>)
 800cf32:	f000 b958 	b.w	800d1e6 <__retarget_lock_acquire_recursive>
 800cf36:	bf00      	nop
 800cf38:	20000ecd 	.word	0x20000ecd

0800cf3c <__sfp_lock_release>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	@ (800cf44 <__sfp_lock_release+0x8>)
 800cf3e:	f000 b953 	b.w	800d1e8 <__retarget_lock_release_recursive>
 800cf42:	bf00      	nop
 800cf44:	20000ecd 	.word	0x20000ecd

0800cf48 <__sinit>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	f7ff fff0 	bl	800cf30 <__sfp_lock_acquire>
 800cf50:	6a23      	ldr	r3, [r4, #32]
 800cf52:	b11b      	cbz	r3, 800cf5c <__sinit+0x14>
 800cf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf58:	f7ff bff0 	b.w	800cf3c <__sfp_lock_release>
 800cf5c:	4b04      	ldr	r3, [pc, #16]	@ (800cf70 <__sinit+0x28>)
 800cf5e:	6223      	str	r3, [r4, #32]
 800cf60:	4b04      	ldr	r3, [pc, #16]	@ (800cf74 <__sinit+0x2c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1f5      	bne.n	800cf54 <__sinit+0xc>
 800cf68:	f7ff ffc4 	bl	800cef4 <global_stdio_init.part.0>
 800cf6c:	e7f2      	b.n	800cf54 <__sinit+0xc>
 800cf6e:	bf00      	nop
 800cf70:	0800ceb5 	.word	0x0800ceb5
 800cf74:	20000ec4 	.word	0x20000ec4

0800cf78 <_fwalk_sglue>:
 800cf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	4688      	mov	r8, r1
 800cf80:	4614      	mov	r4, r2
 800cf82:	2600      	movs	r6, #0
 800cf84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf88:	f1b9 0901 	subs.w	r9, r9, #1
 800cf8c:	d505      	bpl.n	800cf9a <_fwalk_sglue+0x22>
 800cf8e:	6824      	ldr	r4, [r4, #0]
 800cf90:	2c00      	cmp	r4, #0
 800cf92:	d1f7      	bne.n	800cf84 <_fwalk_sglue+0xc>
 800cf94:	4630      	mov	r0, r6
 800cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d907      	bls.n	800cfb0 <_fwalk_sglue+0x38>
 800cfa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	d003      	beq.n	800cfb0 <_fwalk_sglue+0x38>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4638      	mov	r0, r7
 800cfac:	47c0      	blx	r8
 800cfae:	4306      	orrs	r6, r0
 800cfb0:	3568      	adds	r5, #104	@ 0x68
 800cfb2:	e7e9      	b.n	800cf88 <_fwalk_sglue+0x10>

0800cfb4 <sniprintf>:
 800cfb4:	b40c      	push	{r2, r3}
 800cfb6:	b530      	push	{r4, r5, lr}
 800cfb8:	4b18      	ldr	r3, [pc, #96]	@ (800d01c <sniprintf+0x68>)
 800cfba:	1e0c      	subs	r4, r1, #0
 800cfbc:	681d      	ldr	r5, [r3, #0]
 800cfbe:	b09d      	sub	sp, #116	@ 0x74
 800cfc0:	da08      	bge.n	800cfd4 <sniprintf+0x20>
 800cfc2:	238b      	movs	r3, #139	@ 0x8b
 800cfc4:	602b      	str	r3, [r5, #0]
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfca:	b01d      	add	sp, #116	@ 0x74
 800cfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd0:	b002      	add	sp, #8
 800cfd2:	4770      	bx	lr
 800cfd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cfd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cfdc:	f04f 0300 	mov.w	r3, #0
 800cfe0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cfe2:	bf14      	ite	ne
 800cfe4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cfe8:	4623      	moveq	r3, r4
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	9307      	str	r3, [sp, #28]
 800cfee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cff2:	9002      	str	r0, [sp, #8]
 800cff4:	9006      	str	r0, [sp, #24]
 800cff6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cffa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cffc:	ab21      	add	r3, sp, #132	@ 0x84
 800cffe:	a902      	add	r1, sp, #8
 800d000:	4628      	mov	r0, r5
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	f002 fbea 	bl	800f7dc <_svfiprintf_r>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	bfbc      	itt	lt
 800d00c:	238b      	movlt	r3, #139	@ 0x8b
 800d00e:	602b      	strlt	r3, [r5, #0]
 800d010:	2c00      	cmp	r4, #0
 800d012:	d0da      	beq.n	800cfca <sniprintf+0x16>
 800d014:	9b02      	ldr	r3, [sp, #8]
 800d016:	2200      	movs	r2, #0
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e7d6      	b.n	800cfca <sniprintf+0x16>
 800d01c:	200003d8 	.word	0x200003d8

0800d020 <siprintf>:
 800d020:	b40e      	push	{r1, r2, r3}
 800d022:	b510      	push	{r4, lr}
 800d024:	b09d      	sub	sp, #116	@ 0x74
 800d026:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d028:	9002      	str	r0, [sp, #8]
 800d02a:	9006      	str	r0, [sp, #24]
 800d02c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d030:	480a      	ldr	r0, [pc, #40]	@ (800d05c <siprintf+0x3c>)
 800d032:	9107      	str	r1, [sp, #28]
 800d034:	9104      	str	r1, [sp, #16]
 800d036:	490a      	ldr	r1, [pc, #40]	@ (800d060 <siprintf+0x40>)
 800d038:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03c:	9105      	str	r1, [sp, #20]
 800d03e:	2400      	movs	r4, #0
 800d040:	a902      	add	r1, sp, #8
 800d042:	6800      	ldr	r0, [r0, #0]
 800d044:	9301      	str	r3, [sp, #4]
 800d046:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d048:	f002 fbc8 	bl	800f7dc <_svfiprintf_r>
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	701c      	strb	r4, [r3, #0]
 800d050:	b01d      	add	sp, #116	@ 0x74
 800d052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d056:	b003      	add	sp, #12
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	200003d8 	.word	0x200003d8
 800d060:	ffff0208 	.word	0xffff0208

0800d064 <__sread>:
 800d064:	b510      	push	{r4, lr}
 800d066:	460c      	mov	r4, r1
 800d068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06c:	f000 f86c 	bl	800d148 <_read_r>
 800d070:	2800      	cmp	r0, #0
 800d072:	bfab      	itete	ge
 800d074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d076:	89a3      	ldrhlt	r3, [r4, #12]
 800d078:	181b      	addge	r3, r3, r0
 800d07a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d07e:	bfac      	ite	ge
 800d080:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d082:	81a3      	strhlt	r3, [r4, #12]
 800d084:	bd10      	pop	{r4, pc}

0800d086 <__swrite>:
 800d086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	461f      	mov	r7, r3
 800d08c:	898b      	ldrh	r3, [r1, #12]
 800d08e:	05db      	lsls	r3, r3, #23
 800d090:	4605      	mov	r5, r0
 800d092:	460c      	mov	r4, r1
 800d094:	4616      	mov	r6, r2
 800d096:	d505      	bpl.n	800d0a4 <__swrite+0x1e>
 800d098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09c:	2302      	movs	r3, #2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f000 f840 	bl	800d124 <_lseek_r>
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0ae:	81a3      	strh	r3, [r4, #12]
 800d0b0:	4632      	mov	r2, r6
 800d0b2:	463b      	mov	r3, r7
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	f000 b857 	b.w	800d16c <_write_r>

0800d0be <__sseek>:
 800d0be:	b510      	push	{r4, lr}
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c6:	f000 f82d 	bl	800d124 <_lseek_r>
 800d0ca:	1c43      	adds	r3, r0, #1
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	bf15      	itete	ne
 800d0d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0da:	81a3      	strheq	r3, [r4, #12]
 800d0dc:	bf18      	it	ne
 800d0de:	81a3      	strhne	r3, [r4, #12]
 800d0e0:	bd10      	pop	{r4, pc}

0800d0e2 <__sclose>:
 800d0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e6:	f000 b80d 	b.w	800d104 <_close_r>

0800d0ea <memset>:
 800d0ea:	4402      	add	r2, r0
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d100      	bne.n	800d0f4 <memset+0xa>
 800d0f2:	4770      	bx	lr
 800d0f4:	f803 1b01 	strb.w	r1, [r3], #1
 800d0f8:	e7f9      	b.n	800d0ee <memset+0x4>
	...

0800d0fc <_localeconv_r>:
 800d0fc:	4800      	ldr	r0, [pc, #0]	@ (800d100 <_localeconv_r+0x4>)
 800d0fe:	4770      	bx	lr
 800d100:	20000518 	.word	0x20000518

0800d104 <_close_r>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4d06      	ldr	r5, [pc, #24]	@ (800d120 <_close_r+0x1c>)
 800d108:	2300      	movs	r3, #0
 800d10a:	4604      	mov	r4, r0
 800d10c:	4608      	mov	r0, r1
 800d10e:	602b      	str	r3, [r5, #0]
 800d110:	f7f4 fe00 	bl	8001d14 <_close>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_close_r+0x1a>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_close_r+0x1a>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20000ec8 	.word	0x20000ec8

0800d124 <_lseek_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d07      	ldr	r5, [pc, #28]	@ (800d144 <_lseek_r+0x20>)
 800d128:	4604      	mov	r4, r0
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f7f4 fe15 	bl	8001d62 <_lseek>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_lseek_r+0x1e>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_lseek_r+0x1e>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	20000ec8 	.word	0x20000ec8

0800d148 <_read_r>:
 800d148:	b538      	push	{r3, r4, r5, lr}
 800d14a:	4d07      	ldr	r5, [pc, #28]	@ (800d168 <_read_r+0x20>)
 800d14c:	4604      	mov	r4, r0
 800d14e:	4608      	mov	r0, r1
 800d150:	4611      	mov	r1, r2
 800d152:	2200      	movs	r2, #0
 800d154:	602a      	str	r2, [r5, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	f7f4 fda3 	bl	8001ca2 <_read>
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d102      	bne.n	800d166 <_read_r+0x1e>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	b103      	cbz	r3, 800d166 <_read_r+0x1e>
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	bd38      	pop	{r3, r4, r5, pc}
 800d168:	20000ec8 	.word	0x20000ec8

0800d16c <_write_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4d07      	ldr	r5, [pc, #28]	@ (800d18c <_write_r+0x20>)
 800d170:	4604      	mov	r4, r0
 800d172:	4608      	mov	r0, r1
 800d174:	4611      	mov	r1, r2
 800d176:	2200      	movs	r2, #0
 800d178:	602a      	str	r2, [r5, #0]
 800d17a:	461a      	mov	r2, r3
 800d17c:	f7f4 fdae 	bl	8001cdc <_write>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_write_r+0x1e>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	b103      	cbz	r3, 800d18a <_write_r+0x1e>
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	20000ec8 	.word	0x20000ec8

0800d190 <__errno>:
 800d190:	4b01      	ldr	r3, [pc, #4]	@ (800d198 <__errno+0x8>)
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	200003d8 	.word	0x200003d8

0800d19c <__libc_init_array>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	4d0d      	ldr	r5, [pc, #52]	@ (800d1d4 <__libc_init_array+0x38>)
 800d1a0:	4c0d      	ldr	r4, [pc, #52]	@ (800d1d8 <__libc_init_array+0x3c>)
 800d1a2:	1b64      	subs	r4, r4, r5
 800d1a4:	10a4      	asrs	r4, r4, #2
 800d1a6:	2600      	movs	r6, #0
 800d1a8:	42a6      	cmp	r6, r4
 800d1aa:	d109      	bne.n	800d1c0 <__libc_init_array+0x24>
 800d1ac:	4d0b      	ldr	r5, [pc, #44]	@ (800d1dc <__libc_init_array+0x40>)
 800d1ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d1e0 <__libc_init_array+0x44>)
 800d1b0:	f004 f8b4 	bl	801131c <_init>
 800d1b4:	1b64      	subs	r4, r4, r5
 800d1b6:	10a4      	asrs	r4, r4, #2
 800d1b8:	2600      	movs	r6, #0
 800d1ba:	42a6      	cmp	r6, r4
 800d1bc:	d105      	bne.n	800d1ca <__libc_init_array+0x2e>
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c4:	4798      	blx	r3
 800d1c6:	3601      	adds	r6, #1
 800d1c8:	e7ee      	b.n	800d1a8 <__libc_init_array+0xc>
 800d1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ce:	4798      	blx	r3
 800d1d0:	3601      	adds	r6, #1
 800d1d2:	e7f2      	b.n	800d1ba <__libc_init_array+0x1e>
 800d1d4:	080118bc 	.word	0x080118bc
 800d1d8:	080118bc 	.word	0x080118bc
 800d1dc:	080118bc 	.word	0x080118bc
 800d1e0:	080118c0 	.word	0x080118c0

0800d1e4 <__retarget_lock_init_recursive>:
 800d1e4:	4770      	bx	lr

0800d1e6 <__retarget_lock_acquire_recursive>:
 800d1e6:	4770      	bx	lr

0800d1e8 <__retarget_lock_release_recursive>:
 800d1e8:	4770      	bx	lr

0800d1ea <memcpy>:
 800d1ea:	440a      	add	r2, r1
 800d1ec:	4291      	cmp	r1, r2
 800d1ee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1f2:	d100      	bne.n	800d1f6 <memcpy+0xc>
 800d1f4:	4770      	bx	lr
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d200:	4291      	cmp	r1, r2
 800d202:	d1f9      	bne.n	800d1f8 <memcpy+0xe>
 800d204:	bd10      	pop	{r4, pc}
	...

0800d208 <nanf>:
 800d208:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d210 <nanf+0x8>
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	7fc00000 	.word	0x7fc00000

0800d214 <quorem>:
 800d214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	6903      	ldr	r3, [r0, #16]
 800d21a:	690c      	ldr	r4, [r1, #16]
 800d21c:	42a3      	cmp	r3, r4
 800d21e:	4607      	mov	r7, r0
 800d220:	db7e      	blt.n	800d320 <quorem+0x10c>
 800d222:	3c01      	subs	r4, #1
 800d224:	f101 0814 	add.w	r8, r1, #20
 800d228:	00a3      	lsls	r3, r4, #2
 800d22a:	f100 0514 	add.w	r5, r0, #20
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d23a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d23e:	3301      	adds	r3, #1
 800d240:	429a      	cmp	r2, r3
 800d242:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d246:	fbb2 f6f3 	udiv	r6, r2, r3
 800d24a:	d32e      	bcc.n	800d2aa <quorem+0x96>
 800d24c:	f04f 0a00 	mov.w	sl, #0
 800d250:	46c4      	mov	ip, r8
 800d252:	46ae      	mov	lr, r5
 800d254:	46d3      	mov	fp, sl
 800d256:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d25a:	b298      	uxth	r0, r3
 800d25c:	fb06 a000 	mla	r0, r6, r0, sl
 800d260:	0c02      	lsrs	r2, r0, #16
 800d262:	0c1b      	lsrs	r3, r3, #16
 800d264:	fb06 2303 	mla	r3, r6, r3, r2
 800d268:	f8de 2000 	ldr.w	r2, [lr]
 800d26c:	b280      	uxth	r0, r0
 800d26e:	b292      	uxth	r2, r2
 800d270:	1a12      	subs	r2, r2, r0
 800d272:	445a      	add	r2, fp
 800d274:	f8de 0000 	ldr.w	r0, [lr]
 800d278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d282:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d286:	b292      	uxth	r2, r2
 800d288:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d28c:	45e1      	cmp	r9, ip
 800d28e:	f84e 2b04 	str.w	r2, [lr], #4
 800d292:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d296:	d2de      	bcs.n	800d256 <quorem+0x42>
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	58eb      	ldr	r3, [r5, r3]
 800d29c:	b92b      	cbnz	r3, 800d2aa <quorem+0x96>
 800d29e:	9b01      	ldr	r3, [sp, #4]
 800d2a0:	3b04      	subs	r3, #4
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	d32f      	bcc.n	800d308 <quorem+0xf4>
 800d2a8:	613c      	str	r4, [r7, #16]
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f001 f9c8 	bl	800e640 <__mcmp>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	db25      	blt.n	800d300 <quorem+0xec>
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2bc:	f8d1 c000 	ldr.w	ip, [r1]
 800d2c0:	fa1f fe82 	uxth.w	lr, r2
 800d2c4:	fa1f f38c 	uxth.w	r3, ip
 800d2c8:	eba3 030e 	sub.w	r3, r3, lr
 800d2cc:	4403      	add	r3, r0
 800d2ce:	0c12      	lsrs	r2, r2, #16
 800d2d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d2d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2de:	45c1      	cmp	r9, r8
 800d2e0:	f841 3b04 	str.w	r3, [r1], #4
 800d2e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d2e8:	d2e6      	bcs.n	800d2b8 <quorem+0xa4>
 800d2ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2f2:	b922      	cbnz	r2, 800d2fe <quorem+0xea>
 800d2f4:	3b04      	subs	r3, #4
 800d2f6:	429d      	cmp	r5, r3
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	d30b      	bcc.n	800d314 <quorem+0x100>
 800d2fc:	613c      	str	r4, [r7, #16]
 800d2fe:	3601      	adds	r6, #1
 800d300:	4630      	mov	r0, r6
 800d302:	b003      	add	sp, #12
 800d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d308:	6812      	ldr	r2, [r2, #0]
 800d30a:	3b04      	subs	r3, #4
 800d30c:	2a00      	cmp	r2, #0
 800d30e:	d1cb      	bne.n	800d2a8 <quorem+0x94>
 800d310:	3c01      	subs	r4, #1
 800d312:	e7c6      	b.n	800d2a2 <quorem+0x8e>
 800d314:	6812      	ldr	r2, [r2, #0]
 800d316:	3b04      	subs	r3, #4
 800d318:	2a00      	cmp	r2, #0
 800d31a:	d1ef      	bne.n	800d2fc <quorem+0xe8>
 800d31c:	3c01      	subs	r4, #1
 800d31e:	e7ea      	b.n	800d2f6 <quorem+0xe2>
 800d320:	2000      	movs	r0, #0
 800d322:	e7ee      	b.n	800d302 <quorem+0xee>
 800d324:	0000      	movs	r0, r0
	...

0800d328 <_dtoa_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	69c7      	ldr	r7, [r0, #28]
 800d32e:	b097      	sub	sp, #92	@ 0x5c
 800d330:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d334:	ec55 4b10 	vmov	r4, r5, d0
 800d338:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d33a:	9107      	str	r1, [sp, #28]
 800d33c:	4681      	mov	r9, r0
 800d33e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d340:	9311      	str	r3, [sp, #68]	@ 0x44
 800d342:	b97f      	cbnz	r7, 800d364 <_dtoa_r+0x3c>
 800d344:	2010      	movs	r0, #16
 800d346:	f000 fe09 	bl	800df5c <malloc>
 800d34a:	4602      	mov	r2, r0
 800d34c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d350:	b920      	cbnz	r0, 800d35c <_dtoa_r+0x34>
 800d352:	4ba9      	ldr	r3, [pc, #676]	@ (800d5f8 <_dtoa_r+0x2d0>)
 800d354:	21ef      	movs	r1, #239	@ 0xef
 800d356:	48a9      	ldr	r0, [pc, #676]	@ (800d5fc <_dtoa_r+0x2d4>)
 800d358:	f002 fc2e 	bl	800fbb8 <__assert_func>
 800d35c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d360:	6007      	str	r7, [r0, #0]
 800d362:	60c7      	str	r7, [r0, #12]
 800d364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d368:	6819      	ldr	r1, [r3, #0]
 800d36a:	b159      	cbz	r1, 800d384 <_dtoa_r+0x5c>
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	604a      	str	r2, [r1, #4]
 800d370:	2301      	movs	r3, #1
 800d372:	4093      	lsls	r3, r2
 800d374:	608b      	str	r3, [r1, #8]
 800d376:	4648      	mov	r0, r9
 800d378:	f000 fee6 	bl	800e148 <_Bfree>
 800d37c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	1e2b      	subs	r3, r5, #0
 800d386:	bfb9      	ittee	lt
 800d388:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d38c:	9305      	strlt	r3, [sp, #20]
 800d38e:	2300      	movge	r3, #0
 800d390:	6033      	strge	r3, [r6, #0]
 800d392:	9f05      	ldr	r7, [sp, #20]
 800d394:	4b9a      	ldr	r3, [pc, #616]	@ (800d600 <_dtoa_r+0x2d8>)
 800d396:	bfbc      	itt	lt
 800d398:	2201      	movlt	r2, #1
 800d39a:	6032      	strlt	r2, [r6, #0]
 800d39c:	43bb      	bics	r3, r7
 800d39e:	d112      	bne.n	800d3c6 <_dtoa_r+0x9e>
 800d3a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d3a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3ac:	4323      	orrs	r3, r4
 800d3ae:	f000 855a 	beq.w	800de66 <_dtoa_r+0xb3e>
 800d3b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d3b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d614 <_dtoa_r+0x2ec>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 855c 	beq.w	800de76 <_dtoa_r+0xb4e>
 800d3be:	f10a 0303 	add.w	r3, sl, #3
 800d3c2:	f000 bd56 	b.w	800de72 <_dtoa_r+0xb4a>
 800d3c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	ec51 0b17 	vmov	r0, r1, d7
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d3d6:	f7f3 fba7 	bl	8000b28 <__aeabi_dcmpeq>
 800d3da:	4680      	mov	r8, r0
 800d3dc:	b158      	cbz	r0, 800d3f6 <_dtoa_r+0xce>
 800d3de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d3e6:	b113      	cbz	r3, 800d3ee <_dtoa_r+0xc6>
 800d3e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d3ea:	4b86      	ldr	r3, [pc, #536]	@ (800d604 <_dtoa_r+0x2dc>)
 800d3ec:	6013      	str	r3, [r2, #0]
 800d3ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d618 <_dtoa_r+0x2f0>
 800d3f2:	f000 bd40 	b.w	800de76 <_dtoa_r+0xb4e>
 800d3f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d3fa:	aa14      	add	r2, sp, #80	@ 0x50
 800d3fc:	a915      	add	r1, sp, #84	@ 0x54
 800d3fe:	4648      	mov	r0, r9
 800d400:	f001 fa3e 	bl	800e880 <__d2b>
 800d404:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d408:	9002      	str	r0, [sp, #8]
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	d078      	beq.n	800d500 <_dtoa_r+0x1d8>
 800d40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d410:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d41c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d420:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d424:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d428:	4619      	mov	r1, r3
 800d42a:	2200      	movs	r2, #0
 800d42c:	4b76      	ldr	r3, [pc, #472]	@ (800d608 <_dtoa_r+0x2e0>)
 800d42e:	f7f2 ff5b 	bl	80002e8 <__aeabi_dsub>
 800d432:	a36b      	add	r3, pc, #428	@ (adr r3, 800d5e0 <_dtoa_r+0x2b8>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	f7f3 f90e 	bl	8000658 <__aeabi_dmul>
 800d43c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d5e8 <_dtoa_r+0x2c0>)
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	f7f2 ff53 	bl	80002ec <__adddf3>
 800d446:	4604      	mov	r4, r0
 800d448:	4630      	mov	r0, r6
 800d44a:	460d      	mov	r5, r1
 800d44c:	f7f3 f89a 	bl	8000584 <__aeabi_i2d>
 800d450:	a367      	add	r3, pc, #412	@ (adr r3, 800d5f0 <_dtoa_r+0x2c8>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f7f3 f8ff 	bl	8000658 <__aeabi_dmul>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4620      	mov	r0, r4
 800d460:	4629      	mov	r1, r5
 800d462:	f7f2 ff43 	bl	80002ec <__adddf3>
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
 800d46a:	f7f3 fba5 	bl	8000bb8 <__aeabi_d2iz>
 800d46e:	2200      	movs	r2, #0
 800d470:	4607      	mov	r7, r0
 800d472:	2300      	movs	r3, #0
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f3 fb60 	bl	8000b3c <__aeabi_dcmplt>
 800d47c:	b140      	cbz	r0, 800d490 <_dtoa_r+0x168>
 800d47e:	4638      	mov	r0, r7
 800d480:	f7f3 f880 	bl	8000584 <__aeabi_i2d>
 800d484:	4622      	mov	r2, r4
 800d486:	462b      	mov	r3, r5
 800d488:	f7f3 fb4e 	bl	8000b28 <__aeabi_dcmpeq>
 800d48c:	b900      	cbnz	r0, 800d490 <_dtoa_r+0x168>
 800d48e:	3f01      	subs	r7, #1
 800d490:	2f16      	cmp	r7, #22
 800d492:	d852      	bhi.n	800d53a <_dtoa_r+0x212>
 800d494:	4b5d      	ldr	r3, [pc, #372]	@ (800d60c <_dtoa_r+0x2e4>)
 800d496:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4a2:	f7f3 fb4b 	bl	8000b3c <__aeabi_dcmplt>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d049      	beq.n	800d53e <_dtoa_r+0x216>
 800d4aa:	3f01      	subs	r7, #1
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4b2:	1b9b      	subs	r3, r3, r6
 800d4b4:	1e5a      	subs	r2, r3, #1
 800d4b6:	bf45      	ittet	mi
 800d4b8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d4bc:	9300      	strmi	r3, [sp, #0]
 800d4be:	2300      	movpl	r3, #0
 800d4c0:	2300      	movmi	r3, #0
 800d4c2:	9206      	str	r2, [sp, #24]
 800d4c4:	bf54      	ite	pl
 800d4c6:	9300      	strpl	r3, [sp, #0]
 800d4c8:	9306      	strmi	r3, [sp, #24]
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	db39      	blt.n	800d542 <_dtoa_r+0x21a>
 800d4ce:	9b06      	ldr	r3, [sp, #24]
 800d4d0:	970d      	str	r7, [sp, #52]	@ 0x34
 800d4d2:	443b      	add	r3, r7
 800d4d4:	9306      	str	r3, [sp, #24]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	9308      	str	r3, [sp, #32]
 800d4da:	9b07      	ldr	r3, [sp, #28]
 800d4dc:	2b09      	cmp	r3, #9
 800d4de:	d863      	bhi.n	800d5a8 <_dtoa_r+0x280>
 800d4e0:	2b05      	cmp	r3, #5
 800d4e2:	bfc4      	itt	gt
 800d4e4:	3b04      	subgt	r3, #4
 800d4e6:	9307      	strgt	r3, [sp, #28]
 800d4e8:	9b07      	ldr	r3, [sp, #28]
 800d4ea:	f1a3 0302 	sub.w	r3, r3, #2
 800d4ee:	bfcc      	ite	gt
 800d4f0:	2400      	movgt	r4, #0
 800d4f2:	2401      	movle	r4, #1
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d863      	bhi.n	800d5c0 <_dtoa_r+0x298>
 800d4f8:	e8df f003 	tbb	[pc, r3]
 800d4fc:	2b375452 	.word	0x2b375452
 800d500:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d504:	441e      	add	r6, r3
 800d506:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d50a:	2b20      	cmp	r3, #32
 800d50c:	bfc1      	itttt	gt
 800d50e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d512:	409f      	lslgt	r7, r3
 800d514:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d518:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d51c:	bfd6      	itet	le
 800d51e:	f1c3 0320 	rsble	r3, r3, #32
 800d522:	ea47 0003 	orrgt.w	r0, r7, r3
 800d526:	fa04 f003 	lslle.w	r0, r4, r3
 800d52a:	f7f3 f81b 	bl	8000564 <__aeabi_ui2d>
 800d52e:	2201      	movs	r2, #1
 800d530:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d534:	3e01      	subs	r6, #1
 800d536:	9212      	str	r2, [sp, #72]	@ 0x48
 800d538:	e776      	b.n	800d428 <_dtoa_r+0x100>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e7b7      	b.n	800d4ae <_dtoa_r+0x186>
 800d53e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d540:	e7b6      	b.n	800d4b0 <_dtoa_r+0x188>
 800d542:	9b00      	ldr	r3, [sp, #0]
 800d544:	1bdb      	subs	r3, r3, r7
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	427b      	negs	r3, r7
 800d54a:	9308      	str	r3, [sp, #32]
 800d54c:	2300      	movs	r3, #0
 800d54e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d550:	e7c3      	b.n	800d4da <_dtoa_r+0x1b2>
 800d552:	2301      	movs	r3, #1
 800d554:	9309      	str	r3, [sp, #36]	@ 0x24
 800d556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d558:	eb07 0b03 	add.w	fp, r7, r3
 800d55c:	f10b 0301 	add.w	r3, fp, #1
 800d560:	2b01      	cmp	r3, #1
 800d562:	9303      	str	r3, [sp, #12]
 800d564:	bfb8      	it	lt
 800d566:	2301      	movlt	r3, #1
 800d568:	e006      	b.n	800d578 <_dtoa_r+0x250>
 800d56a:	2301      	movs	r3, #1
 800d56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d56e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d570:	2b00      	cmp	r3, #0
 800d572:	dd28      	ble.n	800d5c6 <_dtoa_r+0x29e>
 800d574:	469b      	mov	fp, r3
 800d576:	9303      	str	r3, [sp, #12]
 800d578:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d57c:	2100      	movs	r1, #0
 800d57e:	2204      	movs	r2, #4
 800d580:	f102 0514 	add.w	r5, r2, #20
 800d584:	429d      	cmp	r5, r3
 800d586:	d926      	bls.n	800d5d6 <_dtoa_r+0x2ae>
 800d588:	6041      	str	r1, [r0, #4]
 800d58a:	4648      	mov	r0, r9
 800d58c:	f000 fd9c 	bl	800e0c8 <_Balloc>
 800d590:	4682      	mov	sl, r0
 800d592:	2800      	cmp	r0, #0
 800d594:	d142      	bne.n	800d61c <_dtoa_r+0x2f4>
 800d596:	4b1e      	ldr	r3, [pc, #120]	@ (800d610 <_dtoa_r+0x2e8>)
 800d598:	4602      	mov	r2, r0
 800d59a:	f240 11af 	movw	r1, #431	@ 0x1af
 800d59e:	e6da      	b.n	800d356 <_dtoa_r+0x2e>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	e7e3      	b.n	800d56c <_dtoa_r+0x244>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e7d5      	b.n	800d554 <_dtoa_r+0x22c>
 800d5a8:	2401      	movs	r4, #1
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9307      	str	r3, [sp, #28]
 800d5ae:	9409      	str	r4, [sp, #36]	@ 0x24
 800d5b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d5ba:	2312      	movs	r3, #18
 800d5bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d5be:	e7db      	b.n	800d578 <_dtoa_r+0x250>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c4:	e7f4      	b.n	800d5b0 <_dtoa_r+0x288>
 800d5c6:	f04f 0b01 	mov.w	fp, #1
 800d5ca:	f8cd b00c 	str.w	fp, [sp, #12]
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d5d4:	e7d0      	b.n	800d578 <_dtoa_r+0x250>
 800d5d6:	3101      	adds	r1, #1
 800d5d8:	0052      	lsls	r2, r2, #1
 800d5da:	e7d1      	b.n	800d580 <_dtoa_r+0x258>
 800d5dc:	f3af 8000 	nop.w
 800d5e0:	636f4361 	.word	0x636f4361
 800d5e4:	3fd287a7 	.word	0x3fd287a7
 800d5e8:	8b60c8b3 	.word	0x8b60c8b3
 800d5ec:	3fc68a28 	.word	0x3fc68a28
 800d5f0:	509f79fb 	.word	0x509f79fb
 800d5f4:	3fd34413 	.word	0x3fd34413
 800d5f8:	08011482 	.word	0x08011482
 800d5fc:	08011499 	.word	0x08011499
 800d600:	7ff00000 	.word	0x7ff00000
 800d604:	0801144d 	.word	0x0801144d
 800d608:	3ff80000 	.word	0x3ff80000
 800d60c:	08011648 	.word	0x08011648
 800d610:	080114f1 	.word	0x080114f1
 800d614:	0801147e 	.word	0x0801147e
 800d618:	0801144c 	.word	0x0801144c
 800d61c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d620:	6018      	str	r0, [r3, #0]
 800d622:	9b03      	ldr	r3, [sp, #12]
 800d624:	2b0e      	cmp	r3, #14
 800d626:	f200 80a1 	bhi.w	800d76c <_dtoa_r+0x444>
 800d62a:	2c00      	cmp	r4, #0
 800d62c:	f000 809e 	beq.w	800d76c <_dtoa_r+0x444>
 800d630:	2f00      	cmp	r7, #0
 800d632:	dd33      	ble.n	800d69c <_dtoa_r+0x374>
 800d634:	4b9c      	ldr	r3, [pc, #624]	@ (800d8a8 <_dtoa_r+0x580>)
 800d636:	f007 020f 	and.w	r2, r7, #15
 800d63a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d63e:	ed93 7b00 	vldr	d7, [r3]
 800d642:	05f8      	lsls	r0, r7, #23
 800d644:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d64c:	d516      	bpl.n	800d67c <_dtoa_r+0x354>
 800d64e:	4b97      	ldr	r3, [pc, #604]	@ (800d8ac <_dtoa_r+0x584>)
 800d650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d658:	f7f3 f928 	bl	80008ac <__aeabi_ddiv>
 800d65c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d660:	f004 040f 	and.w	r4, r4, #15
 800d664:	2603      	movs	r6, #3
 800d666:	4d91      	ldr	r5, [pc, #580]	@ (800d8ac <_dtoa_r+0x584>)
 800d668:	b954      	cbnz	r4, 800d680 <_dtoa_r+0x358>
 800d66a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d672:	f7f3 f91b 	bl	80008ac <__aeabi_ddiv>
 800d676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d67a:	e028      	b.n	800d6ce <_dtoa_r+0x3a6>
 800d67c:	2602      	movs	r6, #2
 800d67e:	e7f2      	b.n	800d666 <_dtoa_r+0x33e>
 800d680:	07e1      	lsls	r1, r4, #31
 800d682:	d508      	bpl.n	800d696 <_dtoa_r+0x36e>
 800d684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d68c:	f7f2 ffe4 	bl	8000658 <__aeabi_dmul>
 800d690:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d694:	3601      	adds	r6, #1
 800d696:	1064      	asrs	r4, r4, #1
 800d698:	3508      	adds	r5, #8
 800d69a:	e7e5      	b.n	800d668 <_dtoa_r+0x340>
 800d69c:	f000 80af 	beq.w	800d7fe <_dtoa_r+0x4d6>
 800d6a0:	427c      	negs	r4, r7
 800d6a2:	4b81      	ldr	r3, [pc, #516]	@ (800d8a8 <_dtoa_r+0x580>)
 800d6a4:	4d81      	ldr	r5, [pc, #516]	@ (800d8ac <_dtoa_r+0x584>)
 800d6a6:	f004 020f 	and.w	r2, r4, #15
 800d6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6b6:	f7f2 ffcf 	bl	8000658 <__aeabi_dmul>
 800d6ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6be:	1124      	asrs	r4, r4, #4
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	2602      	movs	r6, #2
 800d6c4:	2c00      	cmp	r4, #0
 800d6c6:	f040 808f 	bne.w	800d7e8 <_dtoa_r+0x4c0>
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1d3      	bne.n	800d676 <_dtoa_r+0x34e>
 800d6ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 8094 	beq.w	800d802 <_dtoa_r+0x4da>
 800d6da:	4b75      	ldr	r3, [pc, #468]	@ (800d8b0 <_dtoa_r+0x588>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f3 fa2b 	bl	8000b3c <__aeabi_dcmplt>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f000 808b 	beq.w	800d802 <_dtoa_r+0x4da>
 800d6ec:	9b03      	ldr	r3, [sp, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 8087 	beq.w	800d802 <_dtoa_r+0x4da>
 800d6f4:	f1bb 0f00 	cmp.w	fp, #0
 800d6f8:	dd34      	ble.n	800d764 <_dtoa_r+0x43c>
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	4b6d      	ldr	r3, [pc, #436]	@ (800d8b4 <_dtoa_r+0x58c>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	4629      	mov	r1, r5
 800d702:	f7f2 ffa9 	bl	8000658 <__aeabi_dmul>
 800d706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d70a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d70e:	3601      	adds	r6, #1
 800d710:	465c      	mov	r4, fp
 800d712:	4630      	mov	r0, r6
 800d714:	f7f2 ff36 	bl	8000584 <__aeabi_i2d>
 800d718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d71c:	f7f2 ff9c 	bl	8000658 <__aeabi_dmul>
 800d720:	4b65      	ldr	r3, [pc, #404]	@ (800d8b8 <_dtoa_r+0x590>)
 800d722:	2200      	movs	r2, #0
 800d724:	f7f2 fde2 	bl	80002ec <__adddf3>
 800d728:	4605      	mov	r5, r0
 800d72a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d72e:	2c00      	cmp	r4, #0
 800d730:	d16a      	bne.n	800d808 <_dtoa_r+0x4e0>
 800d732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d736:	4b61      	ldr	r3, [pc, #388]	@ (800d8bc <_dtoa_r+0x594>)
 800d738:	2200      	movs	r2, #0
 800d73a:	f7f2 fdd5 	bl	80002e8 <__aeabi_dsub>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d746:	462a      	mov	r2, r5
 800d748:	4633      	mov	r3, r6
 800d74a:	f7f3 fa15 	bl	8000b78 <__aeabi_dcmpgt>
 800d74e:	2800      	cmp	r0, #0
 800d750:	f040 8298 	bne.w	800dc84 <_dtoa_r+0x95c>
 800d754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d758:	462a      	mov	r2, r5
 800d75a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d75e:	f7f3 f9ed 	bl	8000b3c <__aeabi_dcmplt>
 800d762:	bb38      	cbnz	r0, 800d7b4 <_dtoa_r+0x48c>
 800d764:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d768:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d76c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f2c0 8157 	blt.w	800da22 <_dtoa_r+0x6fa>
 800d774:	2f0e      	cmp	r7, #14
 800d776:	f300 8154 	bgt.w	800da22 <_dtoa_r+0x6fa>
 800d77a:	4b4b      	ldr	r3, [pc, #300]	@ (800d8a8 <_dtoa_r+0x580>)
 800d77c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d780:	ed93 7b00 	vldr	d7, [r3]
 800d784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d786:	2b00      	cmp	r3, #0
 800d788:	ed8d 7b00 	vstr	d7, [sp]
 800d78c:	f280 80e5 	bge.w	800d95a <_dtoa_r+0x632>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	f300 80e1 	bgt.w	800d95a <_dtoa_r+0x632>
 800d798:	d10c      	bne.n	800d7b4 <_dtoa_r+0x48c>
 800d79a:	4b48      	ldr	r3, [pc, #288]	@ (800d8bc <_dtoa_r+0x594>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	ec51 0b17 	vmov	r0, r1, d7
 800d7a2:	f7f2 ff59 	bl	8000658 <__aeabi_dmul>
 800d7a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7aa:	f7f3 f9db 	bl	8000b64 <__aeabi_dcmpge>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	f000 8266 	beq.w	800dc80 <_dtoa_r+0x958>
 800d7b4:	2400      	movs	r4, #0
 800d7b6:	4625      	mov	r5, r4
 800d7b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7ba:	4656      	mov	r6, sl
 800d7bc:	ea6f 0803 	mvn.w	r8, r3
 800d7c0:	2700      	movs	r7, #0
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4648      	mov	r0, r9
 800d7c6:	f000 fcbf 	bl	800e148 <_Bfree>
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	f000 80bd 	beq.w	800d94a <_dtoa_r+0x622>
 800d7d0:	b12f      	cbz	r7, 800d7de <_dtoa_r+0x4b6>
 800d7d2:	42af      	cmp	r7, r5
 800d7d4:	d003      	beq.n	800d7de <_dtoa_r+0x4b6>
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f000 fcb5 	bl	800e148 <_Bfree>
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4648      	mov	r0, r9
 800d7e2:	f000 fcb1 	bl	800e148 <_Bfree>
 800d7e6:	e0b0      	b.n	800d94a <_dtoa_r+0x622>
 800d7e8:	07e2      	lsls	r2, r4, #31
 800d7ea:	d505      	bpl.n	800d7f8 <_dtoa_r+0x4d0>
 800d7ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7f0:	f7f2 ff32 	bl	8000658 <__aeabi_dmul>
 800d7f4:	3601      	adds	r6, #1
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	1064      	asrs	r4, r4, #1
 800d7fa:	3508      	adds	r5, #8
 800d7fc:	e762      	b.n	800d6c4 <_dtoa_r+0x39c>
 800d7fe:	2602      	movs	r6, #2
 800d800:	e765      	b.n	800d6ce <_dtoa_r+0x3a6>
 800d802:	9c03      	ldr	r4, [sp, #12]
 800d804:	46b8      	mov	r8, r7
 800d806:	e784      	b.n	800d712 <_dtoa_r+0x3ea>
 800d808:	4b27      	ldr	r3, [pc, #156]	@ (800d8a8 <_dtoa_r+0x580>)
 800d80a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d80c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d814:	4454      	add	r4, sl
 800d816:	2900      	cmp	r1, #0
 800d818:	d054      	beq.n	800d8c4 <_dtoa_r+0x59c>
 800d81a:	4929      	ldr	r1, [pc, #164]	@ (800d8c0 <_dtoa_r+0x598>)
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7f3 f845 	bl	80008ac <__aeabi_ddiv>
 800d822:	4633      	mov	r3, r6
 800d824:	462a      	mov	r2, r5
 800d826:	f7f2 fd5f 	bl	80002e8 <__aeabi_dsub>
 800d82a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d82e:	4656      	mov	r6, sl
 800d830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d834:	f7f3 f9c0 	bl	8000bb8 <__aeabi_d2iz>
 800d838:	4605      	mov	r5, r0
 800d83a:	f7f2 fea3 	bl	8000584 <__aeabi_i2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d846:	f7f2 fd4f 	bl	80002e8 <__aeabi_dsub>
 800d84a:	3530      	adds	r5, #48	@ 0x30
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d854:	f806 5b01 	strb.w	r5, [r6], #1
 800d858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d85c:	f7f3 f96e 	bl	8000b3c <__aeabi_dcmplt>
 800d860:	2800      	cmp	r0, #0
 800d862:	d172      	bne.n	800d94a <_dtoa_r+0x622>
 800d864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d868:	4911      	ldr	r1, [pc, #68]	@ (800d8b0 <_dtoa_r+0x588>)
 800d86a:	2000      	movs	r0, #0
 800d86c:	f7f2 fd3c 	bl	80002e8 <__aeabi_dsub>
 800d870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d874:	f7f3 f962 	bl	8000b3c <__aeabi_dcmplt>
 800d878:	2800      	cmp	r0, #0
 800d87a:	f040 80b4 	bne.w	800d9e6 <_dtoa_r+0x6be>
 800d87e:	42a6      	cmp	r6, r4
 800d880:	f43f af70 	beq.w	800d764 <_dtoa_r+0x43c>
 800d884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d888:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <_dtoa_r+0x58c>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 fee4 	bl	8000658 <__aeabi_dmul>
 800d890:	4b08      	ldr	r3, [pc, #32]	@ (800d8b4 <_dtoa_r+0x58c>)
 800d892:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d896:	2200      	movs	r2, #0
 800d898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d89c:	f7f2 fedc 	bl	8000658 <__aeabi_dmul>
 800d8a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8a4:	e7c4      	b.n	800d830 <_dtoa_r+0x508>
 800d8a6:	bf00      	nop
 800d8a8:	08011648 	.word	0x08011648
 800d8ac:	08011620 	.word	0x08011620
 800d8b0:	3ff00000 	.word	0x3ff00000
 800d8b4:	40240000 	.word	0x40240000
 800d8b8:	401c0000 	.word	0x401c0000
 800d8bc:	40140000 	.word	0x40140000
 800d8c0:	3fe00000 	.word	0x3fe00000
 800d8c4:	4631      	mov	r1, r6
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f7f2 fec6 	bl	8000658 <__aeabi_dmul>
 800d8cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d8d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d8d2:	4656      	mov	r6, sl
 800d8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8d8:	f7f3 f96e 	bl	8000bb8 <__aeabi_d2iz>
 800d8dc:	4605      	mov	r5, r0
 800d8de:	f7f2 fe51 	bl	8000584 <__aeabi_i2d>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8ea:	f7f2 fcfd 	bl	80002e8 <__aeabi_dsub>
 800d8ee:	3530      	adds	r5, #48	@ 0x30
 800d8f0:	f806 5b01 	strb.w	r5, [r6], #1
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	42a6      	cmp	r6, r4
 800d8fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8fe:	f04f 0200 	mov.w	r2, #0
 800d902:	d124      	bne.n	800d94e <_dtoa_r+0x626>
 800d904:	4baf      	ldr	r3, [pc, #700]	@ (800dbc4 <_dtoa_r+0x89c>)
 800d906:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d90a:	f7f2 fcef 	bl	80002ec <__adddf3>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d916:	f7f3 f92f 	bl	8000b78 <__aeabi_dcmpgt>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d163      	bne.n	800d9e6 <_dtoa_r+0x6be>
 800d91e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d922:	49a8      	ldr	r1, [pc, #672]	@ (800dbc4 <_dtoa_r+0x89c>)
 800d924:	2000      	movs	r0, #0
 800d926:	f7f2 fcdf 	bl	80002e8 <__aeabi_dsub>
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d932:	f7f3 f903 	bl	8000b3c <__aeabi_dcmplt>
 800d936:	2800      	cmp	r0, #0
 800d938:	f43f af14 	beq.w	800d764 <_dtoa_r+0x43c>
 800d93c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d93e:	1e73      	subs	r3, r6, #1
 800d940:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d942:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d946:	2b30      	cmp	r3, #48	@ 0x30
 800d948:	d0f8      	beq.n	800d93c <_dtoa_r+0x614>
 800d94a:	4647      	mov	r7, r8
 800d94c:	e03b      	b.n	800d9c6 <_dtoa_r+0x69e>
 800d94e:	4b9e      	ldr	r3, [pc, #632]	@ (800dbc8 <_dtoa_r+0x8a0>)
 800d950:	f7f2 fe82 	bl	8000658 <__aeabi_dmul>
 800d954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d958:	e7bc      	b.n	800d8d4 <_dtoa_r+0x5ac>
 800d95a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d95e:	4656      	mov	r6, sl
 800d960:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d964:	4620      	mov	r0, r4
 800d966:	4629      	mov	r1, r5
 800d968:	f7f2 ffa0 	bl	80008ac <__aeabi_ddiv>
 800d96c:	f7f3 f924 	bl	8000bb8 <__aeabi_d2iz>
 800d970:	4680      	mov	r8, r0
 800d972:	f7f2 fe07 	bl	8000584 <__aeabi_i2d>
 800d976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d97a:	f7f2 fe6d 	bl	8000658 <__aeabi_dmul>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4620      	mov	r0, r4
 800d984:	4629      	mov	r1, r5
 800d986:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d98a:	f7f2 fcad 	bl	80002e8 <__aeabi_dsub>
 800d98e:	f806 4b01 	strb.w	r4, [r6], #1
 800d992:	9d03      	ldr	r5, [sp, #12]
 800d994:	eba6 040a 	sub.w	r4, r6, sl
 800d998:	42a5      	cmp	r5, r4
 800d99a:	4602      	mov	r2, r0
 800d99c:	460b      	mov	r3, r1
 800d99e:	d133      	bne.n	800da08 <_dtoa_r+0x6e0>
 800d9a0:	f7f2 fca4 	bl	80002ec <__adddf3>
 800d9a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	f7f3 f8e4 	bl	8000b78 <__aeabi_dcmpgt>
 800d9b0:	b9c0      	cbnz	r0, 800d9e4 <_dtoa_r+0x6bc>
 800d9b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f3 f8b5 	bl	8000b28 <__aeabi_dcmpeq>
 800d9be:	b110      	cbz	r0, 800d9c6 <_dtoa_r+0x69e>
 800d9c0:	f018 0f01 	tst.w	r8, #1
 800d9c4:	d10e      	bne.n	800d9e4 <_dtoa_r+0x6bc>
 800d9c6:	9902      	ldr	r1, [sp, #8]
 800d9c8:	4648      	mov	r0, r9
 800d9ca:	f000 fbbd 	bl	800e148 <_Bfree>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	7033      	strb	r3, [r6, #0]
 800d9d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9d4:	3701      	adds	r7, #1
 800d9d6:	601f      	str	r7, [r3, #0]
 800d9d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f000 824b 	beq.w	800de76 <_dtoa_r+0xb4e>
 800d9e0:	601e      	str	r6, [r3, #0]
 800d9e2:	e248      	b.n	800de76 <_dtoa_r+0xb4e>
 800d9e4:	46b8      	mov	r8, r7
 800d9e6:	4633      	mov	r3, r6
 800d9e8:	461e      	mov	r6, r3
 800d9ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9ee:	2a39      	cmp	r2, #57	@ 0x39
 800d9f0:	d106      	bne.n	800da00 <_dtoa_r+0x6d8>
 800d9f2:	459a      	cmp	sl, r3
 800d9f4:	d1f8      	bne.n	800d9e8 <_dtoa_r+0x6c0>
 800d9f6:	2230      	movs	r2, #48	@ 0x30
 800d9f8:	f108 0801 	add.w	r8, r8, #1
 800d9fc:	f88a 2000 	strb.w	r2, [sl]
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	3201      	adds	r2, #1
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	e7a0      	b.n	800d94a <_dtoa_r+0x622>
 800da08:	4b6f      	ldr	r3, [pc, #444]	@ (800dbc8 <_dtoa_r+0x8a0>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	f7f2 fe24 	bl	8000658 <__aeabi_dmul>
 800da10:	2200      	movs	r2, #0
 800da12:	2300      	movs	r3, #0
 800da14:	4604      	mov	r4, r0
 800da16:	460d      	mov	r5, r1
 800da18:	f7f3 f886 	bl	8000b28 <__aeabi_dcmpeq>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d09f      	beq.n	800d960 <_dtoa_r+0x638>
 800da20:	e7d1      	b.n	800d9c6 <_dtoa_r+0x69e>
 800da22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da24:	2a00      	cmp	r2, #0
 800da26:	f000 80ea 	beq.w	800dbfe <_dtoa_r+0x8d6>
 800da2a:	9a07      	ldr	r2, [sp, #28]
 800da2c:	2a01      	cmp	r2, #1
 800da2e:	f300 80cd 	bgt.w	800dbcc <_dtoa_r+0x8a4>
 800da32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800da34:	2a00      	cmp	r2, #0
 800da36:	f000 80c1 	beq.w	800dbbc <_dtoa_r+0x894>
 800da3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da3e:	9c08      	ldr	r4, [sp, #32]
 800da40:	9e00      	ldr	r6, [sp, #0]
 800da42:	9a00      	ldr	r2, [sp, #0]
 800da44:	441a      	add	r2, r3
 800da46:	9200      	str	r2, [sp, #0]
 800da48:	9a06      	ldr	r2, [sp, #24]
 800da4a:	2101      	movs	r1, #1
 800da4c:	441a      	add	r2, r3
 800da4e:	4648      	mov	r0, r9
 800da50:	9206      	str	r2, [sp, #24]
 800da52:	f000 fc77 	bl	800e344 <__i2b>
 800da56:	4605      	mov	r5, r0
 800da58:	b166      	cbz	r6, 800da74 <_dtoa_r+0x74c>
 800da5a:	9b06      	ldr	r3, [sp, #24]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	dd09      	ble.n	800da74 <_dtoa_r+0x74c>
 800da60:	42b3      	cmp	r3, r6
 800da62:	9a00      	ldr	r2, [sp, #0]
 800da64:	bfa8      	it	ge
 800da66:	4633      	movge	r3, r6
 800da68:	1ad2      	subs	r2, r2, r3
 800da6a:	9200      	str	r2, [sp, #0]
 800da6c:	9a06      	ldr	r2, [sp, #24]
 800da6e:	1af6      	subs	r6, r6, r3
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	9306      	str	r3, [sp, #24]
 800da74:	9b08      	ldr	r3, [sp, #32]
 800da76:	b30b      	cbz	r3, 800dabc <_dtoa_r+0x794>
 800da78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f000 80c6 	beq.w	800dc0c <_dtoa_r+0x8e4>
 800da80:	2c00      	cmp	r4, #0
 800da82:	f000 80c0 	beq.w	800dc06 <_dtoa_r+0x8de>
 800da86:	4629      	mov	r1, r5
 800da88:	4622      	mov	r2, r4
 800da8a:	4648      	mov	r0, r9
 800da8c:	f000 fd12 	bl	800e4b4 <__pow5mult>
 800da90:	9a02      	ldr	r2, [sp, #8]
 800da92:	4601      	mov	r1, r0
 800da94:	4605      	mov	r5, r0
 800da96:	4648      	mov	r0, r9
 800da98:	f000 fc6a 	bl	800e370 <__multiply>
 800da9c:	9902      	ldr	r1, [sp, #8]
 800da9e:	4680      	mov	r8, r0
 800daa0:	4648      	mov	r0, r9
 800daa2:	f000 fb51 	bl	800e148 <_Bfree>
 800daa6:	9b08      	ldr	r3, [sp, #32]
 800daa8:	1b1b      	subs	r3, r3, r4
 800daaa:	9308      	str	r3, [sp, #32]
 800daac:	f000 80b1 	beq.w	800dc12 <_dtoa_r+0x8ea>
 800dab0:	9a08      	ldr	r2, [sp, #32]
 800dab2:	4641      	mov	r1, r8
 800dab4:	4648      	mov	r0, r9
 800dab6:	f000 fcfd 	bl	800e4b4 <__pow5mult>
 800daba:	9002      	str	r0, [sp, #8]
 800dabc:	2101      	movs	r1, #1
 800dabe:	4648      	mov	r0, r9
 800dac0:	f000 fc40 	bl	800e344 <__i2b>
 800dac4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dac6:	4604      	mov	r4, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 81d8 	beq.w	800de7e <_dtoa_r+0xb56>
 800dace:	461a      	mov	r2, r3
 800dad0:	4601      	mov	r1, r0
 800dad2:	4648      	mov	r0, r9
 800dad4:	f000 fcee 	bl	800e4b4 <__pow5mult>
 800dad8:	9b07      	ldr	r3, [sp, #28]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	4604      	mov	r4, r0
 800dade:	f300 809f 	bgt.w	800dc20 <_dtoa_r+0x8f8>
 800dae2:	9b04      	ldr	r3, [sp, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f040 8097 	bne.w	800dc18 <_dtoa_r+0x8f0>
 800daea:	9b05      	ldr	r3, [sp, #20]
 800daec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f040 8093 	bne.w	800dc1c <_dtoa_r+0x8f4>
 800daf6:	9b05      	ldr	r3, [sp, #20]
 800daf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dafc:	0d1b      	lsrs	r3, r3, #20
 800dafe:	051b      	lsls	r3, r3, #20
 800db00:	b133      	cbz	r3, 800db10 <_dtoa_r+0x7e8>
 800db02:	9b00      	ldr	r3, [sp, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	9b06      	ldr	r3, [sp, #24]
 800db0a:	3301      	adds	r3, #1
 800db0c:	9306      	str	r3, [sp, #24]
 800db0e:	2301      	movs	r3, #1
 800db10:	9308      	str	r3, [sp, #32]
 800db12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 81b8 	beq.w	800de8a <_dtoa_r+0xb62>
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db20:	6918      	ldr	r0, [r3, #16]
 800db22:	f000 fbc3 	bl	800e2ac <__hi0bits>
 800db26:	f1c0 0020 	rsb	r0, r0, #32
 800db2a:	9b06      	ldr	r3, [sp, #24]
 800db2c:	4418      	add	r0, r3
 800db2e:	f010 001f 	ands.w	r0, r0, #31
 800db32:	f000 8082 	beq.w	800dc3a <_dtoa_r+0x912>
 800db36:	f1c0 0320 	rsb	r3, r0, #32
 800db3a:	2b04      	cmp	r3, #4
 800db3c:	dd73      	ble.n	800dc26 <_dtoa_r+0x8fe>
 800db3e:	9b00      	ldr	r3, [sp, #0]
 800db40:	f1c0 001c 	rsb	r0, r0, #28
 800db44:	4403      	add	r3, r0
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	9b06      	ldr	r3, [sp, #24]
 800db4a:	4403      	add	r3, r0
 800db4c:	4406      	add	r6, r0
 800db4e:	9306      	str	r3, [sp, #24]
 800db50:	9b00      	ldr	r3, [sp, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	dd05      	ble.n	800db62 <_dtoa_r+0x83a>
 800db56:	9902      	ldr	r1, [sp, #8]
 800db58:	461a      	mov	r2, r3
 800db5a:	4648      	mov	r0, r9
 800db5c:	f000 fd04 	bl	800e568 <__lshift>
 800db60:	9002      	str	r0, [sp, #8]
 800db62:	9b06      	ldr	r3, [sp, #24]
 800db64:	2b00      	cmp	r3, #0
 800db66:	dd05      	ble.n	800db74 <_dtoa_r+0x84c>
 800db68:	4621      	mov	r1, r4
 800db6a:	461a      	mov	r2, r3
 800db6c:	4648      	mov	r0, r9
 800db6e:	f000 fcfb 	bl	800e568 <__lshift>
 800db72:	4604      	mov	r4, r0
 800db74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db76:	2b00      	cmp	r3, #0
 800db78:	d061      	beq.n	800dc3e <_dtoa_r+0x916>
 800db7a:	9802      	ldr	r0, [sp, #8]
 800db7c:	4621      	mov	r1, r4
 800db7e:	f000 fd5f 	bl	800e640 <__mcmp>
 800db82:	2800      	cmp	r0, #0
 800db84:	da5b      	bge.n	800dc3e <_dtoa_r+0x916>
 800db86:	2300      	movs	r3, #0
 800db88:	9902      	ldr	r1, [sp, #8]
 800db8a:	220a      	movs	r2, #10
 800db8c:	4648      	mov	r0, r9
 800db8e:	f000 fafd 	bl	800e18c <__multadd>
 800db92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db94:	9002      	str	r0, [sp, #8]
 800db96:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f000 8177 	beq.w	800de8e <_dtoa_r+0xb66>
 800dba0:	4629      	mov	r1, r5
 800dba2:	2300      	movs	r3, #0
 800dba4:	220a      	movs	r2, #10
 800dba6:	4648      	mov	r0, r9
 800dba8:	f000 faf0 	bl	800e18c <__multadd>
 800dbac:	f1bb 0f00 	cmp.w	fp, #0
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	dc6f      	bgt.n	800dc94 <_dtoa_r+0x96c>
 800dbb4:	9b07      	ldr	r3, [sp, #28]
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	dc49      	bgt.n	800dc4e <_dtoa_r+0x926>
 800dbba:	e06b      	b.n	800dc94 <_dtoa_r+0x96c>
 800dbbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dbbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dbc2:	e73c      	b.n	800da3e <_dtoa_r+0x716>
 800dbc4:	3fe00000 	.word	0x3fe00000
 800dbc8:	40240000 	.word	0x40240000
 800dbcc:	9b03      	ldr	r3, [sp, #12]
 800dbce:	1e5c      	subs	r4, r3, #1
 800dbd0:	9b08      	ldr	r3, [sp, #32]
 800dbd2:	42a3      	cmp	r3, r4
 800dbd4:	db09      	blt.n	800dbea <_dtoa_r+0x8c2>
 800dbd6:	1b1c      	subs	r4, r3, r4
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f6bf af30 	bge.w	800da40 <_dtoa_r+0x718>
 800dbe0:	9b00      	ldr	r3, [sp, #0]
 800dbe2:	9a03      	ldr	r2, [sp, #12]
 800dbe4:	1a9e      	subs	r6, r3, r2
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e72b      	b.n	800da42 <_dtoa_r+0x71a>
 800dbea:	9b08      	ldr	r3, [sp, #32]
 800dbec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbee:	9408      	str	r4, [sp, #32]
 800dbf0:	1ae3      	subs	r3, r4, r3
 800dbf2:	441a      	add	r2, r3
 800dbf4:	9e00      	ldr	r6, [sp, #0]
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	920d      	str	r2, [sp, #52]	@ 0x34
 800dbfa:	2400      	movs	r4, #0
 800dbfc:	e721      	b.n	800da42 <_dtoa_r+0x71a>
 800dbfe:	9c08      	ldr	r4, [sp, #32]
 800dc00:	9e00      	ldr	r6, [sp, #0]
 800dc02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dc04:	e728      	b.n	800da58 <_dtoa_r+0x730>
 800dc06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dc0a:	e751      	b.n	800dab0 <_dtoa_r+0x788>
 800dc0c:	9a08      	ldr	r2, [sp, #32]
 800dc0e:	9902      	ldr	r1, [sp, #8]
 800dc10:	e750      	b.n	800dab4 <_dtoa_r+0x78c>
 800dc12:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc16:	e751      	b.n	800dabc <_dtoa_r+0x794>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	e779      	b.n	800db10 <_dtoa_r+0x7e8>
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	e777      	b.n	800db10 <_dtoa_r+0x7e8>
 800dc20:	2300      	movs	r3, #0
 800dc22:	9308      	str	r3, [sp, #32]
 800dc24:	e779      	b.n	800db1a <_dtoa_r+0x7f2>
 800dc26:	d093      	beq.n	800db50 <_dtoa_r+0x828>
 800dc28:	9a00      	ldr	r2, [sp, #0]
 800dc2a:	331c      	adds	r3, #28
 800dc2c:	441a      	add	r2, r3
 800dc2e:	9200      	str	r2, [sp, #0]
 800dc30:	9a06      	ldr	r2, [sp, #24]
 800dc32:	441a      	add	r2, r3
 800dc34:	441e      	add	r6, r3
 800dc36:	9206      	str	r2, [sp, #24]
 800dc38:	e78a      	b.n	800db50 <_dtoa_r+0x828>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	e7f4      	b.n	800dc28 <_dtoa_r+0x900>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	46b8      	mov	r8, r7
 800dc44:	dc20      	bgt.n	800dc88 <_dtoa_r+0x960>
 800dc46:	469b      	mov	fp, r3
 800dc48:	9b07      	ldr	r3, [sp, #28]
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	dd1e      	ble.n	800dc8c <_dtoa_r+0x964>
 800dc4e:	f1bb 0f00 	cmp.w	fp, #0
 800dc52:	f47f adb1 	bne.w	800d7b8 <_dtoa_r+0x490>
 800dc56:	4621      	mov	r1, r4
 800dc58:	465b      	mov	r3, fp
 800dc5a:	2205      	movs	r2, #5
 800dc5c:	4648      	mov	r0, r9
 800dc5e:	f000 fa95 	bl	800e18c <__multadd>
 800dc62:	4601      	mov	r1, r0
 800dc64:	4604      	mov	r4, r0
 800dc66:	9802      	ldr	r0, [sp, #8]
 800dc68:	f000 fcea 	bl	800e640 <__mcmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f77f ada3 	ble.w	800d7b8 <_dtoa_r+0x490>
 800dc72:	4656      	mov	r6, sl
 800dc74:	2331      	movs	r3, #49	@ 0x31
 800dc76:	f806 3b01 	strb.w	r3, [r6], #1
 800dc7a:	f108 0801 	add.w	r8, r8, #1
 800dc7e:	e59f      	b.n	800d7c0 <_dtoa_r+0x498>
 800dc80:	9c03      	ldr	r4, [sp, #12]
 800dc82:	46b8      	mov	r8, r7
 800dc84:	4625      	mov	r5, r4
 800dc86:	e7f4      	b.n	800dc72 <_dtoa_r+0x94a>
 800dc88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 8101 	beq.w	800de96 <_dtoa_r+0xb6e>
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	dd05      	ble.n	800dca4 <_dtoa_r+0x97c>
 800dc98:	4629      	mov	r1, r5
 800dc9a:	4632      	mov	r2, r6
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f000 fc63 	bl	800e568 <__lshift>
 800dca2:	4605      	mov	r5, r0
 800dca4:	9b08      	ldr	r3, [sp, #32]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d05c      	beq.n	800dd64 <_dtoa_r+0xa3c>
 800dcaa:	6869      	ldr	r1, [r5, #4]
 800dcac:	4648      	mov	r0, r9
 800dcae:	f000 fa0b 	bl	800e0c8 <_Balloc>
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	b928      	cbnz	r0, 800dcc2 <_dtoa_r+0x99a>
 800dcb6:	4b82      	ldr	r3, [pc, #520]	@ (800dec0 <_dtoa_r+0xb98>)
 800dcb8:	4602      	mov	r2, r0
 800dcba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dcbe:	f7ff bb4a 	b.w	800d356 <_dtoa_r+0x2e>
 800dcc2:	692a      	ldr	r2, [r5, #16]
 800dcc4:	3202      	adds	r2, #2
 800dcc6:	0092      	lsls	r2, r2, #2
 800dcc8:	f105 010c 	add.w	r1, r5, #12
 800dccc:	300c      	adds	r0, #12
 800dcce:	f7ff fa8c 	bl	800d1ea <memcpy>
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	4648      	mov	r0, r9
 800dcd8:	f000 fc46 	bl	800e568 <__lshift>
 800dcdc:	f10a 0301 	add.w	r3, sl, #1
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	eb0a 030b 	add.w	r3, sl, fp
 800dce6:	9308      	str	r3, [sp, #32]
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	f003 0301 	and.w	r3, r3, #1
 800dcee:	462f      	mov	r7, r5
 800dcf0:	9306      	str	r3, [sp, #24]
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	9802      	ldr	r0, [sp, #8]
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800dcfe:	f7ff fa89 	bl	800d214 <quorem>
 800dd02:	4603      	mov	r3, r0
 800dd04:	3330      	adds	r3, #48	@ 0x30
 800dd06:	9003      	str	r0, [sp, #12]
 800dd08:	4639      	mov	r1, r7
 800dd0a:	9802      	ldr	r0, [sp, #8]
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	f000 fc97 	bl	800e640 <__mcmp>
 800dd12:	462a      	mov	r2, r5
 800dd14:	9004      	str	r0, [sp, #16]
 800dd16:	4621      	mov	r1, r4
 800dd18:	4648      	mov	r0, r9
 800dd1a:	f000 fcad 	bl	800e678 <__mdiff>
 800dd1e:	68c2      	ldr	r2, [r0, #12]
 800dd20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd22:	4606      	mov	r6, r0
 800dd24:	bb02      	cbnz	r2, 800dd68 <_dtoa_r+0xa40>
 800dd26:	4601      	mov	r1, r0
 800dd28:	9802      	ldr	r0, [sp, #8]
 800dd2a:	f000 fc89 	bl	800e640 <__mcmp>
 800dd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd30:	4602      	mov	r2, r0
 800dd32:	4631      	mov	r1, r6
 800dd34:	4648      	mov	r0, r9
 800dd36:	920c      	str	r2, [sp, #48]	@ 0x30
 800dd38:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd3a:	f000 fa05 	bl	800e148 <_Bfree>
 800dd3e:	9b07      	ldr	r3, [sp, #28]
 800dd40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dd42:	9e00      	ldr	r6, [sp, #0]
 800dd44:	ea42 0103 	orr.w	r1, r2, r3
 800dd48:	9b06      	ldr	r3, [sp, #24]
 800dd4a:	4319      	orrs	r1, r3
 800dd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4e:	d10d      	bne.n	800dd6c <_dtoa_r+0xa44>
 800dd50:	2b39      	cmp	r3, #57	@ 0x39
 800dd52:	d027      	beq.n	800dda4 <_dtoa_r+0xa7c>
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	2a00      	cmp	r2, #0
 800dd58:	dd01      	ble.n	800dd5e <_dtoa_r+0xa36>
 800dd5a:	9b03      	ldr	r3, [sp, #12]
 800dd5c:	3331      	adds	r3, #49	@ 0x31
 800dd5e:	f88b 3000 	strb.w	r3, [fp]
 800dd62:	e52e      	b.n	800d7c2 <_dtoa_r+0x49a>
 800dd64:	4628      	mov	r0, r5
 800dd66:	e7b9      	b.n	800dcdc <_dtoa_r+0x9b4>
 800dd68:	2201      	movs	r2, #1
 800dd6a:	e7e2      	b.n	800dd32 <_dtoa_r+0xa0a>
 800dd6c:	9904      	ldr	r1, [sp, #16]
 800dd6e:	2900      	cmp	r1, #0
 800dd70:	db04      	blt.n	800dd7c <_dtoa_r+0xa54>
 800dd72:	9807      	ldr	r0, [sp, #28]
 800dd74:	4301      	orrs	r1, r0
 800dd76:	9806      	ldr	r0, [sp, #24]
 800dd78:	4301      	orrs	r1, r0
 800dd7a:	d120      	bne.n	800ddbe <_dtoa_r+0xa96>
 800dd7c:	2a00      	cmp	r2, #0
 800dd7e:	ddee      	ble.n	800dd5e <_dtoa_r+0xa36>
 800dd80:	9902      	ldr	r1, [sp, #8]
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	2201      	movs	r2, #1
 800dd86:	4648      	mov	r0, r9
 800dd88:	f000 fbee 	bl	800e568 <__lshift>
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	9002      	str	r0, [sp, #8]
 800dd90:	f000 fc56 	bl	800e640 <__mcmp>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	9b00      	ldr	r3, [sp, #0]
 800dd98:	dc02      	bgt.n	800dda0 <_dtoa_r+0xa78>
 800dd9a:	d1e0      	bne.n	800dd5e <_dtoa_r+0xa36>
 800dd9c:	07da      	lsls	r2, r3, #31
 800dd9e:	d5de      	bpl.n	800dd5e <_dtoa_r+0xa36>
 800dda0:	2b39      	cmp	r3, #57	@ 0x39
 800dda2:	d1da      	bne.n	800dd5a <_dtoa_r+0xa32>
 800dda4:	2339      	movs	r3, #57	@ 0x39
 800dda6:	f88b 3000 	strb.w	r3, [fp]
 800ddaa:	4633      	mov	r3, r6
 800ddac:	461e      	mov	r6, r3
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ddb4:	2a39      	cmp	r2, #57	@ 0x39
 800ddb6:	d04e      	beq.n	800de56 <_dtoa_r+0xb2e>
 800ddb8:	3201      	adds	r2, #1
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e501      	b.n	800d7c2 <_dtoa_r+0x49a>
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	dd03      	ble.n	800ddca <_dtoa_r+0xaa2>
 800ddc2:	2b39      	cmp	r3, #57	@ 0x39
 800ddc4:	d0ee      	beq.n	800dda4 <_dtoa_r+0xa7c>
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	e7c9      	b.n	800dd5e <_dtoa_r+0xa36>
 800ddca:	9a00      	ldr	r2, [sp, #0]
 800ddcc:	9908      	ldr	r1, [sp, #32]
 800ddce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ddd2:	428a      	cmp	r2, r1
 800ddd4:	d028      	beq.n	800de28 <_dtoa_r+0xb00>
 800ddd6:	9902      	ldr	r1, [sp, #8]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	220a      	movs	r2, #10
 800dddc:	4648      	mov	r0, r9
 800ddde:	f000 f9d5 	bl	800e18c <__multadd>
 800dde2:	42af      	cmp	r7, r5
 800dde4:	9002      	str	r0, [sp, #8]
 800dde6:	f04f 0300 	mov.w	r3, #0
 800ddea:	f04f 020a 	mov.w	r2, #10
 800ddee:	4639      	mov	r1, r7
 800ddf0:	4648      	mov	r0, r9
 800ddf2:	d107      	bne.n	800de04 <_dtoa_r+0xadc>
 800ddf4:	f000 f9ca 	bl	800e18c <__multadd>
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	3301      	adds	r3, #1
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	e777      	b.n	800dcf4 <_dtoa_r+0x9cc>
 800de04:	f000 f9c2 	bl	800e18c <__multadd>
 800de08:	4629      	mov	r1, r5
 800de0a:	4607      	mov	r7, r0
 800de0c:	2300      	movs	r3, #0
 800de0e:	220a      	movs	r2, #10
 800de10:	4648      	mov	r0, r9
 800de12:	f000 f9bb 	bl	800e18c <__multadd>
 800de16:	4605      	mov	r5, r0
 800de18:	e7f0      	b.n	800ddfc <_dtoa_r+0xad4>
 800de1a:	f1bb 0f00 	cmp.w	fp, #0
 800de1e:	bfcc      	ite	gt
 800de20:	465e      	movgt	r6, fp
 800de22:	2601      	movle	r6, #1
 800de24:	4456      	add	r6, sl
 800de26:	2700      	movs	r7, #0
 800de28:	9902      	ldr	r1, [sp, #8]
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	2201      	movs	r2, #1
 800de2e:	4648      	mov	r0, r9
 800de30:	f000 fb9a 	bl	800e568 <__lshift>
 800de34:	4621      	mov	r1, r4
 800de36:	9002      	str	r0, [sp, #8]
 800de38:	f000 fc02 	bl	800e640 <__mcmp>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	dcb4      	bgt.n	800ddaa <_dtoa_r+0xa82>
 800de40:	d102      	bne.n	800de48 <_dtoa_r+0xb20>
 800de42:	9b00      	ldr	r3, [sp, #0]
 800de44:	07db      	lsls	r3, r3, #31
 800de46:	d4b0      	bmi.n	800ddaa <_dtoa_r+0xa82>
 800de48:	4633      	mov	r3, r6
 800de4a:	461e      	mov	r6, r3
 800de4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de50:	2a30      	cmp	r2, #48	@ 0x30
 800de52:	d0fa      	beq.n	800de4a <_dtoa_r+0xb22>
 800de54:	e4b5      	b.n	800d7c2 <_dtoa_r+0x49a>
 800de56:	459a      	cmp	sl, r3
 800de58:	d1a8      	bne.n	800ddac <_dtoa_r+0xa84>
 800de5a:	2331      	movs	r3, #49	@ 0x31
 800de5c:	f108 0801 	add.w	r8, r8, #1
 800de60:	f88a 3000 	strb.w	r3, [sl]
 800de64:	e4ad      	b.n	800d7c2 <_dtoa_r+0x49a>
 800de66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dec4 <_dtoa_r+0xb9c>
 800de6c:	b11b      	cbz	r3, 800de76 <_dtoa_r+0xb4e>
 800de6e:	f10a 0308 	add.w	r3, sl, #8
 800de72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	4650      	mov	r0, sl
 800de78:	b017      	add	sp, #92	@ 0x5c
 800de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7e:	9b07      	ldr	r3, [sp, #28]
 800de80:	2b01      	cmp	r3, #1
 800de82:	f77f ae2e 	ble.w	800dae2 <_dtoa_r+0x7ba>
 800de86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de88:	9308      	str	r3, [sp, #32]
 800de8a:	2001      	movs	r0, #1
 800de8c:	e64d      	b.n	800db2a <_dtoa_r+0x802>
 800de8e:	f1bb 0f00 	cmp.w	fp, #0
 800de92:	f77f aed9 	ble.w	800dc48 <_dtoa_r+0x920>
 800de96:	4656      	mov	r6, sl
 800de98:	9802      	ldr	r0, [sp, #8]
 800de9a:	4621      	mov	r1, r4
 800de9c:	f7ff f9ba 	bl	800d214 <quorem>
 800dea0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dea4:	f806 3b01 	strb.w	r3, [r6], #1
 800dea8:	eba6 020a 	sub.w	r2, r6, sl
 800deac:	4593      	cmp	fp, r2
 800deae:	ddb4      	ble.n	800de1a <_dtoa_r+0xaf2>
 800deb0:	9902      	ldr	r1, [sp, #8]
 800deb2:	2300      	movs	r3, #0
 800deb4:	220a      	movs	r2, #10
 800deb6:	4648      	mov	r0, r9
 800deb8:	f000 f968 	bl	800e18c <__multadd>
 800debc:	9002      	str	r0, [sp, #8]
 800debe:	e7eb      	b.n	800de98 <_dtoa_r+0xb70>
 800dec0:	080114f1 	.word	0x080114f1
 800dec4:	08011475 	.word	0x08011475

0800dec8 <_free_r>:
 800dec8:	b538      	push	{r3, r4, r5, lr}
 800deca:	4605      	mov	r5, r0
 800decc:	2900      	cmp	r1, #0
 800dece:	d041      	beq.n	800df54 <_free_r+0x8c>
 800ded0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded4:	1f0c      	subs	r4, r1, #4
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfb8      	it	lt
 800deda:	18e4      	addlt	r4, r4, r3
 800dedc:	f000 f8e8 	bl	800e0b0 <__malloc_lock>
 800dee0:	4a1d      	ldr	r2, [pc, #116]	@ (800df58 <_free_r+0x90>)
 800dee2:	6813      	ldr	r3, [r2, #0]
 800dee4:	b933      	cbnz	r3, 800def4 <_free_r+0x2c>
 800dee6:	6063      	str	r3, [r4, #4]
 800dee8:	6014      	str	r4, [r2, #0]
 800deea:	4628      	mov	r0, r5
 800deec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def0:	f000 b8e4 	b.w	800e0bc <__malloc_unlock>
 800def4:	42a3      	cmp	r3, r4
 800def6:	d908      	bls.n	800df0a <_free_r+0x42>
 800def8:	6820      	ldr	r0, [r4, #0]
 800defa:	1821      	adds	r1, r4, r0
 800defc:	428b      	cmp	r3, r1
 800defe:	bf01      	itttt	eq
 800df00:	6819      	ldreq	r1, [r3, #0]
 800df02:	685b      	ldreq	r3, [r3, #4]
 800df04:	1809      	addeq	r1, r1, r0
 800df06:	6021      	streq	r1, [r4, #0]
 800df08:	e7ed      	b.n	800dee6 <_free_r+0x1e>
 800df0a:	461a      	mov	r2, r3
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	b10b      	cbz	r3, 800df14 <_free_r+0x4c>
 800df10:	42a3      	cmp	r3, r4
 800df12:	d9fa      	bls.n	800df0a <_free_r+0x42>
 800df14:	6811      	ldr	r1, [r2, #0]
 800df16:	1850      	adds	r0, r2, r1
 800df18:	42a0      	cmp	r0, r4
 800df1a:	d10b      	bne.n	800df34 <_free_r+0x6c>
 800df1c:	6820      	ldr	r0, [r4, #0]
 800df1e:	4401      	add	r1, r0
 800df20:	1850      	adds	r0, r2, r1
 800df22:	4283      	cmp	r3, r0
 800df24:	6011      	str	r1, [r2, #0]
 800df26:	d1e0      	bne.n	800deea <_free_r+0x22>
 800df28:	6818      	ldr	r0, [r3, #0]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	6053      	str	r3, [r2, #4]
 800df2e:	4408      	add	r0, r1
 800df30:	6010      	str	r0, [r2, #0]
 800df32:	e7da      	b.n	800deea <_free_r+0x22>
 800df34:	d902      	bls.n	800df3c <_free_r+0x74>
 800df36:	230c      	movs	r3, #12
 800df38:	602b      	str	r3, [r5, #0]
 800df3a:	e7d6      	b.n	800deea <_free_r+0x22>
 800df3c:	6820      	ldr	r0, [r4, #0]
 800df3e:	1821      	adds	r1, r4, r0
 800df40:	428b      	cmp	r3, r1
 800df42:	bf04      	itt	eq
 800df44:	6819      	ldreq	r1, [r3, #0]
 800df46:	685b      	ldreq	r3, [r3, #4]
 800df48:	6063      	str	r3, [r4, #4]
 800df4a:	bf04      	itt	eq
 800df4c:	1809      	addeq	r1, r1, r0
 800df4e:	6021      	streq	r1, [r4, #0]
 800df50:	6054      	str	r4, [r2, #4]
 800df52:	e7ca      	b.n	800deea <_free_r+0x22>
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	bf00      	nop
 800df58:	20000ed4 	.word	0x20000ed4

0800df5c <malloc>:
 800df5c:	4b02      	ldr	r3, [pc, #8]	@ (800df68 <malloc+0xc>)
 800df5e:	4601      	mov	r1, r0
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	f000 b825 	b.w	800dfb0 <_malloc_r>
 800df66:	bf00      	nop
 800df68:	200003d8 	.word	0x200003d8

0800df6c <sbrk_aligned>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	4e0f      	ldr	r6, [pc, #60]	@ (800dfac <sbrk_aligned+0x40>)
 800df70:	460c      	mov	r4, r1
 800df72:	6831      	ldr	r1, [r6, #0]
 800df74:	4605      	mov	r5, r0
 800df76:	b911      	cbnz	r1, 800df7e <sbrk_aligned+0x12>
 800df78:	f001 fe04 	bl	800fb84 <_sbrk_r>
 800df7c:	6030      	str	r0, [r6, #0]
 800df7e:	4621      	mov	r1, r4
 800df80:	4628      	mov	r0, r5
 800df82:	f001 fdff 	bl	800fb84 <_sbrk_r>
 800df86:	1c43      	adds	r3, r0, #1
 800df88:	d103      	bne.n	800df92 <sbrk_aligned+0x26>
 800df8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800df8e:	4620      	mov	r0, r4
 800df90:	bd70      	pop	{r4, r5, r6, pc}
 800df92:	1cc4      	adds	r4, r0, #3
 800df94:	f024 0403 	bic.w	r4, r4, #3
 800df98:	42a0      	cmp	r0, r4
 800df9a:	d0f8      	beq.n	800df8e <sbrk_aligned+0x22>
 800df9c:	1a21      	subs	r1, r4, r0
 800df9e:	4628      	mov	r0, r5
 800dfa0:	f001 fdf0 	bl	800fb84 <_sbrk_r>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	d1f2      	bne.n	800df8e <sbrk_aligned+0x22>
 800dfa8:	e7ef      	b.n	800df8a <sbrk_aligned+0x1e>
 800dfaa:	bf00      	nop
 800dfac:	20000ed0 	.word	0x20000ed0

0800dfb0 <_malloc_r>:
 800dfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb4:	1ccd      	adds	r5, r1, #3
 800dfb6:	f025 0503 	bic.w	r5, r5, #3
 800dfba:	3508      	adds	r5, #8
 800dfbc:	2d0c      	cmp	r5, #12
 800dfbe:	bf38      	it	cc
 800dfc0:	250c      	movcc	r5, #12
 800dfc2:	2d00      	cmp	r5, #0
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	db01      	blt.n	800dfcc <_malloc_r+0x1c>
 800dfc8:	42a9      	cmp	r1, r5
 800dfca:	d904      	bls.n	800dfd6 <_malloc_r+0x26>
 800dfcc:	230c      	movs	r3, #12
 800dfce:	6033      	str	r3, [r6, #0]
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0ac <_malloc_r+0xfc>
 800dfda:	f000 f869 	bl	800e0b0 <__malloc_lock>
 800dfde:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe2:	461c      	mov	r4, r3
 800dfe4:	bb44      	cbnz	r4, 800e038 <_malloc_r+0x88>
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f7ff ffbf 	bl	800df6c <sbrk_aligned>
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	4604      	mov	r4, r0
 800dff2:	d158      	bne.n	800e0a6 <_malloc_r+0xf6>
 800dff4:	f8d8 4000 	ldr.w	r4, [r8]
 800dff8:	4627      	mov	r7, r4
 800dffa:	2f00      	cmp	r7, #0
 800dffc:	d143      	bne.n	800e086 <_malloc_r+0xd6>
 800dffe:	2c00      	cmp	r4, #0
 800e000:	d04b      	beq.n	800e09a <_malloc_r+0xea>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	4639      	mov	r1, r7
 800e006:	4630      	mov	r0, r6
 800e008:	eb04 0903 	add.w	r9, r4, r3
 800e00c:	f001 fdba 	bl	800fb84 <_sbrk_r>
 800e010:	4581      	cmp	r9, r0
 800e012:	d142      	bne.n	800e09a <_malloc_r+0xea>
 800e014:	6821      	ldr	r1, [r4, #0]
 800e016:	1a6d      	subs	r5, r5, r1
 800e018:	4629      	mov	r1, r5
 800e01a:	4630      	mov	r0, r6
 800e01c:	f7ff ffa6 	bl	800df6c <sbrk_aligned>
 800e020:	3001      	adds	r0, #1
 800e022:	d03a      	beq.n	800e09a <_malloc_r+0xea>
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	442b      	add	r3, r5
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	f8d8 3000 	ldr.w	r3, [r8]
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	bb62      	cbnz	r2, 800e08c <_malloc_r+0xdc>
 800e032:	f8c8 7000 	str.w	r7, [r8]
 800e036:	e00f      	b.n	800e058 <_malloc_r+0xa8>
 800e038:	6822      	ldr	r2, [r4, #0]
 800e03a:	1b52      	subs	r2, r2, r5
 800e03c:	d420      	bmi.n	800e080 <_malloc_r+0xd0>
 800e03e:	2a0b      	cmp	r2, #11
 800e040:	d917      	bls.n	800e072 <_malloc_r+0xc2>
 800e042:	1961      	adds	r1, r4, r5
 800e044:	42a3      	cmp	r3, r4
 800e046:	6025      	str	r5, [r4, #0]
 800e048:	bf18      	it	ne
 800e04a:	6059      	strne	r1, [r3, #4]
 800e04c:	6863      	ldr	r3, [r4, #4]
 800e04e:	bf08      	it	eq
 800e050:	f8c8 1000 	streq.w	r1, [r8]
 800e054:	5162      	str	r2, [r4, r5]
 800e056:	604b      	str	r3, [r1, #4]
 800e058:	4630      	mov	r0, r6
 800e05a:	f000 f82f 	bl	800e0bc <__malloc_unlock>
 800e05e:	f104 000b 	add.w	r0, r4, #11
 800e062:	1d23      	adds	r3, r4, #4
 800e064:	f020 0007 	bic.w	r0, r0, #7
 800e068:	1ac2      	subs	r2, r0, r3
 800e06a:	bf1c      	itt	ne
 800e06c:	1a1b      	subne	r3, r3, r0
 800e06e:	50a3      	strne	r3, [r4, r2]
 800e070:	e7af      	b.n	800dfd2 <_malloc_r+0x22>
 800e072:	6862      	ldr	r2, [r4, #4]
 800e074:	42a3      	cmp	r3, r4
 800e076:	bf0c      	ite	eq
 800e078:	f8c8 2000 	streq.w	r2, [r8]
 800e07c:	605a      	strne	r2, [r3, #4]
 800e07e:	e7eb      	b.n	800e058 <_malloc_r+0xa8>
 800e080:	4623      	mov	r3, r4
 800e082:	6864      	ldr	r4, [r4, #4]
 800e084:	e7ae      	b.n	800dfe4 <_malloc_r+0x34>
 800e086:	463c      	mov	r4, r7
 800e088:	687f      	ldr	r7, [r7, #4]
 800e08a:	e7b6      	b.n	800dffa <_malloc_r+0x4a>
 800e08c:	461a      	mov	r2, r3
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	42a3      	cmp	r3, r4
 800e092:	d1fb      	bne.n	800e08c <_malloc_r+0xdc>
 800e094:	2300      	movs	r3, #0
 800e096:	6053      	str	r3, [r2, #4]
 800e098:	e7de      	b.n	800e058 <_malloc_r+0xa8>
 800e09a:	230c      	movs	r3, #12
 800e09c:	6033      	str	r3, [r6, #0]
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f000 f80c 	bl	800e0bc <__malloc_unlock>
 800e0a4:	e794      	b.n	800dfd0 <_malloc_r+0x20>
 800e0a6:	6005      	str	r5, [r0, #0]
 800e0a8:	e7d6      	b.n	800e058 <_malloc_r+0xa8>
 800e0aa:	bf00      	nop
 800e0ac:	20000ed4 	.word	0x20000ed4

0800e0b0 <__malloc_lock>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	@ (800e0b8 <__malloc_lock+0x8>)
 800e0b2:	f7ff b898 	b.w	800d1e6 <__retarget_lock_acquire_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	20000ecc 	.word	0x20000ecc

0800e0bc <__malloc_unlock>:
 800e0bc:	4801      	ldr	r0, [pc, #4]	@ (800e0c4 <__malloc_unlock+0x8>)
 800e0be:	f7ff b893 	b.w	800d1e8 <__retarget_lock_release_recursive>
 800e0c2:	bf00      	nop
 800e0c4:	20000ecc 	.word	0x20000ecc

0800e0c8 <_Balloc>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	69c6      	ldr	r6, [r0, #28]
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	460d      	mov	r5, r1
 800e0d0:	b976      	cbnz	r6, 800e0f0 <_Balloc+0x28>
 800e0d2:	2010      	movs	r0, #16
 800e0d4:	f7ff ff42 	bl	800df5c <malloc>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	61e0      	str	r0, [r4, #28]
 800e0dc:	b920      	cbnz	r0, 800e0e8 <_Balloc+0x20>
 800e0de:	4b18      	ldr	r3, [pc, #96]	@ (800e140 <_Balloc+0x78>)
 800e0e0:	4818      	ldr	r0, [pc, #96]	@ (800e144 <_Balloc+0x7c>)
 800e0e2:	216b      	movs	r1, #107	@ 0x6b
 800e0e4:	f001 fd68 	bl	800fbb8 <__assert_func>
 800e0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0ec:	6006      	str	r6, [r0, #0]
 800e0ee:	60c6      	str	r6, [r0, #12]
 800e0f0:	69e6      	ldr	r6, [r4, #28]
 800e0f2:	68f3      	ldr	r3, [r6, #12]
 800e0f4:	b183      	cbz	r3, 800e118 <_Balloc+0x50>
 800e0f6:	69e3      	ldr	r3, [r4, #28]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0fe:	b9b8      	cbnz	r0, 800e130 <_Balloc+0x68>
 800e100:	2101      	movs	r1, #1
 800e102:	fa01 f605 	lsl.w	r6, r1, r5
 800e106:	1d72      	adds	r2, r6, #5
 800e108:	0092      	lsls	r2, r2, #2
 800e10a:	4620      	mov	r0, r4
 800e10c:	f001 fd72 	bl	800fbf4 <_calloc_r>
 800e110:	b160      	cbz	r0, 800e12c <_Balloc+0x64>
 800e112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e116:	e00e      	b.n	800e136 <_Balloc+0x6e>
 800e118:	2221      	movs	r2, #33	@ 0x21
 800e11a:	2104      	movs	r1, #4
 800e11c:	4620      	mov	r0, r4
 800e11e:	f001 fd69 	bl	800fbf4 <_calloc_r>
 800e122:	69e3      	ldr	r3, [r4, #28]
 800e124:	60f0      	str	r0, [r6, #12]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e4      	bne.n	800e0f6 <_Balloc+0x2e>
 800e12c:	2000      	movs	r0, #0
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	6802      	ldr	r2, [r0, #0]
 800e132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e136:	2300      	movs	r3, #0
 800e138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e13c:	e7f7      	b.n	800e12e <_Balloc+0x66>
 800e13e:	bf00      	nop
 800e140:	08011482 	.word	0x08011482
 800e144:	08011502 	.word	0x08011502

0800e148 <_Bfree>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	69c6      	ldr	r6, [r0, #28]
 800e14c:	4605      	mov	r5, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	b976      	cbnz	r6, 800e170 <_Bfree+0x28>
 800e152:	2010      	movs	r0, #16
 800e154:	f7ff ff02 	bl	800df5c <malloc>
 800e158:	4602      	mov	r2, r0
 800e15a:	61e8      	str	r0, [r5, #28]
 800e15c:	b920      	cbnz	r0, 800e168 <_Bfree+0x20>
 800e15e:	4b09      	ldr	r3, [pc, #36]	@ (800e184 <_Bfree+0x3c>)
 800e160:	4809      	ldr	r0, [pc, #36]	@ (800e188 <_Bfree+0x40>)
 800e162:	218f      	movs	r1, #143	@ 0x8f
 800e164:	f001 fd28 	bl	800fbb8 <__assert_func>
 800e168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e16c:	6006      	str	r6, [r0, #0]
 800e16e:	60c6      	str	r6, [r0, #12]
 800e170:	b13c      	cbz	r4, 800e182 <_Bfree+0x3a>
 800e172:	69eb      	ldr	r3, [r5, #28]
 800e174:	6862      	ldr	r2, [r4, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e17c:	6021      	str	r1, [r4, #0]
 800e17e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e182:	bd70      	pop	{r4, r5, r6, pc}
 800e184:	08011482 	.word	0x08011482
 800e188:	08011502 	.word	0x08011502

0800e18c <__multadd>:
 800e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	690d      	ldr	r5, [r1, #16]
 800e192:	4607      	mov	r7, r0
 800e194:	460c      	mov	r4, r1
 800e196:	461e      	mov	r6, r3
 800e198:	f101 0c14 	add.w	ip, r1, #20
 800e19c:	2000      	movs	r0, #0
 800e19e:	f8dc 3000 	ldr.w	r3, [ip]
 800e1a2:	b299      	uxth	r1, r3
 800e1a4:	fb02 6101 	mla	r1, r2, r1, r6
 800e1a8:	0c1e      	lsrs	r6, r3, #16
 800e1aa:	0c0b      	lsrs	r3, r1, #16
 800e1ac:	fb02 3306 	mla	r3, r2, r6, r3
 800e1b0:	b289      	uxth	r1, r1
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1b8:	4285      	cmp	r5, r0
 800e1ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e1be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1c2:	dcec      	bgt.n	800e19e <__multadd+0x12>
 800e1c4:	b30e      	cbz	r6, 800e20a <__multadd+0x7e>
 800e1c6:	68a3      	ldr	r3, [r4, #8]
 800e1c8:	42ab      	cmp	r3, r5
 800e1ca:	dc19      	bgt.n	800e200 <__multadd+0x74>
 800e1cc:	6861      	ldr	r1, [r4, #4]
 800e1ce:	4638      	mov	r0, r7
 800e1d0:	3101      	adds	r1, #1
 800e1d2:	f7ff ff79 	bl	800e0c8 <_Balloc>
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	b928      	cbnz	r0, 800e1e6 <__multadd+0x5a>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e210 <__multadd+0x84>)
 800e1de:	480d      	ldr	r0, [pc, #52]	@ (800e214 <__multadd+0x88>)
 800e1e0:	21ba      	movs	r1, #186	@ 0xba
 800e1e2:	f001 fce9 	bl	800fbb8 <__assert_func>
 800e1e6:	6922      	ldr	r2, [r4, #16]
 800e1e8:	3202      	adds	r2, #2
 800e1ea:	f104 010c 	add.w	r1, r4, #12
 800e1ee:	0092      	lsls	r2, r2, #2
 800e1f0:	300c      	adds	r0, #12
 800e1f2:	f7fe fffa 	bl	800d1ea <memcpy>
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7ff ffa5 	bl	800e148 <_Bfree>
 800e1fe:	4644      	mov	r4, r8
 800e200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e204:	3501      	adds	r5, #1
 800e206:	615e      	str	r6, [r3, #20]
 800e208:	6125      	str	r5, [r4, #16]
 800e20a:	4620      	mov	r0, r4
 800e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e210:	080114f1 	.word	0x080114f1
 800e214:	08011502 	.word	0x08011502

0800e218 <__s2b>:
 800e218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e21c:	460c      	mov	r4, r1
 800e21e:	4615      	mov	r5, r2
 800e220:	461f      	mov	r7, r3
 800e222:	2209      	movs	r2, #9
 800e224:	3308      	adds	r3, #8
 800e226:	4606      	mov	r6, r0
 800e228:	fb93 f3f2 	sdiv	r3, r3, r2
 800e22c:	2100      	movs	r1, #0
 800e22e:	2201      	movs	r2, #1
 800e230:	429a      	cmp	r2, r3
 800e232:	db09      	blt.n	800e248 <__s2b+0x30>
 800e234:	4630      	mov	r0, r6
 800e236:	f7ff ff47 	bl	800e0c8 <_Balloc>
 800e23a:	b940      	cbnz	r0, 800e24e <__s2b+0x36>
 800e23c:	4602      	mov	r2, r0
 800e23e:	4b19      	ldr	r3, [pc, #100]	@ (800e2a4 <__s2b+0x8c>)
 800e240:	4819      	ldr	r0, [pc, #100]	@ (800e2a8 <__s2b+0x90>)
 800e242:	21d3      	movs	r1, #211	@ 0xd3
 800e244:	f001 fcb8 	bl	800fbb8 <__assert_func>
 800e248:	0052      	lsls	r2, r2, #1
 800e24a:	3101      	adds	r1, #1
 800e24c:	e7f0      	b.n	800e230 <__s2b+0x18>
 800e24e:	9b08      	ldr	r3, [sp, #32]
 800e250:	6143      	str	r3, [r0, #20]
 800e252:	2d09      	cmp	r5, #9
 800e254:	f04f 0301 	mov.w	r3, #1
 800e258:	6103      	str	r3, [r0, #16]
 800e25a:	dd16      	ble.n	800e28a <__s2b+0x72>
 800e25c:	f104 0909 	add.w	r9, r4, #9
 800e260:	46c8      	mov	r8, r9
 800e262:	442c      	add	r4, r5
 800e264:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e268:	4601      	mov	r1, r0
 800e26a:	3b30      	subs	r3, #48	@ 0x30
 800e26c:	220a      	movs	r2, #10
 800e26e:	4630      	mov	r0, r6
 800e270:	f7ff ff8c 	bl	800e18c <__multadd>
 800e274:	45a0      	cmp	r8, r4
 800e276:	d1f5      	bne.n	800e264 <__s2b+0x4c>
 800e278:	f1a5 0408 	sub.w	r4, r5, #8
 800e27c:	444c      	add	r4, r9
 800e27e:	1b2d      	subs	r5, r5, r4
 800e280:	1963      	adds	r3, r4, r5
 800e282:	42bb      	cmp	r3, r7
 800e284:	db04      	blt.n	800e290 <__s2b+0x78>
 800e286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e28a:	340a      	adds	r4, #10
 800e28c:	2509      	movs	r5, #9
 800e28e:	e7f6      	b.n	800e27e <__s2b+0x66>
 800e290:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e294:	4601      	mov	r1, r0
 800e296:	3b30      	subs	r3, #48	@ 0x30
 800e298:	220a      	movs	r2, #10
 800e29a:	4630      	mov	r0, r6
 800e29c:	f7ff ff76 	bl	800e18c <__multadd>
 800e2a0:	e7ee      	b.n	800e280 <__s2b+0x68>
 800e2a2:	bf00      	nop
 800e2a4:	080114f1 	.word	0x080114f1
 800e2a8:	08011502 	.word	0x08011502

0800e2ac <__hi0bits>:
 800e2ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	bf36      	itet	cc
 800e2b4:	0403      	lslcc	r3, r0, #16
 800e2b6:	2000      	movcs	r0, #0
 800e2b8:	2010      	movcc	r0, #16
 800e2ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2be:	bf3c      	itt	cc
 800e2c0:	021b      	lslcc	r3, r3, #8
 800e2c2:	3008      	addcc	r0, #8
 800e2c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2c8:	bf3c      	itt	cc
 800e2ca:	011b      	lslcc	r3, r3, #4
 800e2cc:	3004      	addcc	r0, #4
 800e2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2d2:	bf3c      	itt	cc
 800e2d4:	009b      	lslcc	r3, r3, #2
 800e2d6:	3002      	addcc	r0, #2
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	db05      	blt.n	800e2e8 <__hi0bits+0x3c>
 800e2dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e2e0:	f100 0001 	add.w	r0, r0, #1
 800e2e4:	bf08      	it	eq
 800e2e6:	2020      	moveq	r0, #32
 800e2e8:	4770      	bx	lr

0800e2ea <__lo0bits>:
 800e2ea:	6803      	ldr	r3, [r0, #0]
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	f013 0007 	ands.w	r0, r3, #7
 800e2f2:	d00b      	beq.n	800e30c <__lo0bits+0x22>
 800e2f4:	07d9      	lsls	r1, r3, #31
 800e2f6:	d421      	bmi.n	800e33c <__lo0bits+0x52>
 800e2f8:	0798      	lsls	r0, r3, #30
 800e2fa:	bf49      	itett	mi
 800e2fc:	085b      	lsrmi	r3, r3, #1
 800e2fe:	089b      	lsrpl	r3, r3, #2
 800e300:	2001      	movmi	r0, #1
 800e302:	6013      	strmi	r3, [r2, #0]
 800e304:	bf5c      	itt	pl
 800e306:	6013      	strpl	r3, [r2, #0]
 800e308:	2002      	movpl	r0, #2
 800e30a:	4770      	bx	lr
 800e30c:	b299      	uxth	r1, r3
 800e30e:	b909      	cbnz	r1, 800e314 <__lo0bits+0x2a>
 800e310:	0c1b      	lsrs	r3, r3, #16
 800e312:	2010      	movs	r0, #16
 800e314:	b2d9      	uxtb	r1, r3
 800e316:	b909      	cbnz	r1, 800e31c <__lo0bits+0x32>
 800e318:	3008      	adds	r0, #8
 800e31a:	0a1b      	lsrs	r3, r3, #8
 800e31c:	0719      	lsls	r1, r3, #28
 800e31e:	bf04      	itt	eq
 800e320:	091b      	lsreq	r3, r3, #4
 800e322:	3004      	addeq	r0, #4
 800e324:	0799      	lsls	r1, r3, #30
 800e326:	bf04      	itt	eq
 800e328:	089b      	lsreq	r3, r3, #2
 800e32a:	3002      	addeq	r0, #2
 800e32c:	07d9      	lsls	r1, r3, #31
 800e32e:	d403      	bmi.n	800e338 <__lo0bits+0x4e>
 800e330:	085b      	lsrs	r3, r3, #1
 800e332:	f100 0001 	add.w	r0, r0, #1
 800e336:	d003      	beq.n	800e340 <__lo0bits+0x56>
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	4770      	bx	lr
 800e33c:	2000      	movs	r0, #0
 800e33e:	4770      	bx	lr
 800e340:	2020      	movs	r0, #32
 800e342:	4770      	bx	lr

0800e344 <__i2b>:
 800e344:	b510      	push	{r4, lr}
 800e346:	460c      	mov	r4, r1
 800e348:	2101      	movs	r1, #1
 800e34a:	f7ff febd 	bl	800e0c8 <_Balloc>
 800e34e:	4602      	mov	r2, r0
 800e350:	b928      	cbnz	r0, 800e35e <__i2b+0x1a>
 800e352:	4b05      	ldr	r3, [pc, #20]	@ (800e368 <__i2b+0x24>)
 800e354:	4805      	ldr	r0, [pc, #20]	@ (800e36c <__i2b+0x28>)
 800e356:	f240 1145 	movw	r1, #325	@ 0x145
 800e35a:	f001 fc2d 	bl	800fbb8 <__assert_func>
 800e35e:	2301      	movs	r3, #1
 800e360:	6144      	str	r4, [r0, #20]
 800e362:	6103      	str	r3, [r0, #16]
 800e364:	bd10      	pop	{r4, pc}
 800e366:	bf00      	nop
 800e368:	080114f1 	.word	0x080114f1
 800e36c:	08011502 	.word	0x08011502

0800e370 <__multiply>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	4617      	mov	r7, r2
 800e376:	690a      	ldr	r2, [r1, #16]
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	bfa8      	it	ge
 800e37e:	463b      	movge	r3, r7
 800e380:	4689      	mov	r9, r1
 800e382:	bfa4      	itt	ge
 800e384:	460f      	movge	r7, r1
 800e386:	4699      	movge	r9, r3
 800e388:	693d      	ldr	r5, [r7, #16]
 800e38a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	6879      	ldr	r1, [r7, #4]
 800e392:	eb05 060a 	add.w	r6, r5, sl
 800e396:	42b3      	cmp	r3, r6
 800e398:	b085      	sub	sp, #20
 800e39a:	bfb8      	it	lt
 800e39c:	3101      	addlt	r1, #1
 800e39e:	f7ff fe93 	bl	800e0c8 <_Balloc>
 800e3a2:	b930      	cbnz	r0, 800e3b2 <__multiply+0x42>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	4b41      	ldr	r3, [pc, #260]	@ (800e4ac <__multiply+0x13c>)
 800e3a8:	4841      	ldr	r0, [pc, #260]	@ (800e4b0 <__multiply+0x140>)
 800e3aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e3ae:	f001 fc03 	bl	800fbb8 <__assert_func>
 800e3b2:	f100 0414 	add.w	r4, r0, #20
 800e3b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e3ba:	4623      	mov	r3, r4
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4573      	cmp	r3, lr
 800e3c0:	d320      	bcc.n	800e404 <__multiply+0x94>
 800e3c2:	f107 0814 	add.w	r8, r7, #20
 800e3c6:	f109 0114 	add.w	r1, r9, #20
 800e3ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e3ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e3d2:	9302      	str	r3, [sp, #8]
 800e3d4:	1beb      	subs	r3, r5, r7
 800e3d6:	3b15      	subs	r3, #21
 800e3d8:	f023 0303 	bic.w	r3, r3, #3
 800e3dc:	3304      	adds	r3, #4
 800e3de:	3715      	adds	r7, #21
 800e3e0:	42bd      	cmp	r5, r7
 800e3e2:	bf38      	it	cc
 800e3e4:	2304      	movcc	r3, #4
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	9103      	str	r1, [sp, #12]
 800e3ec:	428b      	cmp	r3, r1
 800e3ee:	d80c      	bhi.n	800e40a <__multiply+0x9a>
 800e3f0:	2e00      	cmp	r6, #0
 800e3f2:	dd03      	ble.n	800e3fc <__multiply+0x8c>
 800e3f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d055      	beq.n	800e4a8 <__multiply+0x138>
 800e3fc:	6106      	str	r6, [r0, #16]
 800e3fe:	b005      	add	sp, #20
 800e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e404:	f843 2b04 	str.w	r2, [r3], #4
 800e408:	e7d9      	b.n	800e3be <__multiply+0x4e>
 800e40a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e40e:	f1ba 0f00 	cmp.w	sl, #0
 800e412:	d01f      	beq.n	800e454 <__multiply+0xe4>
 800e414:	46c4      	mov	ip, r8
 800e416:	46a1      	mov	r9, r4
 800e418:	2700      	movs	r7, #0
 800e41a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e41e:	f8d9 3000 	ldr.w	r3, [r9]
 800e422:	fa1f fb82 	uxth.w	fp, r2
 800e426:	b29b      	uxth	r3, r3
 800e428:	fb0a 330b 	mla	r3, sl, fp, r3
 800e42c:	443b      	add	r3, r7
 800e42e:	f8d9 7000 	ldr.w	r7, [r9]
 800e432:	0c12      	lsrs	r2, r2, #16
 800e434:	0c3f      	lsrs	r7, r7, #16
 800e436:	fb0a 7202 	mla	r2, sl, r2, r7
 800e43a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e43e:	b29b      	uxth	r3, r3
 800e440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e444:	4565      	cmp	r5, ip
 800e446:	f849 3b04 	str.w	r3, [r9], #4
 800e44a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e44e:	d8e4      	bhi.n	800e41a <__multiply+0xaa>
 800e450:	9b01      	ldr	r3, [sp, #4]
 800e452:	50e7      	str	r7, [r4, r3]
 800e454:	9b03      	ldr	r3, [sp, #12]
 800e456:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e45a:	3104      	adds	r1, #4
 800e45c:	f1b9 0f00 	cmp.w	r9, #0
 800e460:	d020      	beq.n	800e4a4 <__multiply+0x134>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	4647      	mov	r7, r8
 800e466:	46a4      	mov	ip, r4
 800e468:	f04f 0a00 	mov.w	sl, #0
 800e46c:	f8b7 b000 	ldrh.w	fp, [r7]
 800e470:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e474:	fb09 220b 	mla	r2, r9, fp, r2
 800e478:	4452      	add	r2, sl
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e480:	f84c 3b04 	str.w	r3, [ip], #4
 800e484:	f857 3b04 	ldr.w	r3, [r7], #4
 800e488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e48c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e490:	fb09 330a 	mla	r3, r9, sl, r3
 800e494:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e498:	42bd      	cmp	r5, r7
 800e49a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e49e:	d8e5      	bhi.n	800e46c <__multiply+0xfc>
 800e4a0:	9a01      	ldr	r2, [sp, #4]
 800e4a2:	50a3      	str	r3, [r4, r2]
 800e4a4:	3404      	adds	r4, #4
 800e4a6:	e79f      	b.n	800e3e8 <__multiply+0x78>
 800e4a8:	3e01      	subs	r6, #1
 800e4aa:	e7a1      	b.n	800e3f0 <__multiply+0x80>
 800e4ac:	080114f1 	.word	0x080114f1
 800e4b0:	08011502 	.word	0x08011502

0800e4b4 <__pow5mult>:
 800e4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b8:	4615      	mov	r5, r2
 800e4ba:	f012 0203 	ands.w	r2, r2, #3
 800e4be:	4607      	mov	r7, r0
 800e4c0:	460e      	mov	r6, r1
 800e4c2:	d007      	beq.n	800e4d4 <__pow5mult+0x20>
 800e4c4:	4c25      	ldr	r4, [pc, #148]	@ (800e55c <__pow5mult+0xa8>)
 800e4c6:	3a01      	subs	r2, #1
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4ce:	f7ff fe5d 	bl	800e18c <__multadd>
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	10ad      	asrs	r5, r5, #2
 800e4d6:	d03d      	beq.n	800e554 <__pow5mult+0xa0>
 800e4d8:	69fc      	ldr	r4, [r7, #28]
 800e4da:	b97c      	cbnz	r4, 800e4fc <__pow5mult+0x48>
 800e4dc:	2010      	movs	r0, #16
 800e4de:	f7ff fd3d 	bl	800df5c <malloc>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	61f8      	str	r0, [r7, #28]
 800e4e6:	b928      	cbnz	r0, 800e4f4 <__pow5mult+0x40>
 800e4e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e560 <__pow5mult+0xac>)
 800e4ea:	481e      	ldr	r0, [pc, #120]	@ (800e564 <__pow5mult+0xb0>)
 800e4ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e4f0:	f001 fb62 	bl	800fbb8 <__assert_func>
 800e4f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4f8:	6004      	str	r4, [r0, #0]
 800e4fa:	60c4      	str	r4, [r0, #12]
 800e4fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e504:	b94c      	cbnz	r4, 800e51a <__pow5mult+0x66>
 800e506:	f240 2171 	movw	r1, #625	@ 0x271
 800e50a:	4638      	mov	r0, r7
 800e50c:	f7ff ff1a 	bl	800e344 <__i2b>
 800e510:	2300      	movs	r3, #0
 800e512:	f8c8 0008 	str.w	r0, [r8, #8]
 800e516:	4604      	mov	r4, r0
 800e518:	6003      	str	r3, [r0, #0]
 800e51a:	f04f 0900 	mov.w	r9, #0
 800e51e:	07eb      	lsls	r3, r5, #31
 800e520:	d50a      	bpl.n	800e538 <__pow5mult+0x84>
 800e522:	4631      	mov	r1, r6
 800e524:	4622      	mov	r2, r4
 800e526:	4638      	mov	r0, r7
 800e528:	f7ff ff22 	bl	800e370 <__multiply>
 800e52c:	4631      	mov	r1, r6
 800e52e:	4680      	mov	r8, r0
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff fe09 	bl	800e148 <_Bfree>
 800e536:	4646      	mov	r6, r8
 800e538:	106d      	asrs	r5, r5, #1
 800e53a:	d00b      	beq.n	800e554 <__pow5mult+0xa0>
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	b938      	cbnz	r0, 800e550 <__pow5mult+0x9c>
 800e540:	4622      	mov	r2, r4
 800e542:	4621      	mov	r1, r4
 800e544:	4638      	mov	r0, r7
 800e546:	f7ff ff13 	bl	800e370 <__multiply>
 800e54a:	6020      	str	r0, [r4, #0]
 800e54c:	f8c0 9000 	str.w	r9, [r0]
 800e550:	4604      	mov	r4, r0
 800e552:	e7e4      	b.n	800e51e <__pow5mult+0x6a>
 800e554:	4630      	mov	r0, r6
 800e556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e55a:	bf00      	nop
 800e55c:	08011614 	.word	0x08011614
 800e560:	08011482 	.word	0x08011482
 800e564:	08011502 	.word	0x08011502

0800e568 <__lshift>:
 800e568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	460c      	mov	r4, r1
 800e56e:	6849      	ldr	r1, [r1, #4]
 800e570:	6923      	ldr	r3, [r4, #16]
 800e572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e576:	68a3      	ldr	r3, [r4, #8]
 800e578:	4607      	mov	r7, r0
 800e57a:	4691      	mov	r9, r2
 800e57c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e580:	f108 0601 	add.w	r6, r8, #1
 800e584:	42b3      	cmp	r3, r6
 800e586:	db0b      	blt.n	800e5a0 <__lshift+0x38>
 800e588:	4638      	mov	r0, r7
 800e58a:	f7ff fd9d 	bl	800e0c8 <_Balloc>
 800e58e:	4605      	mov	r5, r0
 800e590:	b948      	cbnz	r0, 800e5a6 <__lshift+0x3e>
 800e592:	4602      	mov	r2, r0
 800e594:	4b28      	ldr	r3, [pc, #160]	@ (800e638 <__lshift+0xd0>)
 800e596:	4829      	ldr	r0, [pc, #164]	@ (800e63c <__lshift+0xd4>)
 800e598:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e59c:	f001 fb0c 	bl	800fbb8 <__assert_func>
 800e5a0:	3101      	adds	r1, #1
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	e7ee      	b.n	800e584 <__lshift+0x1c>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f100 0114 	add.w	r1, r0, #20
 800e5ac:	f100 0210 	add.w	r2, r0, #16
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	4553      	cmp	r3, sl
 800e5b4:	db33      	blt.n	800e61e <__lshift+0xb6>
 800e5b6:	6920      	ldr	r0, [r4, #16]
 800e5b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5bc:	f104 0314 	add.w	r3, r4, #20
 800e5c0:	f019 091f 	ands.w	r9, r9, #31
 800e5c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e5cc:	d02b      	beq.n	800e626 <__lshift+0xbe>
 800e5ce:	f1c9 0e20 	rsb	lr, r9, #32
 800e5d2:	468a      	mov	sl, r1
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	6818      	ldr	r0, [r3, #0]
 800e5d8:	fa00 f009 	lsl.w	r0, r0, r9
 800e5dc:	4310      	orrs	r0, r2
 800e5de:	f84a 0b04 	str.w	r0, [sl], #4
 800e5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e6:	459c      	cmp	ip, r3
 800e5e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e5ec:	d8f3      	bhi.n	800e5d6 <__lshift+0x6e>
 800e5ee:	ebac 0304 	sub.w	r3, ip, r4
 800e5f2:	3b15      	subs	r3, #21
 800e5f4:	f023 0303 	bic.w	r3, r3, #3
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	f104 0015 	add.w	r0, r4, #21
 800e5fe:	4560      	cmp	r0, ip
 800e600:	bf88      	it	hi
 800e602:	2304      	movhi	r3, #4
 800e604:	50ca      	str	r2, [r1, r3]
 800e606:	b10a      	cbz	r2, 800e60c <__lshift+0xa4>
 800e608:	f108 0602 	add.w	r6, r8, #2
 800e60c:	3e01      	subs	r6, #1
 800e60e:	4638      	mov	r0, r7
 800e610:	612e      	str	r6, [r5, #16]
 800e612:	4621      	mov	r1, r4
 800e614:	f7ff fd98 	bl	800e148 <_Bfree>
 800e618:	4628      	mov	r0, r5
 800e61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e61e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e622:	3301      	adds	r3, #1
 800e624:	e7c5      	b.n	800e5b2 <__lshift+0x4a>
 800e626:	3904      	subs	r1, #4
 800e628:	f853 2b04 	ldr.w	r2, [r3], #4
 800e62c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e630:	459c      	cmp	ip, r3
 800e632:	d8f9      	bhi.n	800e628 <__lshift+0xc0>
 800e634:	e7ea      	b.n	800e60c <__lshift+0xa4>
 800e636:	bf00      	nop
 800e638:	080114f1 	.word	0x080114f1
 800e63c:	08011502 	.word	0x08011502

0800e640 <__mcmp>:
 800e640:	690a      	ldr	r2, [r1, #16]
 800e642:	4603      	mov	r3, r0
 800e644:	6900      	ldr	r0, [r0, #16]
 800e646:	1a80      	subs	r0, r0, r2
 800e648:	b530      	push	{r4, r5, lr}
 800e64a:	d10e      	bne.n	800e66a <__mcmp+0x2a>
 800e64c:	3314      	adds	r3, #20
 800e64e:	3114      	adds	r1, #20
 800e650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e65c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e660:	4295      	cmp	r5, r2
 800e662:	d003      	beq.n	800e66c <__mcmp+0x2c>
 800e664:	d205      	bcs.n	800e672 <__mcmp+0x32>
 800e666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e66a:	bd30      	pop	{r4, r5, pc}
 800e66c:	42a3      	cmp	r3, r4
 800e66e:	d3f3      	bcc.n	800e658 <__mcmp+0x18>
 800e670:	e7fb      	b.n	800e66a <__mcmp+0x2a>
 800e672:	2001      	movs	r0, #1
 800e674:	e7f9      	b.n	800e66a <__mcmp+0x2a>
	...

0800e678 <__mdiff>:
 800e678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67c:	4689      	mov	r9, r1
 800e67e:	4606      	mov	r6, r0
 800e680:	4611      	mov	r1, r2
 800e682:	4648      	mov	r0, r9
 800e684:	4614      	mov	r4, r2
 800e686:	f7ff ffdb 	bl	800e640 <__mcmp>
 800e68a:	1e05      	subs	r5, r0, #0
 800e68c:	d112      	bne.n	800e6b4 <__mdiff+0x3c>
 800e68e:	4629      	mov	r1, r5
 800e690:	4630      	mov	r0, r6
 800e692:	f7ff fd19 	bl	800e0c8 <_Balloc>
 800e696:	4602      	mov	r2, r0
 800e698:	b928      	cbnz	r0, 800e6a6 <__mdiff+0x2e>
 800e69a:	4b3f      	ldr	r3, [pc, #252]	@ (800e798 <__mdiff+0x120>)
 800e69c:	f240 2137 	movw	r1, #567	@ 0x237
 800e6a0:	483e      	ldr	r0, [pc, #248]	@ (800e79c <__mdiff+0x124>)
 800e6a2:	f001 fa89 	bl	800fbb8 <__assert_func>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	b003      	add	sp, #12
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	bfbc      	itt	lt
 800e6b6:	464b      	movlt	r3, r9
 800e6b8:	46a1      	movlt	r9, r4
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6c0:	bfba      	itte	lt
 800e6c2:	461c      	movlt	r4, r3
 800e6c4:	2501      	movlt	r5, #1
 800e6c6:	2500      	movge	r5, #0
 800e6c8:	f7ff fcfe 	bl	800e0c8 <_Balloc>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	b918      	cbnz	r0, 800e6d8 <__mdiff+0x60>
 800e6d0:	4b31      	ldr	r3, [pc, #196]	@ (800e798 <__mdiff+0x120>)
 800e6d2:	f240 2145 	movw	r1, #581	@ 0x245
 800e6d6:	e7e3      	b.n	800e6a0 <__mdiff+0x28>
 800e6d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e6dc:	6926      	ldr	r6, [r4, #16]
 800e6de:	60c5      	str	r5, [r0, #12]
 800e6e0:	f109 0310 	add.w	r3, r9, #16
 800e6e4:	f109 0514 	add.w	r5, r9, #20
 800e6e8:	f104 0e14 	add.w	lr, r4, #20
 800e6ec:	f100 0b14 	add.w	fp, r0, #20
 800e6f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e6f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	46d9      	mov	r9, fp
 800e6fc:	f04f 0c00 	mov.w	ip, #0
 800e700:	9b01      	ldr	r3, [sp, #4]
 800e702:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e706:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	fa1f f38a 	uxth.w	r3, sl
 800e710:	4619      	mov	r1, r3
 800e712:	b283      	uxth	r3, r0
 800e714:	1acb      	subs	r3, r1, r3
 800e716:	0c00      	lsrs	r0, r0, #16
 800e718:	4463      	add	r3, ip
 800e71a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e71e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e722:	b29b      	uxth	r3, r3
 800e724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e728:	4576      	cmp	r6, lr
 800e72a:	f849 3b04 	str.w	r3, [r9], #4
 800e72e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e732:	d8e5      	bhi.n	800e700 <__mdiff+0x88>
 800e734:	1b33      	subs	r3, r6, r4
 800e736:	3b15      	subs	r3, #21
 800e738:	f023 0303 	bic.w	r3, r3, #3
 800e73c:	3415      	adds	r4, #21
 800e73e:	3304      	adds	r3, #4
 800e740:	42a6      	cmp	r6, r4
 800e742:	bf38      	it	cc
 800e744:	2304      	movcc	r3, #4
 800e746:	441d      	add	r5, r3
 800e748:	445b      	add	r3, fp
 800e74a:	461e      	mov	r6, r3
 800e74c:	462c      	mov	r4, r5
 800e74e:	4544      	cmp	r4, r8
 800e750:	d30e      	bcc.n	800e770 <__mdiff+0xf8>
 800e752:	f108 0103 	add.w	r1, r8, #3
 800e756:	1b49      	subs	r1, r1, r5
 800e758:	f021 0103 	bic.w	r1, r1, #3
 800e75c:	3d03      	subs	r5, #3
 800e75e:	45a8      	cmp	r8, r5
 800e760:	bf38      	it	cc
 800e762:	2100      	movcc	r1, #0
 800e764:	440b      	add	r3, r1
 800e766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e76a:	b191      	cbz	r1, 800e792 <__mdiff+0x11a>
 800e76c:	6117      	str	r7, [r2, #16]
 800e76e:	e79d      	b.n	800e6ac <__mdiff+0x34>
 800e770:	f854 1b04 	ldr.w	r1, [r4], #4
 800e774:	46e6      	mov	lr, ip
 800e776:	0c08      	lsrs	r0, r1, #16
 800e778:	fa1c fc81 	uxtah	ip, ip, r1
 800e77c:	4471      	add	r1, lr
 800e77e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e782:	b289      	uxth	r1, r1
 800e784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e788:	f846 1b04 	str.w	r1, [r6], #4
 800e78c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e790:	e7dd      	b.n	800e74e <__mdiff+0xd6>
 800e792:	3f01      	subs	r7, #1
 800e794:	e7e7      	b.n	800e766 <__mdiff+0xee>
 800e796:	bf00      	nop
 800e798:	080114f1 	.word	0x080114f1
 800e79c:	08011502 	.word	0x08011502

0800e7a0 <__ulp>:
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	ed8d 0b00 	vstr	d0, [sp]
 800e7a6:	9a01      	ldr	r2, [sp, #4]
 800e7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e8 <__ulp+0x48>)
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	dc08      	bgt.n	800e7c6 <__ulp+0x26>
 800e7b4:	425b      	negs	r3, r3
 800e7b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e7ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e7be:	da04      	bge.n	800e7ca <__ulp+0x2a>
 800e7c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e7c4:	4113      	asrs	r3, r2
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	e008      	b.n	800e7dc <__ulp+0x3c>
 800e7ca:	f1a2 0314 	sub.w	r3, r2, #20
 800e7ce:	2b1e      	cmp	r3, #30
 800e7d0:	bfda      	itte	le
 800e7d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e7d6:	40da      	lsrle	r2, r3
 800e7d8:	2201      	movgt	r2, #1
 800e7da:	2300      	movs	r3, #0
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4610      	mov	r0, r2
 800e7e0:	ec41 0b10 	vmov	d0, r0, r1
 800e7e4:	b002      	add	sp, #8
 800e7e6:	4770      	bx	lr
 800e7e8:	7ff00000 	.word	0x7ff00000

0800e7ec <__b2d>:
 800e7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f0:	6906      	ldr	r6, [r0, #16]
 800e7f2:	f100 0814 	add.w	r8, r0, #20
 800e7f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e7fa:	1f37      	subs	r7, r6, #4
 800e7fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e800:	4610      	mov	r0, r2
 800e802:	f7ff fd53 	bl	800e2ac <__hi0bits>
 800e806:	f1c0 0320 	rsb	r3, r0, #32
 800e80a:	280a      	cmp	r0, #10
 800e80c:	600b      	str	r3, [r1, #0]
 800e80e:	491b      	ldr	r1, [pc, #108]	@ (800e87c <__b2d+0x90>)
 800e810:	dc15      	bgt.n	800e83e <__b2d+0x52>
 800e812:	f1c0 0c0b 	rsb	ip, r0, #11
 800e816:	fa22 f30c 	lsr.w	r3, r2, ip
 800e81a:	45b8      	cmp	r8, r7
 800e81c:	ea43 0501 	orr.w	r5, r3, r1
 800e820:	bf34      	ite	cc
 800e822:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e826:	2300      	movcs	r3, #0
 800e828:	3015      	adds	r0, #21
 800e82a:	fa02 f000 	lsl.w	r0, r2, r0
 800e82e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e832:	4303      	orrs	r3, r0
 800e834:	461c      	mov	r4, r3
 800e836:	ec45 4b10 	vmov	d0, r4, r5
 800e83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e83e:	45b8      	cmp	r8, r7
 800e840:	bf3a      	itte	cc
 800e842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e846:	f1a6 0708 	subcc.w	r7, r6, #8
 800e84a:	2300      	movcs	r3, #0
 800e84c:	380b      	subs	r0, #11
 800e84e:	d012      	beq.n	800e876 <__b2d+0x8a>
 800e850:	f1c0 0120 	rsb	r1, r0, #32
 800e854:	fa23 f401 	lsr.w	r4, r3, r1
 800e858:	4082      	lsls	r2, r0
 800e85a:	4322      	orrs	r2, r4
 800e85c:	4547      	cmp	r7, r8
 800e85e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e862:	bf8c      	ite	hi
 800e864:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e868:	2200      	movls	r2, #0
 800e86a:	4083      	lsls	r3, r0
 800e86c:	40ca      	lsrs	r2, r1
 800e86e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e872:	4313      	orrs	r3, r2
 800e874:	e7de      	b.n	800e834 <__b2d+0x48>
 800e876:	ea42 0501 	orr.w	r5, r2, r1
 800e87a:	e7db      	b.n	800e834 <__b2d+0x48>
 800e87c:	3ff00000 	.word	0x3ff00000

0800e880 <__d2b>:
 800e880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e884:	460f      	mov	r7, r1
 800e886:	2101      	movs	r1, #1
 800e888:	ec59 8b10 	vmov	r8, r9, d0
 800e88c:	4616      	mov	r6, r2
 800e88e:	f7ff fc1b 	bl	800e0c8 <_Balloc>
 800e892:	4604      	mov	r4, r0
 800e894:	b930      	cbnz	r0, 800e8a4 <__d2b+0x24>
 800e896:	4602      	mov	r2, r0
 800e898:	4b23      	ldr	r3, [pc, #140]	@ (800e928 <__d2b+0xa8>)
 800e89a:	4824      	ldr	r0, [pc, #144]	@ (800e92c <__d2b+0xac>)
 800e89c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e8a0:	f001 f98a 	bl	800fbb8 <__assert_func>
 800e8a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e8a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8ac:	b10d      	cbz	r5, 800e8b2 <__d2b+0x32>
 800e8ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	f1b8 0300 	subs.w	r3, r8, #0
 800e8b8:	d023      	beq.n	800e902 <__d2b+0x82>
 800e8ba:	4668      	mov	r0, sp
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	f7ff fd14 	bl	800e2ea <__lo0bits>
 800e8c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8c6:	b1d0      	cbz	r0, 800e8fe <__d2b+0x7e>
 800e8c8:	f1c0 0320 	rsb	r3, r0, #32
 800e8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d0:	430b      	orrs	r3, r1
 800e8d2:	40c2      	lsrs	r2, r0
 800e8d4:	6163      	str	r3, [r4, #20]
 800e8d6:	9201      	str	r2, [sp, #4]
 800e8d8:	9b01      	ldr	r3, [sp, #4]
 800e8da:	61a3      	str	r3, [r4, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bf0c      	ite	eq
 800e8e0:	2201      	moveq	r2, #1
 800e8e2:	2202      	movne	r2, #2
 800e8e4:	6122      	str	r2, [r4, #16]
 800e8e6:	b1a5      	cbz	r5, 800e912 <__d2b+0x92>
 800e8e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e8ec:	4405      	add	r5, r0
 800e8ee:	603d      	str	r5, [r7, #0]
 800e8f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e8f4:	6030      	str	r0, [r6, #0]
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	b003      	add	sp, #12
 800e8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	6161      	str	r1, [r4, #20]
 800e900:	e7ea      	b.n	800e8d8 <__d2b+0x58>
 800e902:	a801      	add	r0, sp, #4
 800e904:	f7ff fcf1 	bl	800e2ea <__lo0bits>
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	6163      	str	r3, [r4, #20]
 800e90c:	3020      	adds	r0, #32
 800e90e:	2201      	movs	r2, #1
 800e910:	e7e8      	b.n	800e8e4 <__d2b+0x64>
 800e912:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e916:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e91a:	6038      	str	r0, [r7, #0]
 800e91c:	6918      	ldr	r0, [r3, #16]
 800e91e:	f7ff fcc5 	bl	800e2ac <__hi0bits>
 800e922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e926:	e7e5      	b.n	800e8f4 <__d2b+0x74>
 800e928:	080114f1 	.word	0x080114f1
 800e92c:	08011502 	.word	0x08011502

0800e930 <__ratio>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	b085      	sub	sp, #20
 800e936:	e9cd 1000 	strd	r1, r0, [sp]
 800e93a:	a902      	add	r1, sp, #8
 800e93c:	f7ff ff56 	bl	800e7ec <__b2d>
 800e940:	9800      	ldr	r0, [sp, #0]
 800e942:	a903      	add	r1, sp, #12
 800e944:	ec55 4b10 	vmov	r4, r5, d0
 800e948:	f7ff ff50 	bl	800e7ec <__b2d>
 800e94c:	9b01      	ldr	r3, [sp, #4]
 800e94e:	6919      	ldr	r1, [r3, #16]
 800e950:	9b00      	ldr	r3, [sp, #0]
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	1ac9      	subs	r1, r1, r3
 800e956:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e95a:	1a9b      	subs	r3, r3, r2
 800e95c:	ec5b ab10 	vmov	sl, fp, d0
 800e960:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e964:	2b00      	cmp	r3, #0
 800e966:	bfce      	itee	gt
 800e968:	462a      	movgt	r2, r5
 800e96a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e96e:	465a      	movle	r2, fp
 800e970:	462f      	mov	r7, r5
 800e972:	46d9      	mov	r9, fp
 800e974:	bfcc      	ite	gt
 800e976:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e97a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e97e:	464b      	mov	r3, r9
 800e980:	4652      	mov	r2, sl
 800e982:	4620      	mov	r0, r4
 800e984:	4639      	mov	r1, r7
 800e986:	f7f1 ff91 	bl	80008ac <__aeabi_ddiv>
 800e98a:	ec41 0b10 	vmov	d0, r0, r1
 800e98e:	b005      	add	sp, #20
 800e990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e994 <__copybits>:
 800e994:	3901      	subs	r1, #1
 800e996:	b570      	push	{r4, r5, r6, lr}
 800e998:	1149      	asrs	r1, r1, #5
 800e99a:	6914      	ldr	r4, [r2, #16]
 800e99c:	3101      	adds	r1, #1
 800e99e:	f102 0314 	add.w	r3, r2, #20
 800e9a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e9a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9aa:	1f05      	subs	r5, r0, #4
 800e9ac:	42a3      	cmp	r3, r4
 800e9ae:	d30c      	bcc.n	800e9ca <__copybits+0x36>
 800e9b0:	1aa3      	subs	r3, r4, r2
 800e9b2:	3b11      	subs	r3, #17
 800e9b4:	f023 0303 	bic.w	r3, r3, #3
 800e9b8:	3211      	adds	r2, #17
 800e9ba:	42a2      	cmp	r2, r4
 800e9bc:	bf88      	it	hi
 800e9be:	2300      	movhi	r3, #0
 800e9c0:	4418      	add	r0, r3
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	4288      	cmp	r0, r1
 800e9c6:	d305      	bcc.n	800e9d4 <__copybits+0x40>
 800e9c8:	bd70      	pop	{r4, r5, r6, pc}
 800e9ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800e9ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800e9d2:	e7eb      	b.n	800e9ac <__copybits+0x18>
 800e9d4:	f840 3b04 	str.w	r3, [r0], #4
 800e9d8:	e7f4      	b.n	800e9c4 <__copybits+0x30>

0800e9da <__any_on>:
 800e9da:	f100 0214 	add.w	r2, r0, #20
 800e9de:	6900      	ldr	r0, [r0, #16]
 800e9e0:	114b      	asrs	r3, r1, #5
 800e9e2:	4298      	cmp	r0, r3
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	db11      	blt.n	800ea0c <__any_on+0x32>
 800e9e8:	dd0a      	ble.n	800ea00 <__any_on+0x26>
 800e9ea:	f011 011f 	ands.w	r1, r1, #31
 800e9ee:	d007      	beq.n	800ea00 <__any_on+0x26>
 800e9f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e9f4:	fa24 f001 	lsr.w	r0, r4, r1
 800e9f8:	fa00 f101 	lsl.w	r1, r0, r1
 800e9fc:	428c      	cmp	r4, r1
 800e9fe:	d10b      	bne.n	800ea18 <__any_on+0x3e>
 800ea00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d803      	bhi.n	800ea10 <__any_on+0x36>
 800ea08:	2000      	movs	r0, #0
 800ea0a:	bd10      	pop	{r4, pc}
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	e7f7      	b.n	800ea00 <__any_on+0x26>
 800ea10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea14:	2900      	cmp	r1, #0
 800ea16:	d0f5      	beq.n	800ea04 <__any_on+0x2a>
 800ea18:	2001      	movs	r0, #1
 800ea1a:	e7f6      	b.n	800ea0a <__any_on+0x30>

0800ea1c <sulp>:
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	4604      	mov	r4, r0
 800ea20:	460d      	mov	r5, r1
 800ea22:	ec45 4b10 	vmov	d0, r4, r5
 800ea26:	4616      	mov	r6, r2
 800ea28:	f7ff feba 	bl	800e7a0 <__ulp>
 800ea2c:	ec51 0b10 	vmov	r0, r1, d0
 800ea30:	b17e      	cbz	r6, 800ea52 <sulp+0x36>
 800ea32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ea36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	dd09      	ble.n	800ea52 <sulp+0x36>
 800ea3e:	051b      	lsls	r3, r3, #20
 800ea40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ea44:	2400      	movs	r4, #0
 800ea46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	462b      	mov	r3, r5
 800ea4e:	f7f1 fe03 	bl	8000658 <__aeabi_dmul>
 800ea52:	ec41 0b10 	vmov	d0, r0, r1
 800ea56:	bd70      	pop	{r4, r5, r6, pc}

0800ea58 <_strtod_l>:
 800ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	b09f      	sub	sp, #124	@ 0x7c
 800ea5e:	460c      	mov	r4, r1
 800ea60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ea62:	2200      	movs	r2, #0
 800ea64:	921a      	str	r2, [sp, #104]	@ 0x68
 800ea66:	9005      	str	r0, [sp, #20]
 800ea68:	f04f 0a00 	mov.w	sl, #0
 800ea6c:	f04f 0b00 	mov.w	fp, #0
 800ea70:	460a      	mov	r2, r1
 800ea72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea74:	7811      	ldrb	r1, [r2, #0]
 800ea76:	292b      	cmp	r1, #43	@ 0x2b
 800ea78:	d04a      	beq.n	800eb10 <_strtod_l+0xb8>
 800ea7a:	d838      	bhi.n	800eaee <_strtod_l+0x96>
 800ea7c:	290d      	cmp	r1, #13
 800ea7e:	d832      	bhi.n	800eae6 <_strtod_l+0x8e>
 800ea80:	2908      	cmp	r1, #8
 800ea82:	d832      	bhi.n	800eaea <_strtod_l+0x92>
 800ea84:	2900      	cmp	r1, #0
 800ea86:	d03b      	beq.n	800eb00 <_strtod_l+0xa8>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ea8e:	782a      	ldrb	r2, [r5, #0]
 800ea90:	2a30      	cmp	r2, #48	@ 0x30
 800ea92:	f040 80b2 	bne.w	800ebfa <_strtod_l+0x1a2>
 800ea96:	786a      	ldrb	r2, [r5, #1]
 800ea98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea9c:	2a58      	cmp	r2, #88	@ 0x58
 800ea9e:	d16e      	bne.n	800eb7e <_strtod_l+0x126>
 800eaa0:	9302      	str	r3, [sp, #8]
 800eaa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	ab1a      	add	r3, sp, #104	@ 0x68
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	4a8f      	ldr	r2, [pc, #572]	@ (800ece8 <_strtod_l+0x290>)
 800eaac:	9805      	ldr	r0, [sp, #20]
 800eaae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eab0:	a919      	add	r1, sp, #100	@ 0x64
 800eab2:	f001 f91b 	bl	800fcec <__gethex>
 800eab6:	f010 060f 	ands.w	r6, r0, #15
 800eaba:	4604      	mov	r4, r0
 800eabc:	d005      	beq.n	800eaca <_strtod_l+0x72>
 800eabe:	2e06      	cmp	r6, #6
 800eac0:	d128      	bne.n	800eb14 <_strtod_l+0xbc>
 800eac2:	3501      	adds	r5, #1
 800eac4:	2300      	movs	r3, #0
 800eac6:	9519      	str	r5, [sp, #100]	@ 0x64
 800eac8:	930e      	str	r3, [sp, #56]	@ 0x38
 800eaca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f040 858e 	bne.w	800f5ee <_strtod_l+0xb96>
 800ead2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ead4:	b1cb      	cbz	r3, 800eb0a <_strtod_l+0xb2>
 800ead6:	4652      	mov	r2, sl
 800ead8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eadc:	ec43 2b10 	vmov	d0, r2, r3
 800eae0:	b01f      	add	sp, #124	@ 0x7c
 800eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae6:	2920      	cmp	r1, #32
 800eae8:	d1ce      	bne.n	800ea88 <_strtod_l+0x30>
 800eaea:	3201      	adds	r2, #1
 800eaec:	e7c1      	b.n	800ea72 <_strtod_l+0x1a>
 800eaee:	292d      	cmp	r1, #45	@ 0x2d
 800eaf0:	d1ca      	bne.n	800ea88 <_strtod_l+0x30>
 800eaf2:	2101      	movs	r1, #1
 800eaf4:	910e      	str	r1, [sp, #56]	@ 0x38
 800eaf6:	1c51      	adds	r1, r2, #1
 800eaf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800eafa:	7852      	ldrb	r2, [r2, #1]
 800eafc:	2a00      	cmp	r2, #0
 800eafe:	d1c5      	bne.n	800ea8c <_strtod_l+0x34>
 800eb00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb02:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f040 8570 	bne.w	800f5ea <_strtod_l+0xb92>
 800eb0a:	4652      	mov	r2, sl
 800eb0c:	465b      	mov	r3, fp
 800eb0e:	e7e5      	b.n	800eadc <_strtod_l+0x84>
 800eb10:	2100      	movs	r1, #0
 800eb12:	e7ef      	b.n	800eaf4 <_strtod_l+0x9c>
 800eb14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb16:	b13a      	cbz	r2, 800eb28 <_strtod_l+0xd0>
 800eb18:	2135      	movs	r1, #53	@ 0x35
 800eb1a:	a81c      	add	r0, sp, #112	@ 0x70
 800eb1c:	f7ff ff3a 	bl	800e994 <__copybits>
 800eb20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb22:	9805      	ldr	r0, [sp, #20]
 800eb24:	f7ff fb10 	bl	800e148 <_Bfree>
 800eb28:	3e01      	subs	r6, #1
 800eb2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800eb2c:	2e04      	cmp	r6, #4
 800eb2e:	d806      	bhi.n	800eb3e <_strtod_l+0xe6>
 800eb30:	e8df f006 	tbb	[pc, r6]
 800eb34:	201d0314 	.word	0x201d0314
 800eb38:	14          	.byte	0x14
 800eb39:	00          	.byte	0x00
 800eb3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800eb3e:	05e1      	lsls	r1, r4, #23
 800eb40:	bf48      	it	mi
 800eb42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800eb46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb4a:	0d1b      	lsrs	r3, r3, #20
 800eb4c:	051b      	lsls	r3, r3, #20
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1bb      	bne.n	800eaca <_strtod_l+0x72>
 800eb52:	f7fe fb1d 	bl	800d190 <__errno>
 800eb56:	2322      	movs	r3, #34	@ 0x22
 800eb58:	6003      	str	r3, [r0, #0]
 800eb5a:	e7b6      	b.n	800eaca <_strtod_l+0x72>
 800eb5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800eb60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800eb64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800eb68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eb6c:	e7e7      	b.n	800eb3e <_strtod_l+0xe6>
 800eb6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ecf0 <_strtod_l+0x298>
 800eb72:	e7e4      	b.n	800eb3e <_strtod_l+0xe6>
 800eb74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eb78:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800eb7c:	e7df      	b.n	800eb3e <_strtod_l+0xe6>
 800eb7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb80:	1c5a      	adds	r2, r3, #1
 800eb82:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb84:	785b      	ldrb	r3, [r3, #1]
 800eb86:	2b30      	cmp	r3, #48	@ 0x30
 800eb88:	d0f9      	beq.n	800eb7e <_strtod_l+0x126>
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d09d      	beq.n	800eaca <_strtod_l+0x72>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	2700      	movs	r7, #0
 800eb92:	9308      	str	r3, [sp, #32]
 800eb94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb96:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb98:	970b      	str	r7, [sp, #44]	@ 0x2c
 800eb9a:	46b9      	mov	r9, r7
 800eb9c:	220a      	movs	r2, #10
 800eb9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800eba0:	7805      	ldrb	r5, [r0, #0]
 800eba2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eba6:	b2d9      	uxtb	r1, r3
 800eba8:	2909      	cmp	r1, #9
 800ebaa:	d928      	bls.n	800ebfe <_strtod_l+0x1a6>
 800ebac:	494f      	ldr	r1, [pc, #316]	@ (800ecec <_strtod_l+0x294>)
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f000 ffd6 	bl	800fb60 <strncmp>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d032      	beq.n	800ec1e <_strtod_l+0x1c6>
 800ebb8:	2000      	movs	r0, #0
 800ebba:	462a      	mov	r2, r5
 800ebbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800ebbe:	464d      	mov	r5, r9
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2a65      	cmp	r2, #101	@ 0x65
 800ebc4:	d001      	beq.n	800ebca <_strtod_l+0x172>
 800ebc6:	2a45      	cmp	r2, #69	@ 0x45
 800ebc8:	d114      	bne.n	800ebf4 <_strtod_l+0x19c>
 800ebca:	b91d      	cbnz	r5, 800ebd4 <_strtod_l+0x17c>
 800ebcc:	9a08      	ldr	r2, [sp, #32]
 800ebce:	4302      	orrs	r2, r0
 800ebd0:	d096      	beq.n	800eb00 <_strtod_l+0xa8>
 800ebd2:	2500      	movs	r5, #0
 800ebd4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ebd6:	1c62      	adds	r2, r4, #1
 800ebd8:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebda:	7862      	ldrb	r2, [r4, #1]
 800ebdc:	2a2b      	cmp	r2, #43	@ 0x2b
 800ebde:	d07a      	beq.n	800ecd6 <_strtod_l+0x27e>
 800ebe0:	2a2d      	cmp	r2, #45	@ 0x2d
 800ebe2:	d07e      	beq.n	800ece2 <_strtod_l+0x28a>
 800ebe4:	f04f 0c00 	mov.w	ip, #0
 800ebe8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ebec:	2909      	cmp	r1, #9
 800ebee:	f240 8085 	bls.w	800ecfc <_strtod_l+0x2a4>
 800ebf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800ebf4:	f04f 0800 	mov.w	r8, #0
 800ebf8:	e0a5      	b.n	800ed46 <_strtod_l+0x2ee>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	e7c8      	b.n	800eb90 <_strtod_l+0x138>
 800ebfe:	f1b9 0f08 	cmp.w	r9, #8
 800ec02:	bfd8      	it	le
 800ec04:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ec06:	f100 0001 	add.w	r0, r0, #1
 800ec0a:	bfda      	itte	le
 800ec0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ec10:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ec12:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ec16:	f109 0901 	add.w	r9, r9, #1
 800ec1a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ec1c:	e7bf      	b.n	800eb9e <_strtod_l+0x146>
 800ec1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec20:	1c5a      	adds	r2, r3, #1
 800ec22:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec24:	785a      	ldrb	r2, [r3, #1]
 800ec26:	f1b9 0f00 	cmp.w	r9, #0
 800ec2a:	d03b      	beq.n	800eca4 <_strtod_l+0x24c>
 800ec2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec2e:	464d      	mov	r5, r9
 800ec30:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ec34:	2b09      	cmp	r3, #9
 800ec36:	d912      	bls.n	800ec5e <_strtod_l+0x206>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e7c2      	b.n	800ebc2 <_strtod_l+0x16a>
 800ec3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec42:	785a      	ldrb	r2, [r3, #1]
 800ec44:	3001      	adds	r0, #1
 800ec46:	2a30      	cmp	r2, #48	@ 0x30
 800ec48:	d0f8      	beq.n	800ec3c <_strtod_l+0x1e4>
 800ec4a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ec4e:	2b08      	cmp	r3, #8
 800ec50:	f200 84d2 	bhi.w	800f5f8 <_strtod_l+0xba0>
 800ec54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec56:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec58:	2000      	movs	r0, #0
 800ec5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	3a30      	subs	r2, #48	@ 0x30
 800ec60:	f100 0301 	add.w	r3, r0, #1
 800ec64:	d018      	beq.n	800ec98 <_strtod_l+0x240>
 800ec66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec68:	4419      	add	r1, r3
 800ec6a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ec6c:	462e      	mov	r6, r5
 800ec6e:	f04f 0e0a 	mov.w	lr, #10
 800ec72:	1c71      	adds	r1, r6, #1
 800ec74:	eba1 0c05 	sub.w	ip, r1, r5
 800ec78:	4563      	cmp	r3, ip
 800ec7a:	dc15      	bgt.n	800eca8 <_strtod_l+0x250>
 800ec7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ec80:	182b      	adds	r3, r5, r0
 800ec82:	2b08      	cmp	r3, #8
 800ec84:	f105 0501 	add.w	r5, r5, #1
 800ec88:	4405      	add	r5, r0
 800ec8a:	dc1a      	bgt.n	800ecc2 <_strtod_l+0x26a>
 800ec8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec8e:	230a      	movs	r3, #10
 800ec90:	fb03 2301 	mla	r3, r3, r1, r2
 800ec94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec96:	2300      	movs	r3, #0
 800ec98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec9a:	1c51      	adds	r1, r2, #1
 800ec9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec9e:	7852      	ldrb	r2, [r2, #1]
 800eca0:	4618      	mov	r0, r3
 800eca2:	e7c5      	b.n	800ec30 <_strtod_l+0x1d8>
 800eca4:	4648      	mov	r0, r9
 800eca6:	e7ce      	b.n	800ec46 <_strtod_l+0x1ee>
 800eca8:	2e08      	cmp	r6, #8
 800ecaa:	dc05      	bgt.n	800ecb8 <_strtod_l+0x260>
 800ecac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ecae:	fb0e f606 	mul.w	r6, lr, r6
 800ecb2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ecb4:	460e      	mov	r6, r1
 800ecb6:	e7dc      	b.n	800ec72 <_strtod_l+0x21a>
 800ecb8:	2910      	cmp	r1, #16
 800ecba:	bfd8      	it	le
 800ecbc:	fb0e f707 	mulle.w	r7, lr, r7
 800ecc0:	e7f8      	b.n	800ecb4 <_strtod_l+0x25c>
 800ecc2:	2b0f      	cmp	r3, #15
 800ecc4:	bfdc      	itt	le
 800ecc6:	230a      	movle	r3, #10
 800ecc8:	fb03 2707 	mlale	r7, r3, r7, r2
 800eccc:	e7e3      	b.n	800ec96 <_strtod_l+0x23e>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e77a      	b.n	800ebcc <_strtod_l+0x174>
 800ecd6:	f04f 0c00 	mov.w	ip, #0
 800ecda:	1ca2      	adds	r2, r4, #2
 800ecdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecde:	78a2      	ldrb	r2, [r4, #2]
 800ece0:	e782      	b.n	800ebe8 <_strtod_l+0x190>
 800ece2:	f04f 0c01 	mov.w	ip, #1
 800ece6:	e7f8      	b.n	800ecda <_strtod_l+0x282>
 800ece8:	08011724 	.word	0x08011724
 800ecec:	0801155b 	.word	0x0801155b
 800ecf0:	7ff00000 	.word	0x7ff00000
 800ecf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ecf6:	1c51      	adds	r1, r2, #1
 800ecf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ecfa:	7852      	ldrb	r2, [r2, #1]
 800ecfc:	2a30      	cmp	r2, #48	@ 0x30
 800ecfe:	d0f9      	beq.n	800ecf4 <_strtod_l+0x29c>
 800ed00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ed04:	2908      	cmp	r1, #8
 800ed06:	f63f af75 	bhi.w	800ebf4 <_strtod_l+0x19c>
 800ed0a:	3a30      	subs	r2, #48	@ 0x30
 800ed0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed10:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ed12:	f04f 080a 	mov.w	r8, #10
 800ed16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed18:	1c56      	adds	r6, r2, #1
 800ed1a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ed1c:	7852      	ldrb	r2, [r2, #1]
 800ed1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ed22:	f1be 0f09 	cmp.w	lr, #9
 800ed26:	d939      	bls.n	800ed9c <_strtod_l+0x344>
 800ed28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ed2a:	1a76      	subs	r6, r6, r1
 800ed2c:	2e08      	cmp	r6, #8
 800ed2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ed32:	dc03      	bgt.n	800ed3c <_strtod_l+0x2e4>
 800ed34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed36:	4588      	cmp	r8, r1
 800ed38:	bfa8      	it	ge
 800ed3a:	4688      	movge	r8, r1
 800ed3c:	f1bc 0f00 	cmp.w	ip, #0
 800ed40:	d001      	beq.n	800ed46 <_strtod_l+0x2ee>
 800ed42:	f1c8 0800 	rsb	r8, r8, #0
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	d14e      	bne.n	800ede8 <_strtod_l+0x390>
 800ed4a:	9908      	ldr	r1, [sp, #32]
 800ed4c:	4308      	orrs	r0, r1
 800ed4e:	f47f aebc 	bne.w	800eaca <_strtod_l+0x72>
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f47f aed4 	bne.w	800eb00 <_strtod_l+0xa8>
 800ed58:	2a69      	cmp	r2, #105	@ 0x69
 800ed5a:	d028      	beq.n	800edae <_strtod_l+0x356>
 800ed5c:	dc25      	bgt.n	800edaa <_strtod_l+0x352>
 800ed5e:	2a49      	cmp	r2, #73	@ 0x49
 800ed60:	d025      	beq.n	800edae <_strtod_l+0x356>
 800ed62:	2a4e      	cmp	r2, #78	@ 0x4e
 800ed64:	f47f aecc 	bne.w	800eb00 <_strtod_l+0xa8>
 800ed68:	499a      	ldr	r1, [pc, #616]	@ (800efd4 <_strtod_l+0x57c>)
 800ed6a:	a819      	add	r0, sp, #100	@ 0x64
 800ed6c:	f001 f9e0 	bl	8010130 <__match>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	f43f aec5 	beq.w	800eb00 <_strtod_l+0xa8>
 800ed76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b28      	cmp	r3, #40	@ 0x28
 800ed7c:	d12e      	bne.n	800eddc <_strtod_l+0x384>
 800ed7e:	4996      	ldr	r1, [pc, #600]	@ (800efd8 <_strtod_l+0x580>)
 800ed80:	aa1c      	add	r2, sp, #112	@ 0x70
 800ed82:	a819      	add	r0, sp, #100	@ 0x64
 800ed84:	f001 f9e8 	bl	8010158 <__hexnan>
 800ed88:	2805      	cmp	r0, #5
 800ed8a:	d127      	bne.n	800eddc <_strtod_l+0x384>
 800ed8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ed92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ed96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ed9a:	e696      	b.n	800eaca <_strtod_l+0x72>
 800ed9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed9e:	fb08 2101 	mla	r1, r8, r1, r2
 800eda2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eda6:	9209      	str	r2, [sp, #36]	@ 0x24
 800eda8:	e7b5      	b.n	800ed16 <_strtod_l+0x2be>
 800edaa:	2a6e      	cmp	r2, #110	@ 0x6e
 800edac:	e7da      	b.n	800ed64 <_strtod_l+0x30c>
 800edae:	498b      	ldr	r1, [pc, #556]	@ (800efdc <_strtod_l+0x584>)
 800edb0:	a819      	add	r0, sp, #100	@ 0x64
 800edb2:	f001 f9bd 	bl	8010130 <__match>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	f43f aea2 	beq.w	800eb00 <_strtod_l+0xa8>
 800edbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edbe:	4988      	ldr	r1, [pc, #544]	@ (800efe0 <_strtod_l+0x588>)
 800edc0:	3b01      	subs	r3, #1
 800edc2:	a819      	add	r0, sp, #100	@ 0x64
 800edc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800edc6:	f001 f9b3 	bl	8010130 <__match>
 800edca:	b910      	cbnz	r0, 800edd2 <_strtod_l+0x37a>
 800edcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edce:	3301      	adds	r3, #1
 800edd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800edd2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800eff0 <_strtod_l+0x598>
 800edd6:	f04f 0a00 	mov.w	sl, #0
 800edda:	e676      	b.n	800eaca <_strtod_l+0x72>
 800eddc:	4881      	ldr	r0, [pc, #516]	@ (800efe4 <_strtod_l+0x58c>)
 800edde:	f000 fee3 	bl	800fba8 <nan>
 800ede2:	ec5b ab10 	vmov	sl, fp, d0
 800ede6:	e670      	b.n	800eaca <_strtod_l+0x72>
 800ede8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800edec:	eba8 0303 	sub.w	r3, r8, r3
 800edf0:	f1b9 0f00 	cmp.w	r9, #0
 800edf4:	bf08      	it	eq
 800edf6:	46a9      	moveq	r9, r5
 800edf8:	2d10      	cmp	r5, #16
 800edfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800edfc:	462c      	mov	r4, r5
 800edfe:	bfa8      	it	ge
 800ee00:	2410      	movge	r4, #16
 800ee02:	f7f1 fbaf 	bl	8000564 <__aeabi_ui2d>
 800ee06:	2d09      	cmp	r5, #9
 800ee08:	4682      	mov	sl, r0
 800ee0a:	468b      	mov	fp, r1
 800ee0c:	dc13      	bgt.n	800ee36 <_strtod_l+0x3de>
 800ee0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f43f ae5a 	beq.w	800eaca <_strtod_l+0x72>
 800ee16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee18:	dd78      	ble.n	800ef0c <_strtod_l+0x4b4>
 800ee1a:	2b16      	cmp	r3, #22
 800ee1c:	dc5f      	bgt.n	800eede <_strtod_l+0x486>
 800ee1e:	4972      	ldr	r1, [pc, #456]	@ (800efe8 <_strtod_l+0x590>)
 800ee20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee28:	4652      	mov	r2, sl
 800ee2a:	465b      	mov	r3, fp
 800ee2c:	f7f1 fc14 	bl	8000658 <__aeabi_dmul>
 800ee30:	4682      	mov	sl, r0
 800ee32:	468b      	mov	fp, r1
 800ee34:	e649      	b.n	800eaca <_strtod_l+0x72>
 800ee36:	4b6c      	ldr	r3, [pc, #432]	@ (800efe8 <_strtod_l+0x590>)
 800ee38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ee40:	f7f1 fc0a 	bl	8000658 <__aeabi_dmul>
 800ee44:	4682      	mov	sl, r0
 800ee46:	4638      	mov	r0, r7
 800ee48:	468b      	mov	fp, r1
 800ee4a:	f7f1 fb8b 	bl	8000564 <__aeabi_ui2d>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	4650      	mov	r0, sl
 800ee54:	4659      	mov	r1, fp
 800ee56:	f7f1 fa49 	bl	80002ec <__adddf3>
 800ee5a:	2d0f      	cmp	r5, #15
 800ee5c:	4682      	mov	sl, r0
 800ee5e:	468b      	mov	fp, r1
 800ee60:	ddd5      	ble.n	800ee0e <_strtod_l+0x3b6>
 800ee62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee64:	1b2c      	subs	r4, r5, r4
 800ee66:	441c      	add	r4, r3
 800ee68:	2c00      	cmp	r4, #0
 800ee6a:	f340 8093 	ble.w	800ef94 <_strtod_l+0x53c>
 800ee6e:	f014 030f 	ands.w	r3, r4, #15
 800ee72:	d00a      	beq.n	800ee8a <_strtod_l+0x432>
 800ee74:	495c      	ldr	r1, [pc, #368]	@ (800efe8 <_strtod_l+0x590>)
 800ee76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee7a:	4652      	mov	r2, sl
 800ee7c:	465b      	mov	r3, fp
 800ee7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee82:	f7f1 fbe9 	bl	8000658 <__aeabi_dmul>
 800ee86:	4682      	mov	sl, r0
 800ee88:	468b      	mov	fp, r1
 800ee8a:	f034 040f 	bics.w	r4, r4, #15
 800ee8e:	d073      	beq.n	800ef78 <_strtod_l+0x520>
 800ee90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ee94:	dd49      	ble.n	800ef2a <_strtod_l+0x4d2>
 800ee96:	2400      	movs	r4, #0
 800ee98:	46a0      	mov	r8, r4
 800ee9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ee9c:	46a1      	mov	r9, r4
 800ee9e:	9a05      	ldr	r2, [sp, #20]
 800eea0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800eff0 <_strtod_l+0x598>
 800eea4:	2322      	movs	r3, #34	@ 0x22
 800eea6:	6013      	str	r3, [r2, #0]
 800eea8:	f04f 0a00 	mov.w	sl, #0
 800eeac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f43f ae0b 	beq.w	800eaca <_strtod_l+0x72>
 800eeb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eeb6:	9805      	ldr	r0, [sp, #20]
 800eeb8:	f7ff f946 	bl	800e148 <_Bfree>
 800eebc:	9805      	ldr	r0, [sp, #20]
 800eebe:	4649      	mov	r1, r9
 800eec0:	f7ff f942 	bl	800e148 <_Bfree>
 800eec4:	9805      	ldr	r0, [sp, #20]
 800eec6:	4641      	mov	r1, r8
 800eec8:	f7ff f93e 	bl	800e148 <_Bfree>
 800eecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eece:	9805      	ldr	r0, [sp, #20]
 800eed0:	f7ff f93a 	bl	800e148 <_Bfree>
 800eed4:	9805      	ldr	r0, [sp, #20]
 800eed6:	4621      	mov	r1, r4
 800eed8:	f7ff f936 	bl	800e148 <_Bfree>
 800eedc:	e5f5      	b.n	800eaca <_strtod_l+0x72>
 800eede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eee0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800eee4:	4293      	cmp	r3, r2
 800eee6:	dbbc      	blt.n	800ee62 <_strtod_l+0x40a>
 800eee8:	4c3f      	ldr	r4, [pc, #252]	@ (800efe8 <_strtod_l+0x590>)
 800eeea:	f1c5 050f 	rsb	r5, r5, #15
 800eeee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eef2:	4652      	mov	r2, sl
 800eef4:	465b      	mov	r3, fp
 800eef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eefa:	f7f1 fbad 	bl	8000658 <__aeabi_dmul>
 800eefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef00:	1b5d      	subs	r5, r3, r5
 800ef02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ef0a:	e78f      	b.n	800ee2c <_strtod_l+0x3d4>
 800ef0c:	3316      	adds	r3, #22
 800ef0e:	dba8      	blt.n	800ee62 <_strtod_l+0x40a>
 800ef10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef12:	eba3 0808 	sub.w	r8, r3, r8
 800ef16:	4b34      	ldr	r3, [pc, #208]	@ (800efe8 <_strtod_l+0x590>)
 800ef18:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ef1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ef20:	4650      	mov	r0, sl
 800ef22:	4659      	mov	r1, fp
 800ef24:	f7f1 fcc2 	bl	80008ac <__aeabi_ddiv>
 800ef28:	e782      	b.n	800ee30 <_strtod_l+0x3d8>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	4f2f      	ldr	r7, [pc, #188]	@ (800efec <_strtod_l+0x594>)
 800ef2e:	1124      	asrs	r4, r4, #4
 800ef30:	4650      	mov	r0, sl
 800ef32:	4659      	mov	r1, fp
 800ef34:	461e      	mov	r6, r3
 800ef36:	2c01      	cmp	r4, #1
 800ef38:	dc21      	bgt.n	800ef7e <_strtod_l+0x526>
 800ef3a:	b10b      	cbz	r3, 800ef40 <_strtod_l+0x4e8>
 800ef3c:	4682      	mov	sl, r0
 800ef3e:	468b      	mov	fp, r1
 800ef40:	492a      	ldr	r1, [pc, #168]	@ (800efec <_strtod_l+0x594>)
 800ef42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ef46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ef4a:	4652      	mov	r2, sl
 800ef4c:	465b      	mov	r3, fp
 800ef4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef52:	f7f1 fb81 	bl	8000658 <__aeabi_dmul>
 800ef56:	4b26      	ldr	r3, [pc, #152]	@ (800eff0 <_strtod_l+0x598>)
 800ef58:	460a      	mov	r2, r1
 800ef5a:	400b      	ands	r3, r1
 800ef5c:	4925      	ldr	r1, [pc, #148]	@ (800eff4 <_strtod_l+0x59c>)
 800ef5e:	428b      	cmp	r3, r1
 800ef60:	4682      	mov	sl, r0
 800ef62:	d898      	bhi.n	800ee96 <_strtod_l+0x43e>
 800ef64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ef68:	428b      	cmp	r3, r1
 800ef6a:	bf86      	itte	hi
 800ef6c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800eff8 <_strtod_l+0x5a0>
 800ef70:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ef74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9308      	str	r3, [sp, #32]
 800ef7c:	e076      	b.n	800f06c <_strtod_l+0x614>
 800ef7e:	07e2      	lsls	r2, r4, #31
 800ef80:	d504      	bpl.n	800ef8c <_strtod_l+0x534>
 800ef82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef86:	f7f1 fb67 	bl	8000658 <__aeabi_dmul>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	3601      	adds	r6, #1
 800ef8e:	1064      	asrs	r4, r4, #1
 800ef90:	3708      	adds	r7, #8
 800ef92:	e7d0      	b.n	800ef36 <_strtod_l+0x4de>
 800ef94:	d0f0      	beq.n	800ef78 <_strtod_l+0x520>
 800ef96:	4264      	negs	r4, r4
 800ef98:	f014 020f 	ands.w	r2, r4, #15
 800ef9c:	d00a      	beq.n	800efb4 <_strtod_l+0x55c>
 800ef9e:	4b12      	ldr	r3, [pc, #72]	@ (800efe8 <_strtod_l+0x590>)
 800efa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efa4:	4650      	mov	r0, sl
 800efa6:	4659      	mov	r1, fp
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	f7f1 fc7e 	bl	80008ac <__aeabi_ddiv>
 800efb0:	4682      	mov	sl, r0
 800efb2:	468b      	mov	fp, r1
 800efb4:	1124      	asrs	r4, r4, #4
 800efb6:	d0df      	beq.n	800ef78 <_strtod_l+0x520>
 800efb8:	2c1f      	cmp	r4, #31
 800efba:	dd1f      	ble.n	800effc <_strtod_l+0x5a4>
 800efbc:	2400      	movs	r4, #0
 800efbe:	46a0      	mov	r8, r4
 800efc0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800efc2:	46a1      	mov	r9, r4
 800efc4:	9a05      	ldr	r2, [sp, #20]
 800efc6:	2322      	movs	r3, #34	@ 0x22
 800efc8:	f04f 0a00 	mov.w	sl, #0
 800efcc:	f04f 0b00 	mov.w	fp, #0
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	e76b      	b.n	800eeac <_strtod_l+0x454>
 800efd4:	08011449 	.word	0x08011449
 800efd8:	08011710 	.word	0x08011710
 800efdc:	08011441 	.word	0x08011441
 800efe0:	08011478 	.word	0x08011478
 800efe4:	080115b1 	.word	0x080115b1
 800efe8:	08011648 	.word	0x08011648
 800efec:	08011620 	.word	0x08011620
 800eff0:	7ff00000 	.word	0x7ff00000
 800eff4:	7ca00000 	.word	0x7ca00000
 800eff8:	7fefffff 	.word	0x7fefffff
 800effc:	f014 0310 	ands.w	r3, r4, #16
 800f000:	bf18      	it	ne
 800f002:	236a      	movne	r3, #106	@ 0x6a
 800f004:	4ea9      	ldr	r6, [pc, #676]	@ (800f2ac <_strtod_l+0x854>)
 800f006:	9308      	str	r3, [sp, #32]
 800f008:	4650      	mov	r0, sl
 800f00a:	4659      	mov	r1, fp
 800f00c:	2300      	movs	r3, #0
 800f00e:	07e7      	lsls	r7, r4, #31
 800f010:	d504      	bpl.n	800f01c <_strtod_l+0x5c4>
 800f012:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f016:	f7f1 fb1f 	bl	8000658 <__aeabi_dmul>
 800f01a:	2301      	movs	r3, #1
 800f01c:	1064      	asrs	r4, r4, #1
 800f01e:	f106 0608 	add.w	r6, r6, #8
 800f022:	d1f4      	bne.n	800f00e <_strtod_l+0x5b6>
 800f024:	b10b      	cbz	r3, 800f02a <_strtod_l+0x5d2>
 800f026:	4682      	mov	sl, r0
 800f028:	468b      	mov	fp, r1
 800f02a:	9b08      	ldr	r3, [sp, #32]
 800f02c:	b1b3      	cbz	r3, 800f05c <_strtod_l+0x604>
 800f02e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f032:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f036:	2b00      	cmp	r3, #0
 800f038:	4659      	mov	r1, fp
 800f03a:	dd0f      	ble.n	800f05c <_strtod_l+0x604>
 800f03c:	2b1f      	cmp	r3, #31
 800f03e:	dd56      	ble.n	800f0ee <_strtod_l+0x696>
 800f040:	2b34      	cmp	r3, #52	@ 0x34
 800f042:	bfde      	ittt	le
 800f044:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f048:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f04c:	4093      	lslle	r3, r2
 800f04e:	f04f 0a00 	mov.w	sl, #0
 800f052:	bfcc      	ite	gt
 800f054:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f058:	ea03 0b01 	andle.w	fp, r3, r1
 800f05c:	2200      	movs	r2, #0
 800f05e:	2300      	movs	r3, #0
 800f060:	4650      	mov	r0, sl
 800f062:	4659      	mov	r1, fp
 800f064:	f7f1 fd60 	bl	8000b28 <__aeabi_dcmpeq>
 800f068:	2800      	cmp	r0, #0
 800f06a:	d1a7      	bne.n	800efbc <_strtod_l+0x564>
 800f06c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f072:	9805      	ldr	r0, [sp, #20]
 800f074:	462b      	mov	r3, r5
 800f076:	464a      	mov	r2, r9
 800f078:	f7ff f8ce 	bl	800e218 <__s2b>
 800f07c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f07e:	2800      	cmp	r0, #0
 800f080:	f43f af09 	beq.w	800ee96 <_strtod_l+0x43e>
 800f084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f088:	2a00      	cmp	r2, #0
 800f08a:	eba3 0308 	sub.w	r3, r3, r8
 800f08e:	bfa8      	it	ge
 800f090:	2300      	movge	r3, #0
 800f092:	9312      	str	r3, [sp, #72]	@ 0x48
 800f094:	2400      	movs	r4, #0
 800f096:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f09a:	9316      	str	r3, [sp, #88]	@ 0x58
 800f09c:	46a0      	mov	r8, r4
 800f09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0a0:	9805      	ldr	r0, [sp, #20]
 800f0a2:	6859      	ldr	r1, [r3, #4]
 800f0a4:	f7ff f810 	bl	800e0c8 <_Balloc>
 800f0a8:	4681      	mov	r9, r0
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	f43f aef7 	beq.w	800ee9e <_strtod_l+0x446>
 800f0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0b2:	691a      	ldr	r2, [r3, #16]
 800f0b4:	3202      	adds	r2, #2
 800f0b6:	f103 010c 	add.w	r1, r3, #12
 800f0ba:	0092      	lsls	r2, r2, #2
 800f0bc:	300c      	adds	r0, #12
 800f0be:	f7fe f894 	bl	800d1ea <memcpy>
 800f0c2:	ec4b ab10 	vmov	d0, sl, fp
 800f0c6:	9805      	ldr	r0, [sp, #20]
 800f0c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f0ca:	a91b      	add	r1, sp, #108	@ 0x6c
 800f0cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f0d0:	f7ff fbd6 	bl	800e880 <__d2b>
 800f0d4:	901a      	str	r0, [sp, #104]	@ 0x68
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	f43f aee1 	beq.w	800ee9e <_strtod_l+0x446>
 800f0dc:	9805      	ldr	r0, [sp, #20]
 800f0de:	2101      	movs	r1, #1
 800f0e0:	f7ff f930 	bl	800e344 <__i2b>
 800f0e4:	4680      	mov	r8, r0
 800f0e6:	b948      	cbnz	r0, 800f0fc <_strtod_l+0x6a4>
 800f0e8:	f04f 0800 	mov.w	r8, #0
 800f0ec:	e6d7      	b.n	800ee9e <_strtod_l+0x446>
 800f0ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f0f6:	ea03 0a0a 	and.w	sl, r3, sl
 800f0fa:	e7af      	b.n	800f05c <_strtod_l+0x604>
 800f0fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f0fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f100:	2d00      	cmp	r5, #0
 800f102:	bfab      	itete	ge
 800f104:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f106:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f108:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f10a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f10c:	bfac      	ite	ge
 800f10e:	18ef      	addge	r7, r5, r3
 800f110:	1b5e      	sublt	r6, r3, r5
 800f112:	9b08      	ldr	r3, [sp, #32]
 800f114:	1aed      	subs	r5, r5, r3
 800f116:	4415      	add	r5, r2
 800f118:	4b65      	ldr	r3, [pc, #404]	@ (800f2b0 <_strtod_l+0x858>)
 800f11a:	3d01      	subs	r5, #1
 800f11c:	429d      	cmp	r5, r3
 800f11e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f122:	da50      	bge.n	800f1c6 <_strtod_l+0x76e>
 800f124:	1b5b      	subs	r3, r3, r5
 800f126:	2b1f      	cmp	r3, #31
 800f128:	eba2 0203 	sub.w	r2, r2, r3
 800f12c:	f04f 0101 	mov.w	r1, #1
 800f130:	dc3d      	bgt.n	800f1ae <_strtod_l+0x756>
 800f132:	fa01 f303 	lsl.w	r3, r1, r3
 800f136:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f138:	2300      	movs	r3, #0
 800f13a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f13c:	18bd      	adds	r5, r7, r2
 800f13e:	9b08      	ldr	r3, [sp, #32]
 800f140:	42af      	cmp	r7, r5
 800f142:	4416      	add	r6, r2
 800f144:	441e      	add	r6, r3
 800f146:	463b      	mov	r3, r7
 800f148:	bfa8      	it	ge
 800f14a:	462b      	movge	r3, r5
 800f14c:	42b3      	cmp	r3, r6
 800f14e:	bfa8      	it	ge
 800f150:	4633      	movge	r3, r6
 800f152:	2b00      	cmp	r3, #0
 800f154:	bfc2      	ittt	gt
 800f156:	1aed      	subgt	r5, r5, r3
 800f158:	1af6      	subgt	r6, r6, r3
 800f15a:	1aff      	subgt	r7, r7, r3
 800f15c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f15e:	2b00      	cmp	r3, #0
 800f160:	dd16      	ble.n	800f190 <_strtod_l+0x738>
 800f162:	4641      	mov	r1, r8
 800f164:	9805      	ldr	r0, [sp, #20]
 800f166:	461a      	mov	r2, r3
 800f168:	f7ff f9a4 	bl	800e4b4 <__pow5mult>
 800f16c:	4680      	mov	r8, r0
 800f16e:	2800      	cmp	r0, #0
 800f170:	d0ba      	beq.n	800f0e8 <_strtod_l+0x690>
 800f172:	4601      	mov	r1, r0
 800f174:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f176:	9805      	ldr	r0, [sp, #20]
 800f178:	f7ff f8fa 	bl	800e370 <__multiply>
 800f17c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f17e:	2800      	cmp	r0, #0
 800f180:	f43f ae8d 	beq.w	800ee9e <_strtod_l+0x446>
 800f184:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f186:	9805      	ldr	r0, [sp, #20]
 800f188:	f7fe ffde 	bl	800e148 <_Bfree>
 800f18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f18e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f190:	2d00      	cmp	r5, #0
 800f192:	dc1d      	bgt.n	800f1d0 <_strtod_l+0x778>
 800f194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f196:	2b00      	cmp	r3, #0
 800f198:	dd23      	ble.n	800f1e2 <_strtod_l+0x78a>
 800f19a:	4649      	mov	r1, r9
 800f19c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f19e:	9805      	ldr	r0, [sp, #20]
 800f1a0:	f7ff f988 	bl	800e4b4 <__pow5mult>
 800f1a4:	4681      	mov	r9, r0
 800f1a6:	b9e0      	cbnz	r0, 800f1e2 <_strtod_l+0x78a>
 800f1a8:	f04f 0900 	mov.w	r9, #0
 800f1ac:	e677      	b.n	800ee9e <_strtod_l+0x446>
 800f1ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f1b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f1b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f1ba:	35e2      	adds	r5, #226	@ 0xe2
 800f1bc:	fa01 f305 	lsl.w	r3, r1, r5
 800f1c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f1c4:	e7ba      	b.n	800f13c <_strtod_l+0x6e4>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1ce:	e7b5      	b.n	800f13c <_strtod_l+0x6e4>
 800f1d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1d2:	9805      	ldr	r0, [sp, #20]
 800f1d4:	462a      	mov	r2, r5
 800f1d6:	f7ff f9c7 	bl	800e568 <__lshift>
 800f1da:	901a      	str	r0, [sp, #104]	@ 0x68
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d1d9      	bne.n	800f194 <_strtod_l+0x73c>
 800f1e0:	e65d      	b.n	800ee9e <_strtod_l+0x446>
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	dd07      	ble.n	800f1f6 <_strtod_l+0x79e>
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	9805      	ldr	r0, [sp, #20]
 800f1ea:	4632      	mov	r2, r6
 800f1ec:	f7ff f9bc 	bl	800e568 <__lshift>
 800f1f0:	4681      	mov	r9, r0
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d0d8      	beq.n	800f1a8 <_strtod_l+0x750>
 800f1f6:	2f00      	cmp	r7, #0
 800f1f8:	dd08      	ble.n	800f20c <_strtod_l+0x7b4>
 800f1fa:	4641      	mov	r1, r8
 800f1fc:	9805      	ldr	r0, [sp, #20]
 800f1fe:	463a      	mov	r2, r7
 800f200:	f7ff f9b2 	bl	800e568 <__lshift>
 800f204:	4680      	mov	r8, r0
 800f206:	2800      	cmp	r0, #0
 800f208:	f43f ae49 	beq.w	800ee9e <_strtod_l+0x446>
 800f20c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f20e:	9805      	ldr	r0, [sp, #20]
 800f210:	464a      	mov	r2, r9
 800f212:	f7ff fa31 	bl	800e678 <__mdiff>
 800f216:	4604      	mov	r4, r0
 800f218:	2800      	cmp	r0, #0
 800f21a:	f43f ae40 	beq.w	800ee9e <_strtod_l+0x446>
 800f21e:	68c3      	ldr	r3, [r0, #12]
 800f220:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f222:	2300      	movs	r3, #0
 800f224:	60c3      	str	r3, [r0, #12]
 800f226:	4641      	mov	r1, r8
 800f228:	f7ff fa0a 	bl	800e640 <__mcmp>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	da45      	bge.n	800f2bc <_strtod_l+0x864>
 800f230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f232:	ea53 030a 	orrs.w	r3, r3, sl
 800f236:	d16b      	bne.n	800f310 <_strtod_l+0x8b8>
 800f238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d167      	bne.n	800f310 <_strtod_l+0x8b8>
 800f240:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f244:	0d1b      	lsrs	r3, r3, #20
 800f246:	051b      	lsls	r3, r3, #20
 800f248:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f24c:	d960      	bls.n	800f310 <_strtod_l+0x8b8>
 800f24e:	6963      	ldr	r3, [r4, #20]
 800f250:	b913      	cbnz	r3, 800f258 <_strtod_l+0x800>
 800f252:	6923      	ldr	r3, [r4, #16]
 800f254:	2b01      	cmp	r3, #1
 800f256:	dd5b      	ble.n	800f310 <_strtod_l+0x8b8>
 800f258:	4621      	mov	r1, r4
 800f25a:	2201      	movs	r2, #1
 800f25c:	9805      	ldr	r0, [sp, #20]
 800f25e:	f7ff f983 	bl	800e568 <__lshift>
 800f262:	4641      	mov	r1, r8
 800f264:	4604      	mov	r4, r0
 800f266:	f7ff f9eb 	bl	800e640 <__mcmp>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	dd50      	ble.n	800f310 <_strtod_l+0x8b8>
 800f26e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f272:	9a08      	ldr	r2, [sp, #32]
 800f274:	0d1b      	lsrs	r3, r3, #20
 800f276:	051b      	lsls	r3, r3, #20
 800f278:	2a00      	cmp	r2, #0
 800f27a:	d06a      	beq.n	800f352 <_strtod_l+0x8fa>
 800f27c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f280:	d867      	bhi.n	800f352 <_strtod_l+0x8fa>
 800f282:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f286:	f67f ae9d 	bls.w	800efc4 <_strtod_l+0x56c>
 800f28a:	4b0a      	ldr	r3, [pc, #40]	@ (800f2b4 <_strtod_l+0x85c>)
 800f28c:	4650      	mov	r0, sl
 800f28e:	4659      	mov	r1, fp
 800f290:	2200      	movs	r2, #0
 800f292:	f7f1 f9e1 	bl	8000658 <__aeabi_dmul>
 800f296:	4b08      	ldr	r3, [pc, #32]	@ (800f2b8 <_strtod_l+0x860>)
 800f298:	400b      	ands	r3, r1
 800f29a:	4682      	mov	sl, r0
 800f29c:	468b      	mov	fp, r1
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f47f ae08 	bne.w	800eeb4 <_strtod_l+0x45c>
 800f2a4:	9a05      	ldr	r2, [sp, #20]
 800f2a6:	2322      	movs	r3, #34	@ 0x22
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	e603      	b.n	800eeb4 <_strtod_l+0x45c>
 800f2ac:	08011738 	.word	0x08011738
 800f2b0:	fffffc02 	.word	0xfffffc02
 800f2b4:	39500000 	.word	0x39500000
 800f2b8:	7ff00000 	.word	0x7ff00000
 800f2bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f2c0:	d165      	bne.n	800f38e <_strtod_l+0x936>
 800f2c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f2c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2c8:	b35a      	cbz	r2, 800f322 <_strtod_l+0x8ca>
 800f2ca:	4a9f      	ldr	r2, [pc, #636]	@ (800f548 <_strtod_l+0xaf0>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d12b      	bne.n	800f328 <_strtod_l+0x8d0>
 800f2d0:	9b08      	ldr	r3, [sp, #32]
 800f2d2:	4651      	mov	r1, sl
 800f2d4:	b303      	cbz	r3, 800f318 <_strtod_l+0x8c0>
 800f2d6:	4b9d      	ldr	r3, [pc, #628]	@ (800f54c <_strtod_l+0xaf4>)
 800f2d8:	465a      	mov	r2, fp
 800f2da:	4013      	ands	r3, r2
 800f2dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f2e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f2e4:	d81b      	bhi.n	800f31e <_strtod_l+0x8c6>
 800f2e6:	0d1b      	lsrs	r3, r3, #20
 800f2e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f0:	4299      	cmp	r1, r3
 800f2f2:	d119      	bne.n	800f328 <_strtod_l+0x8d0>
 800f2f4:	4b96      	ldr	r3, [pc, #600]	@ (800f550 <_strtod_l+0xaf8>)
 800f2f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d102      	bne.n	800f302 <_strtod_l+0x8aa>
 800f2fc:	3101      	adds	r1, #1
 800f2fe:	f43f adce 	beq.w	800ee9e <_strtod_l+0x446>
 800f302:	4b92      	ldr	r3, [pc, #584]	@ (800f54c <_strtod_l+0xaf4>)
 800f304:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f306:	401a      	ands	r2, r3
 800f308:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f30c:	f04f 0a00 	mov.w	sl, #0
 800f310:	9b08      	ldr	r3, [sp, #32]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d1b9      	bne.n	800f28a <_strtod_l+0x832>
 800f316:	e5cd      	b.n	800eeb4 <_strtod_l+0x45c>
 800f318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f31c:	e7e8      	b.n	800f2f0 <_strtod_l+0x898>
 800f31e:	4613      	mov	r3, r2
 800f320:	e7e6      	b.n	800f2f0 <_strtod_l+0x898>
 800f322:	ea53 030a 	orrs.w	r3, r3, sl
 800f326:	d0a2      	beq.n	800f26e <_strtod_l+0x816>
 800f328:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f32a:	b1db      	cbz	r3, 800f364 <_strtod_l+0x90c>
 800f32c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f32e:	4213      	tst	r3, r2
 800f330:	d0ee      	beq.n	800f310 <_strtod_l+0x8b8>
 800f332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f334:	9a08      	ldr	r2, [sp, #32]
 800f336:	4650      	mov	r0, sl
 800f338:	4659      	mov	r1, fp
 800f33a:	b1bb      	cbz	r3, 800f36c <_strtod_l+0x914>
 800f33c:	f7ff fb6e 	bl	800ea1c <sulp>
 800f340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f344:	ec53 2b10 	vmov	r2, r3, d0
 800f348:	f7f0 ffd0 	bl	80002ec <__adddf3>
 800f34c:	4682      	mov	sl, r0
 800f34e:	468b      	mov	fp, r1
 800f350:	e7de      	b.n	800f310 <_strtod_l+0x8b8>
 800f352:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f356:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f35a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f35e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f362:	e7d5      	b.n	800f310 <_strtod_l+0x8b8>
 800f364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f366:	ea13 0f0a 	tst.w	r3, sl
 800f36a:	e7e1      	b.n	800f330 <_strtod_l+0x8d8>
 800f36c:	f7ff fb56 	bl	800ea1c <sulp>
 800f370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f374:	ec53 2b10 	vmov	r2, r3, d0
 800f378:	f7f0 ffb6 	bl	80002e8 <__aeabi_dsub>
 800f37c:	2200      	movs	r2, #0
 800f37e:	2300      	movs	r3, #0
 800f380:	4682      	mov	sl, r0
 800f382:	468b      	mov	fp, r1
 800f384:	f7f1 fbd0 	bl	8000b28 <__aeabi_dcmpeq>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d0c1      	beq.n	800f310 <_strtod_l+0x8b8>
 800f38c:	e61a      	b.n	800efc4 <_strtod_l+0x56c>
 800f38e:	4641      	mov	r1, r8
 800f390:	4620      	mov	r0, r4
 800f392:	f7ff facd 	bl	800e930 <__ratio>
 800f396:	ec57 6b10 	vmov	r6, r7, d0
 800f39a:	2200      	movs	r2, #0
 800f39c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f1 fbd4 	bl	8000b50 <__aeabi_dcmple>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d06f      	beq.n	800f48c <_strtod_l+0xa34>
 800f3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d17a      	bne.n	800f4a8 <_strtod_l+0xa50>
 800f3b2:	f1ba 0f00 	cmp.w	sl, #0
 800f3b6:	d158      	bne.n	800f46a <_strtod_l+0xa12>
 800f3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d15a      	bne.n	800f478 <_strtod_l+0xa20>
 800f3c2:	4b64      	ldr	r3, [pc, #400]	@ (800f554 <_strtod_l+0xafc>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	4639      	mov	r1, r7
 800f3ca:	f7f1 fbb7 	bl	8000b3c <__aeabi_dcmplt>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d159      	bne.n	800f486 <_strtod_l+0xa2e>
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	4639      	mov	r1, r7
 800f3d6:	4b60      	ldr	r3, [pc, #384]	@ (800f558 <_strtod_l+0xb00>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f7f1 f93d 	bl	8000658 <__aeabi_dmul>
 800f3de:	4606      	mov	r6, r0
 800f3e0:	460f      	mov	r7, r1
 800f3e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f3e6:	9606      	str	r6, [sp, #24]
 800f3e8:	9307      	str	r3, [sp, #28]
 800f3ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3ee:	4d57      	ldr	r5, [pc, #348]	@ (800f54c <_strtod_l+0xaf4>)
 800f3f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3f6:	401d      	ands	r5, r3
 800f3f8:	4b58      	ldr	r3, [pc, #352]	@ (800f55c <_strtod_l+0xb04>)
 800f3fa:	429d      	cmp	r5, r3
 800f3fc:	f040 80b2 	bne.w	800f564 <_strtod_l+0xb0c>
 800f400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f402:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f406:	ec4b ab10 	vmov	d0, sl, fp
 800f40a:	f7ff f9c9 	bl	800e7a0 <__ulp>
 800f40e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f412:	ec51 0b10 	vmov	r0, r1, d0
 800f416:	f7f1 f91f 	bl	8000658 <__aeabi_dmul>
 800f41a:	4652      	mov	r2, sl
 800f41c:	465b      	mov	r3, fp
 800f41e:	f7f0 ff65 	bl	80002ec <__adddf3>
 800f422:	460b      	mov	r3, r1
 800f424:	4949      	ldr	r1, [pc, #292]	@ (800f54c <_strtod_l+0xaf4>)
 800f426:	4a4e      	ldr	r2, [pc, #312]	@ (800f560 <_strtod_l+0xb08>)
 800f428:	4019      	ands	r1, r3
 800f42a:	4291      	cmp	r1, r2
 800f42c:	4682      	mov	sl, r0
 800f42e:	d942      	bls.n	800f4b6 <_strtod_l+0xa5e>
 800f430:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f432:	4b47      	ldr	r3, [pc, #284]	@ (800f550 <_strtod_l+0xaf8>)
 800f434:	429a      	cmp	r2, r3
 800f436:	d103      	bne.n	800f440 <_strtod_l+0x9e8>
 800f438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f43a:	3301      	adds	r3, #1
 800f43c:	f43f ad2f 	beq.w	800ee9e <_strtod_l+0x446>
 800f440:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f550 <_strtod_l+0xaf8>
 800f444:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f44a:	9805      	ldr	r0, [sp, #20]
 800f44c:	f7fe fe7c 	bl	800e148 <_Bfree>
 800f450:	9805      	ldr	r0, [sp, #20]
 800f452:	4649      	mov	r1, r9
 800f454:	f7fe fe78 	bl	800e148 <_Bfree>
 800f458:	9805      	ldr	r0, [sp, #20]
 800f45a:	4641      	mov	r1, r8
 800f45c:	f7fe fe74 	bl	800e148 <_Bfree>
 800f460:	9805      	ldr	r0, [sp, #20]
 800f462:	4621      	mov	r1, r4
 800f464:	f7fe fe70 	bl	800e148 <_Bfree>
 800f468:	e619      	b.n	800f09e <_strtod_l+0x646>
 800f46a:	f1ba 0f01 	cmp.w	sl, #1
 800f46e:	d103      	bne.n	800f478 <_strtod_l+0xa20>
 800f470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f472:	2b00      	cmp	r3, #0
 800f474:	f43f ada6 	beq.w	800efc4 <_strtod_l+0x56c>
 800f478:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f528 <_strtod_l+0xad0>
 800f47c:	4f35      	ldr	r7, [pc, #212]	@ (800f554 <_strtod_l+0xafc>)
 800f47e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f482:	2600      	movs	r6, #0
 800f484:	e7b1      	b.n	800f3ea <_strtod_l+0x992>
 800f486:	4f34      	ldr	r7, [pc, #208]	@ (800f558 <_strtod_l+0xb00>)
 800f488:	2600      	movs	r6, #0
 800f48a:	e7aa      	b.n	800f3e2 <_strtod_l+0x98a>
 800f48c:	4b32      	ldr	r3, [pc, #200]	@ (800f558 <_strtod_l+0xb00>)
 800f48e:	4630      	mov	r0, r6
 800f490:	4639      	mov	r1, r7
 800f492:	2200      	movs	r2, #0
 800f494:	f7f1 f8e0 	bl	8000658 <__aeabi_dmul>
 800f498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f49a:	4606      	mov	r6, r0
 800f49c:	460f      	mov	r7, r1
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d09f      	beq.n	800f3e2 <_strtod_l+0x98a>
 800f4a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f4a6:	e7a0      	b.n	800f3ea <_strtod_l+0x992>
 800f4a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f530 <_strtod_l+0xad8>
 800f4ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f4b0:	ec57 6b17 	vmov	r6, r7, d7
 800f4b4:	e799      	b.n	800f3ea <_strtod_l+0x992>
 800f4b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f4ba:	9b08      	ldr	r3, [sp, #32]
 800f4bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1c1      	bne.n	800f448 <_strtod_l+0x9f0>
 800f4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4c8:	0d1b      	lsrs	r3, r3, #20
 800f4ca:	051b      	lsls	r3, r3, #20
 800f4cc:	429d      	cmp	r5, r3
 800f4ce:	d1bb      	bne.n	800f448 <_strtod_l+0x9f0>
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f1 fc20 	bl	8000d18 <__aeabi_d2lz>
 800f4d8:	f7f1 f890 	bl	80005fc <__aeabi_l2d>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	460b      	mov	r3, r1
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	4639      	mov	r1, r7
 800f4e4:	f7f0 ff00 	bl	80002e8 <__aeabi_dsub>
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f4f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4f6:	ea46 060a 	orr.w	r6, r6, sl
 800f4fa:	431e      	orrs	r6, r3
 800f4fc:	d06f      	beq.n	800f5de <_strtod_l+0xb86>
 800f4fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800f538 <_strtod_l+0xae0>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f1 fb1a 	bl	8000b3c <__aeabi_dcmplt>
 800f508:	2800      	cmp	r0, #0
 800f50a:	f47f acd3 	bne.w	800eeb4 <_strtod_l+0x45c>
 800f50e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f540 <_strtod_l+0xae8>)
 800f510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f518:	f7f1 fb2e 	bl	8000b78 <__aeabi_dcmpgt>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d093      	beq.n	800f448 <_strtod_l+0x9f0>
 800f520:	e4c8      	b.n	800eeb4 <_strtod_l+0x45c>
 800f522:	bf00      	nop
 800f524:	f3af 8000 	nop.w
 800f528:	00000000 	.word	0x00000000
 800f52c:	bff00000 	.word	0xbff00000
 800f530:	00000000 	.word	0x00000000
 800f534:	3ff00000 	.word	0x3ff00000
 800f538:	94a03595 	.word	0x94a03595
 800f53c:	3fdfffff 	.word	0x3fdfffff
 800f540:	35afe535 	.word	0x35afe535
 800f544:	3fe00000 	.word	0x3fe00000
 800f548:	000fffff 	.word	0x000fffff
 800f54c:	7ff00000 	.word	0x7ff00000
 800f550:	7fefffff 	.word	0x7fefffff
 800f554:	3ff00000 	.word	0x3ff00000
 800f558:	3fe00000 	.word	0x3fe00000
 800f55c:	7fe00000 	.word	0x7fe00000
 800f560:	7c9fffff 	.word	0x7c9fffff
 800f564:	9b08      	ldr	r3, [sp, #32]
 800f566:	b323      	cbz	r3, 800f5b2 <_strtod_l+0xb5a>
 800f568:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f56c:	d821      	bhi.n	800f5b2 <_strtod_l+0xb5a>
 800f56e:	a328      	add	r3, pc, #160	@ (adr r3, 800f610 <_strtod_l+0xbb8>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	4630      	mov	r0, r6
 800f576:	4639      	mov	r1, r7
 800f578:	f7f1 faea 	bl	8000b50 <__aeabi_dcmple>
 800f57c:	b1a0      	cbz	r0, 800f5a8 <_strtod_l+0xb50>
 800f57e:	4639      	mov	r1, r7
 800f580:	4630      	mov	r0, r6
 800f582:	f7f1 fb41 	bl	8000c08 <__aeabi_d2uiz>
 800f586:	2801      	cmp	r0, #1
 800f588:	bf38      	it	cc
 800f58a:	2001      	movcc	r0, #1
 800f58c:	f7f0 ffea 	bl	8000564 <__aeabi_ui2d>
 800f590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f592:	4606      	mov	r6, r0
 800f594:	460f      	mov	r7, r1
 800f596:	b9fb      	cbnz	r3, 800f5d8 <_strtod_l+0xb80>
 800f598:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f59c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f59e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f5a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f5a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f5a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f5aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f5ae:	1b5b      	subs	r3, r3, r5
 800f5b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f5b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f5b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f5ba:	f7ff f8f1 	bl	800e7a0 <__ulp>
 800f5be:	4650      	mov	r0, sl
 800f5c0:	ec53 2b10 	vmov	r2, r3, d0
 800f5c4:	4659      	mov	r1, fp
 800f5c6:	f7f1 f847 	bl	8000658 <__aeabi_dmul>
 800f5ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f5ce:	f7f0 fe8d 	bl	80002ec <__adddf3>
 800f5d2:	4682      	mov	sl, r0
 800f5d4:	468b      	mov	fp, r1
 800f5d6:	e770      	b.n	800f4ba <_strtod_l+0xa62>
 800f5d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f5dc:	e7e0      	b.n	800f5a0 <_strtod_l+0xb48>
 800f5de:	a30e      	add	r3, pc, #56	@ (adr r3, 800f618 <_strtod_l+0xbc0>)
 800f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e4:	f7f1 faaa 	bl	8000b3c <__aeabi_dcmplt>
 800f5e8:	e798      	b.n	800f51c <_strtod_l+0xac4>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800f5ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f5f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	f7ff ba6d 	b.w	800ead2 <_strtod_l+0x7a>
 800f5f8:	2a65      	cmp	r2, #101	@ 0x65
 800f5fa:	f43f ab68 	beq.w	800ecce <_strtod_l+0x276>
 800f5fe:	2a45      	cmp	r2, #69	@ 0x45
 800f600:	f43f ab65 	beq.w	800ecce <_strtod_l+0x276>
 800f604:	2301      	movs	r3, #1
 800f606:	f7ff bba0 	b.w	800ed4a <_strtod_l+0x2f2>
 800f60a:	bf00      	nop
 800f60c:	f3af 8000 	nop.w
 800f610:	ffc00000 	.word	0xffc00000
 800f614:	41dfffff 	.word	0x41dfffff
 800f618:	94a03595 	.word	0x94a03595
 800f61c:	3fcfffff 	.word	0x3fcfffff

0800f620 <_strtod_r>:
 800f620:	4b01      	ldr	r3, [pc, #4]	@ (800f628 <_strtod_r+0x8>)
 800f622:	f7ff ba19 	b.w	800ea58 <_strtod_l>
 800f626:	bf00      	nop
 800f628:	20000428 	.word	0x20000428

0800f62c <_strtol_l.isra.0>:
 800f62c:	2b24      	cmp	r3, #36	@ 0x24
 800f62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f632:	4686      	mov	lr, r0
 800f634:	4690      	mov	r8, r2
 800f636:	d801      	bhi.n	800f63c <_strtol_l.isra.0+0x10>
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d106      	bne.n	800f64a <_strtol_l.isra.0+0x1e>
 800f63c:	f7fd fda8 	bl	800d190 <__errno>
 800f640:	2316      	movs	r3, #22
 800f642:	6003      	str	r3, [r0, #0]
 800f644:	2000      	movs	r0, #0
 800f646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64a:	4834      	ldr	r0, [pc, #208]	@ (800f71c <_strtol_l.isra.0+0xf0>)
 800f64c:	460d      	mov	r5, r1
 800f64e:	462a      	mov	r2, r5
 800f650:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f654:	5d06      	ldrb	r6, [r0, r4]
 800f656:	f016 0608 	ands.w	r6, r6, #8
 800f65a:	d1f8      	bne.n	800f64e <_strtol_l.isra.0+0x22>
 800f65c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f65e:	d110      	bne.n	800f682 <_strtol_l.isra.0+0x56>
 800f660:	782c      	ldrb	r4, [r5, #0]
 800f662:	2601      	movs	r6, #1
 800f664:	1c95      	adds	r5, r2, #2
 800f666:	f033 0210 	bics.w	r2, r3, #16
 800f66a:	d115      	bne.n	800f698 <_strtol_l.isra.0+0x6c>
 800f66c:	2c30      	cmp	r4, #48	@ 0x30
 800f66e:	d10d      	bne.n	800f68c <_strtol_l.isra.0+0x60>
 800f670:	782a      	ldrb	r2, [r5, #0]
 800f672:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f676:	2a58      	cmp	r2, #88	@ 0x58
 800f678:	d108      	bne.n	800f68c <_strtol_l.isra.0+0x60>
 800f67a:	786c      	ldrb	r4, [r5, #1]
 800f67c:	3502      	adds	r5, #2
 800f67e:	2310      	movs	r3, #16
 800f680:	e00a      	b.n	800f698 <_strtol_l.isra.0+0x6c>
 800f682:	2c2b      	cmp	r4, #43	@ 0x2b
 800f684:	bf04      	itt	eq
 800f686:	782c      	ldrbeq	r4, [r5, #0]
 800f688:	1c95      	addeq	r5, r2, #2
 800f68a:	e7ec      	b.n	800f666 <_strtol_l.isra.0+0x3a>
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1f6      	bne.n	800f67e <_strtol_l.isra.0+0x52>
 800f690:	2c30      	cmp	r4, #48	@ 0x30
 800f692:	bf14      	ite	ne
 800f694:	230a      	movne	r3, #10
 800f696:	2308      	moveq	r3, #8
 800f698:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f69c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	fbbc f9f3 	udiv	r9, ip, r3
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800f6ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f6b0:	2f09      	cmp	r7, #9
 800f6b2:	d80f      	bhi.n	800f6d4 <_strtol_l.isra.0+0xa8>
 800f6b4:	463c      	mov	r4, r7
 800f6b6:	42a3      	cmp	r3, r4
 800f6b8:	dd1b      	ble.n	800f6f2 <_strtol_l.isra.0+0xc6>
 800f6ba:	1c57      	adds	r7, r2, #1
 800f6bc:	d007      	beq.n	800f6ce <_strtol_l.isra.0+0xa2>
 800f6be:	4581      	cmp	r9, r0
 800f6c0:	d314      	bcc.n	800f6ec <_strtol_l.isra.0+0xc0>
 800f6c2:	d101      	bne.n	800f6c8 <_strtol_l.isra.0+0x9c>
 800f6c4:	45a2      	cmp	sl, r4
 800f6c6:	db11      	blt.n	800f6ec <_strtol_l.isra.0+0xc0>
 800f6c8:	fb00 4003 	mla	r0, r0, r3, r4
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6d2:	e7eb      	b.n	800f6ac <_strtol_l.isra.0+0x80>
 800f6d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f6d8:	2f19      	cmp	r7, #25
 800f6da:	d801      	bhi.n	800f6e0 <_strtol_l.isra.0+0xb4>
 800f6dc:	3c37      	subs	r4, #55	@ 0x37
 800f6de:	e7ea      	b.n	800f6b6 <_strtol_l.isra.0+0x8a>
 800f6e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f6e4:	2f19      	cmp	r7, #25
 800f6e6:	d804      	bhi.n	800f6f2 <_strtol_l.isra.0+0xc6>
 800f6e8:	3c57      	subs	r4, #87	@ 0x57
 800f6ea:	e7e4      	b.n	800f6b6 <_strtol_l.isra.0+0x8a>
 800f6ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f6f0:	e7ed      	b.n	800f6ce <_strtol_l.isra.0+0xa2>
 800f6f2:	1c53      	adds	r3, r2, #1
 800f6f4:	d108      	bne.n	800f708 <_strtol_l.isra.0+0xdc>
 800f6f6:	2322      	movs	r3, #34	@ 0x22
 800f6f8:	f8ce 3000 	str.w	r3, [lr]
 800f6fc:	4660      	mov	r0, ip
 800f6fe:	f1b8 0f00 	cmp.w	r8, #0
 800f702:	d0a0      	beq.n	800f646 <_strtol_l.isra.0+0x1a>
 800f704:	1e69      	subs	r1, r5, #1
 800f706:	e006      	b.n	800f716 <_strtol_l.isra.0+0xea>
 800f708:	b106      	cbz	r6, 800f70c <_strtol_l.isra.0+0xe0>
 800f70a:	4240      	negs	r0, r0
 800f70c:	f1b8 0f00 	cmp.w	r8, #0
 800f710:	d099      	beq.n	800f646 <_strtol_l.isra.0+0x1a>
 800f712:	2a00      	cmp	r2, #0
 800f714:	d1f6      	bne.n	800f704 <_strtol_l.isra.0+0xd8>
 800f716:	f8c8 1000 	str.w	r1, [r8]
 800f71a:	e794      	b.n	800f646 <_strtol_l.isra.0+0x1a>
 800f71c:	08011761 	.word	0x08011761

0800f720 <_strtol_r>:
 800f720:	f7ff bf84 	b.w	800f62c <_strtol_l.isra.0>

0800f724 <__ssputs_r>:
 800f724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f728:	688e      	ldr	r6, [r1, #8]
 800f72a:	461f      	mov	r7, r3
 800f72c:	42be      	cmp	r6, r7
 800f72e:	680b      	ldr	r3, [r1, #0]
 800f730:	4682      	mov	sl, r0
 800f732:	460c      	mov	r4, r1
 800f734:	4690      	mov	r8, r2
 800f736:	d82d      	bhi.n	800f794 <__ssputs_r+0x70>
 800f738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f73c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f740:	d026      	beq.n	800f790 <__ssputs_r+0x6c>
 800f742:	6965      	ldr	r5, [r4, #20]
 800f744:	6909      	ldr	r1, [r1, #16]
 800f746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f74a:	eba3 0901 	sub.w	r9, r3, r1
 800f74e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f752:	1c7b      	adds	r3, r7, #1
 800f754:	444b      	add	r3, r9
 800f756:	106d      	asrs	r5, r5, #1
 800f758:	429d      	cmp	r5, r3
 800f75a:	bf38      	it	cc
 800f75c:	461d      	movcc	r5, r3
 800f75e:	0553      	lsls	r3, r2, #21
 800f760:	d527      	bpl.n	800f7b2 <__ssputs_r+0x8e>
 800f762:	4629      	mov	r1, r5
 800f764:	f7fe fc24 	bl	800dfb0 <_malloc_r>
 800f768:	4606      	mov	r6, r0
 800f76a:	b360      	cbz	r0, 800f7c6 <__ssputs_r+0xa2>
 800f76c:	6921      	ldr	r1, [r4, #16]
 800f76e:	464a      	mov	r2, r9
 800f770:	f7fd fd3b 	bl	800d1ea <memcpy>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	6126      	str	r6, [r4, #16]
 800f782:	6165      	str	r5, [r4, #20]
 800f784:	444e      	add	r6, r9
 800f786:	eba5 0509 	sub.w	r5, r5, r9
 800f78a:	6026      	str	r6, [r4, #0]
 800f78c:	60a5      	str	r5, [r4, #8]
 800f78e:	463e      	mov	r6, r7
 800f790:	42be      	cmp	r6, r7
 800f792:	d900      	bls.n	800f796 <__ssputs_r+0x72>
 800f794:	463e      	mov	r6, r7
 800f796:	6820      	ldr	r0, [r4, #0]
 800f798:	4632      	mov	r2, r6
 800f79a:	4641      	mov	r1, r8
 800f79c:	f000 f9c6 	bl	800fb2c <memmove>
 800f7a0:	68a3      	ldr	r3, [r4, #8]
 800f7a2:	1b9b      	subs	r3, r3, r6
 800f7a4:	60a3      	str	r3, [r4, #8]
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	4433      	add	r3, r6
 800f7aa:	6023      	str	r3, [r4, #0]
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	f000 fd7d 	bl	80102b2 <_realloc_r>
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d1e0      	bne.n	800f780 <__ssputs_r+0x5c>
 800f7be:	6921      	ldr	r1, [r4, #16]
 800f7c0:	4650      	mov	r0, sl
 800f7c2:	f7fe fb81 	bl	800dec8 <_free_r>
 800f7c6:	230c      	movs	r3, #12
 800f7c8:	f8ca 3000 	str.w	r3, [sl]
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7d2:	81a3      	strh	r3, [r4, #12]
 800f7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7d8:	e7e9      	b.n	800f7ae <__ssputs_r+0x8a>
	...

0800f7dc <_svfiprintf_r>:
 800f7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e0:	4698      	mov	r8, r3
 800f7e2:	898b      	ldrh	r3, [r1, #12]
 800f7e4:	061b      	lsls	r3, r3, #24
 800f7e6:	b09d      	sub	sp, #116	@ 0x74
 800f7e8:	4607      	mov	r7, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	4614      	mov	r4, r2
 800f7ee:	d510      	bpl.n	800f812 <_svfiprintf_r+0x36>
 800f7f0:	690b      	ldr	r3, [r1, #16]
 800f7f2:	b973      	cbnz	r3, 800f812 <_svfiprintf_r+0x36>
 800f7f4:	2140      	movs	r1, #64	@ 0x40
 800f7f6:	f7fe fbdb 	bl	800dfb0 <_malloc_r>
 800f7fa:	6028      	str	r0, [r5, #0]
 800f7fc:	6128      	str	r0, [r5, #16]
 800f7fe:	b930      	cbnz	r0, 800f80e <_svfiprintf_r+0x32>
 800f800:	230c      	movs	r3, #12
 800f802:	603b      	str	r3, [r7, #0]
 800f804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f808:	b01d      	add	sp, #116	@ 0x74
 800f80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80e:	2340      	movs	r3, #64	@ 0x40
 800f810:	616b      	str	r3, [r5, #20]
 800f812:	2300      	movs	r3, #0
 800f814:	9309      	str	r3, [sp, #36]	@ 0x24
 800f816:	2320      	movs	r3, #32
 800f818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f820:	2330      	movs	r3, #48	@ 0x30
 800f822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f9c0 <_svfiprintf_r+0x1e4>
 800f826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f82a:	f04f 0901 	mov.w	r9, #1
 800f82e:	4623      	mov	r3, r4
 800f830:	469a      	mov	sl, r3
 800f832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f836:	b10a      	cbz	r2, 800f83c <_svfiprintf_r+0x60>
 800f838:	2a25      	cmp	r2, #37	@ 0x25
 800f83a:	d1f9      	bne.n	800f830 <_svfiprintf_r+0x54>
 800f83c:	ebba 0b04 	subs.w	fp, sl, r4
 800f840:	d00b      	beq.n	800f85a <_svfiprintf_r+0x7e>
 800f842:	465b      	mov	r3, fp
 800f844:	4622      	mov	r2, r4
 800f846:	4629      	mov	r1, r5
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff ff6b 	bl	800f724 <__ssputs_r>
 800f84e:	3001      	adds	r0, #1
 800f850:	f000 80a7 	beq.w	800f9a2 <_svfiprintf_r+0x1c6>
 800f854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f856:	445a      	add	r2, fp
 800f858:	9209      	str	r2, [sp, #36]	@ 0x24
 800f85a:	f89a 3000 	ldrb.w	r3, [sl]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f000 809f 	beq.w	800f9a2 <_svfiprintf_r+0x1c6>
 800f864:	2300      	movs	r3, #0
 800f866:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f86e:	f10a 0a01 	add.w	sl, sl, #1
 800f872:	9304      	str	r3, [sp, #16]
 800f874:	9307      	str	r3, [sp, #28]
 800f876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f87a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f87c:	4654      	mov	r4, sl
 800f87e:	2205      	movs	r2, #5
 800f880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f884:	484e      	ldr	r0, [pc, #312]	@ (800f9c0 <_svfiprintf_r+0x1e4>)
 800f886:	f7f0 fcd3 	bl	8000230 <memchr>
 800f88a:	9a04      	ldr	r2, [sp, #16]
 800f88c:	b9d8      	cbnz	r0, 800f8c6 <_svfiprintf_r+0xea>
 800f88e:	06d0      	lsls	r0, r2, #27
 800f890:	bf44      	itt	mi
 800f892:	2320      	movmi	r3, #32
 800f894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f898:	0711      	lsls	r1, r2, #28
 800f89a:	bf44      	itt	mi
 800f89c:	232b      	movmi	r3, #43	@ 0x2b
 800f89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8a8:	d015      	beq.n	800f8d6 <_svfiprintf_r+0xfa>
 800f8aa:	9a07      	ldr	r2, [sp, #28]
 800f8ac:	4654      	mov	r4, sl
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	f04f 0c0a 	mov.w	ip, #10
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8ba:	3b30      	subs	r3, #48	@ 0x30
 800f8bc:	2b09      	cmp	r3, #9
 800f8be:	d94b      	bls.n	800f958 <_svfiprintf_r+0x17c>
 800f8c0:	b1b0      	cbz	r0, 800f8f0 <_svfiprintf_r+0x114>
 800f8c2:	9207      	str	r2, [sp, #28]
 800f8c4:	e014      	b.n	800f8f0 <_svfiprintf_r+0x114>
 800f8c6:	eba0 0308 	sub.w	r3, r0, r8
 800f8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	9304      	str	r3, [sp, #16]
 800f8d2:	46a2      	mov	sl, r4
 800f8d4:	e7d2      	b.n	800f87c <_svfiprintf_r+0xa0>
 800f8d6:	9b03      	ldr	r3, [sp, #12]
 800f8d8:	1d19      	adds	r1, r3, #4
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	9103      	str	r1, [sp, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	bfbb      	ittet	lt
 800f8e2:	425b      	neglt	r3, r3
 800f8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800f8e8:	9307      	strge	r3, [sp, #28]
 800f8ea:	9307      	strlt	r3, [sp, #28]
 800f8ec:	bfb8      	it	lt
 800f8ee:	9204      	strlt	r2, [sp, #16]
 800f8f0:	7823      	ldrb	r3, [r4, #0]
 800f8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8f4:	d10a      	bne.n	800f90c <_svfiprintf_r+0x130>
 800f8f6:	7863      	ldrb	r3, [r4, #1]
 800f8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8fa:	d132      	bne.n	800f962 <_svfiprintf_r+0x186>
 800f8fc:	9b03      	ldr	r3, [sp, #12]
 800f8fe:	1d1a      	adds	r2, r3, #4
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	9203      	str	r2, [sp, #12]
 800f904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f908:	3402      	adds	r4, #2
 800f90a:	9305      	str	r3, [sp, #20]
 800f90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9d0 <_svfiprintf_r+0x1f4>
 800f910:	7821      	ldrb	r1, [r4, #0]
 800f912:	2203      	movs	r2, #3
 800f914:	4650      	mov	r0, sl
 800f916:	f7f0 fc8b 	bl	8000230 <memchr>
 800f91a:	b138      	cbz	r0, 800f92c <_svfiprintf_r+0x150>
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	eba0 000a 	sub.w	r0, r0, sl
 800f922:	2240      	movs	r2, #64	@ 0x40
 800f924:	4082      	lsls	r2, r0
 800f926:	4313      	orrs	r3, r2
 800f928:	3401      	adds	r4, #1
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f930:	4824      	ldr	r0, [pc, #144]	@ (800f9c4 <_svfiprintf_r+0x1e8>)
 800f932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f936:	2206      	movs	r2, #6
 800f938:	f7f0 fc7a 	bl	8000230 <memchr>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d036      	beq.n	800f9ae <_svfiprintf_r+0x1d2>
 800f940:	4b21      	ldr	r3, [pc, #132]	@ (800f9c8 <_svfiprintf_r+0x1ec>)
 800f942:	bb1b      	cbnz	r3, 800f98c <_svfiprintf_r+0x1b0>
 800f944:	9b03      	ldr	r3, [sp, #12]
 800f946:	3307      	adds	r3, #7
 800f948:	f023 0307 	bic.w	r3, r3, #7
 800f94c:	3308      	adds	r3, #8
 800f94e:	9303      	str	r3, [sp, #12]
 800f950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f952:	4433      	add	r3, r6
 800f954:	9309      	str	r3, [sp, #36]	@ 0x24
 800f956:	e76a      	b.n	800f82e <_svfiprintf_r+0x52>
 800f958:	fb0c 3202 	mla	r2, ip, r2, r3
 800f95c:	460c      	mov	r4, r1
 800f95e:	2001      	movs	r0, #1
 800f960:	e7a8      	b.n	800f8b4 <_svfiprintf_r+0xd8>
 800f962:	2300      	movs	r3, #0
 800f964:	3401      	adds	r4, #1
 800f966:	9305      	str	r3, [sp, #20]
 800f968:	4619      	mov	r1, r3
 800f96a:	f04f 0c0a 	mov.w	ip, #10
 800f96e:	4620      	mov	r0, r4
 800f970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f974:	3a30      	subs	r2, #48	@ 0x30
 800f976:	2a09      	cmp	r2, #9
 800f978:	d903      	bls.n	800f982 <_svfiprintf_r+0x1a6>
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0c6      	beq.n	800f90c <_svfiprintf_r+0x130>
 800f97e:	9105      	str	r1, [sp, #20]
 800f980:	e7c4      	b.n	800f90c <_svfiprintf_r+0x130>
 800f982:	fb0c 2101 	mla	r1, ip, r1, r2
 800f986:	4604      	mov	r4, r0
 800f988:	2301      	movs	r3, #1
 800f98a:	e7f0      	b.n	800f96e <_svfiprintf_r+0x192>
 800f98c:	ab03      	add	r3, sp, #12
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	462a      	mov	r2, r5
 800f992:	4b0e      	ldr	r3, [pc, #56]	@ (800f9cc <_svfiprintf_r+0x1f0>)
 800f994:	a904      	add	r1, sp, #16
 800f996:	4638      	mov	r0, r7
 800f998:	f7fc fc86 	bl	800c2a8 <_printf_float>
 800f99c:	1c42      	adds	r2, r0, #1
 800f99e:	4606      	mov	r6, r0
 800f9a0:	d1d6      	bne.n	800f950 <_svfiprintf_r+0x174>
 800f9a2:	89ab      	ldrh	r3, [r5, #12]
 800f9a4:	065b      	lsls	r3, r3, #25
 800f9a6:	f53f af2d 	bmi.w	800f804 <_svfiprintf_r+0x28>
 800f9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9ac:	e72c      	b.n	800f808 <_svfiprintf_r+0x2c>
 800f9ae:	ab03      	add	r3, sp, #12
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	4b05      	ldr	r3, [pc, #20]	@ (800f9cc <_svfiprintf_r+0x1f0>)
 800f9b6:	a904      	add	r1, sp, #16
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f7fc ff0d 	bl	800c7d8 <_printf_i>
 800f9be:	e7ed      	b.n	800f99c <_svfiprintf_r+0x1c0>
 800f9c0:	0801155d 	.word	0x0801155d
 800f9c4:	08011567 	.word	0x08011567
 800f9c8:	0800c2a9 	.word	0x0800c2a9
 800f9cc:	0800f725 	.word	0x0800f725
 800f9d0:	08011563 	.word	0x08011563

0800f9d4 <__sflush_r>:
 800f9d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9dc:	0716      	lsls	r6, r2, #28
 800f9de:	4605      	mov	r5, r0
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	d454      	bmi.n	800fa8e <__sflush_r+0xba>
 800f9e4:	684b      	ldr	r3, [r1, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dc02      	bgt.n	800f9f0 <__sflush_r+0x1c>
 800f9ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dd48      	ble.n	800fa82 <__sflush_r+0xae>
 800f9f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9f2:	2e00      	cmp	r6, #0
 800f9f4:	d045      	beq.n	800fa82 <__sflush_r+0xae>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f9fc:	682f      	ldr	r7, [r5, #0]
 800f9fe:	6a21      	ldr	r1, [r4, #32]
 800fa00:	602b      	str	r3, [r5, #0]
 800fa02:	d030      	beq.n	800fa66 <__sflush_r+0x92>
 800fa04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fa06:	89a3      	ldrh	r3, [r4, #12]
 800fa08:	0759      	lsls	r1, r3, #29
 800fa0a:	d505      	bpl.n	800fa18 <__sflush_r+0x44>
 800fa0c:	6863      	ldr	r3, [r4, #4]
 800fa0e:	1ad2      	subs	r2, r2, r3
 800fa10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fa12:	b10b      	cbz	r3, 800fa18 <__sflush_r+0x44>
 800fa14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fa16:	1ad2      	subs	r2, r2, r3
 800fa18:	2300      	movs	r3, #0
 800fa1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fa1c:	6a21      	ldr	r1, [r4, #32]
 800fa1e:	4628      	mov	r0, r5
 800fa20:	47b0      	blx	r6
 800fa22:	1c43      	adds	r3, r0, #1
 800fa24:	89a3      	ldrh	r3, [r4, #12]
 800fa26:	d106      	bne.n	800fa36 <__sflush_r+0x62>
 800fa28:	6829      	ldr	r1, [r5, #0]
 800fa2a:	291d      	cmp	r1, #29
 800fa2c:	d82b      	bhi.n	800fa86 <__sflush_r+0xb2>
 800fa2e:	4a2a      	ldr	r2, [pc, #168]	@ (800fad8 <__sflush_r+0x104>)
 800fa30:	40ca      	lsrs	r2, r1
 800fa32:	07d6      	lsls	r6, r2, #31
 800fa34:	d527      	bpl.n	800fa86 <__sflush_r+0xb2>
 800fa36:	2200      	movs	r2, #0
 800fa38:	6062      	str	r2, [r4, #4]
 800fa3a:	04d9      	lsls	r1, r3, #19
 800fa3c:	6922      	ldr	r2, [r4, #16]
 800fa3e:	6022      	str	r2, [r4, #0]
 800fa40:	d504      	bpl.n	800fa4c <__sflush_r+0x78>
 800fa42:	1c42      	adds	r2, r0, #1
 800fa44:	d101      	bne.n	800fa4a <__sflush_r+0x76>
 800fa46:	682b      	ldr	r3, [r5, #0]
 800fa48:	b903      	cbnz	r3, 800fa4c <__sflush_r+0x78>
 800fa4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa4e:	602f      	str	r7, [r5, #0]
 800fa50:	b1b9      	cbz	r1, 800fa82 <__sflush_r+0xae>
 800fa52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa56:	4299      	cmp	r1, r3
 800fa58:	d002      	beq.n	800fa60 <__sflush_r+0x8c>
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	f7fe fa34 	bl	800dec8 <_free_r>
 800fa60:	2300      	movs	r3, #0
 800fa62:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa64:	e00d      	b.n	800fa82 <__sflush_r+0xae>
 800fa66:	2301      	movs	r3, #1
 800fa68:	4628      	mov	r0, r5
 800fa6a:	47b0      	blx	r6
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	1c50      	adds	r0, r2, #1
 800fa70:	d1c9      	bne.n	800fa06 <__sflush_r+0x32>
 800fa72:	682b      	ldr	r3, [r5, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0c6      	beq.n	800fa06 <__sflush_r+0x32>
 800fa78:	2b1d      	cmp	r3, #29
 800fa7a:	d001      	beq.n	800fa80 <__sflush_r+0xac>
 800fa7c:	2b16      	cmp	r3, #22
 800fa7e:	d11e      	bne.n	800fabe <__sflush_r+0xea>
 800fa80:	602f      	str	r7, [r5, #0]
 800fa82:	2000      	movs	r0, #0
 800fa84:	e022      	b.n	800facc <__sflush_r+0xf8>
 800fa86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa8a:	b21b      	sxth	r3, r3
 800fa8c:	e01b      	b.n	800fac6 <__sflush_r+0xf2>
 800fa8e:	690f      	ldr	r7, [r1, #16]
 800fa90:	2f00      	cmp	r7, #0
 800fa92:	d0f6      	beq.n	800fa82 <__sflush_r+0xae>
 800fa94:	0793      	lsls	r3, r2, #30
 800fa96:	680e      	ldr	r6, [r1, #0]
 800fa98:	bf08      	it	eq
 800fa9a:	694b      	ldreq	r3, [r1, #20]
 800fa9c:	600f      	str	r7, [r1, #0]
 800fa9e:	bf18      	it	ne
 800faa0:	2300      	movne	r3, #0
 800faa2:	eba6 0807 	sub.w	r8, r6, r7
 800faa6:	608b      	str	r3, [r1, #8]
 800faa8:	f1b8 0f00 	cmp.w	r8, #0
 800faac:	dde9      	ble.n	800fa82 <__sflush_r+0xae>
 800faae:	6a21      	ldr	r1, [r4, #32]
 800fab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fab2:	4643      	mov	r3, r8
 800fab4:	463a      	mov	r2, r7
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b0      	blx	r6
 800faba:	2800      	cmp	r0, #0
 800fabc:	dc08      	bgt.n	800fad0 <__sflush_r+0xfc>
 800fabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fac6:	81a3      	strh	r3, [r4, #12]
 800fac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800facc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad0:	4407      	add	r7, r0
 800fad2:	eba8 0800 	sub.w	r8, r8, r0
 800fad6:	e7e7      	b.n	800faa8 <__sflush_r+0xd4>
 800fad8:	20400001 	.word	0x20400001

0800fadc <_fflush_r>:
 800fadc:	b538      	push	{r3, r4, r5, lr}
 800fade:	690b      	ldr	r3, [r1, #16]
 800fae0:	4605      	mov	r5, r0
 800fae2:	460c      	mov	r4, r1
 800fae4:	b913      	cbnz	r3, 800faec <_fflush_r+0x10>
 800fae6:	2500      	movs	r5, #0
 800fae8:	4628      	mov	r0, r5
 800faea:	bd38      	pop	{r3, r4, r5, pc}
 800faec:	b118      	cbz	r0, 800faf6 <_fflush_r+0x1a>
 800faee:	6a03      	ldr	r3, [r0, #32]
 800faf0:	b90b      	cbnz	r3, 800faf6 <_fflush_r+0x1a>
 800faf2:	f7fd fa29 	bl	800cf48 <__sinit>
 800faf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d0f3      	beq.n	800fae6 <_fflush_r+0xa>
 800fafe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fb00:	07d0      	lsls	r0, r2, #31
 800fb02:	d404      	bmi.n	800fb0e <_fflush_r+0x32>
 800fb04:	0599      	lsls	r1, r3, #22
 800fb06:	d402      	bmi.n	800fb0e <_fflush_r+0x32>
 800fb08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb0a:	f7fd fb6c 	bl	800d1e6 <__retarget_lock_acquire_recursive>
 800fb0e:	4628      	mov	r0, r5
 800fb10:	4621      	mov	r1, r4
 800fb12:	f7ff ff5f 	bl	800f9d4 <__sflush_r>
 800fb16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb18:	07da      	lsls	r2, r3, #31
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	d4e4      	bmi.n	800fae8 <_fflush_r+0xc>
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	059b      	lsls	r3, r3, #22
 800fb22:	d4e1      	bmi.n	800fae8 <_fflush_r+0xc>
 800fb24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb26:	f7fd fb5f 	bl	800d1e8 <__retarget_lock_release_recursive>
 800fb2a:	e7dd      	b.n	800fae8 <_fflush_r+0xc>

0800fb2c <memmove>:
 800fb2c:	4288      	cmp	r0, r1
 800fb2e:	b510      	push	{r4, lr}
 800fb30:	eb01 0402 	add.w	r4, r1, r2
 800fb34:	d902      	bls.n	800fb3c <memmove+0x10>
 800fb36:	4284      	cmp	r4, r0
 800fb38:	4623      	mov	r3, r4
 800fb3a:	d807      	bhi.n	800fb4c <memmove+0x20>
 800fb3c:	1e43      	subs	r3, r0, #1
 800fb3e:	42a1      	cmp	r1, r4
 800fb40:	d008      	beq.n	800fb54 <memmove+0x28>
 800fb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb4a:	e7f8      	b.n	800fb3e <memmove+0x12>
 800fb4c:	4402      	add	r2, r0
 800fb4e:	4601      	mov	r1, r0
 800fb50:	428a      	cmp	r2, r1
 800fb52:	d100      	bne.n	800fb56 <memmove+0x2a>
 800fb54:	bd10      	pop	{r4, pc}
 800fb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb5e:	e7f7      	b.n	800fb50 <memmove+0x24>

0800fb60 <strncmp>:
 800fb60:	b510      	push	{r4, lr}
 800fb62:	b16a      	cbz	r2, 800fb80 <strncmp+0x20>
 800fb64:	3901      	subs	r1, #1
 800fb66:	1884      	adds	r4, r0, r2
 800fb68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d103      	bne.n	800fb7c <strncmp+0x1c>
 800fb74:	42a0      	cmp	r0, r4
 800fb76:	d001      	beq.n	800fb7c <strncmp+0x1c>
 800fb78:	2a00      	cmp	r2, #0
 800fb7a:	d1f5      	bne.n	800fb68 <strncmp+0x8>
 800fb7c:	1ad0      	subs	r0, r2, r3
 800fb7e:	bd10      	pop	{r4, pc}
 800fb80:	4610      	mov	r0, r2
 800fb82:	e7fc      	b.n	800fb7e <strncmp+0x1e>

0800fb84 <_sbrk_r>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4d06      	ldr	r5, [pc, #24]	@ (800fba0 <_sbrk_r+0x1c>)
 800fb88:	2300      	movs	r3, #0
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	602b      	str	r3, [r5, #0]
 800fb90:	f7f2 f8f4 	bl	8001d7c <_sbrk>
 800fb94:	1c43      	adds	r3, r0, #1
 800fb96:	d102      	bne.n	800fb9e <_sbrk_r+0x1a>
 800fb98:	682b      	ldr	r3, [r5, #0]
 800fb9a:	b103      	cbz	r3, 800fb9e <_sbrk_r+0x1a>
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	bd38      	pop	{r3, r4, r5, pc}
 800fba0:	20000ec8 	.word	0x20000ec8
 800fba4:	00000000 	.word	0x00000000

0800fba8 <nan>:
 800fba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fbb0 <nan+0x8>
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	7ff80000 	.word	0x7ff80000

0800fbb8 <__assert_func>:
 800fbb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbba:	4614      	mov	r4, r2
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b09      	ldr	r3, [pc, #36]	@ (800fbe4 <__assert_func+0x2c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4605      	mov	r5, r0
 800fbc4:	68d8      	ldr	r0, [r3, #12]
 800fbc6:	b14c      	cbz	r4, 800fbdc <__assert_func+0x24>
 800fbc8:	4b07      	ldr	r3, [pc, #28]	@ (800fbe8 <__assert_func+0x30>)
 800fbca:	9100      	str	r1, [sp, #0]
 800fbcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fbd0:	4906      	ldr	r1, [pc, #24]	@ (800fbec <__assert_func+0x34>)
 800fbd2:	462b      	mov	r3, r5
 800fbd4:	f000 fba8 	bl	8010328 <fiprintf>
 800fbd8:	f000 fbb8 	bl	801034c <abort>
 800fbdc:	4b04      	ldr	r3, [pc, #16]	@ (800fbf0 <__assert_func+0x38>)
 800fbde:	461c      	mov	r4, r3
 800fbe0:	e7f3      	b.n	800fbca <__assert_func+0x12>
 800fbe2:	bf00      	nop
 800fbe4:	200003d8 	.word	0x200003d8
 800fbe8:	08011576 	.word	0x08011576
 800fbec:	08011583 	.word	0x08011583
 800fbf0:	080115b1 	.word	0x080115b1

0800fbf4 <_calloc_r>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	fba1 5402 	umull	r5, r4, r1, r2
 800fbfa:	b934      	cbnz	r4, 800fc0a <_calloc_r+0x16>
 800fbfc:	4629      	mov	r1, r5
 800fbfe:	f7fe f9d7 	bl	800dfb0 <_malloc_r>
 800fc02:	4606      	mov	r6, r0
 800fc04:	b928      	cbnz	r0, 800fc12 <_calloc_r+0x1e>
 800fc06:	4630      	mov	r0, r6
 800fc08:	bd70      	pop	{r4, r5, r6, pc}
 800fc0a:	220c      	movs	r2, #12
 800fc0c:	6002      	str	r2, [r0, #0]
 800fc0e:	2600      	movs	r6, #0
 800fc10:	e7f9      	b.n	800fc06 <_calloc_r+0x12>
 800fc12:	462a      	mov	r2, r5
 800fc14:	4621      	mov	r1, r4
 800fc16:	f7fd fa68 	bl	800d0ea <memset>
 800fc1a:	e7f4      	b.n	800fc06 <_calloc_r+0x12>

0800fc1c <rshift>:
 800fc1c:	6903      	ldr	r3, [r0, #16]
 800fc1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fc22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fc2a:	f100 0414 	add.w	r4, r0, #20
 800fc2e:	dd45      	ble.n	800fcbc <rshift+0xa0>
 800fc30:	f011 011f 	ands.w	r1, r1, #31
 800fc34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fc38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc3c:	d10c      	bne.n	800fc58 <rshift+0x3c>
 800fc3e:	f100 0710 	add.w	r7, r0, #16
 800fc42:	4629      	mov	r1, r5
 800fc44:	42b1      	cmp	r1, r6
 800fc46:	d334      	bcc.n	800fcb2 <rshift+0x96>
 800fc48:	1a9b      	subs	r3, r3, r2
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	1eea      	subs	r2, r5, #3
 800fc4e:	4296      	cmp	r6, r2
 800fc50:	bf38      	it	cc
 800fc52:	2300      	movcc	r3, #0
 800fc54:	4423      	add	r3, r4
 800fc56:	e015      	b.n	800fc84 <rshift+0x68>
 800fc58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc5c:	f1c1 0820 	rsb	r8, r1, #32
 800fc60:	40cf      	lsrs	r7, r1
 800fc62:	f105 0e04 	add.w	lr, r5, #4
 800fc66:	46a1      	mov	r9, r4
 800fc68:	4576      	cmp	r6, lr
 800fc6a:	46f4      	mov	ip, lr
 800fc6c:	d815      	bhi.n	800fc9a <rshift+0x7e>
 800fc6e:	1a9a      	subs	r2, r3, r2
 800fc70:	0092      	lsls	r2, r2, #2
 800fc72:	3a04      	subs	r2, #4
 800fc74:	3501      	adds	r5, #1
 800fc76:	42ae      	cmp	r6, r5
 800fc78:	bf38      	it	cc
 800fc7a:	2200      	movcc	r2, #0
 800fc7c:	18a3      	adds	r3, r4, r2
 800fc7e:	50a7      	str	r7, [r4, r2]
 800fc80:	b107      	cbz	r7, 800fc84 <rshift+0x68>
 800fc82:	3304      	adds	r3, #4
 800fc84:	1b1a      	subs	r2, r3, r4
 800fc86:	42a3      	cmp	r3, r4
 800fc88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc8c:	bf08      	it	eq
 800fc8e:	2300      	moveq	r3, #0
 800fc90:	6102      	str	r2, [r0, #16]
 800fc92:	bf08      	it	eq
 800fc94:	6143      	streq	r3, [r0, #20]
 800fc96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc9a:	f8dc c000 	ldr.w	ip, [ip]
 800fc9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fca2:	ea4c 0707 	orr.w	r7, ip, r7
 800fca6:	f849 7b04 	str.w	r7, [r9], #4
 800fcaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fcae:	40cf      	lsrs	r7, r1
 800fcb0:	e7da      	b.n	800fc68 <rshift+0x4c>
 800fcb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800fcb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800fcba:	e7c3      	b.n	800fc44 <rshift+0x28>
 800fcbc:	4623      	mov	r3, r4
 800fcbe:	e7e1      	b.n	800fc84 <rshift+0x68>

0800fcc0 <__hexdig_fun>:
 800fcc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fcc4:	2b09      	cmp	r3, #9
 800fcc6:	d802      	bhi.n	800fcce <__hexdig_fun+0xe>
 800fcc8:	3820      	subs	r0, #32
 800fcca:	b2c0      	uxtb	r0, r0
 800fccc:	4770      	bx	lr
 800fcce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fcd2:	2b05      	cmp	r3, #5
 800fcd4:	d801      	bhi.n	800fcda <__hexdig_fun+0x1a>
 800fcd6:	3847      	subs	r0, #71	@ 0x47
 800fcd8:	e7f7      	b.n	800fcca <__hexdig_fun+0xa>
 800fcda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fcde:	2b05      	cmp	r3, #5
 800fce0:	d801      	bhi.n	800fce6 <__hexdig_fun+0x26>
 800fce2:	3827      	subs	r0, #39	@ 0x27
 800fce4:	e7f1      	b.n	800fcca <__hexdig_fun+0xa>
 800fce6:	2000      	movs	r0, #0
 800fce8:	4770      	bx	lr
	...

0800fcec <__gethex>:
 800fcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	b085      	sub	sp, #20
 800fcf2:	468a      	mov	sl, r1
 800fcf4:	9302      	str	r3, [sp, #8]
 800fcf6:	680b      	ldr	r3, [r1, #0]
 800fcf8:	9001      	str	r0, [sp, #4]
 800fcfa:	4690      	mov	r8, r2
 800fcfc:	1c9c      	adds	r4, r3, #2
 800fcfe:	46a1      	mov	r9, r4
 800fd00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fd04:	2830      	cmp	r0, #48	@ 0x30
 800fd06:	d0fa      	beq.n	800fcfe <__gethex+0x12>
 800fd08:	eba9 0303 	sub.w	r3, r9, r3
 800fd0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fd10:	f7ff ffd6 	bl	800fcc0 <__hexdig_fun>
 800fd14:	4605      	mov	r5, r0
 800fd16:	2800      	cmp	r0, #0
 800fd18:	d168      	bne.n	800fdec <__gethex+0x100>
 800fd1a:	49a0      	ldr	r1, [pc, #640]	@ (800ff9c <__gethex+0x2b0>)
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	4648      	mov	r0, r9
 800fd20:	f7ff ff1e 	bl	800fb60 <strncmp>
 800fd24:	4607      	mov	r7, r0
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d167      	bne.n	800fdfa <__gethex+0x10e>
 800fd2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fd2e:	4626      	mov	r6, r4
 800fd30:	f7ff ffc6 	bl	800fcc0 <__hexdig_fun>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d062      	beq.n	800fdfe <__gethex+0x112>
 800fd38:	4623      	mov	r3, r4
 800fd3a:	7818      	ldrb	r0, [r3, #0]
 800fd3c:	2830      	cmp	r0, #48	@ 0x30
 800fd3e:	4699      	mov	r9, r3
 800fd40:	f103 0301 	add.w	r3, r3, #1
 800fd44:	d0f9      	beq.n	800fd3a <__gethex+0x4e>
 800fd46:	f7ff ffbb 	bl	800fcc0 <__hexdig_fun>
 800fd4a:	fab0 f580 	clz	r5, r0
 800fd4e:	096d      	lsrs	r5, r5, #5
 800fd50:	f04f 0b01 	mov.w	fp, #1
 800fd54:	464a      	mov	r2, r9
 800fd56:	4616      	mov	r6, r2
 800fd58:	3201      	adds	r2, #1
 800fd5a:	7830      	ldrb	r0, [r6, #0]
 800fd5c:	f7ff ffb0 	bl	800fcc0 <__hexdig_fun>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d1f8      	bne.n	800fd56 <__gethex+0x6a>
 800fd64:	498d      	ldr	r1, [pc, #564]	@ (800ff9c <__gethex+0x2b0>)
 800fd66:	2201      	movs	r2, #1
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f7ff fef9 	bl	800fb60 <strncmp>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d13f      	bne.n	800fdf2 <__gethex+0x106>
 800fd72:	b944      	cbnz	r4, 800fd86 <__gethex+0x9a>
 800fd74:	1c74      	adds	r4, r6, #1
 800fd76:	4622      	mov	r2, r4
 800fd78:	4616      	mov	r6, r2
 800fd7a:	3201      	adds	r2, #1
 800fd7c:	7830      	ldrb	r0, [r6, #0]
 800fd7e:	f7ff ff9f 	bl	800fcc0 <__hexdig_fun>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d1f8      	bne.n	800fd78 <__gethex+0x8c>
 800fd86:	1ba4      	subs	r4, r4, r6
 800fd88:	00a7      	lsls	r7, r4, #2
 800fd8a:	7833      	ldrb	r3, [r6, #0]
 800fd8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fd90:	2b50      	cmp	r3, #80	@ 0x50
 800fd92:	d13e      	bne.n	800fe12 <__gethex+0x126>
 800fd94:	7873      	ldrb	r3, [r6, #1]
 800fd96:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd98:	d033      	beq.n	800fe02 <__gethex+0x116>
 800fd9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fd9c:	d034      	beq.n	800fe08 <__gethex+0x11c>
 800fd9e:	1c71      	adds	r1, r6, #1
 800fda0:	2400      	movs	r4, #0
 800fda2:	7808      	ldrb	r0, [r1, #0]
 800fda4:	f7ff ff8c 	bl	800fcc0 <__hexdig_fun>
 800fda8:	1e43      	subs	r3, r0, #1
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b18      	cmp	r3, #24
 800fdae:	d830      	bhi.n	800fe12 <__gethex+0x126>
 800fdb0:	f1a0 0210 	sub.w	r2, r0, #16
 800fdb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdb8:	f7ff ff82 	bl	800fcc0 <__hexdig_fun>
 800fdbc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800fdc0:	fa5f fc8c 	uxtb.w	ip, ip
 800fdc4:	f1bc 0f18 	cmp.w	ip, #24
 800fdc8:	f04f 030a 	mov.w	r3, #10
 800fdcc:	d91e      	bls.n	800fe0c <__gethex+0x120>
 800fdce:	b104      	cbz	r4, 800fdd2 <__gethex+0xe6>
 800fdd0:	4252      	negs	r2, r2
 800fdd2:	4417      	add	r7, r2
 800fdd4:	f8ca 1000 	str.w	r1, [sl]
 800fdd8:	b1ed      	cbz	r5, 800fe16 <__gethex+0x12a>
 800fdda:	f1bb 0f00 	cmp.w	fp, #0
 800fdde:	bf0c      	ite	eq
 800fde0:	2506      	moveq	r5, #6
 800fde2:	2500      	movne	r5, #0
 800fde4:	4628      	mov	r0, r5
 800fde6:	b005      	add	sp, #20
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	2500      	movs	r5, #0
 800fdee:	462c      	mov	r4, r5
 800fdf0:	e7b0      	b.n	800fd54 <__gethex+0x68>
 800fdf2:	2c00      	cmp	r4, #0
 800fdf4:	d1c7      	bne.n	800fd86 <__gethex+0x9a>
 800fdf6:	4627      	mov	r7, r4
 800fdf8:	e7c7      	b.n	800fd8a <__gethex+0x9e>
 800fdfa:	464e      	mov	r6, r9
 800fdfc:	462f      	mov	r7, r5
 800fdfe:	2501      	movs	r5, #1
 800fe00:	e7c3      	b.n	800fd8a <__gethex+0x9e>
 800fe02:	2400      	movs	r4, #0
 800fe04:	1cb1      	adds	r1, r6, #2
 800fe06:	e7cc      	b.n	800fda2 <__gethex+0xb6>
 800fe08:	2401      	movs	r4, #1
 800fe0a:	e7fb      	b.n	800fe04 <__gethex+0x118>
 800fe0c:	fb03 0002 	mla	r0, r3, r2, r0
 800fe10:	e7ce      	b.n	800fdb0 <__gethex+0xc4>
 800fe12:	4631      	mov	r1, r6
 800fe14:	e7de      	b.n	800fdd4 <__gethex+0xe8>
 800fe16:	eba6 0309 	sub.w	r3, r6, r9
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	2b07      	cmp	r3, #7
 800fe20:	dc0a      	bgt.n	800fe38 <__gethex+0x14c>
 800fe22:	9801      	ldr	r0, [sp, #4]
 800fe24:	f7fe f950 	bl	800e0c8 <_Balloc>
 800fe28:	4604      	mov	r4, r0
 800fe2a:	b940      	cbnz	r0, 800fe3e <__gethex+0x152>
 800fe2c:	4b5c      	ldr	r3, [pc, #368]	@ (800ffa0 <__gethex+0x2b4>)
 800fe2e:	4602      	mov	r2, r0
 800fe30:	21e4      	movs	r1, #228	@ 0xe4
 800fe32:	485c      	ldr	r0, [pc, #368]	@ (800ffa4 <__gethex+0x2b8>)
 800fe34:	f7ff fec0 	bl	800fbb8 <__assert_func>
 800fe38:	3101      	adds	r1, #1
 800fe3a:	105b      	asrs	r3, r3, #1
 800fe3c:	e7ef      	b.n	800fe1e <__gethex+0x132>
 800fe3e:	f100 0a14 	add.w	sl, r0, #20
 800fe42:	2300      	movs	r3, #0
 800fe44:	4655      	mov	r5, sl
 800fe46:	469b      	mov	fp, r3
 800fe48:	45b1      	cmp	r9, r6
 800fe4a:	d337      	bcc.n	800febc <__gethex+0x1d0>
 800fe4c:	f845 bb04 	str.w	fp, [r5], #4
 800fe50:	eba5 050a 	sub.w	r5, r5, sl
 800fe54:	10ad      	asrs	r5, r5, #2
 800fe56:	6125      	str	r5, [r4, #16]
 800fe58:	4658      	mov	r0, fp
 800fe5a:	f7fe fa27 	bl	800e2ac <__hi0bits>
 800fe5e:	016d      	lsls	r5, r5, #5
 800fe60:	f8d8 6000 	ldr.w	r6, [r8]
 800fe64:	1a2d      	subs	r5, r5, r0
 800fe66:	42b5      	cmp	r5, r6
 800fe68:	dd54      	ble.n	800ff14 <__gethex+0x228>
 800fe6a:	1bad      	subs	r5, r5, r6
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f7fe fdb3 	bl	800e9da <__any_on>
 800fe74:	4681      	mov	r9, r0
 800fe76:	b178      	cbz	r0, 800fe98 <__gethex+0x1ac>
 800fe78:	1e6b      	subs	r3, r5, #1
 800fe7a:	1159      	asrs	r1, r3, #5
 800fe7c:	f003 021f 	and.w	r2, r3, #31
 800fe80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fe84:	f04f 0901 	mov.w	r9, #1
 800fe88:	fa09 f202 	lsl.w	r2, r9, r2
 800fe8c:	420a      	tst	r2, r1
 800fe8e:	d003      	beq.n	800fe98 <__gethex+0x1ac>
 800fe90:	454b      	cmp	r3, r9
 800fe92:	dc36      	bgt.n	800ff02 <__gethex+0x216>
 800fe94:	f04f 0902 	mov.w	r9, #2
 800fe98:	4629      	mov	r1, r5
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f7ff febe 	bl	800fc1c <rshift>
 800fea0:	442f      	add	r7, r5
 800fea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fea6:	42bb      	cmp	r3, r7
 800fea8:	da42      	bge.n	800ff30 <__gethex+0x244>
 800feaa:	9801      	ldr	r0, [sp, #4]
 800feac:	4621      	mov	r1, r4
 800feae:	f7fe f94b 	bl	800e148 <_Bfree>
 800feb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800feb4:	2300      	movs	r3, #0
 800feb6:	6013      	str	r3, [r2, #0]
 800feb8:	25a3      	movs	r5, #163	@ 0xa3
 800feba:	e793      	b.n	800fde4 <__gethex+0xf8>
 800febc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fec0:	2a2e      	cmp	r2, #46	@ 0x2e
 800fec2:	d012      	beq.n	800feea <__gethex+0x1fe>
 800fec4:	2b20      	cmp	r3, #32
 800fec6:	d104      	bne.n	800fed2 <__gethex+0x1e6>
 800fec8:	f845 bb04 	str.w	fp, [r5], #4
 800fecc:	f04f 0b00 	mov.w	fp, #0
 800fed0:	465b      	mov	r3, fp
 800fed2:	7830      	ldrb	r0, [r6, #0]
 800fed4:	9303      	str	r3, [sp, #12]
 800fed6:	f7ff fef3 	bl	800fcc0 <__hexdig_fun>
 800feda:	9b03      	ldr	r3, [sp, #12]
 800fedc:	f000 000f 	and.w	r0, r0, #15
 800fee0:	4098      	lsls	r0, r3
 800fee2:	ea4b 0b00 	orr.w	fp, fp, r0
 800fee6:	3304      	adds	r3, #4
 800fee8:	e7ae      	b.n	800fe48 <__gethex+0x15c>
 800feea:	45b1      	cmp	r9, r6
 800feec:	d8ea      	bhi.n	800fec4 <__gethex+0x1d8>
 800feee:	492b      	ldr	r1, [pc, #172]	@ (800ff9c <__gethex+0x2b0>)
 800fef0:	9303      	str	r3, [sp, #12]
 800fef2:	2201      	movs	r2, #1
 800fef4:	4630      	mov	r0, r6
 800fef6:	f7ff fe33 	bl	800fb60 <strncmp>
 800fefa:	9b03      	ldr	r3, [sp, #12]
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d1e1      	bne.n	800fec4 <__gethex+0x1d8>
 800ff00:	e7a2      	b.n	800fe48 <__gethex+0x15c>
 800ff02:	1ea9      	subs	r1, r5, #2
 800ff04:	4620      	mov	r0, r4
 800ff06:	f7fe fd68 	bl	800e9da <__any_on>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d0c2      	beq.n	800fe94 <__gethex+0x1a8>
 800ff0e:	f04f 0903 	mov.w	r9, #3
 800ff12:	e7c1      	b.n	800fe98 <__gethex+0x1ac>
 800ff14:	da09      	bge.n	800ff2a <__gethex+0x23e>
 800ff16:	1b75      	subs	r5, r6, r5
 800ff18:	4621      	mov	r1, r4
 800ff1a:	9801      	ldr	r0, [sp, #4]
 800ff1c:	462a      	mov	r2, r5
 800ff1e:	f7fe fb23 	bl	800e568 <__lshift>
 800ff22:	1b7f      	subs	r7, r7, r5
 800ff24:	4604      	mov	r4, r0
 800ff26:	f100 0a14 	add.w	sl, r0, #20
 800ff2a:	f04f 0900 	mov.w	r9, #0
 800ff2e:	e7b8      	b.n	800fea2 <__gethex+0x1b6>
 800ff30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff34:	42bd      	cmp	r5, r7
 800ff36:	dd6f      	ble.n	8010018 <__gethex+0x32c>
 800ff38:	1bed      	subs	r5, r5, r7
 800ff3a:	42ae      	cmp	r6, r5
 800ff3c:	dc34      	bgt.n	800ffa8 <__gethex+0x2bc>
 800ff3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff42:	2b02      	cmp	r3, #2
 800ff44:	d022      	beq.n	800ff8c <__gethex+0x2a0>
 800ff46:	2b03      	cmp	r3, #3
 800ff48:	d024      	beq.n	800ff94 <__gethex+0x2a8>
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d115      	bne.n	800ff7a <__gethex+0x28e>
 800ff4e:	42ae      	cmp	r6, r5
 800ff50:	d113      	bne.n	800ff7a <__gethex+0x28e>
 800ff52:	2e01      	cmp	r6, #1
 800ff54:	d10b      	bne.n	800ff6e <__gethex+0x282>
 800ff56:	9a02      	ldr	r2, [sp, #8]
 800ff58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	2301      	movs	r3, #1
 800ff60:	6123      	str	r3, [r4, #16]
 800ff62:	f8ca 3000 	str.w	r3, [sl]
 800ff66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff68:	2562      	movs	r5, #98	@ 0x62
 800ff6a:	601c      	str	r4, [r3, #0]
 800ff6c:	e73a      	b.n	800fde4 <__gethex+0xf8>
 800ff6e:	1e71      	subs	r1, r6, #1
 800ff70:	4620      	mov	r0, r4
 800ff72:	f7fe fd32 	bl	800e9da <__any_on>
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d1ed      	bne.n	800ff56 <__gethex+0x26a>
 800ff7a:	9801      	ldr	r0, [sp, #4]
 800ff7c:	4621      	mov	r1, r4
 800ff7e:	f7fe f8e3 	bl	800e148 <_Bfree>
 800ff82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff84:	2300      	movs	r3, #0
 800ff86:	6013      	str	r3, [r2, #0]
 800ff88:	2550      	movs	r5, #80	@ 0x50
 800ff8a:	e72b      	b.n	800fde4 <__gethex+0xf8>
 800ff8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1f3      	bne.n	800ff7a <__gethex+0x28e>
 800ff92:	e7e0      	b.n	800ff56 <__gethex+0x26a>
 800ff94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1dd      	bne.n	800ff56 <__gethex+0x26a>
 800ff9a:	e7ee      	b.n	800ff7a <__gethex+0x28e>
 800ff9c:	0801155b 	.word	0x0801155b
 800ffa0:	080114f1 	.word	0x080114f1
 800ffa4:	080115b2 	.word	0x080115b2
 800ffa8:	1e6f      	subs	r7, r5, #1
 800ffaa:	f1b9 0f00 	cmp.w	r9, #0
 800ffae:	d130      	bne.n	8010012 <__gethex+0x326>
 800ffb0:	b127      	cbz	r7, 800ffbc <__gethex+0x2d0>
 800ffb2:	4639      	mov	r1, r7
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f7fe fd10 	bl	800e9da <__any_on>
 800ffba:	4681      	mov	r9, r0
 800ffbc:	117a      	asrs	r2, r7, #5
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ffc4:	f007 071f 	and.w	r7, r7, #31
 800ffc8:	40bb      	lsls	r3, r7
 800ffca:	4213      	tst	r3, r2
 800ffcc:	4629      	mov	r1, r5
 800ffce:	4620      	mov	r0, r4
 800ffd0:	bf18      	it	ne
 800ffd2:	f049 0902 	orrne.w	r9, r9, #2
 800ffd6:	f7ff fe21 	bl	800fc1c <rshift>
 800ffda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ffde:	1b76      	subs	r6, r6, r5
 800ffe0:	2502      	movs	r5, #2
 800ffe2:	f1b9 0f00 	cmp.w	r9, #0
 800ffe6:	d047      	beq.n	8010078 <__gethex+0x38c>
 800ffe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d015      	beq.n	801001c <__gethex+0x330>
 800fff0:	2b03      	cmp	r3, #3
 800fff2:	d017      	beq.n	8010024 <__gethex+0x338>
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d109      	bne.n	801000c <__gethex+0x320>
 800fff8:	f019 0f02 	tst.w	r9, #2
 800fffc:	d006      	beq.n	801000c <__gethex+0x320>
 800fffe:	f8da 3000 	ldr.w	r3, [sl]
 8010002:	ea49 0903 	orr.w	r9, r9, r3
 8010006:	f019 0f01 	tst.w	r9, #1
 801000a:	d10e      	bne.n	801002a <__gethex+0x33e>
 801000c:	f045 0510 	orr.w	r5, r5, #16
 8010010:	e032      	b.n	8010078 <__gethex+0x38c>
 8010012:	f04f 0901 	mov.w	r9, #1
 8010016:	e7d1      	b.n	800ffbc <__gethex+0x2d0>
 8010018:	2501      	movs	r5, #1
 801001a:	e7e2      	b.n	800ffe2 <__gethex+0x2f6>
 801001c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801001e:	f1c3 0301 	rsb	r3, r3, #1
 8010022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0f0      	beq.n	801000c <__gethex+0x320>
 801002a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801002e:	f104 0314 	add.w	r3, r4, #20
 8010032:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010036:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801003a:	f04f 0c00 	mov.w	ip, #0
 801003e:	4618      	mov	r0, r3
 8010040:	f853 2b04 	ldr.w	r2, [r3], #4
 8010044:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010048:	d01b      	beq.n	8010082 <__gethex+0x396>
 801004a:	3201      	adds	r2, #1
 801004c:	6002      	str	r2, [r0, #0]
 801004e:	2d02      	cmp	r5, #2
 8010050:	f104 0314 	add.w	r3, r4, #20
 8010054:	d13c      	bne.n	80100d0 <__gethex+0x3e4>
 8010056:	f8d8 2000 	ldr.w	r2, [r8]
 801005a:	3a01      	subs	r2, #1
 801005c:	42b2      	cmp	r2, r6
 801005e:	d109      	bne.n	8010074 <__gethex+0x388>
 8010060:	1171      	asrs	r1, r6, #5
 8010062:	2201      	movs	r2, #1
 8010064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010068:	f006 061f 	and.w	r6, r6, #31
 801006c:	fa02 f606 	lsl.w	r6, r2, r6
 8010070:	421e      	tst	r6, r3
 8010072:	d13a      	bne.n	80100ea <__gethex+0x3fe>
 8010074:	f045 0520 	orr.w	r5, r5, #32
 8010078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801007a:	601c      	str	r4, [r3, #0]
 801007c:	9b02      	ldr	r3, [sp, #8]
 801007e:	601f      	str	r7, [r3, #0]
 8010080:	e6b0      	b.n	800fde4 <__gethex+0xf8>
 8010082:	4299      	cmp	r1, r3
 8010084:	f843 cc04 	str.w	ip, [r3, #-4]
 8010088:	d8d9      	bhi.n	801003e <__gethex+0x352>
 801008a:	68a3      	ldr	r3, [r4, #8]
 801008c:	459b      	cmp	fp, r3
 801008e:	db17      	blt.n	80100c0 <__gethex+0x3d4>
 8010090:	6861      	ldr	r1, [r4, #4]
 8010092:	9801      	ldr	r0, [sp, #4]
 8010094:	3101      	adds	r1, #1
 8010096:	f7fe f817 	bl	800e0c8 <_Balloc>
 801009a:	4681      	mov	r9, r0
 801009c:	b918      	cbnz	r0, 80100a6 <__gethex+0x3ba>
 801009e:	4b1a      	ldr	r3, [pc, #104]	@ (8010108 <__gethex+0x41c>)
 80100a0:	4602      	mov	r2, r0
 80100a2:	2184      	movs	r1, #132	@ 0x84
 80100a4:	e6c5      	b.n	800fe32 <__gethex+0x146>
 80100a6:	6922      	ldr	r2, [r4, #16]
 80100a8:	3202      	adds	r2, #2
 80100aa:	f104 010c 	add.w	r1, r4, #12
 80100ae:	0092      	lsls	r2, r2, #2
 80100b0:	300c      	adds	r0, #12
 80100b2:	f7fd f89a 	bl	800d1ea <memcpy>
 80100b6:	4621      	mov	r1, r4
 80100b8:	9801      	ldr	r0, [sp, #4]
 80100ba:	f7fe f845 	bl	800e148 <_Bfree>
 80100be:	464c      	mov	r4, r9
 80100c0:	6923      	ldr	r3, [r4, #16]
 80100c2:	1c5a      	adds	r2, r3, #1
 80100c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80100c8:	6122      	str	r2, [r4, #16]
 80100ca:	2201      	movs	r2, #1
 80100cc:	615a      	str	r2, [r3, #20]
 80100ce:	e7be      	b.n	801004e <__gethex+0x362>
 80100d0:	6922      	ldr	r2, [r4, #16]
 80100d2:	455a      	cmp	r2, fp
 80100d4:	dd0b      	ble.n	80100ee <__gethex+0x402>
 80100d6:	2101      	movs	r1, #1
 80100d8:	4620      	mov	r0, r4
 80100da:	f7ff fd9f 	bl	800fc1c <rshift>
 80100de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100e2:	3701      	adds	r7, #1
 80100e4:	42bb      	cmp	r3, r7
 80100e6:	f6ff aee0 	blt.w	800feaa <__gethex+0x1be>
 80100ea:	2501      	movs	r5, #1
 80100ec:	e7c2      	b.n	8010074 <__gethex+0x388>
 80100ee:	f016 061f 	ands.w	r6, r6, #31
 80100f2:	d0fa      	beq.n	80100ea <__gethex+0x3fe>
 80100f4:	4453      	add	r3, sl
 80100f6:	f1c6 0620 	rsb	r6, r6, #32
 80100fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80100fe:	f7fe f8d5 	bl	800e2ac <__hi0bits>
 8010102:	42b0      	cmp	r0, r6
 8010104:	dbe7      	blt.n	80100d6 <__gethex+0x3ea>
 8010106:	e7f0      	b.n	80100ea <__gethex+0x3fe>
 8010108:	080114f1 	.word	0x080114f1

0801010c <L_shift>:
 801010c:	f1c2 0208 	rsb	r2, r2, #8
 8010110:	0092      	lsls	r2, r2, #2
 8010112:	b570      	push	{r4, r5, r6, lr}
 8010114:	f1c2 0620 	rsb	r6, r2, #32
 8010118:	6843      	ldr	r3, [r0, #4]
 801011a:	6804      	ldr	r4, [r0, #0]
 801011c:	fa03 f506 	lsl.w	r5, r3, r6
 8010120:	432c      	orrs	r4, r5
 8010122:	40d3      	lsrs	r3, r2
 8010124:	6004      	str	r4, [r0, #0]
 8010126:	f840 3f04 	str.w	r3, [r0, #4]!
 801012a:	4288      	cmp	r0, r1
 801012c:	d3f4      	bcc.n	8010118 <L_shift+0xc>
 801012e:	bd70      	pop	{r4, r5, r6, pc}

08010130 <__match>:
 8010130:	b530      	push	{r4, r5, lr}
 8010132:	6803      	ldr	r3, [r0, #0]
 8010134:	3301      	adds	r3, #1
 8010136:	f811 4b01 	ldrb.w	r4, [r1], #1
 801013a:	b914      	cbnz	r4, 8010142 <__match+0x12>
 801013c:	6003      	str	r3, [r0, #0]
 801013e:	2001      	movs	r0, #1
 8010140:	bd30      	pop	{r4, r5, pc}
 8010142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010146:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801014a:	2d19      	cmp	r5, #25
 801014c:	bf98      	it	ls
 801014e:	3220      	addls	r2, #32
 8010150:	42a2      	cmp	r2, r4
 8010152:	d0f0      	beq.n	8010136 <__match+0x6>
 8010154:	2000      	movs	r0, #0
 8010156:	e7f3      	b.n	8010140 <__match+0x10>

08010158 <__hexnan>:
 8010158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	680b      	ldr	r3, [r1, #0]
 801015e:	6801      	ldr	r1, [r0, #0]
 8010160:	115e      	asrs	r6, r3, #5
 8010162:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010166:	f013 031f 	ands.w	r3, r3, #31
 801016a:	b087      	sub	sp, #28
 801016c:	bf18      	it	ne
 801016e:	3604      	addne	r6, #4
 8010170:	2500      	movs	r5, #0
 8010172:	1f37      	subs	r7, r6, #4
 8010174:	4682      	mov	sl, r0
 8010176:	4690      	mov	r8, r2
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	f846 5c04 	str.w	r5, [r6, #-4]
 801017e:	46b9      	mov	r9, r7
 8010180:	463c      	mov	r4, r7
 8010182:	9502      	str	r5, [sp, #8]
 8010184:	46ab      	mov	fp, r5
 8010186:	784a      	ldrb	r2, [r1, #1]
 8010188:	1c4b      	adds	r3, r1, #1
 801018a:	9303      	str	r3, [sp, #12]
 801018c:	b342      	cbz	r2, 80101e0 <__hexnan+0x88>
 801018e:	4610      	mov	r0, r2
 8010190:	9105      	str	r1, [sp, #20]
 8010192:	9204      	str	r2, [sp, #16]
 8010194:	f7ff fd94 	bl	800fcc0 <__hexdig_fun>
 8010198:	2800      	cmp	r0, #0
 801019a:	d151      	bne.n	8010240 <__hexnan+0xe8>
 801019c:	9a04      	ldr	r2, [sp, #16]
 801019e:	9905      	ldr	r1, [sp, #20]
 80101a0:	2a20      	cmp	r2, #32
 80101a2:	d818      	bhi.n	80101d6 <__hexnan+0x7e>
 80101a4:	9b02      	ldr	r3, [sp, #8]
 80101a6:	459b      	cmp	fp, r3
 80101a8:	dd13      	ble.n	80101d2 <__hexnan+0x7a>
 80101aa:	454c      	cmp	r4, r9
 80101ac:	d206      	bcs.n	80101bc <__hexnan+0x64>
 80101ae:	2d07      	cmp	r5, #7
 80101b0:	dc04      	bgt.n	80101bc <__hexnan+0x64>
 80101b2:	462a      	mov	r2, r5
 80101b4:	4649      	mov	r1, r9
 80101b6:	4620      	mov	r0, r4
 80101b8:	f7ff ffa8 	bl	801010c <L_shift>
 80101bc:	4544      	cmp	r4, r8
 80101be:	d952      	bls.n	8010266 <__hexnan+0x10e>
 80101c0:	2300      	movs	r3, #0
 80101c2:	f1a4 0904 	sub.w	r9, r4, #4
 80101c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80101ca:	f8cd b008 	str.w	fp, [sp, #8]
 80101ce:	464c      	mov	r4, r9
 80101d0:	461d      	mov	r5, r3
 80101d2:	9903      	ldr	r1, [sp, #12]
 80101d4:	e7d7      	b.n	8010186 <__hexnan+0x2e>
 80101d6:	2a29      	cmp	r2, #41	@ 0x29
 80101d8:	d157      	bne.n	801028a <__hexnan+0x132>
 80101da:	3102      	adds	r1, #2
 80101dc:	f8ca 1000 	str.w	r1, [sl]
 80101e0:	f1bb 0f00 	cmp.w	fp, #0
 80101e4:	d051      	beq.n	801028a <__hexnan+0x132>
 80101e6:	454c      	cmp	r4, r9
 80101e8:	d206      	bcs.n	80101f8 <__hexnan+0xa0>
 80101ea:	2d07      	cmp	r5, #7
 80101ec:	dc04      	bgt.n	80101f8 <__hexnan+0xa0>
 80101ee:	462a      	mov	r2, r5
 80101f0:	4649      	mov	r1, r9
 80101f2:	4620      	mov	r0, r4
 80101f4:	f7ff ff8a 	bl	801010c <L_shift>
 80101f8:	4544      	cmp	r4, r8
 80101fa:	d936      	bls.n	801026a <__hexnan+0x112>
 80101fc:	f1a8 0204 	sub.w	r2, r8, #4
 8010200:	4623      	mov	r3, r4
 8010202:	f853 1b04 	ldr.w	r1, [r3], #4
 8010206:	f842 1f04 	str.w	r1, [r2, #4]!
 801020a:	429f      	cmp	r7, r3
 801020c:	d2f9      	bcs.n	8010202 <__hexnan+0xaa>
 801020e:	1b3b      	subs	r3, r7, r4
 8010210:	f023 0303 	bic.w	r3, r3, #3
 8010214:	3304      	adds	r3, #4
 8010216:	3401      	adds	r4, #1
 8010218:	3e03      	subs	r6, #3
 801021a:	42b4      	cmp	r4, r6
 801021c:	bf88      	it	hi
 801021e:	2304      	movhi	r3, #4
 8010220:	4443      	add	r3, r8
 8010222:	2200      	movs	r2, #0
 8010224:	f843 2b04 	str.w	r2, [r3], #4
 8010228:	429f      	cmp	r7, r3
 801022a:	d2fb      	bcs.n	8010224 <__hexnan+0xcc>
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	b91b      	cbnz	r3, 8010238 <__hexnan+0xe0>
 8010230:	4547      	cmp	r7, r8
 8010232:	d128      	bne.n	8010286 <__hexnan+0x12e>
 8010234:	2301      	movs	r3, #1
 8010236:	603b      	str	r3, [r7, #0]
 8010238:	2005      	movs	r0, #5
 801023a:	b007      	add	sp, #28
 801023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010240:	3501      	adds	r5, #1
 8010242:	2d08      	cmp	r5, #8
 8010244:	f10b 0b01 	add.w	fp, fp, #1
 8010248:	dd06      	ble.n	8010258 <__hexnan+0x100>
 801024a:	4544      	cmp	r4, r8
 801024c:	d9c1      	bls.n	80101d2 <__hexnan+0x7a>
 801024e:	2300      	movs	r3, #0
 8010250:	f844 3c04 	str.w	r3, [r4, #-4]
 8010254:	2501      	movs	r5, #1
 8010256:	3c04      	subs	r4, #4
 8010258:	6822      	ldr	r2, [r4, #0]
 801025a:	f000 000f 	and.w	r0, r0, #15
 801025e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010262:	6020      	str	r0, [r4, #0]
 8010264:	e7b5      	b.n	80101d2 <__hexnan+0x7a>
 8010266:	2508      	movs	r5, #8
 8010268:	e7b3      	b.n	80101d2 <__hexnan+0x7a>
 801026a:	9b01      	ldr	r3, [sp, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d0dd      	beq.n	801022c <__hexnan+0xd4>
 8010270:	f1c3 0320 	rsb	r3, r3, #32
 8010274:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010278:	40da      	lsrs	r2, r3
 801027a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801027e:	4013      	ands	r3, r2
 8010280:	f846 3c04 	str.w	r3, [r6, #-4]
 8010284:	e7d2      	b.n	801022c <__hexnan+0xd4>
 8010286:	3f04      	subs	r7, #4
 8010288:	e7d0      	b.n	801022c <__hexnan+0xd4>
 801028a:	2004      	movs	r0, #4
 801028c:	e7d5      	b.n	801023a <__hexnan+0xe2>

0801028e <__ascii_mbtowc>:
 801028e:	b082      	sub	sp, #8
 8010290:	b901      	cbnz	r1, 8010294 <__ascii_mbtowc+0x6>
 8010292:	a901      	add	r1, sp, #4
 8010294:	b142      	cbz	r2, 80102a8 <__ascii_mbtowc+0x1a>
 8010296:	b14b      	cbz	r3, 80102ac <__ascii_mbtowc+0x1e>
 8010298:	7813      	ldrb	r3, [r2, #0]
 801029a:	600b      	str	r3, [r1, #0]
 801029c:	7812      	ldrb	r2, [r2, #0]
 801029e:	1e10      	subs	r0, r2, #0
 80102a0:	bf18      	it	ne
 80102a2:	2001      	movne	r0, #1
 80102a4:	b002      	add	sp, #8
 80102a6:	4770      	bx	lr
 80102a8:	4610      	mov	r0, r2
 80102aa:	e7fb      	b.n	80102a4 <__ascii_mbtowc+0x16>
 80102ac:	f06f 0001 	mvn.w	r0, #1
 80102b0:	e7f8      	b.n	80102a4 <__ascii_mbtowc+0x16>

080102b2 <_realloc_r>:
 80102b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b6:	4607      	mov	r7, r0
 80102b8:	4614      	mov	r4, r2
 80102ba:	460d      	mov	r5, r1
 80102bc:	b921      	cbnz	r1, 80102c8 <_realloc_r+0x16>
 80102be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c2:	4611      	mov	r1, r2
 80102c4:	f7fd be74 	b.w	800dfb0 <_malloc_r>
 80102c8:	b92a      	cbnz	r2, 80102d6 <_realloc_r+0x24>
 80102ca:	f7fd fdfd 	bl	800dec8 <_free_r>
 80102ce:	4625      	mov	r5, r4
 80102d0:	4628      	mov	r0, r5
 80102d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d6:	f000 f840 	bl	801035a <_malloc_usable_size_r>
 80102da:	4284      	cmp	r4, r0
 80102dc:	4606      	mov	r6, r0
 80102de:	d802      	bhi.n	80102e6 <_realloc_r+0x34>
 80102e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102e4:	d8f4      	bhi.n	80102d0 <_realloc_r+0x1e>
 80102e6:	4621      	mov	r1, r4
 80102e8:	4638      	mov	r0, r7
 80102ea:	f7fd fe61 	bl	800dfb0 <_malloc_r>
 80102ee:	4680      	mov	r8, r0
 80102f0:	b908      	cbnz	r0, 80102f6 <_realloc_r+0x44>
 80102f2:	4645      	mov	r5, r8
 80102f4:	e7ec      	b.n	80102d0 <_realloc_r+0x1e>
 80102f6:	42b4      	cmp	r4, r6
 80102f8:	4622      	mov	r2, r4
 80102fa:	4629      	mov	r1, r5
 80102fc:	bf28      	it	cs
 80102fe:	4632      	movcs	r2, r6
 8010300:	f7fc ff73 	bl	800d1ea <memcpy>
 8010304:	4629      	mov	r1, r5
 8010306:	4638      	mov	r0, r7
 8010308:	f7fd fdde 	bl	800dec8 <_free_r>
 801030c:	e7f1      	b.n	80102f2 <_realloc_r+0x40>

0801030e <__ascii_wctomb>:
 801030e:	4603      	mov	r3, r0
 8010310:	4608      	mov	r0, r1
 8010312:	b141      	cbz	r1, 8010326 <__ascii_wctomb+0x18>
 8010314:	2aff      	cmp	r2, #255	@ 0xff
 8010316:	d904      	bls.n	8010322 <__ascii_wctomb+0x14>
 8010318:	228a      	movs	r2, #138	@ 0x8a
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010320:	4770      	bx	lr
 8010322:	700a      	strb	r2, [r1, #0]
 8010324:	2001      	movs	r0, #1
 8010326:	4770      	bx	lr

08010328 <fiprintf>:
 8010328:	b40e      	push	{r1, r2, r3}
 801032a:	b503      	push	{r0, r1, lr}
 801032c:	4601      	mov	r1, r0
 801032e:	ab03      	add	r3, sp, #12
 8010330:	4805      	ldr	r0, [pc, #20]	@ (8010348 <fiprintf+0x20>)
 8010332:	f853 2b04 	ldr.w	r2, [r3], #4
 8010336:	6800      	ldr	r0, [r0, #0]
 8010338:	9301      	str	r3, [sp, #4]
 801033a:	f000 f83f 	bl	80103bc <_vfiprintf_r>
 801033e:	b002      	add	sp, #8
 8010340:	f85d eb04 	ldr.w	lr, [sp], #4
 8010344:	b003      	add	sp, #12
 8010346:	4770      	bx	lr
 8010348:	200003d8 	.word	0x200003d8

0801034c <abort>:
 801034c:	b508      	push	{r3, lr}
 801034e:	2006      	movs	r0, #6
 8010350:	f000 fa08 	bl	8010764 <raise>
 8010354:	2001      	movs	r0, #1
 8010356:	f7f1 fc99 	bl	8001c8c <_exit>

0801035a <_malloc_usable_size_r>:
 801035a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801035e:	1f18      	subs	r0, r3, #4
 8010360:	2b00      	cmp	r3, #0
 8010362:	bfbc      	itt	lt
 8010364:	580b      	ldrlt	r3, [r1, r0]
 8010366:	18c0      	addlt	r0, r0, r3
 8010368:	4770      	bx	lr

0801036a <__sfputc_r>:
 801036a:	6893      	ldr	r3, [r2, #8]
 801036c:	3b01      	subs	r3, #1
 801036e:	2b00      	cmp	r3, #0
 8010370:	b410      	push	{r4}
 8010372:	6093      	str	r3, [r2, #8]
 8010374:	da08      	bge.n	8010388 <__sfputc_r+0x1e>
 8010376:	6994      	ldr	r4, [r2, #24]
 8010378:	42a3      	cmp	r3, r4
 801037a:	db01      	blt.n	8010380 <__sfputc_r+0x16>
 801037c:	290a      	cmp	r1, #10
 801037e:	d103      	bne.n	8010388 <__sfputc_r+0x1e>
 8010380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010384:	f000 b932 	b.w	80105ec <__swbuf_r>
 8010388:	6813      	ldr	r3, [r2, #0]
 801038a:	1c58      	adds	r0, r3, #1
 801038c:	6010      	str	r0, [r2, #0]
 801038e:	7019      	strb	r1, [r3, #0]
 8010390:	4608      	mov	r0, r1
 8010392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010396:	4770      	bx	lr

08010398 <__sfputs_r>:
 8010398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039a:	4606      	mov	r6, r0
 801039c:	460f      	mov	r7, r1
 801039e:	4614      	mov	r4, r2
 80103a0:	18d5      	adds	r5, r2, r3
 80103a2:	42ac      	cmp	r4, r5
 80103a4:	d101      	bne.n	80103aa <__sfputs_r+0x12>
 80103a6:	2000      	movs	r0, #0
 80103a8:	e007      	b.n	80103ba <__sfputs_r+0x22>
 80103aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ae:	463a      	mov	r2, r7
 80103b0:	4630      	mov	r0, r6
 80103b2:	f7ff ffda 	bl	801036a <__sfputc_r>
 80103b6:	1c43      	adds	r3, r0, #1
 80103b8:	d1f3      	bne.n	80103a2 <__sfputs_r+0xa>
 80103ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103bc <_vfiprintf_r>:
 80103bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c0:	460d      	mov	r5, r1
 80103c2:	b09d      	sub	sp, #116	@ 0x74
 80103c4:	4614      	mov	r4, r2
 80103c6:	4698      	mov	r8, r3
 80103c8:	4606      	mov	r6, r0
 80103ca:	b118      	cbz	r0, 80103d4 <_vfiprintf_r+0x18>
 80103cc:	6a03      	ldr	r3, [r0, #32]
 80103ce:	b90b      	cbnz	r3, 80103d4 <_vfiprintf_r+0x18>
 80103d0:	f7fc fdba 	bl	800cf48 <__sinit>
 80103d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103d6:	07d9      	lsls	r1, r3, #31
 80103d8:	d405      	bmi.n	80103e6 <_vfiprintf_r+0x2a>
 80103da:	89ab      	ldrh	r3, [r5, #12]
 80103dc:	059a      	lsls	r2, r3, #22
 80103de:	d402      	bmi.n	80103e6 <_vfiprintf_r+0x2a>
 80103e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103e2:	f7fc ff00 	bl	800d1e6 <__retarget_lock_acquire_recursive>
 80103e6:	89ab      	ldrh	r3, [r5, #12]
 80103e8:	071b      	lsls	r3, r3, #28
 80103ea:	d501      	bpl.n	80103f0 <_vfiprintf_r+0x34>
 80103ec:	692b      	ldr	r3, [r5, #16]
 80103ee:	b99b      	cbnz	r3, 8010418 <_vfiprintf_r+0x5c>
 80103f0:	4629      	mov	r1, r5
 80103f2:	4630      	mov	r0, r6
 80103f4:	f000 f938 	bl	8010668 <__swsetup_r>
 80103f8:	b170      	cbz	r0, 8010418 <_vfiprintf_r+0x5c>
 80103fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103fc:	07dc      	lsls	r4, r3, #31
 80103fe:	d504      	bpl.n	801040a <_vfiprintf_r+0x4e>
 8010400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010404:	b01d      	add	sp, #116	@ 0x74
 8010406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040a:	89ab      	ldrh	r3, [r5, #12]
 801040c:	0598      	lsls	r0, r3, #22
 801040e:	d4f7      	bmi.n	8010400 <_vfiprintf_r+0x44>
 8010410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010412:	f7fc fee9 	bl	800d1e8 <__retarget_lock_release_recursive>
 8010416:	e7f3      	b.n	8010400 <_vfiprintf_r+0x44>
 8010418:	2300      	movs	r3, #0
 801041a:	9309      	str	r3, [sp, #36]	@ 0x24
 801041c:	2320      	movs	r3, #32
 801041e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010422:	f8cd 800c 	str.w	r8, [sp, #12]
 8010426:	2330      	movs	r3, #48	@ 0x30
 8010428:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80105d8 <_vfiprintf_r+0x21c>
 801042c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010430:	f04f 0901 	mov.w	r9, #1
 8010434:	4623      	mov	r3, r4
 8010436:	469a      	mov	sl, r3
 8010438:	f813 2b01 	ldrb.w	r2, [r3], #1
 801043c:	b10a      	cbz	r2, 8010442 <_vfiprintf_r+0x86>
 801043e:	2a25      	cmp	r2, #37	@ 0x25
 8010440:	d1f9      	bne.n	8010436 <_vfiprintf_r+0x7a>
 8010442:	ebba 0b04 	subs.w	fp, sl, r4
 8010446:	d00b      	beq.n	8010460 <_vfiprintf_r+0xa4>
 8010448:	465b      	mov	r3, fp
 801044a:	4622      	mov	r2, r4
 801044c:	4629      	mov	r1, r5
 801044e:	4630      	mov	r0, r6
 8010450:	f7ff ffa2 	bl	8010398 <__sfputs_r>
 8010454:	3001      	adds	r0, #1
 8010456:	f000 80a7 	beq.w	80105a8 <_vfiprintf_r+0x1ec>
 801045a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801045c:	445a      	add	r2, fp
 801045e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010460:	f89a 3000 	ldrb.w	r3, [sl]
 8010464:	2b00      	cmp	r3, #0
 8010466:	f000 809f 	beq.w	80105a8 <_vfiprintf_r+0x1ec>
 801046a:	2300      	movs	r3, #0
 801046c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010474:	f10a 0a01 	add.w	sl, sl, #1
 8010478:	9304      	str	r3, [sp, #16]
 801047a:	9307      	str	r3, [sp, #28]
 801047c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010480:	931a      	str	r3, [sp, #104]	@ 0x68
 8010482:	4654      	mov	r4, sl
 8010484:	2205      	movs	r2, #5
 8010486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048a:	4853      	ldr	r0, [pc, #332]	@ (80105d8 <_vfiprintf_r+0x21c>)
 801048c:	f7ef fed0 	bl	8000230 <memchr>
 8010490:	9a04      	ldr	r2, [sp, #16]
 8010492:	b9d8      	cbnz	r0, 80104cc <_vfiprintf_r+0x110>
 8010494:	06d1      	lsls	r1, r2, #27
 8010496:	bf44      	itt	mi
 8010498:	2320      	movmi	r3, #32
 801049a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801049e:	0713      	lsls	r3, r2, #28
 80104a0:	bf44      	itt	mi
 80104a2:	232b      	movmi	r3, #43	@ 0x2b
 80104a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104a8:	f89a 3000 	ldrb.w	r3, [sl]
 80104ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80104ae:	d015      	beq.n	80104dc <_vfiprintf_r+0x120>
 80104b0:	9a07      	ldr	r2, [sp, #28]
 80104b2:	4654      	mov	r4, sl
 80104b4:	2000      	movs	r0, #0
 80104b6:	f04f 0c0a 	mov.w	ip, #10
 80104ba:	4621      	mov	r1, r4
 80104bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104c0:	3b30      	subs	r3, #48	@ 0x30
 80104c2:	2b09      	cmp	r3, #9
 80104c4:	d94b      	bls.n	801055e <_vfiprintf_r+0x1a2>
 80104c6:	b1b0      	cbz	r0, 80104f6 <_vfiprintf_r+0x13a>
 80104c8:	9207      	str	r2, [sp, #28]
 80104ca:	e014      	b.n	80104f6 <_vfiprintf_r+0x13a>
 80104cc:	eba0 0308 	sub.w	r3, r0, r8
 80104d0:	fa09 f303 	lsl.w	r3, r9, r3
 80104d4:	4313      	orrs	r3, r2
 80104d6:	9304      	str	r3, [sp, #16]
 80104d8:	46a2      	mov	sl, r4
 80104da:	e7d2      	b.n	8010482 <_vfiprintf_r+0xc6>
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	1d19      	adds	r1, r3, #4
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	9103      	str	r1, [sp, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bfbb      	ittet	lt
 80104e8:	425b      	neglt	r3, r3
 80104ea:	f042 0202 	orrlt.w	r2, r2, #2
 80104ee:	9307      	strge	r3, [sp, #28]
 80104f0:	9307      	strlt	r3, [sp, #28]
 80104f2:	bfb8      	it	lt
 80104f4:	9204      	strlt	r2, [sp, #16]
 80104f6:	7823      	ldrb	r3, [r4, #0]
 80104f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80104fa:	d10a      	bne.n	8010512 <_vfiprintf_r+0x156>
 80104fc:	7863      	ldrb	r3, [r4, #1]
 80104fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010500:	d132      	bne.n	8010568 <_vfiprintf_r+0x1ac>
 8010502:	9b03      	ldr	r3, [sp, #12]
 8010504:	1d1a      	adds	r2, r3, #4
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	9203      	str	r2, [sp, #12]
 801050a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801050e:	3402      	adds	r4, #2
 8010510:	9305      	str	r3, [sp, #20]
 8010512:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80105e8 <_vfiprintf_r+0x22c>
 8010516:	7821      	ldrb	r1, [r4, #0]
 8010518:	2203      	movs	r2, #3
 801051a:	4650      	mov	r0, sl
 801051c:	f7ef fe88 	bl	8000230 <memchr>
 8010520:	b138      	cbz	r0, 8010532 <_vfiprintf_r+0x176>
 8010522:	9b04      	ldr	r3, [sp, #16]
 8010524:	eba0 000a 	sub.w	r0, r0, sl
 8010528:	2240      	movs	r2, #64	@ 0x40
 801052a:	4082      	lsls	r2, r0
 801052c:	4313      	orrs	r3, r2
 801052e:	3401      	adds	r4, #1
 8010530:	9304      	str	r3, [sp, #16]
 8010532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010536:	4829      	ldr	r0, [pc, #164]	@ (80105dc <_vfiprintf_r+0x220>)
 8010538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801053c:	2206      	movs	r2, #6
 801053e:	f7ef fe77 	bl	8000230 <memchr>
 8010542:	2800      	cmp	r0, #0
 8010544:	d03f      	beq.n	80105c6 <_vfiprintf_r+0x20a>
 8010546:	4b26      	ldr	r3, [pc, #152]	@ (80105e0 <_vfiprintf_r+0x224>)
 8010548:	bb1b      	cbnz	r3, 8010592 <_vfiprintf_r+0x1d6>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	3307      	adds	r3, #7
 801054e:	f023 0307 	bic.w	r3, r3, #7
 8010552:	3308      	adds	r3, #8
 8010554:	9303      	str	r3, [sp, #12]
 8010556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010558:	443b      	add	r3, r7
 801055a:	9309      	str	r3, [sp, #36]	@ 0x24
 801055c:	e76a      	b.n	8010434 <_vfiprintf_r+0x78>
 801055e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010562:	460c      	mov	r4, r1
 8010564:	2001      	movs	r0, #1
 8010566:	e7a8      	b.n	80104ba <_vfiprintf_r+0xfe>
 8010568:	2300      	movs	r3, #0
 801056a:	3401      	adds	r4, #1
 801056c:	9305      	str	r3, [sp, #20]
 801056e:	4619      	mov	r1, r3
 8010570:	f04f 0c0a 	mov.w	ip, #10
 8010574:	4620      	mov	r0, r4
 8010576:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057a:	3a30      	subs	r2, #48	@ 0x30
 801057c:	2a09      	cmp	r2, #9
 801057e:	d903      	bls.n	8010588 <_vfiprintf_r+0x1cc>
 8010580:	2b00      	cmp	r3, #0
 8010582:	d0c6      	beq.n	8010512 <_vfiprintf_r+0x156>
 8010584:	9105      	str	r1, [sp, #20]
 8010586:	e7c4      	b.n	8010512 <_vfiprintf_r+0x156>
 8010588:	fb0c 2101 	mla	r1, ip, r1, r2
 801058c:	4604      	mov	r4, r0
 801058e:	2301      	movs	r3, #1
 8010590:	e7f0      	b.n	8010574 <_vfiprintf_r+0x1b8>
 8010592:	ab03      	add	r3, sp, #12
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	462a      	mov	r2, r5
 8010598:	4b12      	ldr	r3, [pc, #72]	@ (80105e4 <_vfiprintf_r+0x228>)
 801059a:	a904      	add	r1, sp, #16
 801059c:	4630      	mov	r0, r6
 801059e:	f7fb fe83 	bl	800c2a8 <_printf_float>
 80105a2:	4607      	mov	r7, r0
 80105a4:	1c78      	adds	r0, r7, #1
 80105a6:	d1d6      	bne.n	8010556 <_vfiprintf_r+0x19a>
 80105a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105aa:	07d9      	lsls	r1, r3, #31
 80105ac:	d405      	bmi.n	80105ba <_vfiprintf_r+0x1fe>
 80105ae:	89ab      	ldrh	r3, [r5, #12]
 80105b0:	059a      	lsls	r2, r3, #22
 80105b2:	d402      	bmi.n	80105ba <_vfiprintf_r+0x1fe>
 80105b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105b6:	f7fc fe17 	bl	800d1e8 <__retarget_lock_release_recursive>
 80105ba:	89ab      	ldrh	r3, [r5, #12]
 80105bc:	065b      	lsls	r3, r3, #25
 80105be:	f53f af1f 	bmi.w	8010400 <_vfiprintf_r+0x44>
 80105c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105c4:	e71e      	b.n	8010404 <_vfiprintf_r+0x48>
 80105c6:	ab03      	add	r3, sp, #12
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	462a      	mov	r2, r5
 80105cc:	4b05      	ldr	r3, [pc, #20]	@ (80105e4 <_vfiprintf_r+0x228>)
 80105ce:	a904      	add	r1, sp, #16
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7fc f901 	bl	800c7d8 <_printf_i>
 80105d6:	e7e4      	b.n	80105a2 <_vfiprintf_r+0x1e6>
 80105d8:	0801155d 	.word	0x0801155d
 80105dc:	08011567 	.word	0x08011567
 80105e0:	0800c2a9 	.word	0x0800c2a9
 80105e4:	08010399 	.word	0x08010399
 80105e8:	08011563 	.word	0x08011563

080105ec <__swbuf_r>:
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	460e      	mov	r6, r1
 80105f0:	4614      	mov	r4, r2
 80105f2:	4605      	mov	r5, r0
 80105f4:	b118      	cbz	r0, 80105fe <__swbuf_r+0x12>
 80105f6:	6a03      	ldr	r3, [r0, #32]
 80105f8:	b90b      	cbnz	r3, 80105fe <__swbuf_r+0x12>
 80105fa:	f7fc fca5 	bl	800cf48 <__sinit>
 80105fe:	69a3      	ldr	r3, [r4, #24]
 8010600:	60a3      	str	r3, [r4, #8]
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	071a      	lsls	r2, r3, #28
 8010606:	d501      	bpl.n	801060c <__swbuf_r+0x20>
 8010608:	6923      	ldr	r3, [r4, #16]
 801060a:	b943      	cbnz	r3, 801061e <__swbuf_r+0x32>
 801060c:	4621      	mov	r1, r4
 801060e:	4628      	mov	r0, r5
 8010610:	f000 f82a 	bl	8010668 <__swsetup_r>
 8010614:	b118      	cbz	r0, 801061e <__swbuf_r+0x32>
 8010616:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801061a:	4638      	mov	r0, r7
 801061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801061e:	6823      	ldr	r3, [r4, #0]
 8010620:	6922      	ldr	r2, [r4, #16]
 8010622:	1a98      	subs	r0, r3, r2
 8010624:	6963      	ldr	r3, [r4, #20]
 8010626:	b2f6      	uxtb	r6, r6
 8010628:	4283      	cmp	r3, r0
 801062a:	4637      	mov	r7, r6
 801062c:	dc05      	bgt.n	801063a <__swbuf_r+0x4e>
 801062e:	4621      	mov	r1, r4
 8010630:	4628      	mov	r0, r5
 8010632:	f7ff fa53 	bl	800fadc <_fflush_r>
 8010636:	2800      	cmp	r0, #0
 8010638:	d1ed      	bne.n	8010616 <__swbuf_r+0x2a>
 801063a:	68a3      	ldr	r3, [r4, #8]
 801063c:	3b01      	subs	r3, #1
 801063e:	60a3      	str	r3, [r4, #8]
 8010640:	6823      	ldr	r3, [r4, #0]
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	6022      	str	r2, [r4, #0]
 8010646:	701e      	strb	r6, [r3, #0]
 8010648:	6962      	ldr	r2, [r4, #20]
 801064a:	1c43      	adds	r3, r0, #1
 801064c:	429a      	cmp	r2, r3
 801064e:	d004      	beq.n	801065a <__swbuf_r+0x6e>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	07db      	lsls	r3, r3, #31
 8010654:	d5e1      	bpl.n	801061a <__swbuf_r+0x2e>
 8010656:	2e0a      	cmp	r6, #10
 8010658:	d1df      	bne.n	801061a <__swbuf_r+0x2e>
 801065a:	4621      	mov	r1, r4
 801065c:	4628      	mov	r0, r5
 801065e:	f7ff fa3d 	bl	800fadc <_fflush_r>
 8010662:	2800      	cmp	r0, #0
 8010664:	d0d9      	beq.n	801061a <__swbuf_r+0x2e>
 8010666:	e7d6      	b.n	8010616 <__swbuf_r+0x2a>

08010668 <__swsetup_r>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4b29      	ldr	r3, [pc, #164]	@ (8010710 <__swsetup_r+0xa8>)
 801066c:	4605      	mov	r5, r0
 801066e:	6818      	ldr	r0, [r3, #0]
 8010670:	460c      	mov	r4, r1
 8010672:	b118      	cbz	r0, 801067c <__swsetup_r+0x14>
 8010674:	6a03      	ldr	r3, [r0, #32]
 8010676:	b90b      	cbnz	r3, 801067c <__swsetup_r+0x14>
 8010678:	f7fc fc66 	bl	800cf48 <__sinit>
 801067c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010680:	0719      	lsls	r1, r3, #28
 8010682:	d422      	bmi.n	80106ca <__swsetup_r+0x62>
 8010684:	06da      	lsls	r2, r3, #27
 8010686:	d407      	bmi.n	8010698 <__swsetup_r+0x30>
 8010688:	2209      	movs	r2, #9
 801068a:	602a      	str	r2, [r5, #0]
 801068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010690:	81a3      	strh	r3, [r4, #12]
 8010692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010696:	e033      	b.n	8010700 <__swsetup_r+0x98>
 8010698:	0758      	lsls	r0, r3, #29
 801069a:	d512      	bpl.n	80106c2 <__swsetup_r+0x5a>
 801069c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801069e:	b141      	cbz	r1, 80106b2 <__swsetup_r+0x4a>
 80106a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106a4:	4299      	cmp	r1, r3
 80106a6:	d002      	beq.n	80106ae <__swsetup_r+0x46>
 80106a8:	4628      	mov	r0, r5
 80106aa:	f7fd fc0d 	bl	800dec8 <_free_r>
 80106ae:	2300      	movs	r3, #0
 80106b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80106b2:	89a3      	ldrh	r3, [r4, #12]
 80106b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80106b8:	81a3      	strh	r3, [r4, #12]
 80106ba:	2300      	movs	r3, #0
 80106bc:	6063      	str	r3, [r4, #4]
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	89a3      	ldrh	r3, [r4, #12]
 80106c4:	f043 0308 	orr.w	r3, r3, #8
 80106c8:	81a3      	strh	r3, [r4, #12]
 80106ca:	6923      	ldr	r3, [r4, #16]
 80106cc:	b94b      	cbnz	r3, 80106e2 <__swsetup_r+0x7a>
 80106ce:	89a3      	ldrh	r3, [r4, #12]
 80106d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80106d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106d8:	d003      	beq.n	80106e2 <__swsetup_r+0x7a>
 80106da:	4621      	mov	r1, r4
 80106dc:	4628      	mov	r0, r5
 80106de:	f000 f883 	bl	80107e8 <__smakebuf_r>
 80106e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106e6:	f013 0201 	ands.w	r2, r3, #1
 80106ea:	d00a      	beq.n	8010702 <__swsetup_r+0x9a>
 80106ec:	2200      	movs	r2, #0
 80106ee:	60a2      	str	r2, [r4, #8]
 80106f0:	6962      	ldr	r2, [r4, #20]
 80106f2:	4252      	negs	r2, r2
 80106f4:	61a2      	str	r2, [r4, #24]
 80106f6:	6922      	ldr	r2, [r4, #16]
 80106f8:	b942      	cbnz	r2, 801070c <__swsetup_r+0xa4>
 80106fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80106fe:	d1c5      	bne.n	801068c <__swsetup_r+0x24>
 8010700:	bd38      	pop	{r3, r4, r5, pc}
 8010702:	0799      	lsls	r1, r3, #30
 8010704:	bf58      	it	pl
 8010706:	6962      	ldrpl	r2, [r4, #20]
 8010708:	60a2      	str	r2, [r4, #8]
 801070a:	e7f4      	b.n	80106f6 <__swsetup_r+0x8e>
 801070c:	2000      	movs	r0, #0
 801070e:	e7f7      	b.n	8010700 <__swsetup_r+0x98>
 8010710:	200003d8 	.word	0x200003d8

08010714 <_raise_r>:
 8010714:	291f      	cmp	r1, #31
 8010716:	b538      	push	{r3, r4, r5, lr}
 8010718:	4605      	mov	r5, r0
 801071a:	460c      	mov	r4, r1
 801071c:	d904      	bls.n	8010728 <_raise_r+0x14>
 801071e:	2316      	movs	r3, #22
 8010720:	6003      	str	r3, [r0, #0]
 8010722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010726:	bd38      	pop	{r3, r4, r5, pc}
 8010728:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801072a:	b112      	cbz	r2, 8010732 <_raise_r+0x1e>
 801072c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010730:	b94b      	cbnz	r3, 8010746 <_raise_r+0x32>
 8010732:	4628      	mov	r0, r5
 8010734:	f000 f830 	bl	8010798 <_getpid_r>
 8010738:	4622      	mov	r2, r4
 801073a:	4601      	mov	r1, r0
 801073c:	4628      	mov	r0, r5
 801073e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010742:	f000 b817 	b.w	8010774 <_kill_r>
 8010746:	2b01      	cmp	r3, #1
 8010748:	d00a      	beq.n	8010760 <_raise_r+0x4c>
 801074a:	1c59      	adds	r1, r3, #1
 801074c:	d103      	bne.n	8010756 <_raise_r+0x42>
 801074e:	2316      	movs	r3, #22
 8010750:	6003      	str	r3, [r0, #0]
 8010752:	2001      	movs	r0, #1
 8010754:	e7e7      	b.n	8010726 <_raise_r+0x12>
 8010756:	2100      	movs	r1, #0
 8010758:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801075c:	4620      	mov	r0, r4
 801075e:	4798      	blx	r3
 8010760:	2000      	movs	r0, #0
 8010762:	e7e0      	b.n	8010726 <_raise_r+0x12>

08010764 <raise>:
 8010764:	4b02      	ldr	r3, [pc, #8]	@ (8010770 <raise+0xc>)
 8010766:	4601      	mov	r1, r0
 8010768:	6818      	ldr	r0, [r3, #0]
 801076a:	f7ff bfd3 	b.w	8010714 <_raise_r>
 801076e:	bf00      	nop
 8010770:	200003d8 	.word	0x200003d8

08010774 <_kill_r>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	4d07      	ldr	r5, [pc, #28]	@ (8010794 <_kill_r+0x20>)
 8010778:	2300      	movs	r3, #0
 801077a:	4604      	mov	r4, r0
 801077c:	4608      	mov	r0, r1
 801077e:	4611      	mov	r1, r2
 8010780:	602b      	str	r3, [r5, #0]
 8010782:	f7f1 fa73 	bl	8001c6c <_kill>
 8010786:	1c43      	adds	r3, r0, #1
 8010788:	d102      	bne.n	8010790 <_kill_r+0x1c>
 801078a:	682b      	ldr	r3, [r5, #0]
 801078c:	b103      	cbz	r3, 8010790 <_kill_r+0x1c>
 801078e:	6023      	str	r3, [r4, #0]
 8010790:	bd38      	pop	{r3, r4, r5, pc}
 8010792:	bf00      	nop
 8010794:	20000ec8 	.word	0x20000ec8

08010798 <_getpid_r>:
 8010798:	f7f1 ba60 	b.w	8001c5c <_getpid>

0801079c <__swhatbuf_r>:
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	460c      	mov	r4, r1
 80107a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a4:	2900      	cmp	r1, #0
 80107a6:	b096      	sub	sp, #88	@ 0x58
 80107a8:	4615      	mov	r5, r2
 80107aa:	461e      	mov	r6, r3
 80107ac:	da0d      	bge.n	80107ca <__swhatbuf_r+0x2e>
 80107ae:	89a3      	ldrh	r3, [r4, #12]
 80107b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80107b4:	f04f 0100 	mov.w	r1, #0
 80107b8:	bf14      	ite	ne
 80107ba:	2340      	movne	r3, #64	@ 0x40
 80107bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80107c0:	2000      	movs	r0, #0
 80107c2:	6031      	str	r1, [r6, #0]
 80107c4:	602b      	str	r3, [r5, #0]
 80107c6:	b016      	add	sp, #88	@ 0x58
 80107c8:	bd70      	pop	{r4, r5, r6, pc}
 80107ca:	466a      	mov	r2, sp
 80107cc:	f000 f848 	bl	8010860 <_fstat_r>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	dbec      	blt.n	80107ae <__swhatbuf_r+0x12>
 80107d4:	9901      	ldr	r1, [sp, #4]
 80107d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80107da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80107de:	4259      	negs	r1, r3
 80107e0:	4159      	adcs	r1, r3
 80107e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107e6:	e7eb      	b.n	80107c0 <__swhatbuf_r+0x24>

080107e8 <__smakebuf_r>:
 80107e8:	898b      	ldrh	r3, [r1, #12]
 80107ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107ec:	079d      	lsls	r5, r3, #30
 80107ee:	4606      	mov	r6, r0
 80107f0:	460c      	mov	r4, r1
 80107f2:	d507      	bpl.n	8010804 <__smakebuf_r+0x1c>
 80107f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	6123      	str	r3, [r4, #16]
 80107fc:	2301      	movs	r3, #1
 80107fe:	6163      	str	r3, [r4, #20]
 8010800:	b003      	add	sp, #12
 8010802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010804:	ab01      	add	r3, sp, #4
 8010806:	466a      	mov	r2, sp
 8010808:	f7ff ffc8 	bl	801079c <__swhatbuf_r>
 801080c:	9f00      	ldr	r7, [sp, #0]
 801080e:	4605      	mov	r5, r0
 8010810:	4639      	mov	r1, r7
 8010812:	4630      	mov	r0, r6
 8010814:	f7fd fbcc 	bl	800dfb0 <_malloc_r>
 8010818:	b948      	cbnz	r0, 801082e <__smakebuf_r+0x46>
 801081a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801081e:	059a      	lsls	r2, r3, #22
 8010820:	d4ee      	bmi.n	8010800 <__smakebuf_r+0x18>
 8010822:	f023 0303 	bic.w	r3, r3, #3
 8010826:	f043 0302 	orr.w	r3, r3, #2
 801082a:	81a3      	strh	r3, [r4, #12]
 801082c:	e7e2      	b.n	80107f4 <__smakebuf_r+0xc>
 801082e:	89a3      	ldrh	r3, [r4, #12]
 8010830:	6020      	str	r0, [r4, #0]
 8010832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801083e:	b15b      	cbz	r3, 8010858 <__smakebuf_r+0x70>
 8010840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010844:	4630      	mov	r0, r6
 8010846:	f000 f81d 	bl	8010884 <_isatty_r>
 801084a:	b128      	cbz	r0, 8010858 <__smakebuf_r+0x70>
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	f023 0303 	bic.w	r3, r3, #3
 8010852:	f043 0301 	orr.w	r3, r3, #1
 8010856:	81a3      	strh	r3, [r4, #12]
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	431d      	orrs	r5, r3
 801085c:	81a5      	strh	r5, [r4, #12]
 801085e:	e7cf      	b.n	8010800 <__smakebuf_r+0x18>

08010860 <_fstat_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	@ (8010880 <_fstat_r+0x20>)
 8010864:	2300      	movs	r3, #0
 8010866:	4604      	mov	r4, r0
 8010868:	4608      	mov	r0, r1
 801086a:	4611      	mov	r1, r2
 801086c:	602b      	str	r3, [r5, #0]
 801086e:	f7f1 fa5d 	bl	8001d2c <_fstat>
 8010872:	1c43      	adds	r3, r0, #1
 8010874:	d102      	bne.n	801087c <_fstat_r+0x1c>
 8010876:	682b      	ldr	r3, [r5, #0]
 8010878:	b103      	cbz	r3, 801087c <_fstat_r+0x1c>
 801087a:	6023      	str	r3, [r4, #0]
 801087c:	bd38      	pop	{r3, r4, r5, pc}
 801087e:	bf00      	nop
 8010880:	20000ec8 	.word	0x20000ec8

08010884 <_isatty_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d06      	ldr	r5, [pc, #24]	@ (80108a0 <_isatty_r+0x1c>)
 8010888:	2300      	movs	r3, #0
 801088a:	4604      	mov	r4, r0
 801088c:	4608      	mov	r0, r1
 801088e:	602b      	str	r3, [r5, #0]
 8010890:	f7f1 fa5c 	bl	8001d4c <_isatty>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_isatty_r+0x1a>
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	b103      	cbz	r3, 801089e <_isatty_r+0x1a>
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	20000ec8 	.word	0x20000ec8

080108a4 <atan2f>:
 80108a4:	f000 b88a 	b.w	80109bc <__ieee754_atan2f>

080108a8 <powf>:
 80108a8:	b508      	push	{r3, lr}
 80108aa:	ed2d 8b04 	vpush	{d8-d9}
 80108ae:	eeb0 8a60 	vmov.f32	s16, s1
 80108b2:	eeb0 9a40 	vmov.f32	s18, s0
 80108b6:	f000 f921 	bl	8010afc <__ieee754_powf>
 80108ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80108be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c2:	eef0 8a40 	vmov.f32	s17, s0
 80108c6:	d63e      	bvs.n	8010946 <powf+0x9e>
 80108c8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80108cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d0:	d112      	bne.n	80108f8 <powf+0x50>
 80108d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80108d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108da:	d039      	beq.n	8010950 <powf+0xa8>
 80108dc:	eeb0 0a48 	vmov.f32	s0, s16
 80108e0:	f000 f839 	bl	8010956 <finitef>
 80108e4:	b378      	cbz	r0, 8010946 <powf+0x9e>
 80108e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80108ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ee:	d52a      	bpl.n	8010946 <powf+0x9e>
 80108f0:	f7fc fc4e 	bl	800d190 <__errno>
 80108f4:	2322      	movs	r3, #34	@ 0x22
 80108f6:	e014      	b.n	8010922 <powf+0x7a>
 80108f8:	f000 f82d 	bl	8010956 <finitef>
 80108fc:	b998      	cbnz	r0, 8010926 <powf+0x7e>
 80108fe:	eeb0 0a49 	vmov.f32	s0, s18
 8010902:	f000 f828 	bl	8010956 <finitef>
 8010906:	b170      	cbz	r0, 8010926 <powf+0x7e>
 8010908:	eeb0 0a48 	vmov.f32	s0, s16
 801090c:	f000 f823 	bl	8010956 <finitef>
 8010910:	b148      	cbz	r0, 8010926 <powf+0x7e>
 8010912:	eef4 8a68 	vcmp.f32	s17, s17
 8010916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801091a:	d7e9      	bvc.n	80108f0 <powf+0x48>
 801091c:	f7fc fc38 	bl	800d190 <__errno>
 8010920:	2321      	movs	r3, #33	@ 0x21
 8010922:	6003      	str	r3, [r0, #0]
 8010924:	e00f      	b.n	8010946 <powf+0x9e>
 8010926:	eef5 8a40 	vcmp.f32	s17, #0.0
 801092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092e:	d10a      	bne.n	8010946 <powf+0x9e>
 8010930:	eeb0 0a49 	vmov.f32	s0, s18
 8010934:	f000 f80f 	bl	8010956 <finitef>
 8010938:	b128      	cbz	r0, 8010946 <powf+0x9e>
 801093a:	eeb0 0a48 	vmov.f32	s0, s16
 801093e:	f000 f80a 	bl	8010956 <finitef>
 8010942:	2800      	cmp	r0, #0
 8010944:	d1d4      	bne.n	80108f0 <powf+0x48>
 8010946:	eeb0 0a68 	vmov.f32	s0, s17
 801094a:	ecbd 8b04 	vpop	{d8-d9}
 801094e:	bd08      	pop	{r3, pc}
 8010950:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010954:	e7f7      	b.n	8010946 <powf+0x9e>

08010956 <finitef>:
 8010956:	ee10 3a10 	vmov	r3, s0
 801095a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801095e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010962:	bfac      	ite	ge
 8010964:	2000      	movge	r0, #0
 8010966:	2001      	movlt	r0, #1
 8010968:	4770      	bx	lr

0801096a <with_errnof>:
 801096a:	b510      	push	{r4, lr}
 801096c:	ed2d 8b02 	vpush	{d8}
 8010970:	eeb0 8a40 	vmov.f32	s16, s0
 8010974:	4604      	mov	r4, r0
 8010976:	f7fc fc0b 	bl	800d190 <__errno>
 801097a:	eeb0 0a48 	vmov.f32	s0, s16
 801097e:	ecbd 8b02 	vpop	{d8}
 8010982:	6004      	str	r4, [r0, #0]
 8010984:	bd10      	pop	{r4, pc}

08010986 <xflowf>:
 8010986:	b130      	cbz	r0, 8010996 <xflowf+0x10>
 8010988:	eef1 7a40 	vneg.f32	s15, s0
 801098c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010990:	2022      	movs	r0, #34	@ 0x22
 8010992:	f7ff bfea 	b.w	801096a <with_errnof>
 8010996:	eef0 7a40 	vmov.f32	s15, s0
 801099a:	e7f7      	b.n	801098c <xflowf+0x6>

0801099c <__math_uflowf>:
 801099c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80109a4 <__math_uflowf+0x8>
 80109a0:	f7ff bff1 	b.w	8010986 <xflowf>
 80109a4:	10000000 	.word	0x10000000

080109a8 <__math_oflowf>:
 80109a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80109b0 <__math_oflowf+0x8>
 80109ac:	f7ff bfeb 	b.w	8010986 <xflowf>
 80109b0:	70000000 	.word	0x70000000

080109b4 <__ieee754_sqrtf>:
 80109b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80109b8:	4770      	bx	lr
	...

080109bc <__ieee754_atan2f>:
 80109bc:	ee10 2a90 	vmov	r2, s1
 80109c0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80109c4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80109c8:	b510      	push	{r4, lr}
 80109ca:	eef0 7a40 	vmov.f32	s15, s0
 80109ce:	d806      	bhi.n	80109de <__ieee754_atan2f+0x22>
 80109d0:	ee10 0a10 	vmov	r0, s0
 80109d4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80109d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80109dc:	d904      	bls.n	80109e8 <__ieee754_atan2f+0x2c>
 80109de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80109e2:	eeb0 0a67 	vmov.f32	s0, s15
 80109e6:	bd10      	pop	{r4, pc}
 80109e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80109ec:	d103      	bne.n	80109f6 <__ieee754_atan2f+0x3a>
 80109ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109f2:	f000 bb51 	b.w	8011098 <atanf>
 80109f6:	1794      	asrs	r4, r2, #30
 80109f8:	f004 0402 	and.w	r4, r4, #2
 80109fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010a00:	b943      	cbnz	r3, 8010a14 <__ieee754_atan2f+0x58>
 8010a02:	2c02      	cmp	r4, #2
 8010a04:	d05e      	beq.n	8010ac4 <__ieee754_atan2f+0x108>
 8010a06:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010ad8 <__ieee754_atan2f+0x11c>
 8010a0a:	2c03      	cmp	r4, #3
 8010a0c:	bf08      	it	eq
 8010a0e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010a12:	e7e6      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010a14:	b941      	cbnz	r1, 8010a28 <__ieee754_atan2f+0x6c>
 8010a16:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010adc <__ieee754_atan2f+0x120>
 8010a1a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010ae0 <__ieee754_atan2f+0x124>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	bfa8      	it	ge
 8010a22:	eef0 7a47 	vmovge.f32	s15, s14
 8010a26:	e7dc      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010a28:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010a2c:	d110      	bne.n	8010a50 <__ieee754_atan2f+0x94>
 8010a2e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010a32:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8010a36:	d107      	bne.n	8010a48 <__ieee754_atan2f+0x8c>
 8010a38:	2c02      	cmp	r4, #2
 8010a3a:	d846      	bhi.n	8010aca <__ieee754_atan2f+0x10e>
 8010a3c:	4b29      	ldr	r3, [pc, #164]	@ (8010ae4 <__ieee754_atan2f+0x128>)
 8010a3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010a42:	edd3 7a00 	vldr	s15, [r3]
 8010a46:	e7cc      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010a48:	2c02      	cmp	r4, #2
 8010a4a:	d841      	bhi.n	8010ad0 <__ieee754_atan2f+0x114>
 8010a4c:	4b26      	ldr	r3, [pc, #152]	@ (8010ae8 <__ieee754_atan2f+0x12c>)
 8010a4e:	e7f6      	b.n	8010a3e <__ieee754_atan2f+0x82>
 8010a50:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010a54:	d0df      	beq.n	8010a16 <__ieee754_atan2f+0x5a>
 8010a56:	1a5b      	subs	r3, r3, r1
 8010a58:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010a5c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010a60:	da1a      	bge.n	8010a98 <__ieee754_atan2f+0xdc>
 8010a62:	2a00      	cmp	r2, #0
 8010a64:	da01      	bge.n	8010a6a <__ieee754_atan2f+0xae>
 8010a66:	313c      	adds	r1, #60	@ 0x3c
 8010a68:	db19      	blt.n	8010a9e <__ieee754_atan2f+0xe2>
 8010a6a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010a6e:	f000 fbe7 	bl	8011240 <fabsf>
 8010a72:	f000 fb11 	bl	8011098 <atanf>
 8010a76:	eef0 7a40 	vmov.f32	s15, s0
 8010a7a:	2c01      	cmp	r4, #1
 8010a7c:	d012      	beq.n	8010aa4 <__ieee754_atan2f+0xe8>
 8010a7e:	2c02      	cmp	r4, #2
 8010a80:	d017      	beq.n	8010ab2 <__ieee754_atan2f+0xf6>
 8010a82:	2c00      	cmp	r4, #0
 8010a84:	d0ad      	beq.n	80109e2 <__ieee754_atan2f+0x26>
 8010a86:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010aec <__ieee754_atan2f+0x130>
 8010a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a8e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010af0 <__ieee754_atan2f+0x134>
 8010a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a96:	e7a4      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010a98:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8010ae0 <__ieee754_atan2f+0x124>
 8010a9c:	e7ed      	b.n	8010a7a <__ieee754_atan2f+0xbe>
 8010a9e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010af4 <__ieee754_atan2f+0x138>
 8010aa2:	e7ea      	b.n	8010a7a <__ieee754_atan2f+0xbe>
 8010aa4:	ee17 3a90 	vmov	r3, s15
 8010aa8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010aac:	ee07 3a90 	vmov	s15, r3
 8010ab0:	e797      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010ab2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010aec <__ieee754_atan2f+0x130>
 8010ab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010aba:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010af0 <__ieee754_atan2f+0x134>
 8010abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ac2:	e78e      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010ac4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010af0 <__ieee754_atan2f+0x134>
 8010ac8:	e78b      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010aca:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010af8 <__ieee754_atan2f+0x13c>
 8010ace:	e788      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010ad0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010af4 <__ieee754_atan2f+0x138>
 8010ad4:	e785      	b.n	80109e2 <__ieee754_atan2f+0x26>
 8010ad6:	bf00      	nop
 8010ad8:	c0490fdb 	.word	0xc0490fdb
 8010adc:	bfc90fdb 	.word	0xbfc90fdb
 8010ae0:	3fc90fdb 	.word	0x3fc90fdb
 8010ae4:	08011870 	.word	0x08011870
 8010ae8:	08011864 	.word	0x08011864
 8010aec:	33bbbd2e 	.word	0x33bbbd2e
 8010af0:	40490fdb 	.word	0x40490fdb
 8010af4:	00000000 	.word	0x00000000
 8010af8:	3f490fdb 	.word	0x3f490fdb

08010afc <__ieee754_powf>:
 8010afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b00:	ee10 4a90 	vmov	r4, s1
 8010b04:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010b08:	ed2d 8b02 	vpush	{d8}
 8010b0c:	ee10 6a10 	vmov	r6, s0
 8010b10:	eeb0 8a40 	vmov.f32	s16, s0
 8010b14:	eef0 8a60 	vmov.f32	s17, s1
 8010b18:	d10c      	bne.n	8010b34 <__ieee754_powf+0x38>
 8010b1a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8010b1e:	0076      	lsls	r6, r6, #1
 8010b20:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010b24:	f240 8274 	bls.w	8011010 <__ieee754_powf+0x514>
 8010b28:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010b2c:	ecbd 8b02 	vpop	{d8}
 8010b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b34:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010b38:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010b3c:	d802      	bhi.n	8010b44 <__ieee754_powf+0x48>
 8010b3e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010b42:	d908      	bls.n	8010b56 <__ieee754_powf+0x5a>
 8010b44:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010b48:	d1ee      	bne.n	8010b28 <__ieee754_powf+0x2c>
 8010b4a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010b4e:	0064      	lsls	r4, r4, #1
 8010b50:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010b54:	e7e6      	b.n	8010b24 <__ieee754_powf+0x28>
 8010b56:	2e00      	cmp	r6, #0
 8010b58:	da1f      	bge.n	8010b9a <__ieee754_powf+0x9e>
 8010b5a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010b5e:	f080 8260 	bcs.w	8011022 <__ieee754_powf+0x526>
 8010b62:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010b66:	d32f      	bcc.n	8010bc8 <__ieee754_powf+0xcc>
 8010b68:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010b6c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010b70:	fa49 f503 	asr.w	r5, r9, r3
 8010b74:	fa05 f303 	lsl.w	r3, r5, r3
 8010b78:	454b      	cmp	r3, r9
 8010b7a:	d123      	bne.n	8010bc4 <__ieee754_powf+0xc8>
 8010b7c:	f005 0501 	and.w	r5, r5, #1
 8010b80:	f1c5 0502 	rsb	r5, r5, #2
 8010b84:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010b88:	d11f      	bne.n	8010bca <__ieee754_powf+0xce>
 8010b8a:	2c00      	cmp	r4, #0
 8010b8c:	f280 8246 	bge.w	801101c <__ieee754_powf+0x520>
 8010b90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010b94:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010b98:	e7c8      	b.n	8010b2c <__ieee754_powf+0x30>
 8010b9a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010b9e:	d111      	bne.n	8010bc4 <__ieee754_powf+0xc8>
 8010ba0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010ba4:	f000 8234 	beq.w	8011010 <__ieee754_powf+0x514>
 8010ba8:	d906      	bls.n	8010bb8 <__ieee754_powf+0xbc>
 8010baa:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010ec0 <__ieee754_powf+0x3c4>
 8010bae:	2c00      	cmp	r4, #0
 8010bb0:	bfa8      	it	ge
 8010bb2:	eeb0 0a68 	vmovge.f32	s0, s17
 8010bb6:	e7b9      	b.n	8010b2c <__ieee754_powf+0x30>
 8010bb8:	2c00      	cmp	r4, #0
 8010bba:	f280 822c 	bge.w	8011016 <__ieee754_powf+0x51a>
 8010bbe:	eeb1 0a68 	vneg.f32	s0, s17
 8010bc2:	e7b3      	b.n	8010b2c <__ieee754_powf+0x30>
 8010bc4:	2500      	movs	r5, #0
 8010bc6:	e7dd      	b.n	8010b84 <__ieee754_powf+0x88>
 8010bc8:	2500      	movs	r5, #0
 8010bca:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010bce:	d102      	bne.n	8010bd6 <__ieee754_powf+0xda>
 8010bd0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010bd4:	e7aa      	b.n	8010b2c <__ieee754_powf+0x30>
 8010bd6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010bda:	f040 8227 	bne.w	801102c <__ieee754_powf+0x530>
 8010bde:	2e00      	cmp	r6, #0
 8010be0:	f2c0 8224 	blt.w	801102c <__ieee754_powf+0x530>
 8010be4:	eeb0 0a48 	vmov.f32	s0, s16
 8010be8:	ecbd 8b02 	vpop	{d8}
 8010bec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf0:	f7ff bee0 	b.w	80109b4 <__ieee754_sqrtf>
 8010bf4:	2d01      	cmp	r5, #1
 8010bf6:	d199      	bne.n	8010b2c <__ieee754_powf+0x30>
 8010bf8:	eeb1 0a40 	vneg.f32	s0, s0
 8010bfc:	e796      	b.n	8010b2c <__ieee754_powf+0x30>
 8010bfe:	0ff0      	lsrs	r0, r6, #31
 8010c00:	3801      	subs	r0, #1
 8010c02:	ea55 0300 	orrs.w	r3, r5, r0
 8010c06:	d104      	bne.n	8010c12 <__ieee754_powf+0x116>
 8010c08:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010c0c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010c10:	e78c      	b.n	8010b2c <__ieee754_powf+0x30>
 8010c12:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8010c16:	d96d      	bls.n	8010cf4 <__ieee754_powf+0x1f8>
 8010c18:	4baa      	ldr	r3, [pc, #680]	@ (8010ec4 <__ieee754_powf+0x3c8>)
 8010c1a:	4598      	cmp	r8, r3
 8010c1c:	d808      	bhi.n	8010c30 <__ieee754_powf+0x134>
 8010c1e:	2c00      	cmp	r4, #0
 8010c20:	da0b      	bge.n	8010c3a <__ieee754_powf+0x13e>
 8010c22:	2000      	movs	r0, #0
 8010c24:	ecbd 8b02 	vpop	{d8}
 8010c28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c2c:	f7ff bebc 	b.w	80109a8 <__math_oflowf>
 8010c30:	4ba5      	ldr	r3, [pc, #660]	@ (8010ec8 <__ieee754_powf+0x3cc>)
 8010c32:	4598      	cmp	r8, r3
 8010c34:	d908      	bls.n	8010c48 <__ieee754_powf+0x14c>
 8010c36:	2c00      	cmp	r4, #0
 8010c38:	dcf3      	bgt.n	8010c22 <__ieee754_powf+0x126>
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	ecbd 8b02 	vpop	{d8}
 8010c40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c44:	f7ff beaa 	b.w	801099c <__math_uflowf>
 8010c48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010c4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010c50:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010ecc <__ieee754_powf+0x3d0>
 8010c54:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010c58:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010c5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010c60:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010c64:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010c68:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010ed0 <__ieee754_powf+0x3d4>
 8010c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c70:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8010ed4 <__ieee754_powf+0x3d8>
 8010c74:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010c78:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8010ed8 <__ieee754_powf+0x3dc>
 8010c7c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010c80:	eeb0 7a67 	vmov.f32	s14, s15
 8010c84:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010c88:	ee17 3a10 	vmov	r3, s14
 8010c8c:	f36f 030b 	bfc	r3, #0, #12
 8010c90:	ee07 3a10 	vmov	s14, r3
 8010c94:	eeb0 6a47 	vmov.f32	s12, s14
 8010c98:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010c9c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010ca0:	3d01      	subs	r5, #1
 8010ca2:	4305      	orrs	r5, r0
 8010ca4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ca8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010cac:	f36f 040b 	bfc	r4, #0, #12
 8010cb0:	bf18      	it	ne
 8010cb2:	eeb0 8a66 	vmovne.f32	s16, s13
 8010cb6:	ee06 4a90 	vmov	s13, r4
 8010cba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010cbe:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010cc2:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010cc6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010cca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010cce:	ee17 1a10 	vmov	r1, s14
 8010cd2:	2900      	cmp	r1, #0
 8010cd4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010cd8:	f340 80dd 	ble.w	8010e96 <__ieee754_powf+0x39a>
 8010cdc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010ce0:	f240 80ca 	bls.w	8010e78 <__ieee754_powf+0x37c>
 8010ce4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cec:	bf4c      	ite	mi
 8010cee:	2001      	movmi	r0, #1
 8010cf0:	2000      	movpl	r0, #0
 8010cf2:	e797      	b.n	8010c24 <__ieee754_powf+0x128>
 8010cf4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010cf8:	bf01      	itttt	eq
 8010cfa:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010edc <__ieee754_powf+0x3e0>
 8010cfe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010d02:	f06f 0317 	mvneq.w	r3, #23
 8010d06:	ee17 7a90 	vmoveq	r7, s15
 8010d0a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010d0e:	bf18      	it	ne
 8010d10:	2300      	movne	r3, #0
 8010d12:	3a7f      	subs	r2, #127	@ 0x7f
 8010d14:	441a      	add	r2, r3
 8010d16:	4b72      	ldr	r3, [pc, #456]	@ (8010ee0 <__ieee754_powf+0x3e4>)
 8010d18:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010d1c:	429f      	cmp	r7, r3
 8010d1e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010d22:	dd06      	ble.n	8010d32 <__ieee754_powf+0x236>
 8010d24:	4b6f      	ldr	r3, [pc, #444]	@ (8010ee4 <__ieee754_powf+0x3e8>)
 8010d26:	429f      	cmp	r7, r3
 8010d28:	f340 80a4 	ble.w	8010e74 <__ieee754_powf+0x378>
 8010d2c:	3201      	adds	r2, #1
 8010d2e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010d32:	2600      	movs	r6, #0
 8010d34:	4b6c      	ldr	r3, [pc, #432]	@ (8010ee8 <__ieee754_powf+0x3ec>)
 8010d36:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010d3a:	ee07 1a10 	vmov	s14, r1
 8010d3e:	edd3 5a00 	vldr	s11, [r3]
 8010d42:	4b6a      	ldr	r3, [pc, #424]	@ (8010eec <__ieee754_powf+0x3f0>)
 8010d44:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010d4c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010d50:	1049      	asrs	r1, r1, #1
 8010d52:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010d56:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010d5a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010d5e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010d62:	ee07 1a90 	vmov	s15, r1
 8010d66:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010d6a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010d6e:	ee15 7a10 	vmov	r7, s10
 8010d72:	401f      	ands	r7, r3
 8010d74:	ee06 7a90 	vmov	s13, r7
 8010d78:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010d7c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010d80:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010d84:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010d88:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010ef0 <__ieee754_powf+0x3f4>
 8010d8c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010ef4 <__ieee754_powf+0x3f8>
 8010d90:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010d94:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010ef8 <__ieee754_powf+0x3fc>
 8010d98:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010d9c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010ecc <__ieee754_powf+0x3d0>
 8010da0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010da4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010efc <__ieee754_powf+0x400>
 8010da8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010dac:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010f00 <__ieee754_powf+0x404>
 8010db0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010db4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010db8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010dbc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010dc0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010dc4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010dc8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010dcc:	eef0 5a67 	vmov.f32	s11, s15
 8010dd0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010dd4:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010dd8:	ee15 1a90 	vmov	r1, s11
 8010ddc:	4019      	ands	r1, r3
 8010dde:	ee05 1a90 	vmov	s11, r1
 8010de2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010de6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8010dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dee:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010df2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010df6:	eeb0 6a67 	vmov.f32	s12, s15
 8010dfa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010dfe:	ee16 1a10 	vmov	r1, s12
 8010e02:	4019      	ands	r1, r3
 8010e04:	ee06 1a10 	vmov	s12, r1
 8010e08:	eeb0 7a46 	vmov.f32	s14, s12
 8010e0c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010e10:	493c      	ldr	r1, [pc, #240]	@ (8010f04 <__ieee754_powf+0x408>)
 8010e12:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8010e16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e1a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010f08 <__ieee754_powf+0x40c>
 8010e1e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010f0c <__ieee754_powf+0x410>
 8010e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e26:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010f10 <__ieee754_powf+0x414>
 8010e2a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010e2e:	ed91 7a00 	vldr	s14, [r1]
 8010e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e36:	ee07 2a10 	vmov	s14, r2
 8010e3a:	4a36      	ldr	r2, [pc, #216]	@ (8010f14 <__ieee754_powf+0x418>)
 8010e3c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010e40:	eeb0 7a67 	vmov.f32	s14, s15
 8010e44:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010e48:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010e4c:	ed92 5a00 	vldr	s10, [r2]
 8010e50:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010e54:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010e58:	ee17 2a10 	vmov	r2, s14
 8010e5c:	401a      	ands	r2, r3
 8010e5e:	ee07 2a10 	vmov	s14, r2
 8010e62:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010e66:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010e6a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010e6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010e72:	e715      	b.n	8010ca0 <__ieee754_powf+0x1a4>
 8010e74:	2601      	movs	r6, #1
 8010e76:	e75d      	b.n	8010d34 <__ieee754_powf+0x238>
 8010e78:	d152      	bne.n	8010f20 <__ieee754_powf+0x424>
 8010e7a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010f18 <__ieee754_powf+0x41c>
 8010e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e82:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010e86:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	f73f af29 	bgt.w	8010ce4 <__ieee754_powf+0x1e8>
 8010e92:	2386      	movs	r3, #134	@ 0x86
 8010e94:	e048      	b.n	8010f28 <__ieee754_powf+0x42c>
 8010e96:	4a21      	ldr	r2, [pc, #132]	@ (8010f1c <__ieee754_powf+0x420>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d907      	bls.n	8010eac <__ieee754_powf+0x3b0>
 8010e9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea4:	bf4c      	ite	mi
 8010ea6:	2001      	movmi	r0, #1
 8010ea8:	2000      	movpl	r0, #0
 8010eaa:	e6c7      	b.n	8010c3c <__ieee754_powf+0x140>
 8010eac:	d138      	bne.n	8010f20 <__ieee754_powf+0x424>
 8010eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010eb2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eba:	dbea      	blt.n	8010e92 <__ieee754_powf+0x396>
 8010ebc:	e7ee      	b.n	8010e9c <__ieee754_powf+0x3a0>
 8010ebe:	bf00      	nop
 8010ec0:	00000000 	.word	0x00000000
 8010ec4:	3f7ffff3 	.word	0x3f7ffff3
 8010ec8:	3f800007 	.word	0x3f800007
 8010ecc:	3eaaaaab 	.word	0x3eaaaaab
 8010ed0:	3fb8aa00 	.word	0x3fb8aa00
 8010ed4:	3fb8aa3b 	.word	0x3fb8aa3b
 8010ed8:	36eca570 	.word	0x36eca570
 8010edc:	4b800000 	.word	0x4b800000
 8010ee0:	001cc471 	.word	0x001cc471
 8010ee4:	005db3d6 	.word	0x005db3d6
 8010ee8:	0801188c 	.word	0x0801188c
 8010eec:	fffff000 	.word	0xfffff000
 8010ef0:	3e6c3255 	.word	0x3e6c3255
 8010ef4:	3e53f142 	.word	0x3e53f142
 8010ef8:	3e8ba305 	.word	0x3e8ba305
 8010efc:	3edb6db7 	.word	0x3edb6db7
 8010f00:	3f19999a 	.word	0x3f19999a
 8010f04:	0801187c 	.word	0x0801187c
 8010f08:	3f76384f 	.word	0x3f76384f
 8010f0c:	3f763800 	.word	0x3f763800
 8010f10:	369dc3a0 	.word	0x369dc3a0
 8010f14:	08011884 	.word	0x08011884
 8010f18:	3338aa3c 	.word	0x3338aa3c
 8010f1c:	43160000 	.word	0x43160000
 8010f20:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010f24:	d96f      	bls.n	8011006 <__ieee754_powf+0x50a>
 8010f26:	15db      	asrs	r3, r3, #23
 8010f28:	3b7e      	subs	r3, #126	@ 0x7e
 8010f2a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010f2e:	4118      	asrs	r0, r3
 8010f30:	4408      	add	r0, r1
 8010f32:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010f36:	4a4e      	ldr	r2, [pc, #312]	@ (8011070 <__ieee754_powf+0x574>)
 8010f38:	3b7f      	subs	r3, #127	@ 0x7f
 8010f3a:	411a      	asrs	r2, r3
 8010f3c:	4002      	ands	r2, r0
 8010f3e:	ee07 2a10 	vmov	s14, r2
 8010f42:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010f4a:	f1c3 0317 	rsb	r3, r3, #23
 8010f4e:	4118      	asrs	r0, r3
 8010f50:	2900      	cmp	r1, #0
 8010f52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f56:	bfb8      	it	lt
 8010f58:	4240      	neglt	r0, r0
 8010f5a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010f5e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8011074 <__ieee754_powf+0x578>
 8010f62:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8011078 <__ieee754_powf+0x57c>
 8010f66:	ee16 3a90 	vmov	r3, s13
 8010f6a:	f36f 030b 	bfc	r3, #0, #12
 8010f6e:	ee06 3a90 	vmov	s13, r3
 8010f72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010f76:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f7a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010f7e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801107c <__ieee754_powf+0x580>
 8010f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f86:	eee0 7a87 	vfma.f32	s15, s1, s14
 8010f8a:	eeb0 7a67 	vmov.f32	s14, s15
 8010f8e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010f92:	eef0 5a47 	vmov.f32	s11, s14
 8010f96:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8010f9a:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010f9e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010fa2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8011080 <__ieee754_powf+0x584>
 8010fa6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8011084 <__ieee754_powf+0x588>
 8010faa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010fae:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8011088 <__ieee754_powf+0x58c>
 8010fb2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010fb6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801108c <__ieee754_powf+0x590>
 8010fba:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010fbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011090 <__ieee754_powf+0x594>
 8010fc2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010fc6:	eeb0 6a47 	vmov.f32	s12, s14
 8010fca:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010fce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010fd2:	ee67 5a06 	vmul.f32	s11, s14, s12
 8010fd6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010fda:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010fde:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010fe2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010fe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010fea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010fee:	ee10 3a10 	vmov	r3, s0
 8010ff2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010ff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010ffa:	da06      	bge.n	801100a <__ieee754_powf+0x50e>
 8010ffc:	f000 f928 	bl	8011250 <scalbnf>
 8011000:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011004:	e592      	b.n	8010b2c <__ieee754_powf+0x30>
 8011006:	2000      	movs	r0, #0
 8011008:	e7a7      	b.n	8010f5a <__ieee754_powf+0x45e>
 801100a:	ee00 3a10 	vmov	s0, r3
 801100e:	e7f7      	b.n	8011000 <__ieee754_powf+0x504>
 8011010:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011014:	e58a      	b.n	8010b2c <__ieee754_powf+0x30>
 8011016:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8011094 <__ieee754_powf+0x598>
 801101a:	e587      	b.n	8010b2c <__ieee754_powf+0x30>
 801101c:	eeb0 0a48 	vmov.f32	s0, s16
 8011020:	e584      	b.n	8010b2c <__ieee754_powf+0x30>
 8011022:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011026:	f43f adbb 	beq.w	8010ba0 <__ieee754_powf+0xa4>
 801102a:	2502      	movs	r5, #2
 801102c:	eeb0 0a48 	vmov.f32	s0, s16
 8011030:	f000 f906 	bl	8011240 <fabsf>
 8011034:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011038:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801103c:	4647      	mov	r7, r8
 801103e:	d003      	beq.n	8011048 <__ieee754_powf+0x54c>
 8011040:	f1b8 0f00 	cmp.w	r8, #0
 8011044:	f47f addb 	bne.w	8010bfe <__ieee754_powf+0x102>
 8011048:	2c00      	cmp	r4, #0
 801104a:	bfbc      	itt	lt
 801104c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8011050:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011054:	2e00      	cmp	r6, #0
 8011056:	f6bf ad69 	bge.w	8010b2c <__ieee754_powf+0x30>
 801105a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801105e:	ea58 0805 	orrs.w	r8, r8, r5
 8011062:	f47f adc7 	bne.w	8010bf4 <__ieee754_powf+0xf8>
 8011066:	ee70 7a40 	vsub.f32	s15, s0, s0
 801106a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801106e:	e55d      	b.n	8010b2c <__ieee754_powf+0x30>
 8011070:	ff800000 	.word	0xff800000
 8011074:	3f317218 	.word	0x3f317218
 8011078:	3f317200 	.word	0x3f317200
 801107c:	35bfbe8c 	.word	0x35bfbe8c
 8011080:	b5ddea0e 	.word	0xb5ddea0e
 8011084:	3331bb4c 	.word	0x3331bb4c
 8011088:	388ab355 	.word	0x388ab355
 801108c:	bb360b61 	.word	0xbb360b61
 8011090:	3e2aaaab 	.word	0x3e2aaaab
 8011094:	00000000 	.word	0x00000000

08011098 <atanf>:
 8011098:	b538      	push	{r3, r4, r5, lr}
 801109a:	ee10 5a10 	vmov	r5, s0
 801109e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80110a2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80110a6:	eef0 7a40 	vmov.f32	s15, s0
 80110aa:	d310      	bcc.n	80110ce <atanf+0x36>
 80110ac:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80110b0:	d904      	bls.n	80110bc <atanf+0x24>
 80110b2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80110b6:	eeb0 0a67 	vmov.f32	s0, s15
 80110ba:	bd38      	pop	{r3, r4, r5, pc}
 80110bc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80111f4 <atanf+0x15c>
 80110c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80111f8 <atanf+0x160>
 80110c4:	2d00      	cmp	r5, #0
 80110c6:	bfc8      	it	gt
 80110c8:	eef0 7a47 	vmovgt.f32	s15, s14
 80110cc:	e7f3      	b.n	80110b6 <atanf+0x1e>
 80110ce:	4b4b      	ldr	r3, [pc, #300]	@ (80111fc <atanf+0x164>)
 80110d0:	429c      	cmp	r4, r3
 80110d2:	d810      	bhi.n	80110f6 <atanf+0x5e>
 80110d4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80110d8:	d20a      	bcs.n	80110f0 <atanf+0x58>
 80110da:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011200 <atanf+0x168>
 80110de:	ee30 7a07 	vadd.f32	s14, s0, s14
 80110e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80110ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ee:	dce2      	bgt.n	80110b6 <atanf+0x1e>
 80110f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110f4:	e013      	b.n	801111e <atanf+0x86>
 80110f6:	f000 f8a3 	bl	8011240 <fabsf>
 80110fa:	4b42      	ldr	r3, [pc, #264]	@ (8011204 <atanf+0x16c>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	d84f      	bhi.n	80111a0 <atanf+0x108>
 8011100:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011104:	429c      	cmp	r4, r3
 8011106:	d841      	bhi.n	801118c <atanf+0xf4>
 8011108:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801110c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011110:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011114:	2300      	movs	r3, #0
 8011116:	ee30 0a27 	vadd.f32	s0, s0, s15
 801111a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801111e:	1c5a      	adds	r2, r3, #1
 8011120:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011124:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011208 <atanf+0x170>
 8011128:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801120c <atanf+0x174>
 801112c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011210 <atanf+0x178>
 8011130:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011134:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011138:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011214 <atanf+0x17c>
 801113c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011140:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011218 <atanf+0x180>
 8011144:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011148:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801121c <atanf+0x184>
 801114c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011150:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011220 <atanf+0x188>
 8011154:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011158:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011224 <atanf+0x18c>
 801115c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011160:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011228 <atanf+0x190>
 8011164:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011168:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801122c <atanf+0x194>
 801116c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011170:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011230 <atanf+0x198>
 8011174:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011178:	ee27 7a26 	vmul.f32	s14, s14, s13
 801117c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011180:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011184:	d121      	bne.n	80111ca <atanf+0x132>
 8011186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801118a:	e794      	b.n	80110b6 <atanf+0x1e>
 801118c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011190:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011194:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011198:	2301      	movs	r3, #1
 801119a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801119e:	e7be      	b.n	801111e <atanf+0x86>
 80111a0:	4b24      	ldr	r3, [pc, #144]	@ (8011234 <atanf+0x19c>)
 80111a2:	429c      	cmp	r4, r3
 80111a4:	d80b      	bhi.n	80111be <atanf+0x126>
 80111a6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80111aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80111ae:	eea0 7a27 	vfma.f32	s14, s0, s15
 80111b2:	2302      	movs	r3, #2
 80111b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80111b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111bc:	e7af      	b.n	801111e <atanf+0x86>
 80111be:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80111c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80111c6:	2303      	movs	r3, #3
 80111c8:	e7a9      	b.n	801111e <atanf+0x86>
 80111ca:	4a1b      	ldr	r2, [pc, #108]	@ (8011238 <atanf+0x1a0>)
 80111cc:	491b      	ldr	r1, [pc, #108]	@ (801123c <atanf+0x1a4>)
 80111ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80111d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80111d6:	edd3 6a00 	vldr	s13, [r3]
 80111da:	ee37 7a66 	vsub.f32	s14, s14, s13
 80111de:	2d00      	cmp	r5, #0
 80111e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80111e4:	edd2 7a00 	vldr	s15, [r2]
 80111e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111ec:	bfb8      	it	lt
 80111ee:	eef1 7a67 	vneglt.f32	s15, s15
 80111f2:	e760      	b.n	80110b6 <atanf+0x1e>
 80111f4:	bfc90fdb 	.word	0xbfc90fdb
 80111f8:	3fc90fdb 	.word	0x3fc90fdb
 80111fc:	3edfffff 	.word	0x3edfffff
 8011200:	7149f2ca 	.word	0x7149f2ca
 8011204:	3f97ffff 	.word	0x3f97ffff
 8011208:	3c8569d7 	.word	0x3c8569d7
 801120c:	3d4bda59 	.word	0x3d4bda59
 8011210:	bd6ef16b 	.word	0xbd6ef16b
 8011214:	3d886b35 	.word	0x3d886b35
 8011218:	3dba2e6e 	.word	0x3dba2e6e
 801121c:	3e124925 	.word	0x3e124925
 8011220:	3eaaaaab 	.word	0x3eaaaaab
 8011224:	bd15a221 	.word	0xbd15a221
 8011228:	bd9d8795 	.word	0xbd9d8795
 801122c:	bde38e38 	.word	0xbde38e38
 8011230:	be4ccccd 	.word	0xbe4ccccd
 8011234:	401bffff 	.word	0x401bffff
 8011238:	080118a4 	.word	0x080118a4
 801123c:	08011894 	.word	0x08011894

08011240 <fabsf>:
 8011240:	ee10 3a10 	vmov	r3, s0
 8011244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011248:	ee00 3a10 	vmov	s0, r3
 801124c:	4770      	bx	lr
	...

08011250 <scalbnf>:
 8011250:	ee10 3a10 	vmov	r3, s0
 8011254:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011258:	d02b      	beq.n	80112b2 <scalbnf+0x62>
 801125a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801125e:	d302      	bcc.n	8011266 <scalbnf+0x16>
 8011260:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011264:	4770      	bx	lr
 8011266:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801126a:	d123      	bne.n	80112b4 <scalbnf+0x64>
 801126c:	4b24      	ldr	r3, [pc, #144]	@ (8011300 <scalbnf+0xb0>)
 801126e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011304 <scalbnf+0xb4>
 8011272:	4298      	cmp	r0, r3
 8011274:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011278:	db17      	blt.n	80112aa <scalbnf+0x5a>
 801127a:	ee10 3a10 	vmov	r3, s0
 801127e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011282:	3a19      	subs	r2, #25
 8011284:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011288:	4288      	cmp	r0, r1
 801128a:	dd15      	ble.n	80112b8 <scalbnf+0x68>
 801128c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011308 <scalbnf+0xb8>
 8011290:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801130c <scalbnf+0xbc>
 8011294:	ee10 3a10 	vmov	r3, s0
 8011298:	eeb0 7a67 	vmov.f32	s14, s15
 801129c:	2b00      	cmp	r3, #0
 801129e:	bfb8      	it	lt
 80112a0:	eef0 7a66 	vmovlt.f32	s15, s13
 80112a4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80112a8:	4770      	bx	lr
 80112aa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011310 <scalbnf+0xc0>
 80112ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80112b2:	4770      	bx	lr
 80112b4:	0dd2      	lsrs	r2, r2, #23
 80112b6:	e7e5      	b.n	8011284 <scalbnf+0x34>
 80112b8:	4410      	add	r0, r2
 80112ba:	28fe      	cmp	r0, #254	@ 0xfe
 80112bc:	dce6      	bgt.n	801128c <scalbnf+0x3c>
 80112be:	2800      	cmp	r0, #0
 80112c0:	dd06      	ble.n	80112d0 <scalbnf+0x80>
 80112c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80112c6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80112ca:	ee00 3a10 	vmov	s0, r3
 80112ce:	4770      	bx	lr
 80112d0:	f110 0f16 	cmn.w	r0, #22
 80112d4:	da09      	bge.n	80112ea <scalbnf+0x9a>
 80112d6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011310 <scalbnf+0xc0>
 80112da:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011314 <scalbnf+0xc4>
 80112de:	ee10 3a10 	vmov	r3, s0
 80112e2:	eeb0 7a67 	vmov.f32	s14, s15
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	e7d9      	b.n	801129e <scalbnf+0x4e>
 80112ea:	3019      	adds	r0, #25
 80112ec:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80112f0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80112f4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011318 <scalbnf+0xc8>
 80112f8:	ee07 3a90 	vmov	s15, r3
 80112fc:	e7d7      	b.n	80112ae <scalbnf+0x5e>
 80112fe:	bf00      	nop
 8011300:	ffff3cb0 	.word	0xffff3cb0
 8011304:	4c000000 	.word	0x4c000000
 8011308:	7149f2ca 	.word	0x7149f2ca
 801130c:	f149f2ca 	.word	0xf149f2ca
 8011310:	0da24260 	.word	0x0da24260
 8011314:	8da24260 	.word	0x8da24260
 8011318:	33000000 	.word	0x33000000

0801131c <_init>:
 801131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131e:	bf00      	nop
 8011320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011322:	bc08      	pop	{r3}
 8011324:	469e      	mov	lr, r3
 8011326:	4770      	bx	lr

08011328 <_fini>:
 8011328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132a:	bf00      	nop
 801132c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801132e:	bc08      	pop	{r3}
 8011330:	469e      	mov	lr, r3
 8011332:	4770      	bx	lr
